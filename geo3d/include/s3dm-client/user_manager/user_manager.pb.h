// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: user_manager/user_manager.proto

#ifndef GOOGLE_PROTOBUF_INCLUDED_user_5fmanager_2fuser_5fmanager_2eproto
#define GOOGLE_PROTOBUF_INCLUDED_user_5fmanager_2fuser_5fmanager_2eproto

#include <limits>
#include <string>

#include <google/protobuf/port_def.inc>
#if PROTOBUF_VERSION < 3015000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers. Please update
#error your headers.
#endif
#if 3015008 < PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers. Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/port_undef.inc>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_table_driven.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/metadata_lite.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/map.h>  // IWYU pragma: export
#include <google/protobuf/map_entry.h>
#include <google/protobuf/map_field_inl.h>
#include <google/protobuf/generated_enum_reflection.h>
#include <google/protobuf/unknown_field_set.h>
#include <google/protobuf/timestamp.pb.h>
#include <google/protobuf/wrappers.pb.h>
#include "common/pagination.pb.h"
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
#define PROTOBUF_INTERNAL_EXPORT_user_5fmanager_2fuser_5fmanager_2eproto LIBS3DMGRPC_API
PROTOBUF_NAMESPACE_OPEN
namespace internal {
class AnyMetadata;
}  // namespace internal
PROTOBUF_NAMESPACE_CLOSE

// Internal implementation detail -- do not use these members.
struct LIBS3DMGRPC_API TableStruct_user_5fmanager_2fuser_5fmanager_2eproto {
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTableField entries[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::AuxiliaryParseTableField aux[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTable schema[26]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::FieldMetadata field_metadata[];
  static const ::PROTOBUF_NAMESPACE_ID::internal::SerializationTable serialization_table[];
  static const ::PROTOBUF_NAMESPACE_ID::uint32 offsets[];
};
extern LIBS3DMGRPC_API const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_user_5fmanager_2fuser_5fmanager_2eproto;
LIBS3DMGRPC_API ::PROTOBUF_NAMESPACE_ID::Metadata descriptor_table_user_5fmanager_2fuser_5fmanager_2eproto_metadata_getter(int index);
namespace smart3dmap {
namespace v1 {
class ActiveUserByManagerRequest;
struct ActiveUserByManagerRequestDefaultTypeInternal;
LIBS3DMGRPC_API extern ActiveUserByManagerRequestDefaultTypeInternal _ActiveUserByManagerRequest_default_instance_;
class ActiveUserRequest;
struct ActiveUserRequestDefaultTypeInternal;
LIBS3DMGRPC_API extern ActiveUserRequestDefaultTypeInternal _ActiveUserRequest_default_instance_;
class DeleteTeamRequest;
struct DeleteTeamRequestDefaultTypeInternal;
LIBS3DMGRPC_API extern DeleteTeamRequestDefaultTypeInternal _DeleteTeamRequest_default_instance_;
class DeleteUserRequest;
struct DeleteUserRequestDefaultTypeInternal;
LIBS3DMGRPC_API extern DeleteUserRequestDefaultTypeInternal _DeleteUserRequest_default_instance_;
class GetTeamRequest;
struct GetTeamRequestDefaultTypeInternal;
LIBS3DMGRPC_API extern GetTeamRequestDefaultTypeInternal _GetTeamRequest_default_instance_;
class GetTeamUserRequest;
struct GetTeamUserRequestDefaultTypeInternal;
LIBS3DMGRPC_API extern GetTeamUserRequestDefaultTypeInternal _GetTeamUserRequest_default_instance_;
class GetUserInvitationRequest;
struct GetUserInvitationRequestDefaultTypeInternal;
LIBS3DMGRPC_API extern GetUserInvitationRequestDefaultTypeInternal _GetUserInvitationRequest_default_instance_;
class GetUserRequest;
struct GetUserRequestDefaultTypeInternal;
LIBS3DMGRPC_API extern GetUserRequestDefaultTypeInternal _GetUserRequest_default_instance_;
class InviteUserRequest;
struct InviteUserRequestDefaultTypeInternal;
LIBS3DMGRPC_API extern InviteUserRequestDefaultTypeInternal _InviteUserRequest_default_instance_;
class IsAdminUserRequest;
struct IsAdminUserRequestDefaultTypeInternal;
LIBS3DMGRPC_API extern IsAdminUserRequestDefaultTypeInternal _IsAdminUserRequest_default_instance_;
class ListTeamsRequest;
struct ListTeamsRequestDefaultTypeInternal;
LIBS3DMGRPC_API extern ListTeamsRequestDefaultTypeInternal _ListTeamsRequest_default_instance_;
class ListTeamsResponse;
struct ListTeamsResponseDefaultTypeInternal;
LIBS3DMGRPC_API extern ListTeamsResponseDefaultTypeInternal _ListTeamsResponse_default_instance_;
class ListUsersRequest;
struct ListUsersRequestDefaultTypeInternal;
LIBS3DMGRPC_API extern ListUsersRequestDefaultTypeInternal _ListUsersRequest_default_instance_;
class ListUsersResponse;
struct ListUsersResponseDefaultTypeInternal;
LIBS3DMGRPC_API extern ListUsersResponseDefaultTypeInternal _ListUsersResponse_default_instance_;
class NewTicketRequest;
struct NewTicketRequestDefaultTypeInternal;
LIBS3DMGRPC_API extern NewTicketRequestDefaultTypeInternal _NewTicketRequest_default_instance_;
class RegisterUserRequest;
struct RegisterUserRequestDefaultTypeInternal;
LIBS3DMGRPC_API extern RegisterUserRequestDefaultTypeInternal _RegisterUserRequest_default_instance_;
class RegisterUserRequest_Info;
struct RegisterUserRequest_InfoDefaultTypeInternal;
LIBS3DMGRPC_API extern RegisterUserRequest_InfoDefaultTypeInternal _RegisterUserRequest_Info_default_instance_;
class ResetUserPasswordRequest;
struct ResetUserPasswordRequestDefaultTypeInternal;
LIBS3DMGRPC_API extern ResetUserPasswordRequestDefaultTypeInternal _ResetUserPasswordRequest_default_instance_;
class Team;
struct TeamDefaultTypeInternal;
LIBS3DMGRPC_API extern TeamDefaultTypeInternal _Team_default_instance_;
class TeamUser;
struct TeamUserDefaultTypeInternal;
LIBS3DMGRPC_API extern TeamUserDefaultTypeInternal _TeamUser_default_instance_;
class Ticket;
struct TicketDefaultTypeInternal;
LIBS3DMGRPC_API extern TicketDefaultTypeInternal _Ticket_default_instance_;
class UpdateUserRequest;
struct UpdateUserRequestDefaultTypeInternal;
LIBS3DMGRPC_API extern UpdateUserRequestDefaultTypeInternal _UpdateUserRequest_default_instance_;
class UpdateUserRequest_UpdateAttributesEntry_DoNotUse;
struct UpdateUserRequest_UpdateAttributesEntry_DoNotUseDefaultTypeInternal;
LIBS3DMGRPC_API extern UpdateUserRequest_UpdateAttributesEntry_DoNotUseDefaultTypeInternal _UpdateUserRequest_UpdateAttributesEntry_DoNotUse_default_instance_;
class User;
struct UserDefaultTypeInternal;
LIBS3DMGRPC_API extern UserDefaultTypeInternal _User_default_instance_;
class UserInvitation;
struct UserInvitationDefaultTypeInternal;
LIBS3DMGRPC_API extern UserInvitationDefaultTypeInternal _UserInvitation_default_instance_;
class User_AttributesEntry_DoNotUse;
struct User_AttributesEntry_DoNotUseDefaultTypeInternal;
LIBS3DMGRPC_API extern User_AttributesEntry_DoNotUseDefaultTypeInternal _User_AttributesEntry_DoNotUse_default_instance_;
}  // namespace v1
}  // namespace smart3dmap
PROTOBUF_NAMESPACE_OPEN
template<> LIBS3DMGRPC_API ::smart3dmap::v1::ActiveUserByManagerRequest* Arena::CreateMaybeMessage<::smart3dmap::v1::ActiveUserByManagerRequest>(Arena*);
template<> LIBS3DMGRPC_API ::smart3dmap::v1::ActiveUserRequest* Arena::CreateMaybeMessage<::smart3dmap::v1::ActiveUserRequest>(Arena*);
template<> LIBS3DMGRPC_API ::smart3dmap::v1::DeleteTeamRequest* Arena::CreateMaybeMessage<::smart3dmap::v1::DeleteTeamRequest>(Arena*);
template<> LIBS3DMGRPC_API ::smart3dmap::v1::DeleteUserRequest* Arena::CreateMaybeMessage<::smart3dmap::v1::DeleteUserRequest>(Arena*);
template<> LIBS3DMGRPC_API ::smart3dmap::v1::GetTeamRequest* Arena::CreateMaybeMessage<::smart3dmap::v1::GetTeamRequest>(Arena*);
template<> LIBS3DMGRPC_API ::smart3dmap::v1::GetTeamUserRequest* Arena::CreateMaybeMessage<::smart3dmap::v1::GetTeamUserRequest>(Arena*);
template<> LIBS3DMGRPC_API ::smart3dmap::v1::GetUserInvitationRequest* Arena::CreateMaybeMessage<::smart3dmap::v1::GetUserInvitationRequest>(Arena*);
template<> LIBS3DMGRPC_API ::smart3dmap::v1::GetUserRequest* Arena::CreateMaybeMessage<::smart3dmap::v1::GetUserRequest>(Arena*);
template<> LIBS3DMGRPC_API ::smart3dmap::v1::InviteUserRequest* Arena::CreateMaybeMessage<::smart3dmap::v1::InviteUserRequest>(Arena*);
template<> LIBS3DMGRPC_API ::smart3dmap::v1::IsAdminUserRequest* Arena::CreateMaybeMessage<::smart3dmap::v1::IsAdminUserRequest>(Arena*);
template<> LIBS3DMGRPC_API ::smart3dmap::v1::ListTeamsRequest* Arena::CreateMaybeMessage<::smart3dmap::v1::ListTeamsRequest>(Arena*);
template<> LIBS3DMGRPC_API ::smart3dmap::v1::ListTeamsResponse* Arena::CreateMaybeMessage<::smart3dmap::v1::ListTeamsResponse>(Arena*);
template<> LIBS3DMGRPC_API ::smart3dmap::v1::ListUsersRequest* Arena::CreateMaybeMessage<::smart3dmap::v1::ListUsersRequest>(Arena*);
template<> LIBS3DMGRPC_API ::smart3dmap::v1::ListUsersResponse* Arena::CreateMaybeMessage<::smart3dmap::v1::ListUsersResponse>(Arena*);
template<> LIBS3DMGRPC_API ::smart3dmap::v1::NewTicketRequest* Arena::CreateMaybeMessage<::smart3dmap::v1::NewTicketRequest>(Arena*);
template<> LIBS3DMGRPC_API ::smart3dmap::v1::RegisterUserRequest* Arena::CreateMaybeMessage<::smart3dmap::v1::RegisterUserRequest>(Arena*);
template<> LIBS3DMGRPC_API ::smart3dmap::v1::RegisterUserRequest_Info* Arena::CreateMaybeMessage<::smart3dmap::v1::RegisterUserRequest_Info>(Arena*);
template<> LIBS3DMGRPC_API ::smart3dmap::v1::ResetUserPasswordRequest* Arena::CreateMaybeMessage<::smart3dmap::v1::ResetUserPasswordRequest>(Arena*);
template<> LIBS3DMGRPC_API ::smart3dmap::v1::Team* Arena::CreateMaybeMessage<::smart3dmap::v1::Team>(Arena*);
template<> LIBS3DMGRPC_API ::smart3dmap::v1::TeamUser* Arena::CreateMaybeMessage<::smart3dmap::v1::TeamUser>(Arena*);
template<> LIBS3DMGRPC_API ::smart3dmap::v1::Ticket* Arena::CreateMaybeMessage<::smart3dmap::v1::Ticket>(Arena*);
template<> LIBS3DMGRPC_API ::smart3dmap::v1::UpdateUserRequest* Arena::CreateMaybeMessage<::smart3dmap::v1::UpdateUserRequest>(Arena*);
template<> LIBS3DMGRPC_API ::smart3dmap::v1::UpdateUserRequest_UpdateAttributesEntry_DoNotUse* Arena::CreateMaybeMessage<::smart3dmap::v1::UpdateUserRequest_UpdateAttributesEntry_DoNotUse>(Arena*);
template<> LIBS3DMGRPC_API ::smart3dmap::v1::User* Arena::CreateMaybeMessage<::smart3dmap::v1::User>(Arena*);
template<> LIBS3DMGRPC_API ::smart3dmap::v1::UserInvitation* Arena::CreateMaybeMessage<::smart3dmap::v1::UserInvitation>(Arena*);
template<> LIBS3DMGRPC_API ::smart3dmap::v1::User_AttributesEntry_DoNotUse* Arena::CreateMaybeMessage<::smart3dmap::v1::User_AttributesEntry_DoNotUse>(Arena*);
PROTOBUF_NAMESPACE_CLOSE
namespace smart3dmap {
namespace v1 {

enum User_State : int {
  User_State_UNDEFINED = 0,
  User_State_DEACTIVATED = 1,
  User_State_ACTIVATED = 2,
  User_State_DISABLED = 3,
  User_State_User_State_INT_MIN_SENTINEL_DO_NOT_USE_ = std::numeric_limits<::PROTOBUF_NAMESPACE_ID::int32>::min(),
  User_State_User_State_INT_MAX_SENTINEL_DO_NOT_USE_ = std::numeric_limits<::PROTOBUF_NAMESPACE_ID::int32>::max()
};
LIBS3DMGRPC_API bool User_State_IsValid(int value);
constexpr User_State User_State_State_MIN = User_State_UNDEFINED;
constexpr User_State User_State_State_MAX = User_State_DISABLED;
constexpr int User_State_State_ARRAYSIZE = User_State_State_MAX + 1;

LIBS3DMGRPC_API const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* User_State_descriptor();
template<typename T>
inline const std::string& User_State_Name(T enum_t_value) {
  static_assert(::std::is_same<T, User_State>::value ||
    ::std::is_integral<T>::value,
    "Incorrect type passed to function User_State_Name.");
  return ::PROTOBUF_NAMESPACE_ID::internal::NameOfEnum(
    User_State_descriptor(), enum_t_value);
}
inline bool User_State_Parse(
    ::PROTOBUF_NAMESPACE_ID::ConstStringParam name, User_State* value) {
  return ::PROTOBUF_NAMESPACE_ID::internal::ParseNamedEnum<User_State>(
    User_State_descriptor(), name, value);
}
// ===================================================================

class LIBS3DMGRPC_API TeamUser PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:smart3dmap.v1.TeamUser) */ {
 public:
  inline TeamUser() : TeamUser(nullptr) {}
  virtual ~TeamUser();
  explicit constexpr TeamUser(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  TeamUser(const TeamUser& from);
  TeamUser(TeamUser&& from) noexcept
    : TeamUser() {
    *this = ::std::move(from);
  }

  inline TeamUser& operator=(const TeamUser& from) {
    CopyFrom(from);
    return *this;
  }
  inline TeamUser& operator=(TeamUser&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const TeamUser& default_instance() {
    return *internal_default_instance();
  }
  static inline const TeamUser* internal_default_instance() {
    return reinterpret_cast<const TeamUser*>(
               &_TeamUser_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  friend void swap(TeamUser& a, TeamUser& b) {
    a.Swap(&b);
  }
  inline void Swap(TeamUser* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(TeamUser* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline TeamUser* New() const final {
    return CreateMaybeMessage<TeamUser>(nullptr);
  }

  TeamUser* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<TeamUser>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const TeamUser& from);
  void MergeFrom(const TeamUser& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(TeamUser* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "smart3dmap.v1.TeamUser";
  }
  protected:
  explicit TeamUser(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    return ::descriptor_table_user_5fmanager_2fuser_5fmanager_2eproto_metadata_getter(kIndexInFileMessages);
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kTeamIdFieldNumber = 1,
    kUserIdFieldNumber = 2,
  };
  // int32 teamId = 1;
  void clear_teamid();
  ::PROTOBUF_NAMESPACE_ID::int32 teamid() const;
  void set_teamid(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_teamid() const;
  void _internal_set_teamid(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // int32 userId = 2;
  void clear_userid();
  ::PROTOBUF_NAMESPACE_ID::int32 userid() const;
  void set_userid(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_userid() const;
  void _internal_set_userid(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // @@protoc_insertion_point(class_scope:smart3dmap.v1.TeamUser)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::int32 teamid_;
  ::PROTOBUF_NAMESPACE_ID::int32 userid_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_user_5fmanager_2fuser_5fmanager_2eproto;
};
// -------------------------------------------------------------------

class User_AttributesEntry_DoNotUse : public ::PROTOBUF_NAMESPACE_ID::internal::MapEntry<User_AttributesEntry_DoNotUse, 
    std::string, std::string,
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_STRING,
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_STRING> {
public:
  typedef ::PROTOBUF_NAMESPACE_ID::internal::MapEntry<User_AttributesEntry_DoNotUse, 
    std::string, std::string,
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_STRING,
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_STRING> SuperType;
  User_AttributesEntry_DoNotUse();
  explicit constexpr User_AttributesEntry_DoNotUse(
      ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);
  explicit User_AttributesEntry_DoNotUse(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  void MergeFrom(const User_AttributesEntry_DoNotUse& other);
  static const User_AttributesEntry_DoNotUse* internal_default_instance() { return reinterpret_cast<const User_AttributesEntry_DoNotUse*>(&_User_AttributesEntry_DoNotUse_default_instance_); }
  static bool ValidateKey(std::string* s) {
    return ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(s->data(), static_cast<int>(s->size()), ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::PARSE, "smart3dmap.v1.User.AttributesEntry.key");
 }
  static bool ValidateValue(std::string* s) {
    return ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(s->data(), static_cast<int>(s->size()), ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::PARSE, "smart3dmap.v1.User.AttributesEntry.value");
 }
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& other) final;
  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_user_5fmanager_2fuser_5fmanager_2eproto);
    return ::descriptor_table_user_5fmanager_2fuser_5fmanager_2eproto.file_level_metadata[1];
  }

  public:
};

// -------------------------------------------------------------------

class LIBS3DMGRPC_API User PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:smart3dmap.v1.User) */ {
 public:
  inline User() : User(nullptr) {}
  virtual ~User();
  explicit constexpr User(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  User(const User& from);
  User(User&& from) noexcept
    : User() {
    *this = ::std::move(from);
  }

  inline User& operator=(const User& from) {
    CopyFrom(from);
    return *this;
  }
  inline User& operator=(User&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const User& default_instance() {
    return *internal_default_instance();
  }
  static inline const User* internal_default_instance() {
    return reinterpret_cast<const User*>(
               &_User_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    2;

  friend void swap(User& a, User& b) {
    a.Swap(&b);
  }
  inline void Swap(User* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(User* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline User* New() const final {
    return CreateMaybeMessage<User>(nullptr);
  }

  User* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<User>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const User& from);
  void MergeFrom(const User& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(User* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "smart3dmap.v1.User";
  }
  protected:
  explicit User(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    return ::descriptor_table_user_5fmanager_2fuser_5fmanager_2eproto_metadata_getter(kIndexInFileMessages);
  }

  public:

  // nested types ----------------------------------------------------


  typedef User_State State;
  static constexpr State UNDEFINED =
    User_State_UNDEFINED;
  static constexpr State DEACTIVATED =
    User_State_DEACTIVATED;
  static constexpr State ACTIVATED =
    User_State_ACTIVATED;
  static constexpr State DISABLED =
    User_State_DISABLED;
  static inline bool State_IsValid(int value) {
    return User_State_IsValid(value);
  }
  static constexpr State State_MIN =
    User_State_State_MIN;
  static constexpr State State_MAX =
    User_State_State_MAX;
  static constexpr int State_ARRAYSIZE =
    User_State_State_ARRAYSIZE;
  static inline const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor*
  State_descriptor() {
    return User_State_descriptor();
  }
  template<typename T>
  static inline const std::string& State_Name(T enum_t_value) {
    static_assert(::std::is_same<T, State>::value ||
      ::std::is_integral<T>::value,
      "Incorrect type passed to function State_Name.");
    return User_State_Name(enum_t_value);
  }
  static inline bool State_Parse(::PROTOBUF_NAMESPACE_ID::ConstStringParam name,
      State* value) {
    return User_State_Parse(name, value);
  }

  // accessors -------------------------------------------------------

  enum : int {
    kAttributesFieldNumber = 7,
    kNameFieldNumber = 2,
    kEmailFieldNumber = 3,
    kPhoneFieldNumber = 4,
    kPasswordFieldNumber = 5,
    kIdFieldNumber = 1,
    kStateFieldNumber = 6,
  };
  // map<string, string> attributes = 7;
  int attributes_size() const;
  private:
  int _internal_attributes_size() const;
  public:
  void clear_attributes();
  private:
  const ::PROTOBUF_NAMESPACE_ID::Map< std::string, std::string >&
      _internal_attributes() const;
  ::PROTOBUF_NAMESPACE_ID::Map< std::string, std::string >*
      _internal_mutable_attributes();
  public:
  const ::PROTOBUF_NAMESPACE_ID::Map< std::string, std::string >&
      attributes() const;
  ::PROTOBUF_NAMESPACE_ID::Map< std::string, std::string >*
      mutable_attributes();

  // string name = 2;
  void clear_name();
  const std::string& name() const;
  void set_name(const std::string& value);
  void set_name(std::string&& value);
  void set_name(const char* value);
  void set_name(const char* value, size_t size);
  std::string* mutable_name();
  std::string* release_name();
  void set_allocated_name(std::string* name);
  private:
  const std::string& _internal_name() const;
  void _internal_set_name(const std::string& value);
  std::string* _internal_mutable_name();
  public:

  // string email = 3;
  void clear_email();
  const std::string& email() const;
  void set_email(const std::string& value);
  void set_email(std::string&& value);
  void set_email(const char* value);
  void set_email(const char* value, size_t size);
  std::string* mutable_email();
  std::string* release_email();
  void set_allocated_email(std::string* email);
  private:
  const std::string& _internal_email() const;
  void _internal_set_email(const std::string& value);
  std::string* _internal_mutable_email();
  public:

  // string phone = 4;
  void clear_phone();
  const std::string& phone() const;
  void set_phone(const std::string& value);
  void set_phone(std::string&& value);
  void set_phone(const char* value);
  void set_phone(const char* value, size_t size);
  std::string* mutable_phone();
  std::string* release_phone();
  void set_allocated_phone(std::string* phone);
  private:
  const std::string& _internal_phone() const;
  void _internal_set_phone(const std::string& value);
  std::string* _internal_mutable_phone();
  public:

  // string password = 5;
  void clear_password();
  const std::string& password() const;
  void set_password(const std::string& value);
  void set_password(std::string&& value);
  void set_password(const char* value);
  void set_password(const char* value, size_t size);
  std::string* mutable_password();
  std::string* release_password();
  void set_allocated_password(std::string* password);
  private:
  const std::string& _internal_password() const;
  void _internal_set_password(const std::string& value);
  std::string* _internal_mutable_password();
  public:

  // int32 id = 1;
  void clear_id();
  ::PROTOBUF_NAMESPACE_ID::int32 id() const;
  void set_id(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_id() const;
  void _internal_set_id(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // .smart3dmap.v1.User.State state = 6;
  void clear_state();
  ::smart3dmap::v1::User_State state() const;
  void set_state(::smart3dmap::v1::User_State value);
  private:
  ::smart3dmap::v1::User_State _internal_state() const;
  void _internal_set_state(::smart3dmap::v1::User_State value);
  public:

  // @@protoc_insertion_point(class_scope:smart3dmap.v1.User)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::MapField<
      User_AttributesEntry_DoNotUse,
      std::string, std::string,
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_STRING,
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_STRING> attributes_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr name_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr email_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr phone_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr password_;
  ::PROTOBUF_NAMESPACE_ID::int32 id_;
  int state_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_user_5fmanager_2fuser_5fmanager_2eproto;
};
// -------------------------------------------------------------------

class LIBS3DMGRPC_API Team PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:smart3dmap.v1.Team) */ {
 public:
  inline Team() : Team(nullptr) {}
  virtual ~Team();
  explicit constexpr Team(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  Team(const Team& from);
  Team(Team&& from) noexcept
    : Team() {
    *this = ::std::move(from);
  }

  inline Team& operator=(const Team& from) {
    CopyFrom(from);
    return *this;
  }
  inline Team& operator=(Team&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const Team& default_instance() {
    return *internal_default_instance();
  }
  static inline const Team* internal_default_instance() {
    return reinterpret_cast<const Team*>(
               &_Team_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    3;

  friend void swap(Team& a, Team& b) {
    a.Swap(&b);
  }
  inline void Swap(Team* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(Team* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline Team* New() const final {
    return CreateMaybeMessage<Team>(nullptr);
  }

  Team* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<Team>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const Team& from);
  void MergeFrom(const Team& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Team* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "smart3dmap.v1.Team";
  }
  protected:
  explicit Team(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    return ::descriptor_table_user_5fmanager_2fuser_5fmanager_2eproto_metadata_getter(kIndexInFileMessages);
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kNameFieldNumber = 2,
    kIdFieldNumber = 1,
  };
  // string name = 2;
  void clear_name();
  const std::string& name() const;
  void set_name(const std::string& value);
  void set_name(std::string&& value);
  void set_name(const char* value);
  void set_name(const char* value, size_t size);
  std::string* mutable_name();
  std::string* release_name();
  void set_allocated_name(std::string* name);
  private:
  const std::string& _internal_name() const;
  void _internal_set_name(const std::string& value);
  std::string* _internal_mutable_name();
  public:

  // int32 id = 1;
  void clear_id();
  ::PROTOBUF_NAMESPACE_ID::int32 id() const;
  void set_id(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_id() const;
  void _internal_set_id(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // @@protoc_insertion_point(class_scope:smart3dmap.v1.Team)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr name_;
  ::PROTOBUF_NAMESPACE_ID::int32 id_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_user_5fmanager_2fuser_5fmanager_2eproto;
};
// -------------------------------------------------------------------

class LIBS3DMGRPC_API Ticket PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:smart3dmap.v1.Ticket) */ {
 public:
  inline Ticket() : Ticket(nullptr) {}
  virtual ~Ticket();
  explicit constexpr Ticket(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  Ticket(const Ticket& from);
  Ticket(Ticket&& from) noexcept
    : Ticket() {
    *this = ::std::move(from);
  }

  inline Ticket& operator=(const Ticket& from) {
    CopyFrom(from);
    return *this;
  }
  inline Ticket& operator=(Ticket&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const Ticket& default_instance() {
    return *internal_default_instance();
  }
  static inline const Ticket* internal_default_instance() {
    return reinterpret_cast<const Ticket*>(
               &_Ticket_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    4;

  friend void swap(Ticket& a, Ticket& b) {
    a.Swap(&b);
  }
  inline void Swap(Ticket* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(Ticket* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline Ticket* New() const final {
    return CreateMaybeMessage<Ticket>(nullptr);
  }

  Ticket* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<Ticket>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const Ticket& from);
  void MergeFrom(const Ticket& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Ticket* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "smart3dmap.v1.Ticket";
  }
  protected:
  explicit Ticket(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    return ::descriptor_table_user_5fmanager_2fuser_5fmanager_2eproto_metadata_getter(kIndexInFileMessages);
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kValueFieldNumber = 1,
  };
  // string value = 1;
  void clear_value();
  const std::string& value() const;
  void set_value(const std::string& value);
  void set_value(std::string&& value);
  void set_value(const char* value);
  void set_value(const char* value, size_t size);
  std::string* mutable_value();
  std::string* release_value();
  void set_allocated_value(std::string* value);
  private:
  const std::string& _internal_value() const;
  void _internal_set_value(const std::string& value);
  std::string* _internal_mutable_value();
  public:

  // @@protoc_insertion_point(class_scope:smart3dmap.v1.Ticket)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr value_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_user_5fmanager_2fuser_5fmanager_2eproto;
};
// -------------------------------------------------------------------

class LIBS3DMGRPC_API UserInvitation PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:smart3dmap.v1.UserInvitation) */ {
 public:
  inline UserInvitation() : UserInvitation(nullptr) {}
  virtual ~UserInvitation();
  explicit constexpr UserInvitation(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  UserInvitation(const UserInvitation& from);
  UserInvitation(UserInvitation&& from) noexcept
    : UserInvitation() {
    *this = ::std::move(from);
  }

  inline UserInvitation& operator=(const UserInvitation& from) {
    CopyFrom(from);
    return *this;
  }
  inline UserInvitation& operator=(UserInvitation&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const UserInvitation& default_instance() {
    return *internal_default_instance();
  }
  static inline const UserInvitation* internal_default_instance() {
    return reinterpret_cast<const UserInvitation*>(
               &_UserInvitation_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    5;

  friend void swap(UserInvitation& a, UserInvitation& b) {
    a.Swap(&b);
  }
  inline void Swap(UserInvitation* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(UserInvitation* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline UserInvitation* New() const final {
    return CreateMaybeMessage<UserInvitation>(nullptr);
  }

  UserInvitation* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<UserInvitation>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const UserInvitation& from);
  void MergeFrom(const UserInvitation& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(UserInvitation* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "smart3dmap.v1.UserInvitation";
  }
  protected:
  explicit UserInvitation(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    return ::descriptor_table_user_5fmanager_2fuser_5fmanager_2eproto_metadata_getter(kIndexInFileMessages);
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kTokenFieldNumber = 1,
    kUserFieldNumber = 2,
    kCreatedAtFieldNumber = 3,
  };
  // string token = 1;
  void clear_token();
  const std::string& token() const;
  void set_token(const std::string& value);
  void set_token(std::string&& value);
  void set_token(const char* value);
  void set_token(const char* value, size_t size);
  std::string* mutable_token();
  std::string* release_token();
  void set_allocated_token(std::string* token);
  private:
  const std::string& _internal_token() const;
  void _internal_set_token(const std::string& value);
  std::string* _internal_mutable_token();
  public:

  // .smart3dmap.v1.User user = 2;
  bool has_user() const;
  private:
  bool _internal_has_user() const;
  public:
  void clear_user();
  const ::smart3dmap::v1::User& user() const;
  ::smart3dmap::v1::User* release_user();
  ::smart3dmap::v1::User* mutable_user();
  void set_allocated_user(::smart3dmap::v1::User* user);
  private:
  const ::smart3dmap::v1::User& _internal_user() const;
  ::smart3dmap::v1::User* _internal_mutable_user();
  public:
  void unsafe_arena_set_allocated_user(
      ::smart3dmap::v1::User* user);
  ::smart3dmap::v1::User* unsafe_arena_release_user();

  // .google.protobuf.Timestamp createdAt = 3;
  bool has_createdat() const;
  private:
  bool _internal_has_createdat() const;
  public:
  void clear_createdat();
  const PROTOBUF_NAMESPACE_ID::Timestamp& createdat() const;
  PROTOBUF_NAMESPACE_ID::Timestamp* release_createdat();
  PROTOBUF_NAMESPACE_ID::Timestamp* mutable_createdat();
  void set_allocated_createdat(PROTOBUF_NAMESPACE_ID::Timestamp* createdat);
  private:
  const PROTOBUF_NAMESPACE_ID::Timestamp& _internal_createdat() const;
  PROTOBUF_NAMESPACE_ID::Timestamp* _internal_mutable_createdat();
  public:
  void unsafe_arena_set_allocated_createdat(
      PROTOBUF_NAMESPACE_ID::Timestamp* createdat);
  PROTOBUF_NAMESPACE_ID::Timestamp* unsafe_arena_release_createdat();

  // @@protoc_insertion_point(class_scope:smart3dmap.v1.UserInvitation)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr token_;
  ::smart3dmap::v1::User* user_;
  PROTOBUF_NAMESPACE_ID::Timestamp* createdat_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_user_5fmanager_2fuser_5fmanager_2eproto;
};
// -------------------------------------------------------------------

class LIBS3DMGRPC_API InviteUserRequest PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:smart3dmap.v1.InviteUserRequest) */ {
 public:
  inline InviteUserRequest() : InviteUserRequest(nullptr) {}
  virtual ~InviteUserRequest();
  explicit constexpr InviteUserRequest(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  InviteUserRequest(const InviteUserRequest& from);
  InviteUserRequest(InviteUserRequest&& from) noexcept
    : InviteUserRequest() {
    *this = ::std::move(from);
  }

  inline InviteUserRequest& operator=(const InviteUserRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline InviteUserRequest& operator=(InviteUserRequest&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const InviteUserRequest& default_instance() {
    return *internal_default_instance();
  }
  static inline const InviteUserRequest* internal_default_instance() {
    return reinterpret_cast<const InviteUserRequest*>(
               &_InviteUserRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    6;

  friend void swap(InviteUserRequest& a, InviteUserRequest& b) {
    a.Swap(&b);
  }
  inline void Swap(InviteUserRequest* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(InviteUserRequest* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline InviteUserRequest* New() const final {
    return CreateMaybeMessage<InviteUserRequest>(nullptr);
  }

  InviteUserRequest* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<InviteUserRequest>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const InviteUserRequest& from);
  void MergeFrom(const InviteUserRequest& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(InviteUserRequest* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "smart3dmap.v1.InviteUserRequest";
  }
  protected:
  explicit InviteUserRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    return ::descriptor_table_user_5fmanager_2fuser_5fmanager_2eproto_metadata_getter(kIndexInFileMessages);
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kNameFieldNumber = 1,
    kEmailFieldNumber = 2,
    kPhoneFieldNumber = 3,
  };
  // string name = 1;
  void clear_name();
  const std::string& name() const;
  void set_name(const std::string& value);
  void set_name(std::string&& value);
  void set_name(const char* value);
  void set_name(const char* value, size_t size);
  std::string* mutable_name();
  std::string* release_name();
  void set_allocated_name(std::string* name);
  private:
  const std::string& _internal_name() const;
  void _internal_set_name(const std::string& value);
  std::string* _internal_mutable_name();
  public:

  // string email = 2;
  void clear_email();
  const std::string& email() const;
  void set_email(const std::string& value);
  void set_email(std::string&& value);
  void set_email(const char* value);
  void set_email(const char* value, size_t size);
  std::string* mutable_email();
  std::string* release_email();
  void set_allocated_email(std::string* email);
  private:
  const std::string& _internal_email() const;
  void _internal_set_email(const std::string& value);
  std::string* _internal_mutable_email();
  public:

  // string phone = 3;
  void clear_phone();
  const std::string& phone() const;
  void set_phone(const std::string& value);
  void set_phone(std::string&& value);
  void set_phone(const char* value);
  void set_phone(const char* value, size_t size);
  std::string* mutable_phone();
  std::string* release_phone();
  void set_allocated_phone(std::string* phone);
  private:
  const std::string& _internal_phone() const;
  void _internal_set_phone(const std::string& value);
  std::string* _internal_mutable_phone();
  public:

  // @@protoc_insertion_point(class_scope:smart3dmap.v1.InviteUserRequest)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr name_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr email_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr phone_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_user_5fmanager_2fuser_5fmanager_2eproto;
};
// -------------------------------------------------------------------

class LIBS3DMGRPC_API ActiveUserByManagerRequest PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:smart3dmap.v1.ActiveUserByManagerRequest) */ {
 public:
  inline ActiveUserByManagerRequest() : ActiveUserByManagerRequest(nullptr) {}
  virtual ~ActiveUserByManagerRequest();
  explicit constexpr ActiveUserByManagerRequest(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  ActiveUserByManagerRequest(const ActiveUserByManagerRequest& from);
  ActiveUserByManagerRequest(ActiveUserByManagerRequest&& from) noexcept
    : ActiveUserByManagerRequest() {
    *this = ::std::move(from);
  }

  inline ActiveUserByManagerRequest& operator=(const ActiveUserByManagerRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline ActiveUserByManagerRequest& operator=(ActiveUserByManagerRequest&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const ActiveUserByManagerRequest& default_instance() {
    return *internal_default_instance();
  }
  static inline const ActiveUserByManagerRequest* internal_default_instance() {
    return reinterpret_cast<const ActiveUserByManagerRequest*>(
               &_ActiveUserByManagerRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    7;

  friend void swap(ActiveUserByManagerRequest& a, ActiveUserByManagerRequest& b) {
    a.Swap(&b);
  }
  inline void Swap(ActiveUserByManagerRequest* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(ActiveUserByManagerRequest* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline ActiveUserByManagerRequest* New() const final {
    return CreateMaybeMessage<ActiveUserByManagerRequest>(nullptr);
  }

  ActiveUserByManagerRequest* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<ActiveUserByManagerRequest>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const ActiveUserByManagerRequest& from);
  void MergeFrom(const ActiveUserByManagerRequest& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(ActiveUserByManagerRequest* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "smart3dmap.v1.ActiveUserByManagerRequest";
  }
  protected:
  explicit ActiveUserByManagerRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    return ::descriptor_table_user_5fmanager_2fuser_5fmanager_2eproto_metadata_getter(kIndexInFileMessages);
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kUserIdFieldNumber = 1,
  };
  // int32 user_id = 1;
  void clear_user_id();
  ::PROTOBUF_NAMESPACE_ID::int32 user_id() const;
  void set_user_id(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_user_id() const;
  void _internal_set_user_id(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // @@protoc_insertion_point(class_scope:smart3dmap.v1.ActiveUserByManagerRequest)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::int32 user_id_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_user_5fmanager_2fuser_5fmanager_2eproto;
};
// -------------------------------------------------------------------

class LIBS3DMGRPC_API ActiveUserRequest PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:smart3dmap.v1.ActiveUserRequest) */ {
 public:
  inline ActiveUserRequest() : ActiveUserRequest(nullptr) {}
  virtual ~ActiveUserRequest();
  explicit constexpr ActiveUserRequest(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  ActiveUserRequest(const ActiveUserRequest& from);
  ActiveUserRequest(ActiveUserRequest&& from) noexcept
    : ActiveUserRequest() {
    *this = ::std::move(from);
  }

  inline ActiveUserRequest& operator=(const ActiveUserRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline ActiveUserRequest& operator=(ActiveUserRequest&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const ActiveUserRequest& default_instance() {
    return *internal_default_instance();
  }
  static inline const ActiveUserRequest* internal_default_instance() {
    return reinterpret_cast<const ActiveUserRequest*>(
               &_ActiveUserRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    8;

  friend void swap(ActiveUserRequest& a, ActiveUserRequest& b) {
    a.Swap(&b);
  }
  inline void Swap(ActiveUserRequest* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(ActiveUserRequest* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline ActiveUserRequest* New() const final {
    return CreateMaybeMessage<ActiveUserRequest>(nullptr);
  }

  ActiveUserRequest* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<ActiveUserRequest>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const ActiveUserRequest& from);
  void MergeFrom(const ActiveUserRequest& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(ActiveUserRequest* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "smart3dmap.v1.ActiveUserRequest";
  }
  protected:
  explicit ActiveUserRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    return ::descriptor_table_user_5fmanager_2fuser_5fmanager_2eproto_metadata_getter(kIndexInFileMessages);
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kPasswordFieldNumber = 2,
    kInvitationTokenFieldNumber = 3,
    kUserIdFieldNumber = 1,
  };
  // string password = 2;
  void clear_password();
  const std::string& password() const;
  void set_password(const std::string& value);
  void set_password(std::string&& value);
  void set_password(const char* value);
  void set_password(const char* value, size_t size);
  std::string* mutable_password();
  std::string* release_password();
  void set_allocated_password(std::string* password);
  private:
  const std::string& _internal_password() const;
  void _internal_set_password(const std::string& value);
  std::string* _internal_mutable_password();
  public:

  // string invitation_token = 3;
  void clear_invitation_token();
  const std::string& invitation_token() const;
  void set_invitation_token(const std::string& value);
  void set_invitation_token(std::string&& value);
  void set_invitation_token(const char* value);
  void set_invitation_token(const char* value, size_t size);
  std::string* mutable_invitation_token();
  std::string* release_invitation_token();
  void set_allocated_invitation_token(std::string* invitation_token);
  private:
  const std::string& _internal_invitation_token() const;
  void _internal_set_invitation_token(const std::string& value);
  std::string* _internal_mutable_invitation_token();
  public:

  // int32 user_id = 1;
  void clear_user_id();
  ::PROTOBUF_NAMESPACE_ID::int32 user_id() const;
  void set_user_id(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_user_id() const;
  void _internal_set_user_id(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // @@protoc_insertion_point(class_scope:smart3dmap.v1.ActiveUserRequest)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr password_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr invitation_token_;
  ::PROTOBUF_NAMESPACE_ID::int32 user_id_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_user_5fmanager_2fuser_5fmanager_2eproto;
};
// -------------------------------------------------------------------

class LIBS3DMGRPC_API ListUsersRequest PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:smart3dmap.v1.ListUsersRequest) */ {
 public:
  inline ListUsersRequest() : ListUsersRequest(nullptr) {}
  virtual ~ListUsersRequest();
  explicit constexpr ListUsersRequest(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  ListUsersRequest(const ListUsersRequest& from);
  ListUsersRequest(ListUsersRequest&& from) noexcept
    : ListUsersRequest() {
    *this = ::std::move(from);
  }

  inline ListUsersRequest& operator=(const ListUsersRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline ListUsersRequest& operator=(ListUsersRequest&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const ListUsersRequest& default_instance() {
    return *internal_default_instance();
  }
  static inline const ListUsersRequest* internal_default_instance() {
    return reinterpret_cast<const ListUsersRequest*>(
               &_ListUsersRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    9;

  friend void swap(ListUsersRequest& a, ListUsersRequest& b) {
    a.Swap(&b);
  }
  inline void Swap(ListUsersRequest* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(ListUsersRequest* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline ListUsersRequest* New() const final {
    return CreateMaybeMessage<ListUsersRequest>(nullptr);
  }

  ListUsersRequest* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<ListUsersRequest>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const ListUsersRequest& from);
  void MergeFrom(const ListUsersRequest& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(ListUsersRequest* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "smart3dmap.v1.ListUsersRequest";
  }
  protected:
  explicit ListUsersRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    return ::descriptor_table_user_5fmanager_2fuser_5fmanager_2eproto_metadata_getter(kIndexInFileMessages);
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kPaginationFieldNumber = 1,
  };
  // .smart3dmap.v1.Pagination pagination = 1;
  bool has_pagination() const;
  private:
  bool _internal_has_pagination() const;
  public:
  void clear_pagination();
  const ::smart3dmap::v1::Pagination& pagination() const;
  ::smart3dmap::v1::Pagination* release_pagination();
  ::smart3dmap::v1::Pagination* mutable_pagination();
  void set_allocated_pagination(::smart3dmap::v1::Pagination* pagination);
  private:
  const ::smart3dmap::v1::Pagination& _internal_pagination() const;
  ::smart3dmap::v1::Pagination* _internal_mutable_pagination();
  public:
  void unsafe_arena_set_allocated_pagination(
      ::smart3dmap::v1::Pagination* pagination);
  ::smart3dmap::v1::Pagination* unsafe_arena_release_pagination();

  // @@protoc_insertion_point(class_scope:smart3dmap.v1.ListUsersRequest)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::smart3dmap::v1::Pagination* pagination_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_user_5fmanager_2fuser_5fmanager_2eproto;
};
// -------------------------------------------------------------------

class LIBS3DMGRPC_API ListTeamsRequest PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:smart3dmap.v1.ListTeamsRequest) */ {
 public:
  inline ListTeamsRequest() : ListTeamsRequest(nullptr) {}
  virtual ~ListTeamsRequest();
  explicit constexpr ListTeamsRequest(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  ListTeamsRequest(const ListTeamsRequest& from);
  ListTeamsRequest(ListTeamsRequest&& from) noexcept
    : ListTeamsRequest() {
    *this = ::std::move(from);
  }

  inline ListTeamsRequest& operator=(const ListTeamsRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline ListTeamsRequest& operator=(ListTeamsRequest&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const ListTeamsRequest& default_instance() {
    return *internal_default_instance();
  }
  static inline const ListTeamsRequest* internal_default_instance() {
    return reinterpret_cast<const ListTeamsRequest*>(
               &_ListTeamsRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    10;

  friend void swap(ListTeamsRequest& a, ListTeamsRequest& b) {
    a.Swap(&b);
  }
  inline void Swap(ListTeamsRequest* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(ListTeamsRequest* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline ListTeamsRequest* New() const final {
    return CreateMaybeMessage<ListTeamsRequest>(nullptr);
  }

  ListTeamsRequest* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<ListTeamsRequest>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const ListTeamsRequest& from);
  void MergeFrom(const ListTeamsRequest& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(ListTeamsRequest* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "smart3dmap.v1.ListTeamsRequest";
  }
  protected:
  explicit ListTeamsRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    return ::descriptor_table_user_5fmanager_2fuser_5fmanager_2eproto_metadata_getter(kIndexInFileMessages);
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kPaginationFieldNumber = 1,
  };
  // .smart3dmap.v1.Pagination pagination = 1;
  bool has_pagination() const;
  private:
  bool _internal_has_pagination() const;
  public:
  void clear_pagination();
  const ::smart3dmap::v1::Pagination& pagination() const;
  ::smart3dmap::v1::Pagination* release_pagination();
  ::smart3dmap::v1::Pagination* mutable_pagination();
  void set_allocated_pagination(::smart3dmap::v1::Pagination* pagination);
  private:
  const ::smart3dmap::v1::Pagination& _internal_pagination() const;
  ::smart3dmap::v1::Pagination* _internal_mutable_pagination();
  public:
  void unsafe_arena_set_allocated_pagination(
      ::smart3dmap::v1::Pagination* pagination);
  ::smart3dmap::v1::Pagination* unsafe_arena_release_pagination();

  // @@protoc_insertion_point(class_scope:smart3dmap.v1.ListTeamsRequest)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::smart3dmap::v1::Pagination* pagination_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_user_5fmanager_2fuser_5fmanager_2eproto;
};
// -------------------------------------------------------------------

class LIBS3DMGRPC_API NewTicketRequest PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:smart3dmap.v1.NewTicketRequest) */ {
 public:
  inline NewTicketRequest() : NewTicketRequest(nullptr) {}
  virtual ~NewTicketRequest();
  explicit constexpr NewTicketRequest(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  NewTicketRequest(const NewTicketRequest& from);
  NewTicketRequest(NewTicketRequest&& from) noexcept
    : NewTicketRequest() {
    *this = ::std::move(from);
  }

  inline NewTicketRequest& operator=(const NewTicketRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline NewTicketRequest& operator=(NewTicketRequest&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const NewTicketRequest& default_instance() {
    return *internal_default_instance();
  }
  static inline const NewTicketRequest* internal_default_instance() {
    return reinterpret_cast<const NewTicketRequest*>(
               &_NewTicketRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    11;

  friend void swap(NewTicketRequest& a, NewTicketRequest& b) {
    a.Swap(&b);
  }
  inline void Swap(NewTicketRequest* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(NewTicketRequest* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline NewTicketRequest* New() const final {
    return CreateMaybeMessage<NewTicketRequest>(nullptr);
  }

  NewTicketRequest* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<NewTicketRequest>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const NewTicketRequest& from);
  void MergeFrom(const NewTicketRequest& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(NewTicketRequest* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "smart3dmap.v1.NewTicketRequest";
  }
  protected:
  explicit NewTicketRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    return ::descriptor_table_user_5fmanager_2fuser_5fmanager_2eproto_metadata_getter(kIndexInFileMessages);
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // @@protoc_insertion_point(class_scope:smart3dmap.v1.NewTicketRequest)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_user_5fmanager_2fuser_5fmanager_2eproto;
};
// -------------------------------------------------------------------

class LIBS3DMGRPC_API GetUserInvitationRequest PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:smart3dmap.v1.GetUserInvitationRequest) */ {
 public:
  inline GetUserInvitationRequest() : GetUserInvitationRequest(nullptr) {}
  virtual ~GetUserInvitationRequest();
  explicit constexpr GetUserInvitationRequest(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  GetUserInvitationRequest(const GetUserInvitationRequest& from);
  GetUserInvitationRequest(GetUserInvitationRequest&& from) noexcept
    : GetUserInvitationRequest() {
    *this = ::std::move(from);
  }

  inline GetUserInvitationRequest& operator=(const GetUserInvitationRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline GetUserInvitationRequest& operator=(GetUserInvitationRequest&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const GetUserInvitationRequest& default_instance() {
    return *internal_default_instance();
  }
  static inline const GetUserInvitationRequest* internal_default_instance() {
    return reinterpret_cast<const GetUserInvitationRequest*>(
               &_GetUserInvitationRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    12;

  friend void swap(GetUserInvitationRequest& a, GetUserInvitationRequest& b) {
    a.Swap(&b);
  }
  inline void Swap(GetUserInvitationRequest* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(GetUserInvitationRequest* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline GetUserInvitationRequest* New() const final {
    return CreateMaybeMessage<GetUserInvitationRequest>(nullptr);
  }

  GetUserInvitationRequest* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<GetUserInvitationRequest>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const GetUserInvitationRequest& from);
  void MergeFrom(const GetUserInvitationRequest& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(GetUserInvitationRequest* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "smart3dmap.v1.GetUserInvitationRequest";
  }
  protected:
  explicit GetUserInvitationRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    return ::descriptor_table_user_5fmanager_2fuser_5fmanager_2eproto_metadata_getter(kIndexInFileMessages);
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kTokenFieldNumber = 1,
  };
  // string token = 1;
  void clear_token();
  const std::string& token() const;
  void set_token(const std::string& value);
  void set_token(std::string&& value);
  void set_token(const char* value);
  void set_token(const char* value, size_t size);
  std::string* mutable_token();
  std::string* release_token();
  void set_allocated_token(std::string* token);
  private:
  const std::string& _internal_token() const;
  void _internal_set_token(const std::string& value);
  std::string* _internal_mutable_token();
  public:

  // @@protoc_insertion_point(class_scope:smart3dmap.v1.GetUserInvitationRequest)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr token_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_user_5fmanager_2fuser_5fmanager_2eproto;
};
// -------------------------------------------------------------------

class LIBS3DMGRPC_API GetUserRequest PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:smart3dmap.v1.GetUserRequest) */ {
 public:
  inline GetUserRequest() : GetUserRequest(nullptr) {}
  virtual ~GetUserRequest();
  explicit constexpr GetUserRequest(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  GetUserRequest(const GetUserRequest& from);
  GetUserRequest(GetUserRequest&& from) noexcept
    : GetUserRequest() {
    *this = ::std::move(from);
  }

  inline GetUserRequest& operator=(const GetUserRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline GetUserRequest& operator=(GetUserRequest&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const GetUserRequest& default_instance() {
    return *internal_default_instance();
  }
  static inline const GetUserRequest* internal_default_instance() {
    return reinterpret_cast<const GetUserRequest*>(
               &_GetUserRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    13;

  friend void swap(GetUserRequest& a, GetUserRequest& b) {
    a.Swap(&b);
  }
  inline void Swap(GetUserRequest* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(GetUserRequest* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline GetUserRequest* New() const final {
    return CreateMaybeMessage<GetUserRequest>(nullptr);
  }

  GetUserRequest* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<GetUserRequest>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const GetUserRequest& from);
  void MergeFrom(const GetUserRequest& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(GetUserRequest* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "smart3dmap.v1.GetUserRequest";
  }
  protected:
  explicit GetUserRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    return ::descriptor_table_user_5fmanager_2fuser_5fmanager_2eproto_metadata_getter(kIndexInFileMessages);
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kEmailFieldNumber = 2,
    kIdFieldNumber = 1,
  };
  // string email = 2;
  bool has_email() const;
  private:
  bool _internal_has_email() const;
  public:
  void clear_email();
  const std::string& email() const;
  void set_email(const std::string& value);
  void set_email(std::string&& value);
  void set_email(const char* value);
  void set_email(const char* value, size_t size);
  std::string* mutable_email();
  std::string* release_email();
  void set_allocated_email(std::string* email);
  private:
  const std::string& _internal_email() const;
  void _internal_set_email(const std::string& value);
  std::string* _internal_mutable_email();
  public:

  // int32 id = 1;
  bool has_id() const;
  private:
  bool _internal_has_id() const;
  public:
  void clear_id();
  ::PROTOBUF_NAMESPACE_ID::int32 id() const;
  void set_id(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_id() const;
  void _internal_set_id(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // @@protoc_insertion_point(class_scope:smart3dmap.v1.GetUserRequest)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr email_;
  ::PROTOBUF_NAMESPACE_ID::int32 id_;
  friend struct ::TableStruct_user_5fmanager_2fuser_5fmanager_2eproto;
};
// -------------------------------------------------------------------

class UpdateUserRequest_UpdateAttributesEntry_DoNotUse : public ::PROTOBUF_NAMESPACE_ID::internal::MapEntry<UpdateUserRequest_UpdateAttributesEntry_DoNotUse, 
    std::string, std::string,
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_STRING,
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_STRING> {
public:
  typedef ::PROTOBUF_NAMESPACE_ID::internal::MapEntry<UpdateUserRequest_UpdateAttributesEntry_DoNotUse, 
    std::string, std::string,
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_STRING,
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_STRING> SuperType;
  UpdateUserRequest_UpdateAttributesEntry_DoNotUse();
  explicit constexpr UpdateUserRequest_UpdateAttributesEntry_DoNotUse(
      ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);
  explicit UpdateUserRequest_UpdateAttributesEntry_DoNotUse(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  void MergeFrom(const UpdateUserRequest_UpdateAttributesEntry_DoNotUse& other);
  static const UpdateUserRequest_UpdateAttributesEntry_DoNotUse* internal_default_instance() { return reinterpret_cast<const UpdateUserRequest_UpdateAttributesEntry_DoNotUse*>(&_UpdateUserRequest_UpdateAttributesEntry_DoNotUse_default_instance_); }
  static bool ValidateKey(std::string* s) {
    return ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(s->data(), static_cast<int>(s->size()), ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::PARSE, "smart3dmap.v1.UpdateUserRequest.UpdateAttributesEntry.key");
 }
  static bool ValidateValue(std::string* s) {
    return ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(s->data(), static_cast<int>(s->size()), ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::PARSE, "smart3dmap.v1.UpdateUserRequest.UpdateAttributesEntry.value");
 }
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& other) final;
  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_user_5fmanager_2fuser_5fmanager_2eproto);
    return ::descriptor_table_user_5fmanager_2fuser_5fmanager_2eproto.file_level_metadata[14];
  }

  public:
};

// -------------------------------------------------------------------

class LIBS3DMGRPC_API UpdateUserRequest PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:smart3dmap.v1.UpdateUserRequest) */ {
 public:
  inline UpdateUserRequest() : UpdateUserRequest(nullptr) {}
  virtual ~UpdateUserRequest();
  explicit constexpr UpdateUserRequest(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  UpdateUserRequest(const UpdateUserRequest& from);
  UpdateUserRequest(UpdateUserRequest&& from) noexcept
    : UpdateUserRequest() {
    *this = ::std::move(from);
  }

  inline UpdateUserRequest& operator=(const UpdateUserRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline UpdateUserRequest& operator=(UpdateUserRequest&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const UpdateUserRequest& default_instance() {
    return *internal_default_instance();
  }
  static inline const UpdateUserRequest* internal_default_instance() {
    return reinterpret_cast<const UpdateUserRequest*>(
               &_UpdateUserRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    15;

  friend void swap(UpdateUserRequest& a, UpdateUserRequest& b) {
    a.Swap(&b);
  }
  inline void Swap(UpdateUserRequest* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(UpdateUserRequest* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline UpdateUserRequest* New() const final {
    return CreateMaybeMessage<UpdateUserRequest>(nullptr);
  }

  UpdateUserRequest* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<UpdateUserRequest>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const UpdateUserRequest& from);
  void MergeFrom(const UpdateUserRequest& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(UpdateUserRequest* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "smart3dmap.v1.UpdateUserRequest";
  }
  protected:
  explicit UpdateUserRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    return ::descriptor_table_user_5fmanager_2fuser_5fmanager_2eproto_metadata_getter(kIndexInFileMessages);
  }

  public:

  // nested types ----------------------------------------------------


  // accessors -------------------------------------------------------

  enum : int {
    kUpdateAttributesFieldNumber = 5,
    kNameFieldNumber = 2,
    kPhoneFieldNumber = 3,
    kIdFieldNumber = 1,
    kStateFieldNumber = 4,
  };
  // map<string, string> update_attributes = 5;
  int update_attributes_size() const;
  private:
  int _internal_update_attributes_size() const;
  public:
  void clear_update_attributes();
  private:
  const ::PROTOBUF_NAMESPACE_ID::Map< std::string, std::string >&
      _internal_update_attributes() const;
  ::PROTOBUF_NAMESPACE_ID::Map< std::string, std::string >*
      _internal_mutable_update_attributes();
  public:
  const ::PROTOBUF_NAMESPACE_ID::Map< std::string, std::string >&
      update_attributes() const;
  ::PROTOBUF_NAMESPACE_ID::Map< std::string, std::string >*
      mutable_update_attributes();

  // string name = 2;
  bool has_name() const;
  private:
  bool _internal_has_name() const;
  public:
  void clear_name();
  const std::string& name() const;
  void set_name(const std::string& value);
  void set_name(std::string&& value);
  void set_name(const char* value);
  void set_name(const char* value, size_t size);
  std::string* mutable_name();
  std::string* release_name();
  void set_allocated_name(std::string* name);
  private:
  const std::string& _internal_name() const;
  void _internal_set_name(const std::string& value);
  std::string* _internal_mutable_name();
  public:

  // string phone = 3;
  bool has_phone() const;
  private:
  bool _internal_has_phone() const;
  public:
  void clear_phone();
  const std::string& phone() const;
  void set_phone(const std::string& value);
  void set_phone(std::string&& value);
  void set_phone(const char* value);
  void set_phone(const char* value, size_t size);
  std::string* mutable_phone();
  std::string* release_phone();
  void set_allocated_phone(std::string* phone);
  private:
  const std::string& _internal_phone() const;
  void _internal_set_phone(const std::string& value);
  std::string* _internal_mutable_phone();
  public:

  // int32 id = 1;
  void clear_id();
  ::PROTOBUF_NAMESPACE_ID::int32 id() const;
  void set_id(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_id() const;
  void _internal_set_id(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // .smart3dmap.v1.User.State state = 4;
  bool has_state() const;
  private:
  bool _internal_has_state() const;
  public:
  void clear_state();
  ::smart3dmap::v1::User_State state() const;
  void set_state(::smart3dmap::v1::User_State value);
  private:
  ::smart3dmap::v1::User_State _internal_state() const;
  void _internal_set_state(::smart3dmap::v1::User_State value);
  public:

  // @@protoc_insertion_point(class_scope:smart3dmap.v1.UpdateUserRequest)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::internal::MapField<
      UpdateUserRequest_UpdateAttributesEntry_DoNotUse,
      std::string, std::string,
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_STRING,
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_STRING> update_attributes_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr name_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr phone_;
  ::PROTOBUF_NAMESPACE_ID::int32 id_;
  int state_;
  friend struct ::TableStruct_user_5fmanager_2fuser_5fmanager_2eproto;
};
// -------------------------------------------------------------------

class LIBS3DMGRPC_API RegisterUserRequest_Info PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:smart3dmap.v1.RegisterUserRequest.Info) */ {
 public:
  inline RegisterUserRequest_Info() : RegisterUserRequest_Info(nullptr) {}
  virtual ~RegisterUserRequest_Info();
  explicit constexpr RegisterUserRequest_Info(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  RegisterUserRequest_Info(const RegisterUserRequest_Info& from);
  RegisterUserRequest_Info(RegisterUserRequest_Info&& from) noexcept
    : RegisterUserRequest_Info() {
    *this = ::std::move(from);
  }

  inline RegisterUserRequest_Info& operator=(const RegisterUserRequest_Info& from) {
    CopyFrom(from);
    return *this;
  }
  inline RegisterUserRequest_Info& operator=(RegisterUserRequest_Info&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const RegisterUserRequest_Info& default_instance() {
    return *internal_default_instance();
  }
  static inline const RegisterUserRequest_Info* internal_default_instance() {
    return reinterpret_cast<const RegisterUserRequest_Info*>(
               &_RegisterUserRequest_Info_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    16;

  friend void swap(RegisterUserRequest_Info& a, RegisterUserRequest_Info& b) {
    a.Swap(&b);
  }
  inline void Swap(RegisterUserRequest_Info* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(RegisterUserRequest_Info* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline RegisterUserRequest_Info* New() const final {
    return CreateMaybeMessage<RegisterUserRequest_Info>(nullptr);
  }

  RegisterUserRequest_Info* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<RegisterUserRequest_Info>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const RegisterUserRequest_Info& from);
  void MergeFrom(const RegisterUserRequest_Info& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(RegisterUserRequest_Info* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "smart3dmap.v1.RegisterUserRequest.Info";
  }
  protected:
  explicit RegisterUserRequest_Info(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    return ::descriptor_table_user_5fmanager_2fuser_5fmanager_2eproto_metadata_getter(kIndexInFileMessages);
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kAttributeFieldNumber = 1,
    kValueFieldNumber = 2,
  };
  // string attribute = 1;
  void clear_attribute();
  const std::string& attribute() const;
  void set_attribute(const std::string& value);
  void set_attribute(std::string&& value);
  void set_attribute(const char* value);
  void set_attribute(const char* value, size_t size);
  std::string* mutable_attribute();
  std::string* release_attribute();
  void set_allocated_attribute(std::string* attribute);
  private:
  const std::string& _internal_attribute() const;
  void _internal_set_attribute(const std::string& value);
  std::string* _internal_mutable_attribute();
  public:

  // string value = 2;
  void clear_value();
  const std::string& value() const;
  void set_value(const std::string& value);
  void set_value(std::string&& value);
  void set_value(const char* value);
  void set_value(const char* value, size_t size);
  std::string* mutable_value();
  std::string* release_value();
  void set_allocated_value(std::string* value);
  private:
  const std::string& _internal_value() const;
  void _internal_set_value(const std::string& value);
  std::string* _internal_mutable_value();
  public:

  // @@protoc_insertion_point(class_scope:smart3dmap.v1.RegisterUserRequest.Info)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr attribute_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr value_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_user_5fmanager_2fuser_5fmanager_2eproto;
};
// -------------------------------------------------------------------

class LIBS3DMGRPC_API RegisterUserRequest PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:smart3dmap.v1.RegisterUserRequest) */ {
 public:
  inline RegisterUserRequest() : RegisterUserRequest(nullptr) {}
  virtual ~RegisterUserRequest();
  explicit constexpr RegisterUserRequest(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  RegisterUserRequest(const RegisterUserRequest& from);
  RegisterUserRequest(RegisterUserRequest&& from) noexcept
    : RegisterUserRequest() {
    *this = ::std::move(from);
  }

  inline RegisterUserRequest& operator=(const RegisterUserRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline RegisterUserRequest& operator=(RegisterUserRequest&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const RegisterUserRequest& default_instance() {
    return *internal_default_instance();
  }
  static inline const RegisterUserRequest* internal_default_instance() {
    return reinterpret_cast<const RegisterUserRequest*>(
               &_RegisterUserRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    17;

  friend void swap(RegisterUserRequest& a, RegisterUserRequest& b) {
    a.Swap(&b);
  }
  inline void Swap(RegisterUserRequest* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(RegisterUserRequest* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline RegisterUserRequest* New() const final {
    return CreateMaybeMessage<RegisterUserRequest>(nullptr);
  }

  RegisterUserRequest* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<RegisterUserRequest>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const RegisterUserRequest& from);
  void MergeFrom(const RegisterUserRequest& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(RegisterUserRequest* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "smart3dmap.v1.RegisterUserRequest";
  }
  protected:
  explicit RegisterUserRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    return ::descriptor_table_user_5fmanager_2fuser_5fmanager_2eproto_metadata_getter(kIndexInFileMessages);
  }

  public:

  // nested types ----------------------------------------------------

  typedef RegisterUserRequest_Info Info;

  // accessors -------------------------------------------------------

  enum : int {
    kInfosFieldNumber = 5,
    kNameFieldNumber = 1,
    kEmailFieldNumber = 2,
    kPhoneFieldNumber = 3,
    kPasswordFieldNumber = 4,
  };
  // repeated .smart3dmap.v1.RegisterUserRequest.Info infos = 5;
  int infos_size() const;
  private:
  int _internal_infos_size() const;
  public:
  void clear_infos();
  ::smart3dmap::v1::RegisterUserRequest_Info* mutable_infos(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::smart3dmap::v1::RegisterUserRequest_Info >*
      mutable_infos();
  private:
  const ::smart3dmap::v1::RegisterUserRequest_Info& _internal_infos(int index) const;
  ::smart3dmap::v1::RegisterUserRequest_Info* _internal_add_infos();
  public:
  const ::smart3dmap::v1::RegisterUserRequest_Info& infos(int index) const;
  ::smart3dmap::v1::RegisterUserRequest_Info* add_infos();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::smart3dmap::v1::RegisterUserRequest_Info >&
      infos() const;

  // string name = 1;
  void clear_name();
  const std::string& name() const;
  void set_name(const std::string& value);
  void set_name(std::string&& value);
  void set_name(const char* value);
  void set_name(const char* value, size_t size);
  std::string* mutable_name();
  std::string* release_name();
  void set_allocated_name(std::string* name);
  private:
  const std::string& _internal_name() const;
  void _internal_set_name(const std::string& value);
  std::string* _internal_mutable_name();
  public:

  // string email = 2;
  void clear_email();
  const std::string& email() const;
  void set_email(const std::string& value);
  void set_email(std::string&& value);
  void set_email(const char* value);
  void set_email(const char* value, size_t size);
  std::string* mutable_email();
  std::string* release_email();
  void set_allocated_email(std::string* email);
  private:
  const std::string& _internal_email() const;
  void _internal_set_email(const std::string& value);
  std::string* _internal_mutable_email();
  public:

  // string phone = 3;
  void clear_phone();
  const std::string& phone() const;
  void set_phone(const std::string& value);
  void set_phone(std::string&& value);
  void set_phone(const char* value);
  void set_phone(const char* value, size_t size);
  std::string* mutable_phone();
  std::string* release_phone();
  void set_allocated_phone(std::string* phone);
  private:
  const std::string& _internal_phone() const;
  void _internal_set_phone(const std::string& value);
  std::string* _internal_mutable_phone();
  public:

  // string password = 4;
  void clear_password();
  const std::string& password() const;
  void set_password(const std::string& value);
  void set_password(std::string&& value);
  void set_password(const char* value);
  void set_password(const char* value, size_t size);
  std::string* mutable_password();
  std::string* release_password();
  void set_allocated_password(std::string* password);
  private:
  const std::string& _internal_password() const;
  void _internal_set_password(const std::string& value);
  std::string* _internal_mutable_password();
  public:

  // @@protoc_insertion_point(class_scope:smart3dmap.v1.RegisterUserRequest)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::smart3dmap::v1::RegisterUserRequest_Info > infos_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr name_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr email_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr phone_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr password_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_user_5fmanager_2fuser_5fmanager_2eproto;
};
// -------------------------------------------------------------------

class LIBS3DMGRPC_API ResetUserPasswordRequest PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:smart3dmap.v1.ResetUserPasswordRequest) */ {
 public:
  inline ResetUserPasswordRequest() : ResetUserPasswordRequest(nullptr) {}
  virtual ~ResetUserPasswordRequest();
  explicit constexpr ResetUserPasswordRequest(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  ResetUserPasswordRequest(const ResetUserPasswordRequest& from);
  ResetUserPasswordRequest(ResetUserPasswordRequest&& from) noexcept
    : ResetUserPasswordRequest() {
    *this = ::std::move(from);
  }

  inline ResetUserPasswordRequest& operator=(const ResetUserPasswordRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline ResetUserPasswordRequest& operator=(ResetUserPasswordRequest&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const ResetUserPasswordRequest& default_instance() {
    return *internal_default_instance();
  }
  static inline const ResetUserPasswordRequest* internal_default_instance() {
    return reinterpret_cast<const ResetUserPasswordRequest*>(
               &_ResetUserPasswordRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    18;

  friend void swap(ResetUserPasswordRequest& a, ResetUserPasswordRequest& b) {
    a.Swap(&b);
  }
  inline void Swap(ResetUserPasswordRequest* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(ResetUserPasswordRequest* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline ResetUserPasswordRequest* New() const final {
    return CreateMaybeMessage<ResetUserPasswordRequest>(nullptr);
  }

  ResetUserPasswordRequest* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<ResetUserPasswordRequest>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const ResetUserPasswordRequest& from);
  void MergeFrom(const ResetUserPasswordRequest& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(ResetUserPasswordRequest* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "smart3dmap.v1.ResetUserPasswordRequest";
  }
  protected:
  explicit ResetUserPasswordRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    return ::descriptor_table_user_5fmanager_2fuser_5fmanager_2eproto_metadata_getter(kIndexInFileMessages);
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kOldPasswordFieldNumber = 2,
    kNewPasswordFieldNumber = 3,
    kIdFieldNumber = 1,
  };
  // string old_password = 2;
  void clear_old_password();
  const std::string& old_password() const;
  void set_old_password(const std::string& value);
  void set_old_password(std::string&& value);
  void set_old_password(const char* value);
  void set_old_password(const char* value, size_t size);
  std::string* mutable_old_password();
  std::string* release_old_password();
  void set_allocated_old_password(std::string* old_password);
  private:
  const std::string& _internal_old_password() const;
  void _internal_set_old_password(const std::string& value);
  std::string* _internal_mutable_old_password();
  public:

  // string new_password = 3;
  void clear_new_password();
  const std::string& new_password() const;
  void set_new_password(const std::string& value);
  void set_new_password(std::string&& value);
  void set_new_password(const char* value);
  void set_new_password(const char* value, size_t size);
  std::string* mutable_new_password();
  std::string* release_new_password();
  void set_allocated_new_password(std::string* new_password);
  private:
  const std::string& _internal_new_password() const;
  void _internal_set_new_password(const std::string& value);
  std::string* _internal_mutable_new_password();
  public:

  // int32 id = 1;
  void clear_id();
  ::PROTOBUF_NAMESPACE_ID::int32 id() const;
  void set_id(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_id() const;
  void _internal_set_id(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // @@protoc_insertion_point(class_scope:smart3dmap.v1.ResetUserPasswordRequest)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr old_password_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr new_password_;
  ::PROTOBUF_NAMESPACE_ID::int32 id_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_user_5fmanager_2fuser_5fmanager_2eproto;
};
// -------------------------------------------------------------------

class LIBS3DMGRPC_API DeleteUserRequest PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:smart3dmap.v1.DeleteUserRequest) */ {
 public:
  inline DeleteUserRequest() : DeleteUserRequest(nullptr) {}
  virtual ~DeleteUserRequest();
  explicit constexpr DeleteUserRequest(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  DeleteUserRequest(const DeleteUserRequest& from);
  DeleteUserRequest(DeleteUserRequest&& from) noexcept
    : DeleteUserRequest() {
    *this = ::std::move(from);
  }

  inline DeleteUserRequest& operator=(const DeleteUserRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline DeleteUserRequest& operator=(DeleteUserRequest&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const DeleteUserRequest& default_instance() {
    return *internal_default_instance();
  }
  static inline const DeleteUserRequest* internal_default_instance() {
    return reinterpret_cast<const DeleteUserRequest*>(
               &_DeleteUserRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    19;

  friend void swap(DeleteUserRequest& a, DeleteUserRequest& b) {
    a.Swap(&b);
  }
  inline void Swap(DeleteUserRequest* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(DeleteUserRequest* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline DeleteUserRequest* New() const final {
    return CreateMaybeMessage<DeleteUserRequest>(nullptr);
  }

  DeleteUserRequest* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<DeleteUserRequest>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const DeleteUserRequest& from);
  void MergeFrom(const DeleteUserRequest& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(DeleteUserRequest* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "smart3dmap.v1.DeleteUserRequest";
  }
  protected:
  explicit DeleteUserRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    return ::descriptor_table_user_5fmanager_2fuser_5fmanager_2eproto_metadata_getter(kIndexInFileMessages);
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kIdFieldNumber = 1,
  };
  // int32 id = 1;
  void clear_id();
  ::PROTOBUF_NAMESPACE_ID::int32 id() const;
  void set_id(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_id() const;
  void _internal_set_id(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // @@protoc_insertion_point(class_scope:smart3dmap.v1.DeleteUserRequest)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::int32 id_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_user_5fmanager_2fuser_5fmanager_2eproto;
};
// -------------------------------------------------------------------

class LIBS3DMGRPC_API DeleteTeamRequest PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:smart3dmap.v1.DeleteTeamRequest) */ {
 public:
  inline DeleteTeamRequest() : DeleteTeamRequest(nullptr) {}
  virtual ~DeleteTeamRequest();
  explicit constexpr DeleteTeamRequest(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  DeleteTeamRequest(const DeleteTeamRequest& from);
  DeleteTeamRequest(DeleteTeamRequest&& from) noexcept
    : DeleteTeamRequest() {
    *this = ::std::move(from);
  }

  inline DeleteTeamRequest& operator=(const DeleteTeamRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline DeleteTeamRequest& operator=(DeleteTeamRequest&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const DeleteTeamRequest& default_instance() {
    return *internal_default_instance();
  }
  static inline const DeleteTeamRequest* internal_default_instance() {
    return reinterpret_cast<const DeleteTeamRequest*>(
               &_DeleteTeamRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    20;

  friend void swap(DeleteTeamRequest& a, DeleteTeamRequest& b) {
    a.Swap(&b);
  }
  inline void Swap(DeleteTeamRequest* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(DeleteTeamRequest* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline DeleteTeamRequest* New() const final {
    return CreateMaybeMessage<DeleteTeamRequest>(nullptr);
  }

  DeleteTeamRequest* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<DeleteTeamRequest>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const DeleteTeamRequest& from);
  void MergeFrom(const DeleteTeamRequest& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(DeleteTeamRequest* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "smart3dmap.v1.DeleteTeamRequest";
  }
  protected:
  explicit DeleteTeamRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    return ::descriptor_table_user_5fmanager_2fuser_5fmanager_2eproto_metadata_getter(kIndexInFileMessages);
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kIdFieldNumber = 1,
  };
  // int32 id = 1;
  void clear_id();
  ::PROTOBUF_NAMESPACE_ID::int32 id() const;
  void set_id(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_id() const;
  void _internal_set_id(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // @@protoc_insertion_point(class_scope:smart3dmap.v1.DeleteTeamRequest)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::int32 id_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_user_5fmanager_2fuser_5fmanager_2eproto;
};
// -------------------------------------------------------------------

class LIBS3DMGRPC_API GetTeamRequest PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:smart3dmap.v1.GetTeamRequest) */ {
 public:
  inline GetTeamRequest() : GetTeamRequest(nullptr) {}
  virtual ~GetTeamRequest();
  explicit constexpr GetTeamRequest(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  GetTeamRequest(const GetTeamRequest& from);
  GetTeamRequest(GetTeamRequest&& from) noexcept
    : GetTeamRequest() {
    *this = ::std::move(from);
  }

  inline GetTeamRequest& operator=(const GetTeamRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline GetTeamRequest& operator=(GetTeamRequest&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const GetTeamRequest& default_instance() {
    return *internal_default_instance();
  }
  static inline const GetTeamRequest* internal_default_instance() {
    return reinterpret_cast<const GetTeamRequest*>(
               &_GetTeamRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    21;

  friend void swap(GetTeamRequest& a, GetTeamRequest& b) {
    a.Swap(&b);
  }
  inline void Swap(GetTeamRequest* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(GetTeamRequest* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline GetTeamRequest* New() const final {
    return CreateMaybeMessage<GetTeamRequest>(nullptr);
  }

  GetTeamRequest* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<GetTeamRequest>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const GetTeamRequest& from);
  void MergeFrom(const GetTeamRequest& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(GetTeamRequest* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "smart3dmap.v1.GetTeamRequest";
  }
  protected:
  explicit GetTeamRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    return ::descriptor_table_user_5fmanager_2fuser_5fmanager_2eproto_metadata_getter(kIndexInFileMessages);
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kIdFieldNumber = 1,
  };
  // int32 id = 1;
  void clear_id();
  ::PROTOBUF_NAMESPACE_ID::int32 id() const;
  void set_id(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_id() const;
  void _internal_set_id(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // @@protoc_insertion_point(class_scope:smart3dmap.v1.GetTeamRequest)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::int32 id_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_user_5fmanager_2fuser_5fmanager_2eproto;
};
// -------------------------------------------------------------------

class LIBS3DMGRPC_API GetTeamUserRequest PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:smart3dmap.v1.GetTeamUserRequest) */ {
 public:
  inline GetTeamUserRequest() : GetTeamUserRequest(nullptr) {}
  virtual ~GetTeamUserRequest();
  explicit constexpr GetTeamUserRequest(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  GetTeamUserRequest(const GetTeamUserRequest& from);
  GetTeamUserRequest(GetTeamUserRequest&& from) noexcept
    : GetTeamUserRequest() {
    *this = ::std::move(from);
  }

  inline GetTeamUserRequest& operator=(const GetTeamUserRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline GetTeamUserRequest& operator=(GetTeamUserRequest&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const GetTeamUserRequest& default_instance() {
    return *internal_default_instance();
  }
  static inline const GetTeamUserRequest* internal_default_instance() {
    return reinterpret_cast<const GetTeamUserRequest*>(
               &_GetTeamUserRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    22;

  friend void swap(GetTeamUserRequest& a, GetTeamUserRequest& b) {
    a.Swap(&b);
  }
  inline void Swap(GetTeamUserRequest* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(GetTeamUserRequest* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline GetTeamUserRequest* New() const final {
    return CreateMaybeMessage<GetTeamUserRequest>(nullptr);
  }

  GetTeamUserRequest* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<GetTeamUserRequest>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const GetTeamUserRequest& from);
  void MergeFrom(const GetTeamUserRequest& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(GetTeamUserRequest* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "smart3dmap.v1.GetTeamUserRequest";
  }
  protected:
  explicit GetTeamUserRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    return ::descriptor_table_user_5fmanager_2fuser_5fmanager_2eproto_metadata_getter(kIndexInFileMessages);
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kTeamIdFieldNumber = 1,
  };
  // int32 team_id = 1;
  void clear_team_id();
  ::PROTOBUF_NAMESPACE_ID::int32 team_id() const;
  void set_team_id(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_team_id() const;
  void _internal_set_team_id(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // @@protoc_insertion_point(class_scope:smart3dmap.v1.GetTeamUserRequest)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::int32 team_id_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_user_5fmanager_2fuser_5fmanager_2eproto;
};
// -------------------------------------------------------------------

class LIBS3DMGRPC_API IsAdminUserRequest PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:smart3dmap.v1.IsAdminUserRequest) */ {
 public:
  inline IsAdminUserRequest() : IsAdminUserRequest(nullptr) {}
  virtual ~IsAdminUserRequest();
  explicit constexpr IsAdminUserRequest(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  IsAdminUserRequest(const IsAdminUserRequest& from);
  IsAdminUserRequest(IsAdminUserRequest&& from) noexcept
    : IsAdminUserRequest() {
    *this = ::std::move(from);
  }

  inline IsAdminUserRequest& operator=(const IsAdminUserRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline IsAdminUserRequest& operator=(IsAdminUserRequest&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const IsAdminUserRequest& default_instance() {
    return *internal_default_instance();
  }
  static inline const IsAdminUserRequest* internal_default_instance() {
    return reinterpret_cast<const IsAdminUserRequest*>(
               &_IsAdminUserRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    23;

  friend void swap(IsAdminUserRequest& a, IsAdminUserRequest& b) {
    a.Swap(&b);
  }
  inline void Swap(IsAdminUserRequest* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(IsAdminUserRequest* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline IsAdminUserRequest* New() const final {
    return CreateMaybeMessage<IsAdminUserRequest>(nullptr);
  }

  IsAdminUserRequest* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<IsAdminUserRequest>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const IsAdminUserRequest& from);
  void MergeFrom(const IsAdminUserRequest& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(IsAdminUserRequest* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "smart3dmap.v1.IsAdminUserRequest";
  }
  protected:
  explicit IsAdminUserRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    return ::descriptor_table_user_5fmanager_2fuser_5fmanager_2eproto_metadata_getter(kIndexInFileMessages);
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kUserIdFieldNumber = 1,
  };
  // int32 user_id = 1;
  void clear_user_id();
  ::PROTOBUF_NAMESPACE_ID::int32 user_id() const;
  void set_user_id(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_user_id() const;
  void _internal_set_user_id(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // @@protoc_insertion_point(class_scope:smart3dmap.v1.IsAdminUserRequest)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::int32 user_id_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_user_5fmanager_2fuser_5fmanager_2eproto;
};
// -------------------------------------------------------------------

class LIBS3DMGRPC_API ListUsersResponse PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:smart3dmap.v1.ListUsersResponse) */ {
 public:
  inline ListUsersResponse() : ListUsersResponse(nullptr) {}
  virtual ~ListUsersResponse();
  explicit constexpr ListUsersResponse(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  ListUsersResponse(const ListUsersResponse& from);
  ListUsersResponse(ListUsersResponse&& from) noexcept
    : ListUsersResponse() {
    *this = ::std::move(from);
  }

  inline ListUsersResponse& operator=(const ListUsersResponse& from) {
    CopyFrom(from);
    return *this;
  }
  inline ListUsersResponse& operator=(ListUsersResponse&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const ListUsersResponse& default_instance() {
    return *internal_default_instance();
  }
  static inline const ListUsersResponse* internal_default_instance() {
    return reinterpret_cast<const ListUsersResponse*>(
               &_ListUsersResponse_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    24;

  friend void swap(ListUsersResponse& a, ListUsersResponse& b) {
    a.Swap(&b);
  }
  inline void Swap(ListUsersResponse* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(ListUsersResponse* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline ListUsersResponse* New() const final {
    return CreateMaybeMessage<ListUsersResponse>(nullptr);
  }

  ListUsersResponse* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<ListUsersResponse>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const ListUsersResponse& from);
  void MergeFrom(const ListUsersResponse& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(ListUsersResponse* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "smart3dmap.v1.ListUsersResponse";
  }
  protected:
  explicit ListUsersResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    return ::descriptor_table_user_5fmanager_2fuser_5fmanager_2eproto_metadata_getter(kIndexInFileMessages);
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kUsersFieldNumber = 1,
    kUserCountFieldNumber = 2,
  };
  // repeated .smart3dmap.v1.User users = 1;
  int users_size() const;
  private:
  int _internal_users_size() const;
  public:
  void clear_users();
  ::smart3dmap::v1::User* mutable_users(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::smart3dmap::v1::User >*
      mutable_users();
  private:
  const ::smart3dmap::v1::User& _internal_users(int index) const;
  ::smart3dmap::v1::User* _internal_add_users();
  public:
  const ::smart3dmap::v1::User& users(int index) const;
  ::smart3dmap::v1::User* add_users();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::smart3dmap::v1::User >&
      users() const;

  // int32 user_count = 2;
  void clear_user_count();
  ::PROTOBUF_NAMESPACE_ID::int32 user_count() const;
  void set_user_count(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_user_count() const;
  void _internal_set_user_count(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // @@protoc_insertion_point(class_scope:smart3dmap.v1.ListUsersResponse)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::smart3dmap::v1::User > users_;
  ::PROTOBUF_NAMESPACE_ID::int32 user_count_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_user_5fmanager_2fuser_5fmanager_2eproto;
};
// -------------------------------------------------------------------

class LIBS3DMGRPC_API ListTeamsResponse PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:smart3dmap.v1.ListTeamsResponse) */ {
 public:
  inline ListTeamsResponse() : ListTeamsResponse(nullptr) {}
  virtual ~ListTeamsResponse();
  explicit constexpr ListTeamsResponse(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  ListTeamsResponse(const ListTeamsResponse& from);
  ListTeamsResponse(ListTeamsResponse&& from) noexcept
    : ListTeamsResponse() {
    *this = ::std::move(from);
  }

  inline ListTeamsResponse& operator=(const ListTeamsResponse& from) {
    CopyFrom(from);
    return *this;
  }
  inline ListTeamsResponse& operator=(ListTeamsResponse&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const ListTeamsResponse& default_instance() {
    return *internal_default_instance();
  }
  static inline const ListTeamsResponse* internal_default_instance() {
    return reinterpret_cast<const ListTeamsResponse*>(
               &_ListTeamsResponse_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    25;

  friend void swap(ListTeamsResponse& a, ListTeamsResponse& b) {
    a.Swap(&b);
  }
  inline void Swap(ListTeamsResponse* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(ListTeamsResponse* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline ListTeamsResponse* New() const final {
    return CreateMaybeMessage<ListTeamsResponse>(nullptr);
  }

  ListTeamsResponse* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<ListTeamsResponse>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const ListTeamsResponse& from);
  void MergeFrom(const ListTeamsResponse& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(ListTeamsResponse* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "smart3dmap.v1.ListTeamsResponse";
  }
  protected:
  explicit ListTeamsResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    return ::descriptor_table_user_5fmanager_2fuser_5fmanager_2eproto_metadata_getter(kIndexInFileMessages);
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kTeamsFieldNumber = 1,
    kTeamCountFieldNumber = 2,
  };
  // repeated .smart3dmap.v1.Team teams = 1;
  int teams_size() const;
  private:
  int _internal_teams_size() const;
  public:
  void clear_teams();
  ::smart3dmap::v1::Team* mutable_teams(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::smart3dmap::v1::Team >*
      mutable_teams();
  private:
  const ::smart3dmap::v1::Team& _internal_teams(int index) const;
  ::smart3dmap::v1::Team* _internal_add_teams();
  public:
  const ::smart3dmap::v1::Team& teams(int index) const;
  ::smart3dmap::v1::Team* add_teams();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::smart3dmap::v1::Team >&
      teams() const;

  // int32 team_count = 2;
  void clear_team_count();
  ::PROTOBUF_NAMESPACE_ID::int32 team_count() const;
  void set_team_count(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_team_count() const;
  void _internal_set_team_count(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // @@protoc_insertion_point(class_scope:smart3dmap.v1.ListTeamsResponse)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::smart3dmap::v1::Team > teams_;
  ::PROTOBUF_NAMESPACE_ID::int32 team_count_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_user_5fmanager_2fuser_5fmanager_2eproto;
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// TeamUser

// int32 teamId = 1;
inline void TeamUser::clear_teamid() {
  teamid_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 TeamUser::_internal_teamid() const {
  return teamid_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 TeamUser::teamid() const {
  // @@protoc_insertion_point(field_get:smart3dmap.v1.TeamUser.teamId)
  return _internal_teamid();
}
inline void TeamUser::_internal_set_teamid(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  teamid_ = value;
}
inline void TeamUser::set_teamid(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_teamid(value);
  // @@protoc_insertion_point(field_set:smart3dmap.v1.TeamUser.teamId)
}

// int32 userId = 2;
inline void TeamUser::clear_userid() {
  userid_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 TeamUser::_internal_userid() const {
  return userid_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 TeamUser::userid() const {
  // @@protoc_insertion_point(field_get:smart3dmap.v1.TeamUser.userId)
  return _internal_userid();
}
inline void TeamUser::_internal_set_userid(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  userid_ = value;
}
inline void TeamUser::set_userid(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_userid(value);
  // @@protoc_insertion_point(field_set:smart3dmap.v1.TeamUser.userId)
}

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// User

// int32 id = 1;
inline void User::clear_id() {
  id_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 User::_internal_id() const {
  return id_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 User::id() const {
  // @@protoc_insertion_point(field_get:smart3dmap.v1.User.id)
  return _internal_id();
}
inline void User::_internal_set_id(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  id_ = value;
}
inline void User::set_id(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_id(value);
  // @@protoc_insertion_point(field_set:smart3dmap.v1.User.id)
}

// string name = 2;
inline void User::clear_name() {
  name_.ClearToEmpty();
}
inline const std::string& User::name() const {
  // @@protoc_insertion_point(field_get:smart3dmap.v1.User.name)
  return _internal_name();
}
inline void User::set_name(const std::string& value) {
  _internal_set_name(value);
  // @@protoc_insertion_point(field_set:smart3dmap.v1.User.name)
}
inline std::string* User::mutable_name() {
  // @@protoc_insertion_point(field_mutable:smart3dmap.v1.User.name)
  return _internal_mutable_name();
}
inline const std::string& User::_internal_name() const {
  return name_.Get();
}
inline void User::_internal_set_name(const std::string& value) {
  
  name_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArena());
}
inline void User::set_name(std::string&& value) {
  
  name_.Set(
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:smart3dmap.v1.User.name)
}
inline void User::set_name(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  name_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(value), GetArena());
  // @@protoc_insertion_point(field_set_char:smart3dmap.v1.User.name)
}
inline void User::set_name(const char* value,
    size_t size) {
  
  name_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:smart3dmap.v1.User.name)
}
inline std::string* User::_internal_mutable_name() {
  
  return name_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArena());
}
inline std::string* User::release_name() {
  // @@protoc_insertion_point(field_release:smart3dmap.v1.User.name)
  return name_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void User::set_allocated_name(std::string* name) {
  if (name != nullptr) {
    
  } else {
    
  }
  name_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), name,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:smart3dmap.v1.User.name)
}

// string email = 3;
inline void User::clear_email() {
  email_.ClearToEmpty();
}
inline const std::string& User::email() const {
  // @@protoc_insertion_point(field_get:smart3dmap.v1.User.email)
  return _internal_email();
}
inline void User::set_email(const std::string& value) {
  _internal_set_email(value);
  // @@protoc_insertion_point(field_set:smart3dmap.v1.User.email)
}
inline std::string* User::mutable_email() {
  // @@protoc_insertion_point(field_mutable:smart3dmap.v1.User.email)
  return _internal_mutable_email();
}
inline const std::string& User::_internal_email() const {
  return email_.Get();
}
inline void User::_internal_set_email(const std::string& value) {
  
  email_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArena());
}
inline void User::set_email(std::string&& value) {
  
  email_.Set(
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:smart3dmap.v1.User.email)
}
inline void User::set_email(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  email_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(value), GetArena());
  // @@protoc_insertion_point(field_set_char:smart3dmap.v1.User.email)
}
inline void User::set_email(const char* value,
    size_t size) {
  
  email_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:smart3dmap.v1.User.email)
}
inline std::string* User::_internal_mutable_email() {
  
  return email_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArena());
}
inline std::string* User::release_email() {
  // @@protoc_insertion_point(field_release:smart3dmap.v1.User.email)
  return email_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void User::set_allocated_email(std::string* email) {
  if (email != nullptr) {
    
  } else {
    
  }
  email_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), email,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:smart3dmap.v1.User.email)
}

// string phone = 4;
inline void User::clear_phone() {
  phone_.ClearToEmpty();
}
inline const std::string& User::phone() const {
  // @@protoc_insertion_point(field_get:smart3dmap.v1.User.phone)
  return _internal_phone();
}
inline void User::set_phone(const std::string& value) {
  _internal_set_phone(value);
  // @@protoc_insertion_point(field_set:smart3dmap.v1.User.phone)
}
inline std::string* User::mutable_phone() {
  // @@protoc_insertion_point(field_mutable:smart3dmap.v1.User.phone)
  return _internal_mutable_phone();
}
inline const std::string& User::_internal_phone() const {
  return phone_.Get();
}
inline void User::_internal_set_phone(const std::string& value) {
  
  phone_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArena());
}
inline void User::set_phone(std::string&& value) {
  
  phone_.Set(
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:smart3dmap.v1.User.phone)
}
inline void User::set_phone(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  phone_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(value), GetArena());
  // @@protoc_insertion_point(field_set_char:smart3dmap.v1.User.phone)
}
inline void User::set_phone(const char* value,
    size_t size) {
  
  phone_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:smart3dmap.v1.User.phone)
}
inline std::string* User::_internal_mutable_phone() {
  
  return phone_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArena());
}
inline std::string* User::release_phone() {
  // @@protoc_insertion_point(field_release:smart3dmap.v1.User.phone)
  return phone_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void User::set_allocated_phone(std::string* phone) {
  if (phone != nullptr) {
    
  } else {
    
  }
  phone_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), phone,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:smart3dmap.v1.User.phone)
}

// string password = 5;
inline void User::clear_password() {
  password_.ClearToEmpty();
}
inline const std::string& User::password() const {
  // @@protoc_insertion_point(field_get:smart3dmap.v1.User.password)
  return _internal_password();
}
inline void User::set_password(const std::string& value) {
  _internal_set_password(value);
  // @@protoc_insertion_point(field_set:smart3dmap.v1.User.password)
}
inline std::string* User::mutable_password() {
  // @@protoc_insertion_point(field_mutable:smart3dmap.v1.User.password)
  return _internal_mutable_password();
}
inline const std::string& User::_internal_password() const {
  return password_.Get();
}
inline void User::_internal_set_password(const std::string& value) {
  
  password_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArena());
}
inline void User::set_password(std::string&& value) {
  
  password_.Set(
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:smart3dmap.v1.User.password)
}
inline void User::set_password(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  password_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(value), GetArena());
  // @@protoc_insertion_point(field_set_char:smart3dmap.v1.User.password)
}
inline void User::set_password(const char* value,
    size_t size) {
  
  password_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:smart3dmap.v1.User.password)
}
inline std::string* User::_internal_mutable_password() {
  
  return password_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArena());
}
inline std::string* User::release_password() {
  // @@protoc_insertion_point(field_release:smart3dmap.v1.User.password)
  return password_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void User::set_allocated_password(std::string* password) {
  if (password != nullptr) {
    
  } else {
    
  }
  password_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), password,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:smart3dmap.v1.User.password)
}

// .smart3dmap.v1.User.State state = 6;
inline void User::clear_state() {
  state_ = 0;
}
inline ::smart3dmap::v1::User_State User::_internal_state() const {
  return static_cast< ::smart3dmap::v1::User_State >(state_);
}
inline ::smart3dmap::v1::User_State User::state() const {
  // @@protoc_insertion_point(field_get:smart3dmap.v1.User.state)
  return _internal_state();
}
inline void User::_internal_set_state(::smart3dmap::v1::User_State value) {
  
  state_ = value;
}
inline void User::set_state(::smart3dmap::v1::User_State value) {
  _internal_set_state(value);
  // @@protoc_insertion_point(field_set:smart3dmap.v1.User.state)
}

// map<string, string> attributes = 7;
inline int User::_internal_attributes_size() const {
  return attributes_.size();
}
inline int User::attributes_size() const {
  return _internal_attributes_size();
}
inline void User::clear_attributes() {
  attributes_.Clear();
}
inline const ::PROTOBUF_NAMESPACE_ID::Map< std::string, std::string >&
User::_internal_attributes() const {
  return attributes_.GetMap();
}
inline const ::PROTOBUF_NAMESPACE_ID::Map< std::string, std::string >&
User::attributes() const {
  // @@protoc_insertion_point(field_map:smart3dmap.v1.User.attributes)
  return _internal_attributes();
}
inline ::PROTOBUF_NAMESPACE_ID::Map< std::string, std::string >*
User::_internal_mutable_attributes() {
  return attributes_.MutableMap();
}
inline ::PROTOBUF_NAMESPACE_ID::Map< std::string, std::string >*
User::mutable_attributes() {
  // @@protoc_insertion_point(field_mutable_map:smart3dmap.v1.User.attributes)
  return _internal_mutable_attributes();
}

// -------------------------------------------------------------------

// Team

// int32 id = 1;
inline void Team::clear_id() {
  id_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 Team::_internal_id() const {
  return id_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 Team::id() const {
  // @@protoc_insertion_point(field_get:smart3dmap.v1.Team.id)
  return _internal_id();
}
inline void Team::_internal_set_id(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  id_ = value;
}
inline void Team::set_id(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_id(value);
  // @@protoc_insertion_point(field_set:smart3dmap.v1.Team.id)
}

// string name = 2;
inline void Team::clear_name() {
  name_.ClearToEmpty();
}
inline const std::string& Team::name() const {
  // @@protoc_insertion_point(field_get:smart3dmap.v1.Team.name)
  return _internal_name();
}
inline void Team::set_name(const std::string& value) {
  _internal_set_name(value);
  // @@protoc_insertion_point(field_set:smart3dmap.v1.Team.name)
}
inline std::string* Team::mutable_name() {
  // @@protoc_insertion_point(field_mutable:smart3dmap.v1.Team.name)
  return _internal_mutable_name();
}
inline const std::string& Team::_internal_name() const {
  return name_.Get();
}
inline void Team::_internal_set_name(const std::string& value) {
  
  name_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArena());
}
inline void Team::set_name(std::string&& value) {
  
  name_.Set(
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:smart3dmap.v1.Team.name)
}
inline void Team::set_name(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  name_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(value), GetArena());
  // @@protoc_insertion_point(field_set_char:smart3dmap.v1.Team.name)
}
inline void Team::set_name(const char* value,
    size_t size) {
  
  name_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:smart3dmap.v1.Team.name)
}
inline std::string* Team::_internal_mutable_name() {
  
  return name_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArena());
}
inline std::string* Team::release_name() {
  // @@protoc_insertion_point(field_release:smart3dmap.v1.Team.name)
  return name_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void Team::set_allocated_name(std::string* name) {
  if (name != nullptr) {
    
  } else {
    
  }
  name_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), name,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:smart3dmap.v1.Team.name)
}

// -------------------------------------------------------------------

// Ticket

// string value = 1;
inline void Ticket::clear_value() {
  value_.ClearToEmpty();
}
inline const std::string& Ticket::value() const {
  // @@protoc_insertion_point(field_get:smart3dmap.v1.Ticket.value)
  return _internal_value();
}
inline void Ticket::set_value(const std::string& value) {
  _internal_set_value(value);
  // @@protoc_insertion_point(field_set:smart3dmap.v1.Ticket.value)
}
inline std::string* Ticket::mutable_value() {
  // @@protoc_insertion_point(field_mutable:smart3dmap.v1.Ticket.value)
  return _internal_mutable_value();
}
inline const std::string& Ticket::_internal_value() const {
  return value_.Get();
}
inline void Ticket::_internal_set_value(const std::string& value) {
  
  value_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArena());
}
inline void Ticket::set_value(std::string&& value) {
  
  value_.Set(
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:smart3dmap.v1.Ticket.value)
}
inline void Ticket::set_value(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  value_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(value), GetArena());
  // @@protoc_insertion_point(field_set_char:smart3dmap.v1.Ticket.value)
}
inline void Ticket::set_value(const char* value,
    size_t size) {
  
  value_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:smart3dmap.v1.Ticket.value)
}
inline std::string* Ticket::_internal_mutable_value() {
  
  return value_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArena());
}
inline std::string* Ticket::release_value() {
  // @@protoc_insertion_point(field_release:smart3dmap.v1.Ticket.value)
  return value_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void Ticket::set_allocated_value(std::string* value) {
  if (value != nullptr) {
    
  } else {
    
  }
  value_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:smart3dmap.v1.Ticket.value)
}

// -------------------------------------------------------------------

// UserInvitation

// string token = 1;
inline void UserInvitation::clear_token() {
  token_.ClearToEmpty();
}
inline const std::string& UserInvitation::token() const {
  // @@protoc_insertion_point(field_get:smart3dmap.v1.UserInvitation.token)
  return _internal_token();
}
inline void UserInvitation::set_token(const std::string& value) {
  _internal_set_token(value);
  // @@protoc_insertion_point(field_set:smart3dmap.v1.UserInvitation.token)
}
inline std::string* UserInvitation::mutable_token() {
  // @@protoc_insertion_point(field_mutable:smart3dmap.v1.UserInvitation.token)
  return _internal_mutable_token();
}
inline const std::string& UserInvitation::_internal_token() const {
  return token_.Get();
}
inline void UserInvitation::_internal_set_token(const std::string& value) {
  
  token_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArena());
}
inline void UserInvitation::set_token(std::string&& value) {
  
  token_.Set(
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:smart3dmap.v1.UserInvitation.token)
}
inline void UserInvitation::set_token(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  token_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(value), GetArena());
  // @@protoc_insertion_point(field_set_char:smart3dmap.v1.UserInvitation.token)
}
inline void UserInvitation::set_token(const char* value,
    size_t size) {
  
  token_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:smart3dmap.v1.UserInvitation.token)
}
inline std::string* UserInvitation::_internal_mutable_token() {
  
  return token_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArena());
}
inline std::string* UserInvitation::release_token() {
  // @@protoc_insertion_point(field_release:smart3dmap.v1.UserInvitation.token)
  return token_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void UserInvitation::set_allocated_token(std::string* token) {
  if (token != nullptr) {
    
  } else {
    
  }
  token_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), token,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:smart3dmap.v1.UserInvitation.token)
}

// .smart3dmap.v1.User user = 2;
inline bool UserInvitation::_internal_has_user() const {
  return this != internal_default_instance() && user_ != nullptr;
}
inline bool UserInvitation::has_user() const {
  return _internal_has_user();
}
inline void UserInvitation::clear_user() {
  if (GetArena() == nullptr && user_ != nullptr) {
    delete user_;
  }
  user_ = nullptr;
}
inline const ::smart3dmap::v1::User& UserInvitation::_internal_user() const {
  const ::smart3dmap::v1::User* p = user_;
  return p != nullptr ? *p : reinterpret_cast<const ::smart3dmap::v1::User&>(
      ::smart3dmap::v1::_User_default_instance_);
}
inline const ::smart3dmap::v1::User& UserInvitation::user() const {
  // @@protoc_insertion_point(field_get:smart3dmap.v1.UserInvitation.user)
  return _internal_user();
}
inline void UserInvitation::unsafe_arena_set_allocated_user(
    ::smart3dmap::v1::User* user) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(user_);
  }
  user_ = user;
  if (user) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:smart3dmap.v1.UserInvitation.user)
}
inline ::smart3dmap::v1::User* UserInvitation::release_user() {
  
  ::smart3dmap::v1::User* temp = user_;
  user_ = nullptr;
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::smart3dmap::v1::User* UserInvitation::unsafe_arena_release_user() {
  // @@protoc_insertion_point(field_release:smart3dmap.v1.UserInvitation.user)
  
  ::smart3dmap::v1::User* temp = user_;
  user_ = nullptr;
  return temp;
}
inline ::smart3dmap::v1::User* UserInvitation::_internal_mutable_user() {
  
  if (user_ == nullptr) {
    auto* p = CreateMaybeMessage<::smart3dmap::v1::User>(GetArena());
    user_ = p;
  }
  return user_;
}
inline ::smart3dmap::v1::User* UserInvitation::mutable_user() {
  // @@protoc_insertion_point(field_mutable:smart3dmap.v1.UserInvitation.user)
  return _internal_mutable_user();
}
inline void UserInvitation::set_allocated_user(::smart3dmap::v1::User* user) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete user_;
  }
  if (user) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(user);
    if (message_arena != submessage_arena) {
      user = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, user, submessage_arena);
    }
    
  } else {
    
  }
  user_ = user;
  // @@protoc_insertion_point(field_set_allocated:smart3dmap.v1.UserInvitation.user)
}

// .google.protobuf.Timestamp createdAt = 3;
inline bool UserInvitation::_internal_has_createdat() const {
  return this != internal_default_instance() && createdat_ != nullptr;
}
inline bool UserInvitation::has_createdat() const {
  return _internal_has_createdat();
}
inline const PROTOBUF_NAMESPACE_ID::Timestamp& UserInvitation::_internal_createdat() const {
  const PROTOBUF_NAMESPACE_ID::Timestamp* p = createdat_;
  return p != nullptr ? *p : reinterpret_cast<const PROTOBUF_NAMESPACE_ID::Timestamp&>(
      PROTOBUF_NAMESPACE_ID::_Timestamp_default_instance_);
}
inline const PROTOBUF_NAMESPACE_ID::Timestamp& UserInvitation::createdat() const {
  // @@protoc_insertion_point(field_get:smart3dmap.v1.UserInvitation.createdAt)
  return _internal_createdat();
}
inline void UserInvitation::unsafe_arena_set_allocated_createdat(
    PROTOBUF_NAMESPACE_ID::Timestamp* createdat) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(createdat_);
  }
  createdat_ = createdat;
  if (createdat) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:smart3dmap.v1.UserInvitation.createdAt)
}
inline PROTOBUF_NAMESPACE_ID::Timestamp* UserInvitation::release_createdat() {
  
  PROTOBUF_NAMESPACE_ID::Timestamp* temp = createdat_;
  createdat_ = nullptr;
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline PROTOBUF_NAMESPACE_ID::Timestamp* UserInvitation::unsafe_arena_release_createdat() {
  // @@protoc_insertion_point(field_release:smart3dmap.v1.UserInvitation.createdAt)
  
  PROTOBUF_NAMESPACE_ID::Timestamp* temp = createdat_;
  createdat_ = nullptr;
  return temp;
}
inline PROTOBUF_NAMESPACE_ID::Timestamp* UserInvitation::_internal_mutable_createdat() {
  
  if (createdat_ == nullptr) {
    auto* p = CreateMaybeMessage<PROTOBUF_NAMESPACE_ID::Timestamp>(GetArena());
    createdat_ = p;
  }
  return createdat_;
}
inline PROTOBUF_NAMESPACE_ID::Timestamp* UserInvitation::mutable_createdat() {
  // @@protoc_insertion_point(field_mutable:smart3dmap.v1.UserInvitation.createdAt)
  return _internal_mutable_createdat();
}
inline void UserInvitation::set_allocated_createdat(PROTOBUF_NAMESPACE_ID::Timestamp* createdat) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(createdat_);
  }
  if (createdat) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(createdat)->GetArena();
    if (message_arena != submessage_arena) {
      createdat = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, createdat, submessage_arena);
    }
    
  } else {
    
  }
  createdat_ = createdat;
  // @@protoc_insertion_point(field_set_allocated:smart3dmap.v1.UserInvitation.createdAt)
}

// -------------------------------------------------------------------

// InviteUserRequest

// string name = 1;
inline void InviteUserRequest::clear_name() {
  name_.ClearToEmpty();
}
inline const std::string& InviteUserRequest::name() const {
  // @@protoc_insertion_point(field_get:smart3dmap.v1.InviteUserRequest.name)
  return _internal_name();
}
inline void InviteUserRequest::set_name(const std::string& value) {
  _internal_set_name(value);
  // @@protoc_insertion_point(field_set:smart3dmap.v1.InviteUserRequest.name)
}
inline std::string* InviteUserRequest::mutable_name() {
  // @@protoc_insertion_point(field_mutable:smart3dmap.v1.InviteUserRequest.name)
  return _internal_mutable_name();
}
inline const std::string& InviteUserRequest::_internal_name() const {
  return name_.Get();
}
inline void InviteUserRequest::_internal_set_name(const std::string& value) {
  
  name_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArena());
}
inline void InviteUserRequest::set_name(std::string&& value) {
  
  name_.Set(
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:smart3dmap.v1.InviteUserRequest.name)
}
inline void InviteUserRequest::set_name(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  name_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(value), GetArena());
  // @@protoc_insertion_point(field_set_char:smart3dmap.v1.InviteUserRequest.name)
}
inline void InviteUserRequest::set_name(const char* value,
    size_t size) {
  
  name_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:smart3dmap.v1.InviteUserRequest.name)
}
inline std::string* InviteUserRequest::_internal_mutable_name() {
  
  return name_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArena());
}
inline std::string* InviteUserRequest::release_name() {
  // @@protoc_insertion_point(field_release:smart3dmap.v1.InviteUserRequest.name)
  return name_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void InviteUserRequest::set_allocated_name(std::string* name) {
  if (name != nullptr) {
    
  } else {
    
  }
  name_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), name,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:smart3dmap.v1.InviteUserRequest.name)
}

// string email = 2;
inline void InviteUserRequest::clear_email() {
  email_.ClearToEmpty();
}
inline const std::string& InviteUserRequest::email() const {
  // @@protoc_insertion_point(field_get:smart3dmap.v1.InviteUserRequest.email)
  return _internal_email();
}
inline void InviteUserRequest::set_email(const std::string& value) {
  _internal_set_email(value);
  // @@protoc_insertion_point(field_set:smart3dmap.v1.InviteUserRequest.email)
}
inline std::string* InviteUserRequest::mutable_email() {
  // @@protoc_insertion_point(field_mutable:smart3dmap.v1.InviteUserRequest.email)
  return _internal_mutable_email();
}
inline const std::string& InviteUserRequest::_internal_email() const {
  return email_.Get();
}
inline void InviteUserRequest::_internal_set_email(const std::string& value) {
  
  email_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArena());
}
inline void InviteUserRequest::set_email(std::string&& value) {
  
  email_.Set(
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:smart3dmap.v1.InviteUserRequest.email)
}
inline void InviteUserRequest::set_email(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  email_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(value), GetArena());
  // @@protoc_insertion_point(field_set_char:smart3dmap.v1.InviteUserRequest.email)
}
inline void InviteUserRequest::set_email(const char* value,
    size_t size) {
  
  email_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:smart3dmap.v1.InviteUserRequest.email)
}
inline std::string* InviteUserRequest::_internal_mutable_email() {
  
  return email_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArena());
}
inline std::string* InviteUserRequest::release_email() {
  // @@protoc_insertion_point(field_release:smart3dmap.v1.InviteUserRequest.email)
  return email_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void InviteUserRequest::set_allocated_email(std::string* email) {
  if (email != nullptr) {
    
  } else {
    
  }
  email_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), email,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:smart3dmap.v1.InviteUserRequest.email)
}

// string phone = 3;
inline void InviteUserRequest::clear_phone() {
  phone_.ClearToEmpty();
}
inline const std::string& InviteUserRequest::phone() const {
  // @@protoc_insertion_point(field_get:smart3dmap.v1.InviteUserRequest.phone)
  return _internal_phone();
}
inline void InviteUserRequest::set_phone(const std::string& value) {
  _internal_set_phone(value);
  // @@protoc_insertion_point(field_set:smart3dmap.v1.InviteUserRequest.phone)
}
inline std::string* InviteUserRequest::mutable_phone() {
  // @@protoc_insertion_point(field_mutable:smart3dmap.v1.InviteUserRequest.phone)
  return _internal_mutable_phone();
}
inline const std::string& InviteUserRequest::_internal_phone() const {
  return phone_.Get();
}
inline void InviteUserRequest::_internal_set_phone(const std::string& value) {
  
  phone_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArena());
}
inline void InviteUserRequest::set_phone(std::string&& value) {
  
  phone_.Set(
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:smart3dmap.v1.InviteUserRequest.phone)
}
inline void InviteUserRequest::set_phone(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  phone_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(value), GetArena());
  // @@protoc_insertion_point(field_set_char:smart3dmap.v1.InviteUserRequest.phone)
}
inline void InviteUserRequest::set_phone(const char* value,
    size_t size) {
  
  phone_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:smart3dmap.v1.InviteUserRequest.phone)
}
inline std::string* InviteUserRequest::_internal_mutable_phone() {
  
  return phone_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArena());
}
inline std::string* InviteUserRequest::release_phone() {
  // @@protoc_insertion_point(field_release:smart3dmap.v1.InviteUserRequest.phone)
  return phone_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void InviteUserRequest::set_allocated_phone(std::string* phone) {
  if (phone != nullptr) {
    
  } else {
    
  }
  phone_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), phone,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:smart3dmap.v1.InviteUserRequest.phone)
}

// -------------------------------------------------------------------

// ActiveUserByManagerRequest

// int32 user_id = 1;
inline void ActiveUserByManagerRequest::clear_user_id() {
  user_id_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 ActiveUserByManagerRequest::_internal_user_id() const {
  return user_id_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 ActiveUserByManagerRequest::user_id() const {
  // @@protoc_insertion_point(field_get:smart3dmap.v1.ActiveUserByManagerRequest.user_id)
  return _internal_user_id();
}
inline void ActiveUserByManagerRequest::_internal_set_user_id(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  user_id_ = value;
}
inline void ActiveUserByManagerRequest::set_user_id(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_user_id(value);
  // @@protoc_insertion_point(field_set:smart3dmap.v1.ActiveUserByManagerRequest.user_id)
}

// -------------------------------------------------------------------

// ActiveUserRequest

// int32 user_id = 1;
inline void ActiveUserRequest::clear_user_id() {
  user_id_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 ActiveUserRequest::_internal_user_id() const {
  return user_id_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 ActiveUserRequest::user_id() const {
  // @@protoc_insertion_point(field_get:smart3dmap.v1.ActiveUserRequest.user_id)
  return _internal_user_id();
}
inline void ActiveUserRequest::_internal_set_user_id(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  user_id_ = value;
}
inline void ActiveUserRequest::set_user_id(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_user_id(value);
  // @@protoc_insertion_point(field_set:smart3dmap.v1.ActiveUserRequest.user_id)
}

// string password = 2;
inline void ActiveUserRequest::clear_password() {
  password_.ClearToEmpty();
}
inline const std::string& ActiveUserRequest::password() const {
  // @@protoc_insertion_point(field_get:smart3dmap.v1.ActiveUserRequest.password)
  return _internal_password();
}
inline void ActiveUserRequest::set_password(const std::string& value) {
  _internal_set_password(value);
  // @@protoc_insertion_point(field_set:smart3dmap.v1.ActiveUserRequest.password)
}
inline std::string* ActiveUserRequest::mutable_password() {
  // @@protoc_insertion_point(field_mutable:smart3dmap.v1.ActiveUserRequest.password)
  return _internal_mutable_password();
}
inline const std::string& ActiveUserRequest::_internal_password() const {
  return password_.Get();
}
inline void ActiveUserRequest::_internal_set_password(const std::string& value) {
  
  password_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArena());
}
inline void ActiveUserRequest::set_password(std::string&& value) {
  
  password_.Set(
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:smart3dmap.v1.ActiveUserRequest.password)
}
inline void ActiveUserRequest::set_password(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  password_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(value), GetArena());
  // @@protoc_insertion_point(field_set_char:smart3dmap.v1.ActiveUserRequest.password)
}
inline void ActiveUserRequest::set_password(const char* value,
    size_t size) {
  
  password_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:smart3dmap.v1.ActiveUserRequest.password)
}
inline std::string* ActiveUserRequest::_internal_mutable_password() {
  
  return password_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArena());
}
inline std::string* ActiveUserRequest::release_password() {
  // @@protoc_insertion_point(field_release:smart3dmap.v1.ActiveUserRequest.password)
  return password_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void ActiveUserRequest::set_allocated_password(std::string* password) {
  if (password != nullptr) {
    
  } else {
    
  }
  password_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), password,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:smart3dmap.v1.ActiveUserRequest.password)
}

// string invitation_token = 3;
inline void ActiveUserRequest::clear_invitation_token() {
  invitation_token_.ClearToEmpty();
}
inline const std::string& ActiveUserRequest::invitation_token() const {
  // @@protoc_insertion_point(field_get:smart3dmap.v1.ActiveUserRequest.invitation_token)
  return _internal_invitation_token();
}
inline void ActiveUserRequest::set_invitation_token(const std::string& value) {
  _internal_set_invitation_token(value);
  // @@protoc_insertion_point(field_set:smart3dmap.v1.ActiveUserRequest.invitation_token)
}
inline std::string* ActiveUserRequest::mutable_invitation_token() {
  // @@protoc_insertion_point(field_mutable:smart3dmap.v1.ActiveUserRequest.invitation_token)
  return _internal_mutable_invitation_token();
}
inline const std::string& ActiveUserRequest::_internal_invitation_token() const {
  return invitation_token_.Get();
}
inline void ActiveUserRequest::_internal_set_invitation_token(const std::string& value) {
  
  invitation_token_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArena());
}
inline void ActiveUserRequest::set_invitation_token(std::string&& value) {
  
  invitation_token_.Set(
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:smart3dmap.v1.ActiveUserRequest.invitation_token)
}
inline void ActiveUserRequest::set_invitation_token(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  invitation_token_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(value), GetArena());
  // @@protoc_insertion_point(field_set_char:smart3dmap.v1.ActiveUserRequest.invitation_token)
}
inline void ActiveUserRequest::set_invitation_token(const char* value,
    size_t size) {
  
  invitation_token_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:smart3dmap.v1.ActiveUserRequest.invitation_token)
}
inline std::string* ActiveUserRequest::_internal_mutable_invitation_token() {
  
  return invitation_token_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArena());
}
inline std::string* ActiveUserRequest::release_invitation_token() {
  // @@protoc_insertion_point(field_release:smart3dmap.v1.ActiveUserRequest.invitation_token)
  return invitation_token_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void ActiveUserRequest::set_allocated_invitation_token(std::string* invitation_token) {
  if (invitation_token != nullptr) {
    
  } else {
    
  }
  invitation_token_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), invitation_token,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:smart3dmap.v1.ActiveUserRequest.invitation_token)
}

// -------------------------------------------------------------------

// ListUsersRequest

// .smart3dmap.v1.Pagination pagination = 1;
inline bool ListUsersRequest::_internal_has_pagination() const {
  return this != internal_default_instance() && pagination_ != nullptr;
}
inline bool ListUsersRequest::has_pagination() const {
  return _internal_has_pagination();
}
inline const ::smart3dmap::v1::Pagination& ListUsersRequest::_internal_pagination() const {
  const ::smart3dmap::v1::Pagination* p = pagination_;
  return p != nullptr ? *p : reinterpret_cast<const ::smart3dmap::v1::Pagination&>(
      ::smart3dmap::v1::_Pagination_default_instance_);
}
inline const ::smart3dmap::v1::Pagination& ListUsersRequest::pagination() const {
  // @@protoc_insertion_point(field_get:smart3dmap.v1.ListUsersRequest.pagination)
  return _internal_pagination();
}
inline void ListUsersRequest::unsafe_arena_set_allocated_pagination(
    ::smart3dmap::v1::Pagination* pagination) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(pagination_);
  }
  pagination_ = pagination;
  if (pagination) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:smart3dmap.v1.ListUsersRequest.pagination)
}
inline ::smart3dmap::v1::Pagination* ListUsersRequest::release_pagination() {
  
  ::smart3dmap::v1::Pagination* temp = pagination_;
  pagination_ = nullptr;
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::smart3dmap::v1::Pagination* ListUsersRequest::unsafe_arena_release_pagination() {
  // @@protoc_insertion_point(field_release:smart3dmap.v1.ListUsersRequest.pagination)
  
  ::smart3dmap::v1::Pagination* temp = pagination_;
  pagination_ = nullptr;
  return temp;
}
inline ::smart3dmap::v1::Pagination* ListUsersRequest::_internal_mutable_pagination() {
  
  if (pagination_ == nullptr) {
    auto* p = CreateMaybeMessage<::smart3dmap::v1::Pagination>(GetArena());
    pagination_ = p;
  }
  return pagination_;
}
inline ::smart3dmap::v1::Pagination* ListUsersRequest::mutable_pagination() {
  // @@protoc_insertion_point(field_mutable:smart3dmap.v1.ListUsersRequest.pagination)
  return _internal_mutable_pagination();
}
inline void ListUsersRequest::set_allocated_pagination(::smart3dmap::v1::Pagination* pagination) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(pagination_);
  }
  if (pagination) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(pagination)->GetArena();
    if (message_arena != submessage_arena) {
      pagination = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, pagination, submessage_arena);
    }
    
  } else {
    
  }
  pagination_ = pagination;
  // @@protoc_insertion_point(field_set_allocated:smart3dmap.v1.ListUsersRequest.pagination)
}

// -------------------------------------------------------------------

// ListTeamsRequest

// .smart3dmap.v1.Pagination pagination = 1;
inline bool ListTeamsRequest::_internal_has_pagination() const {
  return this != internal_default_instance() && pagination_ != nullptr;
}
inline bool ListTeamsRequest::has_pagination() const {
  return _internal_has_pagination();
}
inline const ::smart3dmap::v1::Pagination& ListTeamsRequest::_internal_pagination() const {
  const ::smart3dmap::v1::Pagination* p = pagination_;
  return p != nullptr ? *p : reinterpret_cast<const ::smart3dmap::v1::Pagination&>(
      ::smart3dmap::v1::_Pagination_default_instance_);
}
inline const ::smart3dmap::v1::Pagination& ListTeamsRequest::pagination() const {
  // @@protoc_insertion_point(field_get:smart3dmap.v1.ListTeamsRequest.pagination)
  return _internal_pagination();
}
inline void ListTeamsRequest::unsafe_arena_set_allocated_pagination(
    ::smart3dmap::v1::Pagination* pagination) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(pagination_);
  }
  pagination_ = pagination;
  if (pagination) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:smart3dmap.v1.ListTeamsRequest.pagination)
}
inline ::smart3dmap::v1::Pagination* ListTeamsRequest::release_pagination() {
  
  ::smart3dmap::v1::Pagination* temp = pagination_;
  pagination_ = nullptr;
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::smart3dmap::v1::Pagination* ListTeamsRequest::unsafe_arena_release_pagination() {
  // @@protoc_insertion_point(field_release:smart3dmap.v1.ListTeamsRequest.pagination)
  
  ::smart3dmap::v1::Pagination* temp = pagination_;
  pagination_ = nullptr;
  return temp;
}
inline ::smart3dmap::v1::Pagination* ListTeamsRequest::_internal_mutable_pagination() {
  
  if (pagination_ == nullptr) {
    auto* p = CreateMaybeMessage<::smart3dmap::v1::Pagination>(GetArena());
    pagination_ = p;
  }
  return pagination_;
}
inline ::smart3dmap::v1::Pagination* ListTeamsRequest::mutable_pagination() {
  // @@protoc_insertion_point(field_mutable:smart3dmap.v1.ListTeamsRequest.pagination)
  return _internal_mutable_pagination();
}
inline void ListTeamsRequest::set_allocated_pagination(::smart3dmap::v1::Pagination* pagination) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(pagination_);
  }
  if (pagination) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(pagination)->GetArena();
    if (message_arena != submessage_arena) {
      pagination = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, pagination, submessage_arena);
    }
    
  } else {
    
  }
  pagination_ = pagination;
  // @@protoc_insertion_point(field_set_allocated:smart3dmap.v1.ListTeamsRequest.pagination)
}

// -------------------------------------------------------------------

// NewTicketRequest

// -------------------------------------------------------------------

// GetUserInvitationRequest

// string token = 1;
inline void GetUserInvitationRequest::clear_token() {
  token_.ClearToEmpty();
}
inline const std::string& GetUserInvitationRequest::token() const {
  // @@protoc_insertion_point(field_get:smart3dmap.v1.GetUserInvitationRequest.token)
  return _internal_token();
}
inline void GetUserInvitationRequest::set_token(const std::string& value) {
  _internal_set_token(value);
  // @@protoc_insertion_point(field_set:smart3dmap.v1.GetUserInvitationRequest.token)
}
inline std::string* GetUserInvitationRequest::mutable_token() {
  // @@protoc_insertion_point(field_mutable:smart3dmap.v1.GetUserInvitationRequest.token)
  return _internal_mutable_token();
}
inline const std::string& GetUserInvitationRequest::_internal_token() const {
  return token_.Get();
}
inline void GetUserInvitationRequest::_internal_set_token(const std::string& value) {
  
  token_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArena());
}
inline void GetUserInvitationRequest::set_token(std::string&& value) {
  
  token_.Set(
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:smart3dmap.v1.GetUserInvitationRequest.token)
}
inline void GetUserInvitationRequest::set_token(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  token_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(value), GetArena());
  // @@protoc_insertion_point(field_set_char:smart3dmap.v1.GetUserInvitationRequest.token)
}
inline void GetUserInvitationRequest::set_token(const char* value,
    size_t size) {
  
  token_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:smart3dmap.v1.GetUserInvitationRequest.token)
}
inline std::string* GetUserInvitationRequest::_internal_mutable_token() {
  
  return token_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArena());
}
inline std::string* GetUserInvitationRequest::release_token() {
  // @@protoc_insertion_point(field_release:smart3dmap.v1.GetUserInvitationRequest.token)
  return token_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void GetUserInvitationRequest::set_allocated_token(std::string* token) {
  if (token != nullptr) {
    
  } else {
    
  }
  token_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), token,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:smart3dmap.v1.GetUserInvitationRequest.token)
}

// -------------------------------------------------------------------

// GetUserRequest

// int32 id = 1;
inline bool GetUserRequest::_internal_has_id() const {
  bool value = (_has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline bool GetUserRequest::has_id() const {
  return _internal_has_id();
}
inline void GetUserRequest::clear_id() {
  id_ = 0;
  _has_bits_[0] &= ~0x00000002u;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 GetUserRequest::_internal_id() const {
  return id_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 GetUserRequest::id() const {
  // @@protoc_insertion_point(field_get:smart3dmap.v1.GetUserRequest.id)
  return _internal_id();
}
inline void GetUserRequest::_internal_set_id(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _has_bits_[0] |= 0x00000002u;
  id_ = value;
}
inline void GetUserRequest::set_id(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_id(value);
  // @@protoc_insertion_point(field_set:smart3dmap.v1.GetUserRequest.id)
}

// string email = 2;
inline bool GetUserRequest::_internal_has_email() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool GetUserRequest::has_email() const {
  return _internal_has_email();
}
inline void GetUserRequest::clear_email() {
  email_.ClearToEmpty();
  _has_bits_[0] &= ~0x00000001u;
}
inline const std::string& GetUserRequest::email() const {
  // @@protoc_insertion_point(field_get:smart3dmap.v1.GetUserRequest.email)
  return _internal_email();
}
inline void GetUserRequest::set_email(const std::string& value) {
  _internal_set_email(value);
  // @@protoc_insertion_point(field_set:smart3dmap.v1.GetUserRequest.email)
}
inline std::string* GetUserRequest::mutable_email() {
  // @@protoc_insertion_point(field_mutable:smart3dmap.v1.GetUserRequest.email)
  return _internal_mutable_email();
}
inline const std::string& GetUserRequest::_internal_email() const {
  return email_.Get();
}
inline void GetUserRequest::_internal_set_email(const std::string& value) {
  _has_bits_[0] |= 0x00000001u;
  email_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArena());
}
inline void GetUserRequest::set_email(std::string&& value) {
  _has_bits_[0] |= 0x00000001u;
  email_.Set(
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:smart3dmap.v1.GetUserRequest.email)
}
inline void GetUserRequest::set_email(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  _has_bits_[0] |= 0x00000001u;
  email_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(value), GetArena());
  // @@protoc_insertion_point(field_set_char:smart3dmap.v1.GetUserRequest.email)
}
inline void GetUserRequest::set_email(const char* value,
    size_t size) {
  _has_bits_[0] |= 0x00000001u;
  email_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:smart3dmap.v1.GetUserRequest.email)
}
inline std::string* GetUserRequest::_internal_mutable_email() {
  _has_bits_[0] |= 0x00000001u;
  return email_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArena());
}
inline std::string* GetUserRequest::release_email() {
  // @@protoc_insertion_point(field_release:smart3dmap.v1.GetUserRequest.email)
  if (!_internal_has_email()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000001u;
  return email_.ReleaseNonDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void GetUserRequest::set_allocated_email(std::string* email) {
  if (email != nullptr) {
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  email_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), email,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:smart3dmap.v1.GetUserRequest.email)
}

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// UpdateUserRequest

// int32 id = 1;
inline void UpdateUserRequest::clear_id() {
  id_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 UpdateUserRequest::_internal_id() const {
  return id_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 UpdateUserRequest::id() const {
  // @@protoc_insertion_point(field_get:smart3dmap.v1.UpdateUserRequest.id)
  return _internal_id();
}
inline void UpdateUserRequest::_internal_set_id(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  id_ = value;
}
inline void UpdateUserRequest::set_id(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_id(value);
  // @@protoc_insertion_point(field_set:smart3dmap.v1.UpdateUserRequest.id)
}

// string name = 2;
inline bool UpdateUserRequest::_internal_has_name() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool UpdateUserRequest::has_name() const {
  return _internal_has_name();
}
inline void UpdateUserRequest::clear_name() {
  name_.ClearToEmpty();
  _has_bits_[0] &= ~0x00000001u;
}
inline const std::string& UpdateUserRequest::name() const {
  // @@protoc_insertion_point(field_get:smart3dmap.v1.UpdateUserRequest.name)
  return _internal_name();
}
inline void UpdateUserRequest::set_name(const std::string& value) {
  _internal_set_name(value);
  // @@protoc_insertion_point(field_set:smart3dmap.v1.UpdateUserRequest.name)
}
inline std::string* UpdateUserRequest::mutable_name() {
  // @@protoc_insertion_point(field_mutable:smart3dmap.v1.UpdateUserRequest.name)
  return _internal_mutable_name();
}
inline const std::string& UpdateUserRequest::_internal_name() const {
  return name_.Get();
}
inline void UpdateUserRequest::_internal_set_name(const std::string& value) {
  _has_bits_[0] |= 0x00000001u;
  name_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArena());
}
inline void UpdateUserRequest::set_name(std::string&& value) {
  _has_bits_[0] |= 0x00000001u;
  name_.Set(
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:smart3dmap.v1.UpdateUserRequest.name)
}
inline void UpdateUserRequest::set_name(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  _has_bits_[0] |= 0x00000001u;
  name_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(value), GetArena());
  // @@protoc_insertion_point(field_set_char:smart3dmap.v1.UpdateUserRequest.name)
}
inline void UpdateUserRequest::set_name(const char* value,
    size_t size) {
  _has_bits_[0] |= 0x00000001u;
  name_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:smart3dmap.v1.UpdateUserRequest.name)
}
inline std::string* UpdateUserRequest::_internal_mutable_name() {
  _has_bits_[0] |= 0x00000001u;
  return name_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArena());
}
inline std::string* UpdateUserRequest::release_name() {
  // @@protoc_insertion_point(field_release:smart3dmap.v1.UpdateUserRequest.name)
  if (!_internal_has_name()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000001u;
  return name_.ReleaseNonDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void UpdateUserRequest::set_allocated_name(std::string* name) {
  if (name != nullptr) {
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  name_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), name,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:smart3dmap.v1.UpdateUserRequest.name)
}

// string phone = 3;
inline bool UpdateUserRequest::_internal_has_phone() const {
  bool value = (_has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline bool UpdateUserRequest::has_phone() const {
  return _internal_has_phone();
}
inline void UpdateUserRequest::clear_phone() {
  phone_.ClearToEmpty();
  _has_bits_[0] &= ~0x00000002u;
}
inline const std::string& UpdateUserRequest::phone() const {
  // @@protoc_insertion_point(field_get:smart3dmap.v1.UpdateUserRequest.phone)
  return _internal_phone();
}
inline void UpdateUserRequest::set_phone(const std::string& value) {
  _internal_set_phone(value);
  // @@protoc_insertion_point(field_set:smart3dmap.v1.UpdateUserRequest.phone)
}
inline std::string* UpdateUserRequest::mutable_phone() {
  // @@protoc_insertion_point(field_mutable:smart3dmap.v1.UpdateUserRequest.phone)
  return _internal_mutable_phone();
}
inline const std::string& UpdateUserRequest::_internal_phone() const {
  return phone_.Get();
}
inline void UpdateUserRequest::_internal_set_phone(const std::string& value) {
  _has_bits_[0] |= 0x00000002u;
  phone_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArena());
}
inline void UpdateUserRequest::set_phone(std::string&& value) {
  _has_bits_[0] |= 0x00000002u;
  phone_.Set(
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:smart3dmap.v1.UpdateUserRequest.phone)
}
inline void UpdateUserRequest::set_phone(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  _has_bits_[0] |= 0x00000002u;
  phone_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(value), GetArena());
  // @@protoc_insertion_point(field_set_char:smart3dmap.v1.UpdateUserRequest.phone)
}
inline void UpdateUserRequest::set_phone(const char* value,
    size_t size) {
  _has_bits_[0] |= 0x00000002u;
  phone_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:smart3dmap.v1.UpdateUserRequest.phone)
}
inline std::string* UpdateUserRequest::_internal_mutable_phone() {
  _has_bits_[0] |= 0x00000002u;
  return phone_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArena());
}
inline std::string* UpdateUserRequest::release_phone() {
  // @@protoc_insertion_point(field_release:smart3dmap.v1.UpdateUserRequest.phone)
  if (!_internal_has_phone()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000002u;
  return phone_.ReleaseNonDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void UpdateUserRequest::set_allocated_phone(std::string* phone) {
  if (phone != nullptr) {
    _has_bits_[0] |= 0x00000002u;
  } else {
    _has_bits_[0] &= ~0x00000002u;
  }
  phone_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), phone,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:smart3dmap.v1.UpdateUserRequest.phone)
}

// .smart3dmap.v1.User.State state = 4;
inline bool UpdateUserRequest::_internal_has_state() const {
  bool value = (_has_bits_[0] & 0x00000004u) != 0;
  return value;
}
inline bool UpdateUserRequest::has_state() const {
  return _internal_has_state();
}
inline void UpdateUserRequest::clear_state() {
  state_ = 0;
  _has_bits_[0] &= ~0x00000004u;
}
inline ::smart3dmap::v1::User_State UpdateUserRequest::_internal_state() const {
  return static_cast< ::smart3dmap::v1::User_State >(state_);
}
inline ::smart3dmap::v1::User_State UpdateUserRequest::state() const {
  // @@protoc_insertion_point(field_get:smart3dmap.v1.UpdateUserRequest.state)
  return _internal_state();
}
inline void UpdateUserRequest::_internal_set_state(::smart3dmap::v1::User_State value) {
  _has_bits_[0] |= 0x00000004u;
  state_ = value;
}
inline void UpdateUserRequest::set_state(::smart3dmap::v1::User_State value) {
  _internal_set_state(value);
  // @@protoc_insertion_point(field_set:smart3dmap.v1.UpdateUserRequest.state)
}

// map<string, string> update_attributes = 5;
inline int UpdateUserRequest::_internal_update_attributes_size() const {
  return update_attributes_.size();
}
inline int UpdateUserRequest::update_attributes_size() const {
  return _internal_update_attributes_size();
}
inline void UpdateUserRequest::clear_update_attributes() {
  update_attributes_.Clear();
}
inline const ::PROTOBUF_NAMESPACE_ID::Map< std::string, std::string >&
UpdateUserRequest::_internal_update_attributes() const {
  return update_attributes_.GetMap();
}
inline const ::PROTOBUF_NAMESPACE_ID::Map< std::string, std::string >&
UpdateUserRequest::update_attributes() const {
  // @@protoc_insertion_point(field_map:smart3dmap.v1.UpdateUserRequest.update_attributes)
  return _internal_update_attributes();
}
inline ::PROTOBUF_NAMESPACE_ID::Map< std::string, std::string >*
UpdateUserRequest::_internal_mutable_update_attributes() {
  return update_attributes_.MutableMap();
}
inline ::PROTOBUF_NAMESPACE_ID::Map< std::string, std::string >*
UpdateUserRequest::mutable_update_attributes() {
  // @@protoc_insertion_point(field_mutable_map:smart3dmap.v1.UpdateUserRequest.update_attributes)
  return _internal_mutable_update_attributes();
}

// -------------------------------------------------------------------

// RegisterUserRequest_Info

// string attribute = 1;
inline void RegisterUserRequest_Info::clear_attribute() {
  attribute_.ClearToEmpty();
}
inline const std::string& RegisterUserRequest_Info::attribute() const {
  // @@protoc_insertion_point(field_get:smart3dmap.v1.RegisterUserRequest.Info.attribute)
  return _internal_attribute();
}
inline void RegisterUserRequest_Info::set_attribute(const std::string& value) {
  _internal_set_attribute(value);
  // @@protoc_insertion_point(field_set:smart3dmap.v1.RegisterUserRequest.Info.attribute)
}
inline std::string* RegisterUserRequest_Info::mutable_attribute() {
  // @@protoc_insertion_point(field_mutable:smart3dmap.v1.RegisterUserRequest.Info.attribute)
  return _internal_mutable_attribute();
}
inline const std::string& RegisterUserRequest_Info::_internal_attribute() const {
  return attribute_.Get();
}
inline void RegisterUserRequest_Info::_internal_set_attribute(const std::string& value) {
  
  attribute_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArena());
}
inline void RegisterUserRequest_Info::set_attribute(std::string&& value) {
  
  attribute_.Set(
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:smart3dmap.v1.RegisterUserRequest.Info.attribute)
}
inline void RegisterUserRequest_Info::set_attribute(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  attribute_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(value), GetArena());
  // @@protoc_insertion_point(field_set_char:smart3dmap.v1.RegisterUserRequest.Info.attribute)
}
inline void RegisterUserRequest_Info::set_attribute(const char* value,
    size_t size) {
  
  attribute_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:smart3dmap.v1.RegisterUserRequest.Info.attribute)
}
inline std::string* RegisterUserRequest_Info::_internal_mutable_attribute() {
  
  return attribute_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArena());
}
inline std::string* RegisterUserRequest_Info::release_attribute() {
  // @@protoc_insertion_point(field_release:smart3dmap.v1.RegisterUserRequest.Info.attribute)
  return attribute_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void RegisterUserRequest_Info::set_allocated_attribute(std::string* attribute) {
  if (attribute != nullptr) {
    
  } else {
    
  }
  attribute_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), attribute,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:smart3dmap.v1.RegisterUserRequest.Info.attribute)
}

// string value = 2;
inline void RegisterUserRequest_Info::clear_value() {
  value_.ClearToEmpty();
}
inline const std::string& RegisterUserRequest_Info::value() const {
  // @@protoc_insertion_point(field_get:smart3dmap.v1.RegisterUserRequest.Info.value)
  return _internal_value();
}
inline void RegisterUserRequest_Info::set_value(const std::string& value) {
  _internal_set_value(value);
  // @@protoc_insertion_point(field_set:smart3dmap.v1.RegisterUserRequest.Info.value)
}
inline std::string* RegisterUserRequest_Info::mutable_value() {
  // @@protoc_insertion_point(field_mutable:smart3dmap.v1.RegisterUserRequest.Info.value)
  return _internal_mutable_value();
}
inline const std::string& RegisterUserRequest_Info::_internal_value() const {
  return value_.Get();
}
inline void RegisterUserRequest_Info::_internal_set_value(const std::string& value) {
  
  value_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArena());
}
inline void RegisterUserRequest_Info::set_value(std::string&& value) {
  
  value_.Set(
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:smart3dmap.v1.RegisterUserRequest.Info.value)
}
inline void RegisterUserRequest_Info::set_value(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  value_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(value), GetArena());
  // @@protoc_insertion_point(field_set_char:smart3dmap.v1.RegisterUserRequest.Info.value)
}
inline void RegisterUserRequest_Info::set_value(const char* value,
    size_t size) {
  
  value_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:smart3dmap.v1.RegisterUserRequest.Info.value)
}
inline std::string* RegisterUserRequest_Info::_internal_mutable_value() {
  
  return value_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArena());
}
inline std::string* RegisterUserRequest_Info::release_value() {
  // @@protoc_insertion_point(field_release:smart3dmap.v1.RegisterUserRequest.Info.value)
  return value_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void RegisterUserRequest_Info::set_allocated_value(std::string* value) {
  if (value != nullptr) {
    
  } else {
    
  }
  value_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:smart3dmap.v1.RegisterUserRequest.Info.value)
}

// -------------------------------------------------------------------

// RegisterUserRequest

// string name = 1;
inline void RegisterUserRequest::clear_name() {
  name_.ClearToEmpty();
}
inline const std::string& RegisterUserRequest::name() const {
  // @@protoc_insertion_point(field_get:smart3dmap.v1.RegisterUserRequest.name)
  return _internal_name();
}
inline void RegisterUserRequest::set_name(const std::string& value) {
  _internal_set_name(value);
  // @@protoc_insertion_point(field_set:smart3dmap.v1.RegisterUserRequest.name)
}
inline std::string* RegisterUserRequest::mutable_name() {
  // @@protoc_insertion_point(field_mutable:smart3dmap.v1.RegisterUserRequest.name)
  return _internal_mutable_name();
}
inline const std::string& RegisterUserRequest::_internal_name() const {
  return name_.Get();
}
inline void RegisterUserRequest::_internal_set_name(const std::string& value) {
  
  name_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArena());
}
inline void RegisterUserRequest::set_name(std::string&& value) {
  
  name_.Set(
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:smart3dmap.v1.RegisterUserRequest.name)
}
inline void RegisterUserRequest::set_name(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  name_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(value), GetArena());
  // @@protoc_insertion_point(field_set_char:smart3dmap.v1.RegisterUserRequest.name)
}
inline void RegisterUserRequest::set_name(const char* value,
    size_t size) {
  
  name_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:smart3dmap.v1.RegisterUserRequest.name)
}
inline std::string* RegisterUserRequest::_internal_mutable_name() {
  
  return name_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArena());
}
inline std::string* RegisterUserRequest::release_name() {
  // @@protoc_insertion_point(field_release:smart3dmap.v1.RegisterUserRequest.name)
  return name_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void RegisterUserRequest::set_allocated_name(std::string* name) {
  if (name != nullptr) {
    
  } else {
    
  }
  name_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), name,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:smart3dmap.v1.RegisterUserRequest.name)
}

// string email = 2;
inline void RegisterUserRequest::clear_email() {
  email_.ClearToEmpty();
}
inline const std::string& RegisterUserRequest::email() const {
  // @@protoc_insertion_point(field_get:smart3dmap.v1.RegisterUserRequest.email)
  return _internal_email();
}
inline void RegisterUserRequest::set_email(const std::string& value) {
  _internal_set_email(value);
  // @@protoc_insertion_point(field_set:smart3dmap.v1.RegisterUserRequest.email)
}
inline std::string* RegisterUserRequest::mutable_email() {
  // @@protoc_insertion_point(field_mutable:smart3dmap.v1.RegisterUserRequest.email)
  return _internal_mutable_email();
}
inline const std::string& RegisterUserRequest::_internal_email() const {
  return email_.Get();
}
inline void RegisterUserRequest::_internal_set_email(const std::string& value) {
  
  email_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArena());
}
inline void RegisterUserRequest::set_email(std::string&& value) {
  
  email_.Set(
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:smart3dmap.v1.RegisterUserRequest.email)
}
inline void RegisterUserRequest::set_email(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  email_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(value), GetArena());
  // @@protoc_insertion_point(field_set_char:smart3dmap.v1.RegisterUserRequest.email)
}
inline void RegisterUserRequest::set_email(const char* value,
    size_t size) {
  
  email_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:smart3dmap.v1.RegisterUserRequest.email)
}
inline std::string* RegisterUserRequest::_internal_mutable_email() {
  
  return email_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArena());
}
inline std::string* RegisterUserRequest::release_email() {
  // @@protoc_insertion_point(field_release:smart3dmap.v1.RegisterUserRequest.email)
  return email_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void RegisterUserRequest::set_allocated_email(std::string* email) {
  if (email != nullptr) {
    
  } else {
    
  }
  email_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), email,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:smart3dmap.v1.RegisterUserRequest.email)
}

// string phone = 3;
inline void RegisterUserRequest::clear_phone() {
  phone_.ClearToEmpty();
}
inline const std::string& RegisterUserRequest::phone() const {
  // @@protoc_insertion_point(field_get:smart3dmap.v1.RegisterUserRequest.phone)
  return _internal_phone();
}
inline void RegisterUserRequest::set_phone(const std::string& value) {
  _internal_set_phone(value);
  // @@protoc_insertion_point(field_set:smart3dmap.v1.RegisterUserRequest.phone)
}
inline std::string* RegisterUserRequest::mutable_phone() {
  // @@protoc_insertion_point(field_mutable:smart3dmap.v1.RegisterUserRequest.phone)
  return _internal_mutable_phone();
}
inline const std::string& RegisterUserRequest::_internal_phone() const {
  return phone_.Get();
}
inline void RegisterUserRequest::_internal_set_phone(const std::string& value) {
  
  phone_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArena());
}
inline void RegisterUserRequest::set_phone(std::string&& value) {
  
  phone_.Set(
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:smart3dmap.v1.RegisterUserRequest.phone)
}
inline void RegisterUserRequest::set_phone(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  phone_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(value), GetArena());
  // @@protoc_insertion_point(field_set_char:smart3dmap.v1.RegisterUserRequest.phone)
}
inline void RegisterUserRequest::set_phone(const char* value,
    size_t size) {
  
  phone_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:smart3dmap.v1.RegisterUserRequest.phone)
}
inline std::string* RegisterUserRequest::_internal_mutable_phone() {
  
  return phone_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArena());
}
inline std::string* RegisterUserRequest::release_phone() {
  // @@protoc_insertion_point(field_release:smart3dmap.v1.RegisterUserRequest.phone)
  return phone_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void RegisterUserRequest::set_allocated_phone(std::string* phone) {
  if (phone != nullptr) {
    
  } else {
    
  }
  phone_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), phone,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:smart3dmap.v1.RegisterUserRequest.phone)
}

// string password = 4;
inline void RegisterUserRequest::clear_password() {
  password_.ClearToEmpty();
}
inline const std::string& RegisterUserRequest::password() const {
  // @@protoc_insertion_point(field_get:smart3dmap.v1.RegisterUserRequest.password)
  return _internal_password();
}
inline void RegisterUserRequest::set_password(const std::string& value) {
  _internal_set_password(value);
  // @@protoc_insertion_point(field_set:smart3dmap.v1.RegisterUserRequest.password)
}
inline std::string* RegisterUserRequest::mutable_password() {
  // @@protoc_insertion_point(field_mutable:smart3dmap.v1.RegisterUserRequest.password)
  return _internal_mutable_password();
}
inline const std::string& RegisterUserRequest::_internal_password() const {
  return password_.Get();
}
inline void RegisterUserRequest::_internal_set_password(const std::string& value) {
  
  password_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArena());
}
inline void RegisterUserRequest::set_password(std::string&& value) {
  
  password_.Set(
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:smart3dmap.v1.RegisterUserRequest.password)
}
inline void RegisterUserRequest::set_password(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  password_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(value), GetArena());
  // @@protoc_insertion_point(field_set_char:smart3dmap.v1.RegisterUserRequest.password)
}
inline void RegisterUserRequest::set_password(const char* value,
    size_t size) {
  
  password_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:smart3dmap.v1.RegisterUserRequest.password)
}
inline std::string* RegisterUserRequest::_internal_mutable_password() {
  
  return password_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArena());
}
inline std::string* RegisterUserRequest::release_password() {
  // @@protoc_insertion_point(field_release:smart3dmap.v1.RegisterUserRequest.password)
  return password_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void RegisterUserRequest::set_allocated_password(std::string* password) {
  if (password != nullptr) {
    
  } else {
    
  }
  password_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), password,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:smart3dmap.v1.RegisterUserRequest.password)
}

// repeated .smart3dmap.v1.RegisterUserRequest.Info infos = 5;
inline int RegisterUserRequest::_internal_infos_size() const {
  return infos_.size();
}
inline int RegisterUserRequest::infos_size() const {
  return _internal_infos_size();
}
inline void RegisterUserRequest::clear_infos() {
  infos_.Clear();
}
inline ::smart3dmap::v1::RegisterUserRequest_Info* RegisterUserRequest::mutable_infos(int index) {
  // @@protoc_insertion_point(field_mutable:smart3dmap.v1.RegisterUserRequest.infos)
  return infos_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::smart3dmap::v1::RegisterUserRequest_Info >*
RegisterUserRequest::mutable_infos() {
  // @@protoc_insertion_point(field_mutable_list:smart3dmap.v1.RegisterUserRequest.infos)
  return &infos_;
}
inline const ::smart3dmap::v1::RegisterUserRequest_Info& RegisterUserRequest::_internal_infos(int index) const {
  return infos_.Get(index);
}
inline const ::smart3dmap::v1::RegisterUserRequest_Info& RegisterUserRequest::infos(int index) const {
  // @@protoc_insertion_point(field_get:smart3dmap.v1.RegisterUserRequest.infos)
  return _internal_infos(index);
}
inline ::smart3dmap::v1::RegisterUserRequest_Info* RegisterUserRequest::_internal_add_infos() {
  return infos_.Add();
}
inline ::smart3dmap::v1::RegisterUserRequest_Info* RegisterUserRequest::add_infos() {
  // @@protoc_insertion_point(field_add:smart3dmap.v1.RegisterUserRequest.infos)
  return _internal_add_infos();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::smart3dmap::v1::RegisterUserRequest_Info >&
RegisterUserRequest::infos() const {
  // @@protoc_insertion_point(field_list:smart3dmap.v1.RegisterUserRequest.infos)
  return infos_;
}

// -------------------------------------------------------------------

// ResetUserPasswordRequest

// int32 id = 1;
inline void ResetUserPasswordRequest::clear_id() {
  id_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 ResetUserPasswordRequest::_internal_id() const {
  return id_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 ResetUserPasswordRequest::id() const {
  // @@protoc_insertion_point(field_get:smart3dmap.v1.ResetUserPasswordRequest.id)
  return _internal_id();
}
inline void ResetUserPasswordRequest::_internal_set_id(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  id_ = value;
}
inline void ResetUserPasswordRequest::set_id(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_id(value);
  // @@protoc_insertion_point(field_set:smart3dmap.v1.ResetUserPasswordRequest.id)
}

// string old_password = 2;
inline void ResetUserPasswordRequest::clear_old_password() {
  old_password_.ClearToEmpty();
}
inline const std::string& ResetUserPasswordRequest::old_password() const {
  // @@protoc_insertion_point(field_get:smart3dmap.v1.ResetUserPasswordRequest.old_password)
  return _internal_old_password();
}
inline void ResetUserPasswordRequest::set_old_password(const std::string& value) {
  _internal_set_old_password(value);
  // @@protoc_insertion_point(field_set:smart3dmap.v1.ResetUserPasswordRequest.old_password)
}
inline std::string* ResetUserPasswordRequest::mutable_old_password() {
  // @@protoc_insertion_point(field_mutable:smart3dmap.v1.ResetUserPasswordRequest.old_password)
  return _internal_mutable_old_password();
}
inline const std::string& ResetUserPasswordRequest::_internal_old_password() const {
  return old_password_.Get();
}
inline void ResetUserPasswordRequest::_internal_set_old_password(const std::string& value) {
  
  old_password_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArena());
}
inline void ResetUserPasswordRequest::set_old_password(std::string&& value) {
  
  old_password_.Set(
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:smart3dmap.v1.ResetUserPasswordRequest.old_password)
}
inline void ResetUserPasswordRequest::set_old_password(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  old_password_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(value), GetArena());
  // @@protoc_insertion_point(field_set_char:smart3dmap.v1.ResetUserPasswordRequest.old_password)
}
inline void ResetUserPasswordRequest::set_old_password(const char* value,
    size_t size) {
  
  old_password_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:smart3dmap.v1.ResetUserPasswordRequest.old_password)
}
inline std::string* ResetUserPasswordRequest::_internal_mutable_old_password() {
  
  return old_password_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArena());
}
inline std::string* ResetUserPasswordRequest::release_old_password() {
  // @@protoc_insertion_point(field_release:smart3dmap.v1.ResetUserPasswordRequest.old_password)
  return old_password_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void ResetUserPasswordRequest::set_allocated_old_password(std::string* old_password) {
  if (old_password != nullptr) {
    
  } else {
    
  }
  old_password_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), old_password,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:smart3dmap.v1.ResetUserPasswordRequest.old_password)
}

// string new_password = 3;
inline void ResetUserPasswordRequest::clear_new_password() {
  new_password_.ClearToEmpty();
}
inline const std::string& ResetUserPasswordRequest::new_password() const {
  // @@protoc_insertion_point(field_get:smart3dmap.v1.ResetUserPasswordRequest.new_password)
  return _internal_new_password();
}
inline void ResetUserPasswordRequest::set_new_password(const std::string& value) {
  _internal_set_new_password(value);
  // @@protoc_insertion_point(field_set:smart3dmap.v1.ResetUserPasswordRequest.new_password)
}
inline std::string* ResetUserPasswordRequest::mutable_new_password() {
  // @@protoc_insertion_point(field_mutable:smart3dmap.v1.ResetUserPasswordRequest.new_password)
  return _internal_mutable_new_password();
}
inline const std::string& ResetUserPasswordRequest::_internal_new_password() const {
  return new_password_.Get();
}
inline void ResetUserPasswordRequest::_internal_set_new_password(const std::string& value) {
  
  new_password_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArena());
}
inline void ResetUserPasswordRequest::set_new_password(std::string&& value) {
  
  new_password_.Set(
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:smart3dmap.v1.ResetUserPasswordRequest.new_password)
}
inline void ResetUserPasswordRequest::set_new_password(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  new_password_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(value), GetArena());
  // @@protoc_insertion_point(field_set_char:smart3dmap.v1.ResetUserPasswordRequest.new_password)
}
inline void ResetUserPasswordRequest::set_new_password(const char* value,
    size_t size) {
  
  new_password_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:smart3dmap.v1.ResetUserPasswordRequest.new_password)
}
inline std::string* ResetUserPasswordRequest::_internal_mutable_new_password() {
  
  return new_password_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArena());
}
inline std::string* ResetUserPasswordRequest::release_new_password() {
  // @@protoc_insertion_point(field_release:smart3dmap.v1.ResetUserPasswordRequest.new_password)
  return new_password_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void ResetUserPasswordRequest::set_allocated_new_password(std::string* new_password) {
  if (new_password != nullptr) {
    
  } else {
    
  }
  new_password_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), new_password,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:smart3dmap.v1.ResetUserPasswordRequest.new_password)
}

// -------------------------------------------------------------------

// DeleteUserRequest

// int32 id = 1;
inline void DeleteUserRequest::clear_id() {
  id_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 DeleteUserRequest::_internal_id() const {
  return id_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 DeleteUserRequest::id() const {
  // @@protoc_insertion_point(field_get:smart3dmap.v1.DeleteUserRequest.id)
  return _internal_id();
}
inline void DeleteUserRequest::_internal_set_id(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  id_ = value;
}
inline void DeleteUserRequest::set_id(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_id(value);
  // @@protoc_insertion_point(field_set:smart3dmap.v1.DeleteUserRequest.id)
}

// -------------------------------------------------------------------

// DeleteTeamRequest

// int32 id = 1;
inline void DeleteTeamRequest::clear_id() {
  id_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 DeleteTeamRequest::_internal_id() const {
  return id_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 DeleteTeamRequest::id() const {
  // @@protoc_insertion_point(field_get:smart3dmap.v1.DeleteTeamRequest.id)
  return _internal_id();
}
inline void DeleteTeamRequest::_internal_set_id(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  id_ = value;
}
inline void DeleteTeamRequest::set_id(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_id(value);
  // @@protoc_insertion_point(field_set:smart3dmap.v1.DeleteTeamRequest.id)
}

// -------------------------------------------------------------------

// GetTeamRequest

// int32 id = 1;
inline void GetTeamRequest::clear_id() {
  id_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 GetTeamRequest::_internal_id() const {
  return id_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 GetTeamRequest::id() const {
  // @@protoc_insertion_point(field_get:smart3dmap.v1.GetTeamRequest.id)
  return _internal_id();
}
inline void GetTeamRequest::_internal_set_id(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  id_ = value;
}
inline void GetTeamRequest::set_id(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_id(value);
  // @@protoc_insertion_point(field_set:smart3dmap.v1.GetTeamRequest.id)
}

// -------------------------------------------------------------------

// GetTeamUserRequest

// int32 team_id = 1;
inline void GetTeamUserRequest::clear_team_id() {
  team_id_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 GetTeamUserRequest::_internal_team_id() const {
  return team_id_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 GetTeamUserRequest::team_id() const {
  // @@protoc_insertion_point(field_get:smart3dmap.v1.GetTeamUserRequest.team_id)
  return _internal_team_id();
}
inline void GetTeamUserRequest::_internal_set_team_id(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  team_id_ = value;
}
inline void GetTeamUserRequest::set_team_id(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_team_id(value);
  // @@protoc_insertion_point(field_set:smart3dmap.v1.GetTeamUserRequest.team_id)
}

// -------------------------------------------------------------------

// IsAdminUserRequest

// int32 user_id = 1;
inline void IsAdminUserRequest::clear_user_id() {
  user_id_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 IsAdminUserRequest::_internal_user_id() const {
  return user_id_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 IsAdminUserRequest::user_id() const {
  // @@protoc_insertion_point(field_get:smart3dmap.v1.IsAdminUserRequest.user_id)
  return _internal_user_id();
}
inline void IsAdminUserRequest::_internal_set_user_id(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  user_id_ = value;
}
inline void IsAdminUserRequest::set_user_id(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_user_id(value);
  // @@protoc_insertion_point(field_set:smart3dmap.v1.IsAdminUserRequest.user_id)
}

// -------------------------------------------------------------------

// ListUsersResponse

// repeated .smart3dmap.v1.User users = 1;
inline int ListUsersResponse::_internal_users_size() const {
  return users_.size();
}
inline int ListUsersResponse::users_size() const {
  return _internal_users_size();
}
inline void ListUsersResponse::clear_users() {
  users_.Clear();
}
inline ::smart3dmap::v1::User* ListUsersResponse::mutable_users(int index) {
  // @@protoc_insertion_point(field_mutable:smart3dmap.v1.ListUsersResponse.users)
  return users_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::smart3dmap::v1::User >*
ListUsersResponse::mutable_users() {
  // @@protoc_insertion_point(field_mutable_list:smart3dmap.v1.ListUsersResponse.users)
  return &users_;
}
inline const ::smart3dmap::v1::User& ListUsersResponse::_internal_users(int index) const {
  return users_.Get(index);
}
inline const ::smart3dmap::v1::User& ListUsersResponse::users(int index) const {
  // @@protoc_insertion_point(field_get:smart3dmap.v1.ListUsersResponse.users)
  return _internal_users(index);
}
inline ::smart3dmap::v1::User* ListUsersResponse::_internal_add_users() {
  return users_.Add();
}
inline ::smart3dmap::v1::User* ListUsersResponse::add_users() {
  // @@protoc_insertion_point(field_add:smart3dmap.v1.ListUsersResponse.users)
  return _internal_add_users();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::smart3dmap::v1::User >&
ListUsersResponse::users() const {
  // @@protoc_insertion_point(field_list:smart3dmap.v1.ListUsersResponse.users)
  return users_;
}

// int32 user_count = 2;
inline void ListUsersResponse::clear_user_count() {
  user_count_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 ListUsersResponse::_internal_user_count() const {
  return user_count_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 ListUsersResponse::user_count() const {
  // @@protoc_insertion_point(field_get:smart3dmap.v1.ListUsersResponse.user_count)
  return _internal_user_count();
}
inline void ListUsersResponse::_internal_set_user_count(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  user_count_ = value;
}
inline void ListUsersResponse::set_user_count(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_user_count(value);
  // @@protoc_insertion_point(field_set:smart3dmap.v1.ListUsersResponse.user_count)
}

// -------------------------------------------------------------------

// ListTeamsResponse

// repeated .smart3dmap.v1.Team teams = 1;
inline int ListTeamsResponse::_internal_teams_size() const {
  return teams_.size();
}
inline int ListTeamsResponse::teams_size() const {
  return _internal_teams_size();
}
inline void ListTeamsResponse::clear_teams() {
  teams_.Clear();
}
inline ::smart3dmap::v1::Team* ListTeamsResponse::mutable_teams(int index) {
  // @@protoc_insertion_point(field_mutable:smart3dmap.v1.ListTeamsResponse.teams)
  return teams_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::smart3dmap::v1::Team >*
ListTeamsResponse::mutable_teams() {
  // @@protoc_insertion_point(field_mutable_list:smart3dmap.v1.ListTeamsResponse.teams)
  return &teams_;
}
inline const ::smart3dmap::v1::Team& ListTeamsResponse::_internal_teams(int index) const {
  return teams_.Get(index);
}
inline const ::smart3dmap::v1::Team& ListTeamsResponse::teams(int index) const {
  // @@protoc_insertion_point(field_get:smart3dmap.v1.ListTeamsResponse.teams)
  return _internal_teams(index);
}
inline ::smart3dmap::v1::Team* ListTeamsResponse::_internal_add_teams() {
  return teams_.Add();
}
inline ::smart3dmap::v1::Team* ListTeamsResponse::add_teams() {
  // @@protoc_insertion_point(field_add:smart3dmap.v1.ListTeamsResponse.teams)
  return _internal_add_teams();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::smart3dmap::v1::Team >&
ListTeamsResponse::teams() const {
  // @@protoc_insertion_point(field_list:smart3dmap.v1.ListTeamsResponse.teams)
  return teams_;
}

// int32 team_count = 2;
inline void ListTeamsResponse::clear_team_count() {
  team_count_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 ListTeamsResponse::_internal_team_count() const {
  return team_count_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 ListTeamsResponse::team_count() const {
  // @@protoc_insertion_point(field_get:smart3dmap.v1.ListTeamsResponse.team_count)
  return _internal_team_count();
}
inline void ListTeamsResponse::_internal_set_team_count(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  team_count_ = value;
}
inline void ListTeamsResponse::set_team_count(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_team_count(value);
  // @@protoc_insertion_point(field_set:smart3dmap.v1.ListTeamsResponse.team_count)
}

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__
// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------


// @@protoc_insertion_point(namespace_scope)

}  // namespace v1
}  // namespace smart3dmap

PROTOBUF_NAMESPACE_OPEN

template <> struct is_proto_enum< ::smart3dmap::v1::User_State> : ::std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::smart3dmap::v1::User_State>() {
  return ::smart3dmap::v1::User_State_descriptor();
}

PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)

#include <google/protobuf/port_undef.inc>
#endif  // GOOGLE_PROTOBUF_INCLUDED_GOOGLE_PROTOBUF_INCLUDED_user_5fmanager_2fuser_5fmanager_2eproto
