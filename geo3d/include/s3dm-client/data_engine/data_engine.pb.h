// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: data_engine/data_engine.proto

#ifndef GOOGLE_PROTOBUF_INCLUDED_data_5fengine_2fdata_5fengine_2eproto
#define GOOGLE_PROTOBUF_INCLUDED_data_5fengine_2fdata_5fengine_2eproto

#include <limits>
#include <string>

#include <google/protobuf/port_def.inc>
#if PROTOBUF_VERSION < 3015000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers. Please update
#error your headers.
#endif
#if 3015008 < PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers. Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/port_undef.inc>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_table_driven.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/metadata_lite.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/generated_enum_reflection.h>
#include <google/protobuf/unknown_field_set.h>
#include <google/protobuf/timestamp.pb.h>
#include <google/protobuf/wrappers.pb.h>
#include "common/pagination.pb.h"
#include "common/structures.pb.h"
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
#define PROTOBUF_INTERNAL_EXPORT_data_5fengine_2fdata_5fengine_2eproto LIBS3DMGRPC_API
PROTOBUF_NAMESPACE_OPEN
namespace internal {
class AnyMetadata;
}  // namespace internal
PROTOBUF_NAMESPACE_CLOSE

// Internal implementation detail -- do not use these members.
struct LIBS3DMGRPC_API TableStruct_data_5fengine_2fdata_5fengine_2eproto {
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTableField entries[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::AuxiliaryParseTableField aux[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTable schema[134]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::FieldMetadata field_metadata[];
  static const ::PROTOBUF_NAMESPACE_ID::internal::SerializationTable serialization_table[];
  static const ::PROTOBUF_NAMESPACE_ID::uint32 offsets[];
};
extern LIBS3DMGRPC_API const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_data_5fengine_2fdata_5fengine_2eproto;
LIBS3DMGRPC_API ::PROTOBUF_NAMESPACE_ID::Metadata descriptor_table_data_5fengine_2fdata_5fengine_2eproto_metadata_getter(int index);
namespace smart3dmap {
namespace v1 {
class AddExistingDatabaseRequest;
struct AddExistingDatabaseRequestDefaultTypeInternal;
LIBS3DMGRPC_API extern AddExistingDatabaseRequestDefaultTypeInternal _AddExistingDatabaseRequest_default_instance_;
class BasicProject;
struct BasicProjectDefaultTypeInternal;
LIBS3DMGRPC_API extern BasicProjectDefaultTypeInternal _BasicProject_default_instance_;
class CompressiveResistanceRecord;
struct CompressiveResistanceRecordDefaultTypeInternal;
LIBS3DMGRPC_API extern CompressiveResistanceRecordDefaultTypeInternal _CompressiveResistanceRecord_default_instance_;
class ConfigTableFieldMapRequest;
struct ConfigTableFieldMapRequestDefaultTypeInternal;
LIBS3DMGRPC_API extern ConfigTableFieldMapRequestDefaultTypeInternal _ConfigTableFieldMapRequest_default_instance_;
class ConfigTableFieldMapRequest_FieldMap;
struct ConfigTableFieldMapRequest_FieldMapDefaultTypeInternal;
LIBS3DMGRPC_API extern ConfigTableFieldMapRequest_FieldMapDefaultTypeInternal _ConfigTableFieldMapRequest_FieldMap_default_instance_;
class ConfigTableFieldMapResponse;
struct ConfigTableFieldMapResponseDefaultTypeInternal;
LIBS3DMGRPC_API extern ConfigTableFieldMapResponseDefaultTypeInternal _ConfigTableFieldMapResponse_default_instance_;
class CreateDatabaseRequest;
struct CreateDatabaseRequestDefaultTypeInternal;
LIBS3DMGRPC_API extern CreateDatabaseRequestDefaultTypeInternal _CreateDatabaseRequest_default_instance_;
class CreateDatabaseServerRequest;
struct CreateDatabaseServerRequestDefaultTypeInternal;
LIBS3DMGRPC_API extern CreateDatabaseServerRequestDefaultTypeInternal _CreateDatabaseServerRequest_default_instance_;
class CreateProjectRequest;
struct CreateProjectRequestDefaultTypeInternal;
LIBS3DMGRPC_API extern CreateProjectRequestDefaultTypeInternal _CreateProjectRequest_default_instance_;
class CreateStdStratRequest;
struct CreateStdStratRequestDefaultTypeInternal;
LIBS3DMGRPC_API extern CreateStdStratRequestDefaultTypeInternal _CreateStdStratRequest_default_instance_;
class DBServer;
struct DBServerDefaultTypeInternal;
LIBS3DMGRPC_API extern DBServerDefaultTypeInternal _DBServer_default_instance_;
class DBUser;
struct DBUserDefaultTypeInternal;
LIBS3DMGRPC_API extern DBUserDefaultTypeInternal _DBUser_default_instance_;
class Database;
struct DatabaseDefaultTypeInternal;
LIBS3DMGRPC_API extern DatabaseDefaultTypeInternal _Database_default_instance_;
class DeleteDatabaseRequest;
struct DeleteDatabaseRequestDefaultTypeInternal;
LIBS3DMGRPC_API extern DeleteDatabaseRequestDefaultTypeInternal _DeleteDatabaseRequest_default_instance_;
class DeleteDatabaseResponse;
struct DeleteDatabaseResponseDefaultTypeInternal;
LIBS3DMGRPC_API extern DeleteDatabaseResponseDefaultTypeInternal _DeleteDatabaseResponse_default_instance_;
class DeleteDatabaseServerRequest;
struct DeleteDatabaseServerRequestDefaultTypeInternal;
LIBS3DMGRPC_API extern DeleteDatabaseServerRequestDefaultTypeInternal _DeleteDatabaseServerRequest_default_instance_;
class DeleteDatabaseServerResponse;
struct DeleteDatabaseServerResponseDefaultTypeInternal;
LIBS3DMGRPC_API extern DeleteDatabaseServerResponseDefaultTypeInternal _DeleteDatabaseServerResponse_default_instance_;
class DeleteDrillDataRequest;
struct DeleteDrillDataRequestDefaultTypeInternal;
LIBS3DMGRPC_API extern DeleteDrillDataRequestDefaultTypeInternal _DeleteDrillDataRequest_default_instance_;
class DeleteDrillDataResponse;
struct DeleteDrillDataResponseDefaultTypeInternal;
LIBS3DMGRPC_API extern DeleteDrillDataResponseDefaultTypeInternal _DeleteDrillDataResponse_default_instance_;
class DeleteMapRequest;
struct DeleteMapRequestDefaultTypeInternal;
LIBS3DMGRPC_API extern DeleteMapRequestDefaultTypeInternal _DeleteMapRequest_default_instance_;
class DeleteMapResponse;
struct DeleteMapResponseDefaultTypeInternal;
LIBS3DMGRPC_API extern DeleteMapResponseDefaultTypeInternal _DeleteMapResponse_default_instance_;
class DeleteModelRequest;
struct DeleteModelRequestDefaultTypeInternal;
LIBS3DMGRPC_API extern DeleteModelRequestDefaultTypeInternal _DeleteModelRequest_default_instance_;
class DeleteModelResponse;
struct DeleteModelResponseDefaultTypeInternal;
LIBS3DMGRPC_API extern DeleteModelResponseDefaultTypeInternal _DeleteModelResponse_default_instance_;
class DeleteProjectRequest;
struct DeleteProjectRequestDefaultTypeInternal;
LIBS3DMGRPC_API extern DeleteProjectRequestDefaultTypeInternal _DeleteProjectRequest_default_instance_;
class DeleteProjectResponse;
struct DeleteProjectResponseDefaultTypeInternal;
LIBS3DMGRPC_API extern DeleteProjectResponseDefaultTypeInternal _DeleteProjectResponse_default_instance_;
class DeleteStdStratRequest;
struct DeleteStdStratRequestDefaultTypeInternal;
LIBS3DMGRPC_API extern DeleteStdStratRequestDefaultTypeInternal _DeleteStdStratRequest_default_instance_;
class DeleteStdStratResponse;
struct DeleteStdStratResponseDefaultTypeInternal;
LIBS3DMGRPC_API extern DeleteStdStratResponseDefaultTypeInternal _DeleteStdStratResponse_default_instance_;
class DicTable;
struct DicTableDefaultTypeInternal;
LIBS3DMGRPC_API extern DicTableDefaultTypeInternal _DicTable_default_instance_;
class DicTableCategory;
struct DicTableCategoryDefaultTypeInternal;
LIBS3DMGRPC_API extern DicTableCategoryDefaultTypeInternal _DicTableCategory_default_instance_;
class DicTableField;
struct DicTableFieldDefaultTypeInternal;
LIBS3DMGRPC_API extern DicTableFieldDefaultTypeInternal _DicTableField_default_instance_;
class Drill;
struct DrillDefaultTypeInternal;
LIBS3DMGRPC_API extern DrillDefaultTypeInternal _Drill_default_instance_;
class DrillLog;
struct DrillLogDefaultTypeInternal;
LIBS3DMGRPC_API extern DrillLogDefaultTypeInternal _DrillLog_default_instance_;
class DrillOriginalLayers;
struct DrillOriginalLayersDefaultTypeInternal;
LIBS3DMGRPC_API extern DrillOriginalLayersDefaultTypeInternal _DrillOriginalLayers_default_instance_;
class DrillOriginalLayers_Layer;
struct DrillOriginalLayers_LayerDefaultTypeInternal;
LIBS3DMGRPC_API extern DrillOriginalLayers_LayerDefaultTypeInternal _DrillOriginalLayers_Layer_default_instance_;
class DrillSoilCorrosivity;
struct DrillSoilCorrosivityDefaultTypeInternal;
LIBS3DMGRPC_API extern DrillSoilCorrosivityDefaultTypeInternal _DrillSoilCorrosivity_default_instance_;
class DrillStdLayers;
struct DrillStdLayersDefaultTypeInternal;
LIBS3DMGRPC_API extern DrillStdLayersDefaultTypeInternal _DrillStdLayers_default_instance_;
class DrillStdLayers_Layer;
struct DrillStdLayers_LayerDefaultTypeInternal;
LIBS3DMGRPC_API extern DrillStdLayers_LayerDefaultTypeInternal _DrillStdLayers_Layer_default_instance_;
class DrillWaterCorrosivity;
struct DrillWaterCorrosivityDefaultTypeInternal;
LIBS3DMGRPC_API extern DrillWaterCorrosivityDefaultTypeInternal _DrillWaterCorrosivity_default_instance_;
class ExportModelMetadataRequest;
struct ExportModelMetadataRequestDefaultTypeInternal;
LIBS3DMGRPC_API extern ExportModelMetadataRequestDefaultTypeInternal _ExportModelMetadataRequest_default_instance_;
class ExportModelMetadataResponse;
struct ExportModelMetadataResponseDefaultTypeInternal;
LIBS3DMGRPC_API extern ExportModelMetadataResponseDefaultTypeInternal _ExportModelMetadataResponse_default_instance_;
class GeoSurveyProject;
struct GeoSurveyProjectDefaultTypeInternal;
LIBS3DMGRPC_API extern GeoSurveyProjectDefaultTypeInternal _GeoSurveyProject_default_instance_;
class GeographicPosition;
struct GeographicPositionDefaultTypeInternal;
LIBS3DMGRPC_API extern GeographicPositionDefaultTypeInternal _GeographicPosition_default_instance_;
class GeotechnicalRecord;
struct GeotechnicalRecordDefaultTypeInternal;
LIBS3DMGRPC_API extern GeotechnicalRecordDefaultTypeInternal _GeotechnicalRecord_default_instance_;
class GetDatabaseRequest;
struct GetDatabaseRequestDefaultTypeInternal;
LIBS3DMGRPC_API extern GetDatabaseRequestDefaultTypeInternal _GetDatabaseRequest_default_instance_;
class GetDatabaseServerRequest;
struct GetDatabaseServerRequestDefaultTypeInternal;
LIBS3DMGRPC_API extern GetDatabaseServerRequestDefaultTypeInternal _GetDatabaseServerRequest_default_instance_;
class GetDrillDataRequest;
struct GetDrillDataRequestDefaultTypeInternal;
LIBS3DMGRPC_API extern GetDrillDataRequestDefaultTypeInternal _GetDrillDataRequest_default_instance_;
class GetDrillRequest;
struct GetDrillRequestDefaultTypeInternal;
LIBS3DMGRPC_API extern GetDrillRequestDefaultTypeInternal _GetDrillRequest_default_instance_;
class GetDrillStdLayersRequest;
struct GetDrillStdLayersRequestDefaultTypeInternal;
LIBS3DMGRPC_API extern GetDrillStdLayersRequestDefaultTypeInternal _GetDrillStdLayersRequest_default_instance_;
class GetGeoSurveyProjectRequest;
struct GetGeoSurveyProjectRequestDefaultTypeInternal;
LIBS3DMGRPC_API extern GetGeoSurveyProjectRequestDefaultTypeInternal _GetGeoSurveyProjectRequest_default_instance_;
class GetMapRequest;
struct GetMapRequestDefaultTypeInternal;
LIBS3DMGRPC_API extern GetMapRequestDefaultTypeInternal _GetMapRequest_default_instance_;
class GetProjectRequest;
struct GetProjectRequestDefaultTypeInternal;
LIBS3DMGRPC_API extern GetProjectRequestDefaultTypeInternal _GetProjectRequest_default_instance_;
class GetRasterLayerDataRequest;
struct GetRasterLayerDataRequestDefaultTypeInternal;
LIBS3DMGRPC_API extern GetRasterLayerDataRequestDefaultTypeInternal _GetRasterLayerDataRequest_default_instance_;
class GetStdStratRequest;
struct GetStdStratRequestDefaultTypeInternal;
LIBS3DMGRPC_API extern GetStdStratRequestDefaultTypeInternal _GetStdStratRequest_default_instance_;
class ImportCompressiveResistanceRecordRequest;
struct ImportCompressiveResistanceRecordRequestDefaultTypeInternal;
LIBS3DMGRPC_API extern ImportCompressiveResistanceRecordRequestDefaultTypeInternal _ImportCompressiveResistanceRecordRequest_default_instance_;
class ImportDrillDataStatus;
struct ImportDrillDataStatusDefaultTypeInternal;
LIBS3DMGRPC_API extern ImportDrillDataStatusDefaultTypeInternal _ImportDrillDataStatus_default_instance_;
class ImportDrillSoilCorrosivityRequest;
struct ImportDrillSoilCorrosivityRequestDefaultTypeInternal;
LIBS3DMGRPC_API extern ImportDrillSoilCorrosivityRequestDefaultTypeInternal _ImportDrillSoilCorrosivityRequest_default_instance_;
class ImportDrillStatus;
struct ImportDrillStatusDefaultTypeInternal;
LIBS3DMGRPC_API extern ImportDrillStatusDefaultTypeInternal _ImportDrillStatus_default_instance_;
class ImportDrillWaterCorrosivityRequest;
struct ImportDrillWaterCorrosivityRequestDefaultTypeInternal;
LIBS3DMGRPC_API extern ImportDrillWaterCorrosivityRequestDefaultTypeInternal _ImportDrillWaterCorrosivityRequest_default_instance_;
class ImportDrillsRequest;
struct ImportDrillsRequestDefaultTypeInternal;
LIBS3DMGRPC_API extern ImportDrillsRequestDefaultTypeInternal _ImportDrillsRequest_default_instance_;
class ImportDrillsResponse;
struct ImportDrillsResponseDefaultTypeInternal;
LIBS3DMGRPC_API extern ImportDrillsResponseDefaultTypeInternal _ImportDrillsResponse_default_instance_;
class ImportGeotechnicalRecordsRequest;
struct ImportGeotechnicalRecordsRequestDefaultTypeInternal;
LIBS3DMGRPC_API extern ImportGeotechnicalRecordsRequestDefaultTypeInternal _ImportGeotechnicalRecordsRequest_default_instance_;
class ImportModelMetadataRequest;
struct ImportModelMetadataRequestDefaultTypeInternal;
LIBS3DMGRPC_API extern ImportModelMetadataRequestDefaultTypeInternal _ImportModelMetadataRequest_default_instance_;
class ImportModelMetadataResponse;
struct ImportModelMetadataResponseDefaultTypeInternal;
LIBS3DMGRPC_API extern ImportModelMetadataResponseDefaultTypeInternal _ImportModelMetadataResponse_default_instance_;
class ImportStdPenetrationRecordRequest;
struct ImportStdPenetrationRecordRequestDefaultTypeInternal;
LIBS3DMGRPC_API extern ImportStdPenetrationRecordRequestDefaultTypeInternal _ImportStdPenetrationRecordRequest_default_instance_;
class ImportStdStratItemStatus;
struct ImportStdStratItemStatusDefaultTypeInternal;
LIBS3DMGRPC_API extern ImportStdStratItemStatusDefaultTypeInternal _ImportStdStratItemStatus_default_instance_;
class ImportStdStratItemsRequest;
struct ImportStdStratItemsRequestDefaultTypeInternal;
LIBS3DMGRPC_API extern ImportStdStratItemsRequestDefaultTypeInternal _ImportStdStratItemsRequest_default_instance_;
class ImportStdStratItemsResponse;
struct ImportStdStratItemsResponseDefaultTypeInternal;
LIBS3DMGRPC_API extern ImportStdStratItemsResponseDefaultTypeInternal _ImportStdStratItemsResponse_default_instance_;
class ImportedStdStratItem;
struct ImportedStdStratItemDefaultTypeInternal;
LIBS3DMGRPC_API extern ImportedStdStratItemDefaultTypeInternal _ImportedStdStratItem_default_instance_;
class Layer;
struct LayerDefaultTypeInternal;
LIBS3DMGRPC_API extern LayerDefaultTypeInternal _Layer_default_instance_;
class ListDBServerTypesRequest;
struct ListDBServerTypesRequestDefaultTypeInternal;
LIBS3DMGRPC_API extern ListDBServerTypesRequestDefaultTypeInternal _ListDBServerTypesRequest_default_instance_;
class ListDBServerTypesResponse;
struct ListDBServerTypesResponseDefaultTypeInternal;
LIBS3DMGRPC_API extern ListDBServerTypesResponseDefaultTypeInternal _ListDBServerTypesResponse_default_instance_;
class ListDBServerTypesResponse_TypeItem;
struct ListDBServerTypesResponse_TypeItemDefaultTypeInternal;
LIBS3DMGRPC_API extern ListDBServerTypesResponse_TypeItemDefaultTypeInternal _ListDBServerTypesResponse_TypeItem_default_instance_;
class ListDataResourceTypesRequest;
struct ListDataResourceTypesRequestDefaultTypeInternal;
LIBS3DMGRPC_API extern ListDataResourceTypesRequestDefaultTypeInternal _ListDataResourceTypesRequest_default_instance_;
class ListDataResourceTypesResponse;
struct ListDataResourceTypesResponseDefaultTypeInternal;
LIBS3DMGRPC_API extern ListDataResourceTypesResponseDefaultTypeInternal _ListDataResourceTypesResponse_default_instance_;
class ListDataResourceTypesResponse_TypeItem;
struct ListDataResourceTypesResponse_TypeItemDefaultTypeInternal;
LIBS3DMGRPC_API extern ListDataResourceTypesResponse_TypeItemDefaultTypeInternal _ListDataResourceTypesResponse_TypeItem_default_instance_;
class ListDatabaseAppTypesRequest;
struct ListDatabaseAppTypesRequestDefaultTypeInternal;
LIBS3DMGRPC_API extern ListDatabaseAppTypesRequestDefaultTypeInternal _ListDatabaseAppTypesRequest_default_instance_;
class ListDatabaseAppTypesResponse;
struct ListDatabaseAppTypesResponseDefaultTypeInternal;
LIBS3DMGRPC_API extern ListDatabaseAppTypesResponseDefaultTypeInternal _ListDatabaseAppTypesResponse_default_instance_;
class ListDatabaseAppTypesResponse_TypeItem;
struct ListDatabaseAppTypesResponse_TypeItemDefaultTypeInternal;
LIBS3DMGRPC_API extern ListDatabaseAppTypesResponse_TypeItemDefaultTypeInternal _ListDatabaseAppTypesResponse_TypeItem_default_instance_;
class ListDatabaseServersRequest;
struct ListDatabaseServersRequestDefaultTypeInternal;
LIBS3DMGRPC_API extern ListDatabaseServersRequestDefaultTypeInternal _ListDatabaseServersRequest_default_instance_;
class ListDatabaseServersResponse;
struct ListDatabaseServersResponseDefaultTypeInternal;
LIBS3DMGRPC_API extern ListDatabaseServersResponseDefaultTypeInternal _ListDatabaseServersResponse_default_instance_;
class ListDatabasesRequest;
struct ListDatabasesRequestDefaultTypeInternal;
LIBS3DMGRPC_API extern ListDatabasesRequestDefaultTypeInternal _ListDatabasesRequest_default_instance_;
class ListDatabasesResponse;
struct ListDatabasesResponseDefaultTypeInternal;
LIBS3DMGRPC_API extern ListDatabasesResponseDefaultTypeInternal _ListDatabasesResponse_default_instance_;
class ListDicTableCategoriesRequest;
struct ListDicTableCategoriesRequestDefaultTypeInternal;
LIBS3DMGRPC_API extern ListDicTableCategoriesRequestDefaultTypeInternal _ListDicTableCategoriesRequest_default_instance_;
class ListDicTableCategoriesResponse;
struct ListDicTableCategoriesResponseDefaultTypeInternal;
LIBS3DMGRPC_API extern ListDicTableCategoriesResponseDefaultTypeInternal _ListDicTableCategoriesResponse_default_instance_;
class ListDicTableFieldsRequest;
struct ListDicTableFieldsRequestDefaultTypeInternal;
LIBS3DMGRPC_API extern ListDicTableFieldsRequestDefaultTypeInternal _ListDicTableFieldsRequest_default_instance_;
class ListDicTableFieldsResponse;
struct ListDicTableFieldsResponseDefaultTypeInternal;
LIBS3DMGRPC_API extern ListDicTableFieldsResponseDefaultTypeInternal _ListDicTableFieldsResponse_default_instance_;
class ListDicTablesRequest;
struct ListDicTablesRequestDefaultTypeInternal;
LIBS3DMGRPC_API extern ListDicTablesRequestDefaultTypeInternal _ListDicTablesRequest_default_instance_;
class ListDicTablesResponse;
struct ListDicTablesResponseDefaultTypeInternal;
LIBS3DMGRPC_API extern ListDicTablesResponseDefaultTypeInternal _ListDicTablesResponse_default_instance_;
class ListDrillLogsRequest;
struct ListDrillLogsRequestDefaultTypeInternal;
LIBS3DMGRPC_API extern ListDrillLogsRequestDefaultTypeInternal _ListDrillLogsRequest_default_instance_;
class ListDrillLogsResponse;
struct ListDrillLogsResponseDefaultTypeInternal;
LIBS3DMGRPC_API extern ListDrillLogsResponseDefaultTypeInternal _ListDrillLogsResponse_default_instance_;
class ListDrillsByPageRequest;
struct ListDrillsByPageRequestDefaultTypeInternal;
LIBS3DMGRPC_API extern ListDrillsByPageRequestDefaultTypeInternal _ListDrillsByPageRequest_default_instance_;
class ListDrillsByPageResponse;
struct ListDrillsByPageResponseDefaultTypeInternal;
LIBS3DMGRPC_API extern ListDrillsByPageResponseDefaultTypeInternal _ListDrillsByPageResponse_default_instance_;
class ListDrillsByStreamRequest;
struct ListDrillsByStreamRequestDefaultTypeInternal;
LIBS3DMGRPC_API extern ListDrillsByStreamRequestDefaultTypeInternal _ListDrillsByStreamRequest_default_instance_;
class ListFieldModelsRequest;
struct ListFieldModelsRequestDefaultTypeInternal;
LIBS3DMGRPC_API extern ListFieldModelsRequestDefaultTypeInternal _ListFieldModelsRequest_default_instance_;
class ListFieldModelsResponse;
struct ListFieldModelsResponseDefaultTypeInternal;
LIBS3DMGRPC_API extern ListFieldModelsResponseDefaultTypeInternal _ListFieldModelsResponse_default_instance_;
class ListFieldsOfTableRequest;
struct ListFieldsOfTableRequestDefaultTypeInternal;
LIBS3DMGRPC_API extern ListFieldsOfTableRequestDefaultTypeInternal _ListFieldsOfTableRequest_default_instance_;
class ListFieldsOfTableResponse;
struct ListFieldsOfTableResponseDefaultTypeInternal;
LIBS3DMGRPC_API extern ListFieldsOfTableResponseDefaultTypeInternal _ListFieldsOfTableResponse_default_instance_;
class ListFieldsOfTableResponse_TableField;
struct ListFieldsOfTableResponse_TableFieldDefaultTypeInternal;
LIBS3DMGRPC_API extern ListFieldsOfTableResponse_TableFieldDefaultTypeInternal _ListFieldsOfTableResponse_TableField_default_instance_;
class ListGeoSurveyProjectsRequest;
struct ListGeoSurveyProjectsRequestDefaultTypeInternal;
LIBS3DMGRPC_API extern ListGeoSurveyProjectsRequestDefaultTypeInternal _ListGeoSurveyProjectsRequest_default_instance_;
class ListGeoSurveyProjectsResponse;
struct ListGeoSurveyProjectsResponseDefaultTypeInternal;
LIBS3DMGRPC_API extern ListGeoSurveyProjectsResponseDefaultTypeInternal _ListGeoSurveyProjectsResponse_default_instance_;
class ListLayersOfMapByPageRequest;
struct ListLayersOfMapByPageRequestDefaultTypeInternal;
LIBS3DMGRPC_API extern ListLayersOfMapByPageRequestDefaultTypeInternal _ListLayersOfMapByPageRequest_default_instance_;
class ListLayersOfMapByPageResponse;
struct ListLayersOfMapByPageResponseDefaultTypeInternal;
LIBS3DMGRPC_API extern ListLayersOfMapByPageResponseDefaultTypeInternal _ListLayersOfMapByPageResponse_default_instance_;
class ListLayersOfMapRequest;
struct ListLayersOfMapRequestDefaultTypeInternal;
LIBS3DMGRPC_API extern ListLayersOfMapRequestDefaultTypeInternal _ListLayersOfMapRequest_default_instance_;
class ListMapsRequest;
struct ListMapsRequestDefaultTypeInternal;
LIBS3DMGRPC_API extern ListMapsRequestDefaultTypeInternal _ListMapsRequest_default_instance_;
class ListMapsResponse;
struct ListMapsResponseDefaultTypeInternal;
LIBS3DMGRPC_API extern ListMapsResponseDefaultTypeInternal _ListMapsResponse_default_instance_;
class ListProjectsRequest;
struct ListProjectsRequestDefaultTypeInternal;
LIBS3DMGRPC_API extern ListProjectsRequestDefaultTypeInternal _ListProjectsRequest_default_instance_;
class ListProjectsResponse;
struct ListProjectsResponseDefaultTypeInternal;
LIBS3DMGRPC_API extern ListProjectsResponseDefaultTypeInternal _ListProjectsResponse_default_instance_;
class ListSectionMapsRequest;
struct ListSectionMapsRequestDefaultTypeInternal;
LIBS3DMGRPC_API extern ListSectionMapsRequestDefaultTypeInternal _ListSectionMapsRequest_default_instance_;
class ListSectionMapsResponse;
struct ListSectionMapsResponseDefaultTypeInternal;
LIBS3DMGRPC_API extern ListSectionMapsResponseDefaultTypeInternal _ListSectionMapsResponse_default_instance_;
class ListStdStratsRequest;
struct ListStdStratsRequestDefaultTypeInternal;
LIBS3DMGRPC_API extern ListStdStratsRequestDefaultTypeInternal _ListStdStratsRequest_default_instance_;
class ListStdStratsResponse;
struct ListStdStratsResponseDefaultTypeInternal;
LIBS3DMGRPC_API extern ListStdStratsResponseDefaultTypeInternal _ListStdStratsResponse_default_instance_;
class ListStructureModelsRequest;
struct ListStructureModelsRequestDefaultTypeInternal;
LIBS3DMGRPC_API extern ListStructureModelsRequestDefaultTypeInternal _ListStructureModelsRequest_default_instance_;
class ListStructureModelsResponse;
struct ListStructureModelsResponseDefaultTypeInternal;
LIBS3DMGRPC_API extern ListStructureModelsResponseDefaultTypeInternal _ListStructureModelsResponse_default_instance_;
class ListTablesInDBRequest;
struct ListTablesInDBRequestDefaultTypeInternal;
LIBS3DMGRPC_API extern ListTablesInDBRequestDefaultTypeInternal _ListTablesInDBRequest_default_instance_;
class ListTablesInDBResponse;
struct ListTablesInDBResponseDefaultTypeInternal;
LIBS3DMGRPC_API extern ListTablesInDBResponseDefaultTypeInternal _ListTablesInDBResponse_default_instance_;
class Map;
struct MapDefaultTypeInternal;
LIBS3DMGRPC_API extern MapDefaultTypeInternal _Map_default_instance_;
class Model3DField;
struct Model3DFieldDefaultTypeInternal;
LIBS3DMGRPC_API extern Model3DFieldDefaultTypeInternal _Model3DField_default_instance_;
class Model3DStructure;
struct Model3DStructureDefaultTypeInternal;
LIBS3DMGRPC_API extern Model3DStructureDefaultTypeInternal _Model3DStructure_default_instance_;
class Project;
struct ProjectDefaultTypeInternal;
LIBS3DMGRPC_API extern ProjectDefaultTypeInternal _Project_default_instance_;
class PublishProjectRequest;
struct PublishProjectRequestDefaultTypeInternal;
LIBS3DMGRPC_API extern PublishProjectRequestDefaultTypeInternal _PublishProjectRequest_default_instance_;
class PublishProjectResponse;
struct PublishProjectResponseDefaultTypeInternal;
LIBS3DMGRPC_API extern PublishProjectResponseDefaultTypeInternal _PublishProjectResponse_default_instance_;
class RasterLayerData;
struct RasterLayerDataDefaultTypeInternal;
LIBS3DMGRPC_API extern RasterLayerDataDefaultTypeInternal _RasterLayerData_default_instance_;
class ResetStdStratItemsRequest;
struct ResetStdStratItemsRequestDefaultTypeInternal;
LIBS3DMGRPC_API extern ResetStdStratItemsRequestDefaultTypeInternal _ResetStdStratItemsRequest_default_instance_;
class ResetStdStratItemsResponse;
struct ResetStdStratItemsResponseDefaultTypeInternal;
LIBS3DMGRPC_API extern ResetStdStratItemsResponseDefaultTypeInternal _ResetStdStratItemsResponse_default_instance_;
class SectionMap;
struct SectionMapDefaultTypeInternal;
LIBS3DMGRPC_API extern SectionMapDefaultTypeInternal _SectionMap_default_instance_;
class StdPenetrationRecord;
struct StdPenetrationRecordDefaultTypeInternal;
LIBS3DMGRPC_API extern StdPenetrationRecordDefaultTypeInternal _StdPenetrationRecord_default_instance_;
class StdStrat;
struct StdStratDefaultTypeInternal;
LIBS3DMGRPC_API extern StdStratDefaultTypeInternal _StdStrat_default_instance_;
class StdStrat_Item;
struct StdStrat_ItemDefaultTypeInternal;
LIBS3DMGRPC_API extern StdStrat_ItemDefaultTypeInternal _StdStrat_Item_default_instance_;
class UpdateDatabaseServerRequest;
struct UpdateDatabaseServerRequestDefaultTypeInternal;
LIBS3DMGRPC_API extern UpdateDatabaseServerRequestDefaultTypeInternal _UpdateDatabaseServerRequest_default_instance_;
class UpdateDatabaseServerResponse;
struct UpdateDatabaseServerResponseDefaultTypeInternal;
LIBS3DMGRPC_API extern UpdateDatabaseServerResponseDefaultTypeInternal _UpdateDatabaseServerResponse_default_instance_;
class UpdateProjectRequest;
struct UpdateProjectRequestDefaultTypeInternal;
LIBS3DMGRPC_API extern UpdateProjectRequestDefaultTypeInternal _UpdateProjectRequest_default_instance_;
class UpdateProjectResponse;
struct UpdateProjectResponseDefaultTypeInternal;
LIBS3DMGRPC_API extern UpdateProjectResponseDefaultTypeInternal _UpdateProjectResponse_default_instance_;
class UpdateStdStratRequest;
struct UpdateStdStratRequestDefaultTypeInternal;
LIBS3DMGRPC_API extern UpdateStdStratRequestDefaultTypeInternal _UpdateStdStratRequest_default_instance_;
class UpdateStdStratResponse;
struct UpdateStdStratResponseDefaultTypeInternal;
LIBS3DMGRPC_API extern UpdateStdStratResponseDefaultTypeInternal _UpdateStdStratResponse_default_instance_;
}  // namespace v1
}  // namespace smart3dmap
PROTOBUF_NAMESPACE_OPEN
template<> LIBS3DMGRPC_API ::smart3dmap::v1::AddExistingDatabaseRequest* Arena::CreateMaybeMessage<::smart3dmap::v1::AddExistingDatabaseRequest>(Arena*);
template<> LIBS3DMGRPC_API ::smart3dmap::v1::BasicProject* Arena::CreateMaybeMessage<::smart3dmap::v1::BasicProject>(Arena*);
template<> LIBS3DMGRPC_API ::smart3dmap::v1::CompressiveResistanceRecord* Arena::CreateMaybeMessage<::smart3dmap::v1::CompressiveResistanceRecord>(Arena*);
template<> LIBS3DMGRPC_API ::smart3dmap::v1::ConfigTableFieldMapRequest* Arena::CreateMaybeMessage<::smart3dmap::v1::ConfigTableFieldMapRequest>(Arena*);
template<> LIBS3DMGRPC_API ::smart3dmap::v1::ConfigTableFieldMapRequest_FieldMap* Arena::CreateMaybeMessage<::smart3dmap::v1::ConfigTableFieldMapRequest_FieldMap>(Arena*);
template<> LIBS3DMGRPC_API ::smart3dmap::v1::ConfigTableFieldMapResponse* Arena::CreateMaybeMessage<::smart3dmap::v1::ConfigTableFieldMapResponse>(Arena*);
template<> LIBS3DMGRPC_API ::smart3dmap::v1::CreateDatabaseRequest* Arena::CreateMaybeMessage<::smart3dmap::v1::CreateDatabaseRequest>(Arena*);
template<> LIBS3DMGRPC_API ::smart3dmap::v1::CreateDatabaseServerRequest* Arena::CreateMaybeMessage<::smart3dmap::v1::CreateDatabaseServerRequest>(Arena*);
template<> LIBS3DMGRPC_API ::smart3dmap::v1::CreateProjectRequest* Arena::CreateMaybeMessage<::smart3dmap::v1::CreateProjectRequest>(Arena*);
template<> LIBS3DMGRPC_API ::smart3dmap::v1::CreateStdStratRequest* Arena::CreateMaybeMessage<::smart3dmap::v1::CreateStdStratRequest>(Arena*);
template<> LIBS3DMGRPC_API ::smart3dmap::v1::DBServer* Arena::CreateMaybeMessage<::smart3dmap::v1::DBServer>(Arena*);
template<> LIBS3DMGRPC_API ::smart3dmap::v1::DBUser* Arena::CreateMaybeMessage<::smart3dmap::v1::DBUser>(Arena*);
template<> LIBS3DMGRPC_API ::smart3dmap::v1::Database* Arena::CreateMaybeMessage<::smart3dmap::v1::Database>(Arena*);
template<> LIBS3DMGRPC_API ::smart3dmap::v1::DeleteDatabaseRequest* Arena::CreateMaybeMessage<::smart3dmap::v1::DeleteDatabaseRequest>(Arena*);
template<> LIBS3DMGRPC_API ::smart3dmap::v1::DeleteDatabaseResponse* Arena::CreateMaybeMessage<::smart3dmap::v1::DeleteDatabaseResponse>(Arena*);
template<> LIBS3DMGRPC_API ::smart3dmap::v1::DeleteDatabaseServerRequest* Arena::CreateMaybeMessage<::smart3dmap::v1::DeleteDatabaseServerRequest>(Arena*);
template<> LIBS3DMGRPC_API ::smart3dmap::v1::DeleteDatabaseServerResponse* Arena::CreateMaybeMessage<::smart3dmap::v1::DeleteDatabaseServerResponse>(Arena*);
template<> LIBS3DMGRPC_API ::smart3dmap::v1::DeleteDrillDataRequest* Arena::CreateMaybeMessage<::smart3dmap::v1::DeleteDrillDataRequest>(Arena*);
template<> LIBS3DMGRPC_API ::smart3dmap::v1::DeleteDrillDataResponse* Arena::CreateMaybeMessage<::smart3dmap::v1::DeleteDrillDataResponse>(Arena*);
template<> LIBS3DMGRPC_API ::smart3dmap::v1::DeleteMapRequest* Arena::CreateMaybeMessage<::smart3dmap::v1::DeleteMapRequest>(Arena*);
template<> LIBS3DMGRPC_API ::smart3dmap::v1::DeleteMapResponse* Arena::CreateMaybeMessage<::smart3dmap::v1::DeleteMapResponse>(Arena*);
template<> LIBS3DMGRPC_API ::smart3dmap::v1::DeleteModelRequest* Arena::CreateMaybeMessage<::smart3dmap::v1::DeleteModelRequest>(Arena*);
template<> LIBS3DMGRPC_API ::smart3dmap::v1::DeleteModelResponse* Arena::CreateMaybeMessage<::smart3dmap::v1::DeleteModelResponse>(Arena*);
template<> LIBS3DMGRPC_API ::smart3dmap::v1::DeleteProjectRequest* Arena::CreateMaybeMessage<::smart3dmap::v1::DeleteProjectRequest>(Arena*);
template<> LIBS3DMGRPC_API ::smart3dmap::v1::DeleteProjectResponse* Arena::CreateMaybeMessage<::smart3dmap::v1::DeleteProjectResponse>(Arena*);
template<> LIBS3DMGRPC_API ::smart3dmap::v1::DeleteStdStratRequest* Arena::CreateMaybeMessage<::smart3dmap::v1::DeleteStdStratRequest>(Arena*);
template<> LIBS3DMGRPC_API ::smart3dmap::v1::DeleteStdStratResponse* Arena::CreateMaybeMessage<::smart3dmap::v1::DeleteStdStratResponse>(Arena*);
template<> LIBS3DMGRPC_API ::smart3dmap::v1::DicTable* Arena::CreateMaybeMessage<::smart3dmap::v1::DicTable>(Arena*);
template<> LIBS3DMGRPC_API ::smart3dmap::v1::DicTableCategory* Arena::CreateMaybeMessage<::smart3dmap::v1::DicTableCategory>(Arena*);
template<> LIBS3DMGRPC_API ::smart3dmap::v1::DicTableField* Arena::CreateMaybeMessage<::smart3dmap::v1::DicTableField>(Arena*);
template<> LIBS3DMGRPC_API ::smart3dmap::v1::Drill* Arena::CreateMaybeMessage<::smart3dmap::v1::Drill>(Arena*);
template<> LIBS3DMGRPC_API ::smart3dmap::v1::DrillLog* Arena::CreateMaybeMessage<::smart3dmap::v1::DrillLog>(Arena*);
template<> LIBS3DMGRPC_API ::smart3dmap::v1::DrillOriginalLayers* Arena::CreateMaybeMessage<::smart3dmap::v1::DrillOriginalLayers>(Arena*);
template<> LIBS3DMGRPC_API ::smart3dmap::v1::DrillOriginalLayers_Layer* Arena::CreateMaybeMessage<::smart3dmap::v1::DrillOriginalLayers_Layer>(Arena*);
template<> LIBS3DMGRPC_API ::smart3dmap::v1::DrillSoilCorrosivity* Arena::CreateMaybeMessage<::smart3dmap::v1::DrillSoilCorrosivity>(Arena*);
template<> LIBS3DMGRPC_API ::smart3dmap::v1::DrillStdLayers* Arena::CreateMaybeMessage<::smart3dmap::v1::DrillStdLayers>(Arena*);
template<> LIBS3DMGRPC_API ::smart3dmap::v1::DrillStdLayers_Layer* Arena::CreateMaybeMessage<::smart3dmap::v1::DrillStdLayers_Layer>(Arena*);
template<> LIBS3DMGRPC_API ::smart3dmap::v1::DrillWaterCorrosivity* Arena::CreateMaybeMessage<::smart3dmap::v1::DrillWaterCorrosivity>(Arena*);
template<> LIBS3DMGRPC_API ::smart3dmap::v1::ExportModelMetadataRequest* Arena::CreateMaybeMessage<::smart3dmap::v1::ExportModelMetadataRequest>(Arena*);
template<> LIBS3DMGRPC_API ::smart3dmap::v1::ExportModelMetadataResponse* Arena::CreateMaybeMessage<::smart3dmap::v1::ExportModelMetadataResponse>(Arena*);
template<> LIBS3DMGRPC_API ::smart3dmap::v1::GeoSurveyProject* Arena::CreateMaybeMessage<::smart3dmap::v1::GeoSurveyProject>(Arena*);
template<> LIBS3DMGRPC_API ::smart3dmap::v1::GeographicPosition* Arena::CreateMaybeMessage<::smart3dmap::v1::GeographicPosition>(Arena*);
template<> LIBS3DMGRPC_API ::smart3dmap::v1::GeotechnicalRecord* Arena::CreateMaybeMessage<::smart3dmap::v1::GeotechnicalRecord>(Arena*);
template<> LIBS3DMGRPC_API ::smart3dmap::v1::GetDatabaseRequest* Arena::CreateMaybeMessage<::smart3dmap::v1::GetDatabaseRequest>(Arena*);
template<> LIBS3DMGRPC_API ::smart3dmap::v1::GetDatabaseServerRequest* Arena::CreateMaybeMessage<::smart3dmap::v1::GetDatabaseServerRequest>(Arena*);
template<> LIBS3DMGRPC_API ::smart3dmap::v1::GetDrillDataRequest* Arena::CreateMaybeMessage<::smart3dmap::v1::GetDrillDataRequest>(Arena*);
template<> LIBS3DMGRPC_API ::smart3dmap::v1::GetDrillRequest* Arena::CreateMaybeMessage<::smart3dmap::v1::GetDrillRequest>(Arena*);
template<> LIBS3DMGRPC_API ::smart3dmap::v1::GetDrillStdLayersRequest* Arena::CreateMaybeMessage<::smart3dmap::v1::GetDrillStdLayersRequest>(Arena*);
template<> LIBS3DMGRPC_API ::smart3dmap::v1::GetGeoSurveyProjectRequest* Arena::CreateMaybeMessage<::smart3dmap::v1::GetGeoSurveyProjectRequest>(Arena*);
template<> LIBS3DMGRPC_API ::smart3dmap::v1::GetMapRequest* Arena::CreateMaybeMessage<::smart3dmap::v1::GetMapRequest>(Arena*);
template<> LIBS3DMGRPC_API ::smart3dmap::v1::GetProjectRequest* Arena::CreateMaybeMessage<::smart3dmap::v1::GetProjectRequest>(Arena*);
template<> LIBS3DMGRPC_API ::smart3dmap::v1::GetRasterLayerDataRequest* Arena::CreateMaybeMessage<::smart3dmap::v1::GetRasterLayerDataRequest>(Arena*);
template<> LIBS3DMGRPC_API ::smart3dmap::v1::GetStdStratRequest* Arena::CreateMaybeMessage<::smart3dmap::v1::GetStdStratRequest>(Arena*);
template<> LIBS3DMGRPC_API ::smart3dmap::v1::ImportCompressiveResistanceRecordRequest* Arena::CreateMaybeMessage<::smart3dmap::v1::ImportCompressiveResistanceRecordRequest>(Arena*);
template<> LIBS3DMGRPC_API ::smart3dmap::v1::ImportDrillDataStatus* Arena::CreateMaybeMessage<::smart3dmap::v1::ImportDrillDataStatus>(Arena*);
template<> LIBS3DMGRPC_API ::smart3dmap::v1::ImportDrillSoilCorrosivityRequest* Arena::CreateMaybeMessage<::smart3dmap::v1::ImportDrillSoilCorrosivityRequest>(Arena*);
template<> LIBS3DMGRPC_API ::smart3dmap::v1::ImportDrillStatus* Arena::CreateMaybeMessage<::smart3dmap::v1::ImportDrillStatus>(Arena*);
template<> LIBS3DMGRPC_API ::smart3dmap::v1::ImportDrillWaterCorrosivityRequest* Arena::CreateMaybeMessage<::smart3dmap::v1::ImportDrillWaterCorrosivityRequest>(Arena*);
template<> LIBS3DMGRPC_API ::smart3dmap::v1::ImportDrillsRequest* Arena::CreateMaybeMessage<::smart3dmap::v1::ImportDrillsRequest>(Arena*);
template<> LIBS3DMGRPC_API ::smart3dmap::v1::ImportDrillsResponse* Arena::CreateMaybeMessage<::smart3dmap::v1::ImportDrillsResponse>(Arena*);
template<> LIBS3DMGRPC_API ::smart3dmap::v1::ImportGeotechnicalRecordsRequest* Arena::CreateMaybeMessage<::smart3dmap::v1::ImportGeotechnicalRecordsRequest>(Arena*);
template<> LIBS3DMGRPC_API ::smart3dmap::v1::ImportModelMetadataRequest* Arena::CreateMaybeMessage<::smart3dmap::v1::ImportModelMetadataRequest>(Arena*);
template<> LIBS3DMGRPC_API ::smart3dmap::v1::ImportModelMetadataResponse* Arena::CreateMaybeMessage<::smart3dmap::v1::ImportModelMetadataResponse>(Arena*);
template<> LIBS3DMGRPC_API ::smart3dmap::v1::ImportStdPenetrationRecordRequest* Arena::CreateMaybeMessage<::smart3dmap::v1::ImportStdPenetrationRecordRequest>(Arena*);
template<> LIBS3DMGRPC_API ::smart3dmap::v1::ImportStdStratItemStatus* Arena::CreateMaybeMessage<::smart3dmap::v1::ImportStdStratItemStatus>(Arena*);
template<> LIBS3DMGRPC_API ::smart3dmap::v1::ImportStdStratItemsRequest* Arena::CreateMaybeMessage<::smart3dmap::v1::ImportStdStratItemsRequest>(Arena*);
template<> LIBS3DMGRPC_API ::smart3dmap::v1::ImportStdStratItemsResponse* Arena::CreateMaybeMessage<::smart3dmap::v1::ImportStdStratItemsResponse>(Arena*);
template<> LIBS3DMGRPC_API ::smart3dmap::v1::ImportedStdStratItem* Arena::CreateMaybeMessage<::smart3dmap::v1::ImportedStdStratItem>(Arena*);
template<> LIBS3DMGRPC_API ::smart3dmap::v1::Layer* Arena::CreateMaybeMessage<::smart3dmap::v1::Layer>(Arena*);
template<> LIBS3DMGRPC_API ::smart3dmap::v1::ListDBServerTypesRequest* Arena::CreateMaybeMessage<::smart3dmap::v1::ListDBServerTypesRequest>(Arena*);
template<> LIBS3DMGRPC_API ::smart3dmap::v1::ListDBServerTypesResponse* Arena::CreateMaybeMessage<::smart3dmap::v1::ListDBServerTypesResponse>(Arena*);
template<> LIBS3DMGRPC_API ::smart3dmap::v1::ListDBServerTypesResponse_TypeItem* Arena::CreateMaybeMessage<::smart3dmap::v1::ListDBServerTypesResponse_TypeItem>(Arena*);
template<> LIBS3DMGRPC_API ::smart3dmap::v1::ListDataResourceTypesRequest* Arena::CreateMaybeMessage<::smart3dmap::v1::ListDataResourceTypesRequest>(Arena*);
template<> LIBS3DMGRPC_API ::smart3dmap::v1::ListDataResourceTypesResponse* Arena::CreateMaybeMessage<::smart3dmap::v1::ListDataResourceTypesResponse>(Arena*);
template<> LIBS3DMGRPC_API ::smart3dmap::v1::ListDataResourceTypesResponse_TypeItem* Arena::CreateMaybeMessage<::smart3dmap::v1::ListDataResourceTypesResponse_TypeItem>(Arena*);
template<> LIBS3DMGRPC_API ::smart3dmap::v1::ListDatabaseAppTypesRequest* Arena::CreateMaybeMessage<::smart3dmap::v1::ListDatabaseAppTypesRequest>(Arena*);
template<> LIBS3DMGRPC_API ::smart3dmap::v1::ListDatabaseAppTypesResponse* Arena::CreateMaybeMessage<::smart3dmap::v1::ListDatabaseAppTypesResponse>(Arena*);
template<> LIBS3DMGRPC_API ::smart3dmap::v1::ListDatabaseAppTypesResponse_TypeItem* Arena::CreateMaybeMessage<::smart3dmap::v1::ListDatabaseAppTypesResponse_TypeItem>(Arena*);
template<> LIBS3DMGRPC_API ::smart3dmap::v1::ListDatabaseServersRequest* Arena::CreateMaybeMessage<::smart3dmap::v1::ListDatabaseServersRequest>(Arena*);
template<> LIBS3DMGRPC_API ::smart3dmap::v1::ListDatabaseServersResponse* Arena::CreateMaybeMessage<::smart3dmap::v1::ListDatabaseServersResponse>(Arena*);
template<> LIBS3DMGRPC_API ::smart3dmap::v1::ListDatabasesRequest* Arena::CreateMaybeMessage<::smart3dmap::v1::ListDatabasesRequest>(Arena*);
template<> LIBS3DMGRPC_API ::smart3dmap::v1::ListDatabasesResponse* Arena::CreateMaybeMessage<::smart3dmap::v1::ListDatabasesResponse>(Arena*);
template<> LIBS3DMGRPC_API ::smart3dmap::v1::ListDicTableCategoriesRequest* Arena::CreateMaybeMessage<::smart3dmap::v1::ListDicTableCategoriesRequest>(Arena*);
template<> LIBS3DMGRPC_API ::smart3dmap::v1::ListDicTableCategoriesResponse* Arena::CreateMaybeMessage<::smart3dmap::v1::ListDicTableCategoriesResponse>(Arena*);
template<> LIBS3DMGRPC_API ::smart3dmap::v1::ListDicTableFieldsRequest* Arena::CreateMaybeMessage<::smart3dmap::v1::ListDicTableFieldsRequest>(Arena*);
template<> LIBS3DMGRPC_API ::smart3dmap::v1::ListDicTableFieldsResponse* Arena::CreateMaybeMessage<::smart3dmap::v1::ListDicTableFieldsResponse>(Arena*);
template<> LIBS3DMGRPC_API ::smart3dmap::v1::ListDicTablesRequest* Arena::CreateMaybeMessage<::smart3dmap::v1::ListDicTablesRequest>(Arena*);
template<> LIBS3DMGRPC_API ::smart3dmap::v1::ListDicTablesResponse* Arena::CreateMaybeMessage<::smart3dmap::v1::ListDicTablesResponse>(Arena*);
template<> LIBS3DMGRPC_API ::smart3dmap::v1::ListDrillLogsRequest* Arena::CreateMaybeMessage<::smart3dmap::v1::ListDrillLogsRequest>(Arena*);
template<> LIBS3DMGRPC_API ::smart3dmap::v1::ListDrillLogsResponse* Arena::CreateMaybeMessage<::smart3dmap::v1::ListDrillLogsResponse>(Arena*);
template<> LIBS3DMGRPC_API ::smart3dmap::v1::ListDrillsByPageRequest* Arena::CreateMaybeMessage<::smart3dmap::v1::ListDrillsByPageRequest>(Arena*);
template<> LIBS3DMGRPC_API ::smart3dmap::v1::ListDrillsByPageResponse* Arena::CreateMaybeMessage<::smart3dmap::v1::ListDrillsByPageResponse>(Arena*);
template<> LIBS3DMGRPC_API ::smart3dmap::v1::ListDrillsByStreamRequest* Arena::CreateMaybeMessage<::smart3dmap::v1::ListDrillsByStreamRequest>(Arena*);
template<> LIBS3DMGRPC_API ::smart3dmap::v1::ListFieldModelsRequest* Arena::CreateMaybeMessage<::smart3dmap::v1::ListFieldModelsRequest>(Arena*);
template<> LIBS3DMGRPC_API ::smart3dmap::v1::ListFieldModelsResponse* Arena::CreateMaybeMessage<::smart3dmap::v1::ListFieldModelsResponse>(Arena*);
template<> LIBS3DMGRPC_API ::smart3dmap::v1::ListFieldsOfTableRequest* Arena::CreateMaybeMessage<::smart3dmap::v1::ListFieldsOfTableRequest>(Arena*);
template<> LIBS3DMGRPC_API ::smart3dmap::v1::ListFieldsOfTableResponse* Arena::CreateMaybeMessage<::smart3dmap::v1::ListFieldsOfTableResponse>(Arena*);
template<> LIBS3DMGRPC_API ::smart3dmap::v1::ListFieldsOfTableResponse_TableField* Arena::CreateMaybeMessage<::smart3dmap::v1::ListFieldsOfTableResponse_TableField>(Arena*);
template<> LIBS3DMGRPC_API ::smart3dmap::v1::ListGeoSurveyProjectsRequest* Arena::CreateMaybeMessage<::smart3dmap::v1::ListGeoSurveyProjectsRequest>(Arena*);
template<> LIBS3DMGRPC_API ::smart3dmap::v1::ListGeoSurveyProjectsResponse* Arena::CreateMaybeMessage<::smart3dmap::v1::ListGeoSurveyProjectsResponse>(Arena*);
template<> LIBS3DMGRPC_API ::smart3dmap::v1::ListLayersOfMapByPageRequest* Arena::CreateMaybeMessage<::smart3dmap::v1::ListLayersOfMapByPageRequest>(Arena*);
template<> LIBS3DMGRPC_API ::smart3dmap::v1::ListLayersOfMapByPageResponse* Arena::CreateMaybeMessage<::smart3dmap::v1::ListLayersOfMapByPageResponse>(Arena*);
template<> LIBS3DMGRPC_API ::smart3dmap::v1::ListLayersOfMapRequest* Arena::CreateMaybeMessage<::smart3dmap::v1::ListLayersOfMapRequest>(Arena*);
template<> LIBS3DMGRPC_API ::smart3dmap::v1::ListMapsRequest* Arena::CreateMaybeMessage<::smart3dmap::v1::ListMapsRequest>(Arena*);
template<> LIBS3DMGRPC_API ::smart3dmap::v1::ListMapsResponse* Arena::CreateMaybeMessage<::smart3dmap::v1::ListMapsResponse>(Arena*);
template<> LIBS3DMGRPC_API ::smart3dmap::v1::ListProjectsRequest* Arena::CreateMaybeMessage<::smart3dmap::v1::ListProjectsRequest>(Arena*);
template<> LIBS3DMGRPC_API ::smart3dmap::v1::ListProjectsResponse* Arena::CreateMaybeMessage<::smart3dmap::v1::ListProjectsResponse>(Arena*);
template<> LIBS3DMGRPC_API ::smart3dmap::v1::ListSectionMapsRequest* Arena::CreateMaybeMessage<::smart3dmap::v1::ListSectionMapsRequest>(Arena*);
template<> LIBS3DMGRPC_API ::smart3dmap::v1::ListSectionMapsResponse* Arena::CreateMaybeMessage<::smart3dmap::v1::ListSectionMapsResponse>(Arena*);
template<> LIBS3DMGRPC_API ::smart3dmap::v1::ListStdStratsRequest* Arena::CreateMaybeMessage<::smart3dmap::v1::ListStdStratsRequest>(Arena*);
template<> LIBS3DMGRPC_API ::smart3dmap::v1::ListStdStratsResponse* Arena::CreateMaybeMessage<::smart3dmap::v1::ListStdStratsResponse>(Arena*);
template<> LIBS3DMGRPC_API ::smart3dmap::v1::ListStructureModelsRequest* Arena::CreateMaybeMessage<::smart3dmap::v1::ListStructureModelsRequest>(Arena*);
template<> LIBS3DMGRPC_API ::smart3dmap::v1::ListStructureModelsResponse* Arena::CreateMaybeMessage<::smart3dmap::v1::ListStructureModelsResponse>(Arena*);
template<> LIBS3DMGRPC_API ::smart3dmap::v1::ListTablesInDBRequest* Arena::CreateMaybeMessage<::smart3dmap::v1::ListTablesInDBRequest>(Arena*);
template<> LIBS3DMGRPC_API ::smart3dmap::v1::ListTablesInDBResponse* Arena::CreateMaybeMessage<::smart3dmap::v1::ListTablesInDBResponse>(Arena*);
template<> LIBS3DMGRPC_API ::smart3dmap::v1::Map* Arena::CreateMaybeMessage<::smart3dmap::v1::Map>(Arena*);
template<> LIBS3DMGRPC_API ::smart3dmap::v1::Model3DField* Arena::CreateMaybeMessage<::smart3dmap::v1::Model3DField>(Arena*);
template<> LIBS3DMGRPC_API ::smart3dmap::v1::Model3DStructure* Arena::CreateMaybeMessage<::smart3dmap::v1::Model3DStructure>(Arena*);
template<> LIBS3DMGRPC_API ::smart3dmap::v1::Project* Arena::CreateMaybeMessage<::smart3dmap::v1::Project>(Arena*);
template<> LIBS3DMGRPC_API ::smart3dmap::v1::PublishProjectRequest* Arena::CreateMaybeMessage<::smart3dmap::v1::PublishProjectRequest>(Arena*);
template<> LIBS3DMGRPC_API ::smart3dmap::v1::PublishProjectResponse* Arena::CreateMaybeMessage<::smart3dmap::v1::PublishProjectResponse>(Arena*);
template<> LIBS3DMGRPC_API ::smart3dmap::v1::RasterLayerData* Arena::CreateMaybeMessage<::smart3dmap::v1::RasterLayerData>(Arena*);
template<> LIBS3DMGRPC_API ::smart3dmap::v1::ResetStdStratItemsRequest* Arena::CreateMaybeMessage<::smart3dmap::v1::ResetStdStratItemsRequest>(Arena*);
template<> LIBS3DMGRPC_API ::smart3dmap::v1::ResetStdStratItemsResponse* Arena::CreateMaybeMessage<::smart3dmap::v1::ResetStdStratItemsResponse>(Arena*);
template<> LIBS3DMGRPC_API ::smart3dmap::v1::SectionMap* Arena::CreateMaybeMessage<::smart3dmap::v1::SectionMap>(Arena*);
template<> LIBS3DMGRPC_API ::smart3dmap::v1::StdPenetrationRecord* Arena::CreateMaybeMessage<::smart3dmap::v1::StdPenetrationRecord>(Arena*);
template<> LIBS3DMGRPC_API ::smart3dmap::v1::StdStrat* Arena::CreateMaybeMessage<::smart3dmap::v1::StdStrat>(Arena*);
template<> LIBS3DMGRPC_API ::smart3dmap::v1::StdStrat_Item* Arena::CreateMaybeMessage<::smart3dmap::v1::StdStrat_Item>(Arena*);
template<> LIBS3DMGRPC_API ::smart3dmap::v1::UpdateDatabaseServerRequest* Arena::CreateMaybeMessage<::smart3dmap::v1::UpdateDatabaseServerRequest>(Arena*);
template<> LIBS3DMGRPC_API ::smart3dmap::v1::UpdateDatabaseServerResponse* Arena::CreateMaybeMessage<::smart3dmap::v1::UpdateDatabaseServerResponse>(Arena*);
template<> LIBS3DMGRPC_API ::smart3dmap::v1::UpdateProjectRequest* Arena::CreateMaybeMessage<::smart3dmap::v1::UpdateProjectRequest>(Arena*);
template<> LIBS3DMGRPC_API ::smart3dmap::v1::UpdateProjectResponse* Arena::CreateMaybeMessage<::smart3dmap::v1::UpdateProjectResponse>(Arena*);
template<> LIBS3DMGRPC_API ::smart3dmap::v1::UpdateStdStratRequest* Arena::CreateMaybeMessage<::smart3dmap::v1::UpdateStdStratRequest>(Arena*);
template<> LIBS3DMGRPC_API ::smart3dmap::v1::UpdateStdStratResponse* Arena::CreateMaybeMessage<::smart3dmap::v1::UpdateStdStratResponse>(Arena*);
PROTOBUF_NAMESPACE_CLOSE
namespace smart3dmap {
namespace v1 {

enum Layer_Type : int {
  Layer_Type_LAYER_TYPE_UNKNOWN = 0,
  Layer_Type_LAYER_TYPE_VECTOR = 1,
  Layer_Type_LAYER_TYPE_RASTER = 2,
  Layer_Type_Layer_Type_INT_MIN_SENTINEL_DO_NOT_USE_ = std::numeric_limits<::PROTOBUF_NAMESPACE_ID::int32>::min(),
  Layer_Type_Layer_Type_INT_MAX_SENTINEL_DO_NOT_USE_ = std::numeric_limits<::PROTOBUF_NAMESPACE_ID::int32>::max()
};
LIBS3DMGRPC_API bool Layer_Type_IsValid(int value);
constexpr Layer_Type Layer_Type_Type_MIN = Layer_Type_LAYER_TYPE_UNKNOWN;
constexpr Layer_Type Layer_Type_Type_MAX = Layer_Type_LAYER_TYPE_RASTER;
constexpr int Layer_Type_Type_ARRAYSIZE = Layer_Type_Type_MAX + 1;

LIBS3DMGRPC_API const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* Layer_Type_descriptor();
template<typename T>
inline const std::string& Layer_Type_Name(T enum_t_value) {
  static_assert(::std::is_same<T, Layer_Type>::value ||
    ::std::is_integral<T>::value,
    "Incorrect type passed to function Layer_Type_Name.");
  return ::PROTOBUF_NAMESPACE_ID::internal::NameOfEnum(
    Layer_Type_descriptor(), enum_t_value);
}
inline bool Layer_Type_Parse(
    ::PROTOBUF_NAMESPACE_ID::ConstStringParam name, Layer_Type* value) {
  return ::PROTOBUF_NAMESPACE_ID::internal::ParseNamedEnum<Layer_Type>(
    Layer_Type_descriptor(), name, value);
}
enum StdStrat_Item_Type : int {
  StdStrat_Item_Type_UNKNOWN = 0,
  StdStrat_Item_Type_STRAT_UNIT = 1,
  StdStrat_Item_Type_LENTICLE = 2,
  StdStrat_Item_Type_ROCK = 3,
  StdStrat_Item_Type_ISOLATED_STONE = 4,
  StdStrat_Item_Type_DIKE = 5,
  StdStrat_Item_Type_FILLING_STONE = 6,
  StdStrat_Item_Type_FAULT = 7,
  StdStrat_Item_Type_StdStrat_Item_Type_INT_MIN_SENTINEL_DO_NOT_USE_ = std::numeric_limits<::PROTOBUF_NAMESPACE_ID::int32>::min(),
  StdStrat_Item_Type_StdStrat_Item_Type_INT_MAX_SENTINEL_DO_NOT_USE_ = std::numeric_limits<::PROTOBUF_NAMESPACE_ID::int32>::max()
};
LIBS3DMGRPC_API bool StdStrat_Item_Type_IsValid(int value);
constexpr StdStrat_Item_Type StdStrat_Item_Type_Type_MIN = StdStrat_Item_Type_UNKNOWN;
constexpr StdStrat_Item_Type StdStrat_Item_Type_Type_MAX = StdStrat_Item_Type_FAULT;
constexpr int StdStrat_Item_Type_Type_ARRAYSIZE = StdStrat_Item_Type_Type_MAX + 1;

LIBS3DMGRPC_API const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* StdStrat_Item_Type_descriptor();
template<typename T>
inline const std::string& StdStrat_Item_Type_Name(T enum_t_value) {
  static_assert(::std::is_same<T, StdStrat_Item_Type>::value ||
    ::std::is_integral<T>::value,
    "Incorrect type passed to function StdStrat_Item_Type_Name.");
  return ::PROTOBUF_NAMESPACE_ID::internal::NameOfEnum(
    StdStrat_Item_Type_descriptor(), enum_t_value);
}
inline bool StdStrat_Item_Type_Parse(
    ::PROTOBUF_NAMESPACE_ID::ConstStringParam name, StdStrat_Item_Type* value) {
  return ::PROTOBUF_NAMESPACE_ID::internal::ParseNamedEnum<StdStrat_Item_Type>(
    StdStrat_Item_Type_descriptor(), name, value);
}
enum DBServerType : int {
  DB_UNKNOWN = 0,
  DB_POSTGRESQL = 5,
  DB_MYSQL = 6,
  DBServerType_INT_MIN_SENTINEL_DO_NOT_USE_ = std::numeric_limits<::PROTOBUF_NAMESPACE_ID::int32>::min(),
  DBServerType_INT_MAX_SENTINEL_DO_NOT_USE_ = std::numeric_limits<::PROTOBUF_NAMESPACE_ID::int32>::max()
};
LIBS3DMGRPC_API bool DBServerType_IsValid(int value);
constexpr DBServerType DBServerType_MIN = DB_UNKNOWN;
constexpr DBServerType DBServerType_MAX = DB_MYSQL;
constexpr int DBServerType_ARRAYSIZE = DBServerType_MAX + 1;

LIBS3DMGRPC_API const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* DBServerType_descriptor();
template<typename T>
inline const std::string& DBServerType_Name(T enum_t_value) {
  static_assert(::std::is_same<T, DBServerType>::value ||
    ::std::is_integral<T>::value,
    "Incorrect type passed to function DBServerType_Name.");
  return ::PROTOBUF_NAMESPACE_ID::internal::NameOfEnum(
    DBServerType_descriptor(), enum_t_value);
}
inline bool DBServerType_Parse(
    ::PROTOBUF_NAMESPACE_ID::ConstStringParam name, DBServerType* value) {
  return ::PROTOBUF_NAMESPACE_ID::internal::ParseNamedEnum<DBServerType>(
    DBServerType_descriptor(), name, value);
}
enum DBAppType : int {
  DB_APP_UNKNOWN = 0,
  DB_APP_GEO_ATT = 1,
  DB_APP_3D_MODEL = 2,
  DB_APP_2D_SDE = 3,
  DBAppType_INT_MIN_SENTINEL_DO_NOT_USE_ = std::numeric_limits<::PROTOBUF_NAMESPACE_ID::int32>::min(),
  DBAppType_INT_MAX_SENTINEL_DO_NOT_USE_ = std::numeric_limits<::PROTOBUF_NAMESPACE_ID::int32>::max()
};
LIBS3DMGRPC_API bool DBAppType_IsValid(int value);
constexpr DBAppType DBAppType_MIN = DB_APP_UNKNOWN;
constexpr DBAppType DBAppType_MAX = DB_APP_2D_SDE;
constexpr int DBAppType_ARRAYSIZE = DBAppType_MAX + 1;

LIBS3DMGRPC_API const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* DBAppType_descriptor();
template<typename T>
inline const std::string& DBAppType_Name(T enum_t_value) {
  static_assert(::std::is_same<T, DBAppType>::value ||
    ::std::is_integral<T>::value,
    "Incorrect type passed to function DBAppType_Name.");
  return ::PROTOBUF_NAMESPACE_ID::internal::NameOfEnum(
    DBAppType_descriptor(), enum_t_value);
}
inline bool DBAppType_Parse(
    ::PROTOBUF_NAMESPACE_ID::ConstStringParam name, DBAppType* value) {
  return ::PROTOBUF_NAMESPACE_ID::internal::ParseNamedEnum<DBAppType>(
    DBAppType_descriptor(), name, value);
}
enum DataResourceType : int {
  DR_ANY = 0,
  DR_STD_STRAT = 1,
  DR_DRILL = 2,
  DR_DRILL_LOG = 3,
  DR_SECTION_MAP = 4,
  DR_PLAIN_MAP = 5,
  DR_STRATIGRAPHY_REGION_MAP = 6,
  DR_ISOPLETH_MAP = 7,
  DR_MODEL_3D_STRUCTURE = 8,
  DR_MODEL_3D_FIELD = 9,
  DataResourceType_INT_MIN_SENTINEL_DO_NOT_USE_ = std::numeric_limits<::PROTOBUF_NAMESPACE_ID::int32>::min(),
  DataResourceType_INT_MAX_SENTINEL_DO_NOT_USE_ = std::numeric_limits<::PROTOBUF_NAMESPACE_ID::int32>::max()
};
LIBS3DMGRPC_API bool DataResourceType_IsValid(int value);
constexpr DataResourceType DataResourceType_MIN = DR_ANY;
constexpr DataResourceType DataResourceType_MAX = DR_MODEL_3D_FIELD;
constexpr int DataResourceType_ARRAYSIZE = DataResourceType_MAX + 1;

LIBS3DMGRPC_API const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* DataResourceType_descriptor();
template<typename T>
inline const std::string& DataResourceType_Name(T enum_t_value) {
  static_assert(::std::is_same<T, DataResourceType>::value ||
    ::std::is_integral<T>::value,
    "Incorrect type passed to function DataResourceType_Name.");
  return ::PROTOBUF_NAMESPACE_ID::internal::NameOfEnum(
    DataResourceType_descriptor(), enum_t_value);
}
inline bool DataResourceType_Parse(
    ::PROTOBUF_NAMESPACE_ID::ConstStringParam name, DataResourceType* value) {
  return ::PROTOBUF_NAMESPACE_ID::internal::ParseNamedEnum<DataResourceType>(
    DataResourceType_descriptor(), name, value);
}
enum DataPreviewMode : int {
  DATA_PREVIEW_NO = 0,
  DATA_PREVIEW_2D_MAP = 1,
  DATA_PREVIEW_3D_MODEL = 2,
  DataPreviewMode_INT_MIN_SENTINEL_DO_NOT_USE_ = std::numeric_limits<::PROTOBUF_NAMESPACE_ID::int32>::min(),
  DataPreviewMode_INT_MAX_SENTINEL_DO_NOT_USE_ = std::numeric_limits<::PROTOBUF_NAMESPACE_ID::int32>::max()
};
LIBS3DMGRPC_API bool DataPreviewMode_IsValid(int value);
constexpr DataPreviewMode DataPreviewMode_MIN = DATA_PREVIEW_NO;
constexpr DataPreviewMode DataPreviewMode_MAX = DATA_PREVIEW_3D_MODEL;
constexpr int DataPreviewMode_ARRAYSIZE = DataPreviewMode_MAX + 1;

LIBS3DMGRPC_API const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* DataPreviewMode_descriptor();
template<typename T>
inline const std::string& DataPreviewMode_Name(T enum_t_value) {
  static_assert(::std::is_same<T, DataPreviewMode>::value ||
    ::std::is_integral<T>::value,
    "Incorrect type passed to function DataPreviewMode_Name.");
  return ::PROTOBUF_NAMESPACE_ID::internal::NameOfEnum(
    DataPreviewMode_descriptor(), enum_t_value);
}
inline bool DataPreviewMode_Parse(
    ::PROTOBUF_NAMESPACE_ID::ConstStringParam name, DataPreviewMode* value) {
  return ::PROTOBUF_NAMESPACE_ID::internal::ParseNamedEnum<DataPreviewMode>(
    DataPreviewMode_descriptor(), name, value);
}
// ===================================================================

class LIBS3DMGRPC_API DBServer PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:smart3dmap.v1.DBServer) */ {
 public:
  inline DBServer() : DBServer(nullptr) {}
  virtual ~DBServer();
  explicit constexpr DBServer(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  DBServer(const DBServer& from);
  DBServer(DBServer&& from) noexcept
    : DBServer() {
    *this = ::std::move(from);
  }

  inline DBServer& operator=(const DBServer& from) {
    CopyFrom(from);
    return *this;
  }
  inline DBServer& operator=(DBServer&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const DBServer& default_instance() {
    return *internal_default_instance();
  }
  static inline const DBServer* internal_default_instance() {
    return reinterpret_cast<const DBServer*>(
               &_DBServer_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  friend void swap(DBServer& a, DBServer& b) {
    a.Swap(&b);
  }
  inline void Swap(DBServer* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(DBServer* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline DBServer* New() const final {
    return CreateMaybeMessage<DBServer>(nullptr);
  }

  DBServer* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<DBServer>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const DBServer& from);
  void MergeFrom(const DBServer& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(DBServer* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "smart3dmap.v1.DBServer";
  }
  protected:
  explicit DBServer(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    return ::descriptor_table_data_5fengine_2fdata_5fengine_2eproto_metadata_getter(kIndexInFileMessages);
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kNameFieldNumber = 2,
    kHostFieldNumber = 4,
    kInnerHostFieldNumber = 10,
    kAdminFieldNumber = 6,
    kUserFieldNumber = 7,
    kCreatedAtFieldNumber = 8,
    kUpdatedAtFieldNumber = 9,
    kIdFieldNumber = 1,
    kTypeFieldNumber = 3,
    kPortFieldNumber = 5,
  };
  // string name = 2;
  void clear_name();
  const std::string& name() const;
  void set_name(const std::string& value);
  void set_name(std::string&& value);
  void set_name(const char* value);
  void set_name(const char* value, size_t size);
  std::string* mutable_name();
  std::string* release_name();
  void set_allocated_name(std::string* name);
  private:
  const std::string& _internal_name() const;
  void _internal_set_name(const std::string& value);
  std::string* _internal_mutable_name();
  public:

  // string host = 4;
  void clear_host();
  const std::string& host() const;
  void set_host(const std::string& value);
  void set_host(std::string&& value);
  void set_host(const char* value);
  void set_host(const char* value, size_t size);
  std::string* mutable_host();
  std::string* release_host();
  void set_allocated_host(std::string* host);
  private:
  const std::string& _internal_host() const;
  void _internal_set_host(const std::string& value);
  std::string* _internal_mutable_host();
  public:

  // string inner_host = 10;
  void clear_inner_host();
  const std::string& inner_host() const;
  void set_inner_host(const std::string& value);
  void set_inner_host(std::string&& value);
  void set_inner_host(const char* value);
  void set_inner_host(const char* value, size_t size);
  std::string* mutable_inner_host();
  std::string* release_inner_host();
  void set_allocated_inner_host(std::string* inner_host);
  private:
  const std::string& _internal_inner_host() const;
  void _internal_set_inner_host(const std::string& value);
  std::string* _internal_mutable_inner_host();
  public:

  // .smart3dmap.v1.DBUser admin = 6;
  bool has_admin() const;
  private:
  bool _internal_has_admin() const;
  public:
  void clear_admin();
  const ::smart3dmap::v1::DBUser& admin() const;
  ::smart3dmap::v1::DBUser* release_admin();
  ::smart3dmap::v1::DBUser* mutable_admin();
  void set_allocated_admin(::smart3dmap::v1::DBUser* admin);
  private:
  const ::smart3dmap::v1::DBUser& _internal_admin() const;
  ::smart3dmap::v1::DBUser* _internal_mutable_admin();
  public:
  void unsafe_arena_set_allocated_admin(
      ::smart3dmap::v1::DBUser* admin);
  ::smart3dmap::v1::DBUser* unsafe_arena_release_admin();

  // .smart3dmap.v1.DBUser user = 7;
  bool has_user() const;
  private:
  bool _internal_has_user() const;
  public:
  void clear_user();
  const ::smart3dmap::v1::DBUser& user() const;
  ::smart3dmap::v1::DBUser* release_user();
  ::smart3dmap::v1::DBUser* mutable_user();
  void set_allocated_user(::smart3dmap::v1::DBUser* user);
  private:
  const ::smart3dmap::v1::DBUser& _internal_user() const;
  ::smart3dmap::v1::DBUser* _internal_mutable_user();
  public:
  void unsafe_arena_set_allocated_user(
      ::smart3dmap::v1::DBUser* user);
  ::smart3dmap::v1::DBUser* unsafe_arena_release_user();

  // .google.protobuf.Timestamp created_at = 8;
  bool has_created_at() const;
  private:
  bool _internal_has_created_at() const;
  public:
  void clear_created_at();
  const PROTOBUF_NAMESPACE_ID::Timestamp& created_at() const;
  PROTOBUF_NAMESPACE_ID::Timestamp* release_created_at();
  PROTOBUF_NAMESPACE_ID::Timestamp* mutable_created_at();
  void set_allocated_created_at(PROTOBUF_NAMESPACE_ID::Timestamp* created_at);
  private:
  const PROTOBUF_NAMESPACE_ID::Timestamp& _internal_created_at() const;
  PROTOBUF_NAMESPACE_ID::Timestamp* _internal_mutable_created_at();
  public:
  void unsafe_arena_set_allocated_created_at(
      PROTOBUF_NAMESPACE_ID::Timestamp* created_at);
  PROTOBUF_NAMESPACE_ID::Timestamp* unsafe_arena_release_created_at();

  // .google.protobuf.Timestamp updated_at = 9;
  bool has_updated_at() const;
  private:
  bool _internal_has_updated_at() const;
  public:
  void clear_updated_at();
  const PROTOBUF_NAMESPACE_ID::Timestamp& updated_at() const;
  PROTOBUF_NAMESPACE_ID::Timestamp* release_updated_at();
  PROTOBUF_NAMESPACE_ID::Timestamp* mutable_updated_at();
  void set_allocated_updated_at(PROTOBUF_NAMESPACE_ID::Timestamp* updated_at);
  private:
  const PROTOBUF_NAMESPACE_ID::Timestamp& _internal_updated_at() const;
  PROTOBUF_NAMESPACE_ID::Timestamp* _internal_mutable_updated_at();
  public:
  void unsafe_arena_set_allocated_updated_at(
      PROTOBUF_NAMESPACE_ID::Timestamp* updated_at);
  PROTOBUF_NAMESPACE_ID::Timestamp* unsafe_arena_release_updated_at();

  // int32 id = 1;
  void clear_id();
  ::PROTOBUF_NAMESPACE_ID::int32 id() const;
  void set_id(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_id() const;
  void _internal_set_id(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // .smart3dmap.v1.DBServerType type = 3;
  void clear_type();
  ::smart3dmap::v1::DBServerType type() const;
  void set_type(::smart3dmap::v1::DBServerType value);
  private:
  ::smart3dmap::v1::DBServerType _internal_type() const;
  void _internal_set_type(::smart3dmap::v1::DBServerType value);
  public:

  // int32 port = 5;
  void clear_port();
  ::PROTOBUF_NAMESPACE_ID::int32 port() const;
  void set_port(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_port() const;
  void _internal_set_port(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // @@protoc_insertion_point(class_scope:smart3dmap.v1.DBServer)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr name_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr host_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr inner_host_;
  ::smart3dmap::v1::DBUser* admin_;
  ::smart3dmap::v1::DBUser* user_;
  PROTOBUF_NAMESPACE_ID::Timestamp* created_at_;
  PROTOBUF_NAMESPACE_ID::Timestamp* updated_at_;
  ::PROTOBUF_NAMESPACE_ID::int32 id_;
  int type_;
  ::PROTOBUF_NAMESPACE_ID::int32 port_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_data_5fengine_2fdata_5fengine_2eproto;
};
// -------------------------------------------------------------------

class LIBS3DMGRPC_API DBUser PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:smart3dmap.v1.DBUser) */ {
 public:
  inline DBUser() : DBUser(nullptr) {}
  virtual ~DBUser();
  explicit constexpr DBUser(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  DBUser(const DBUser& from);
  DBUser(DBUser&& from) noexcept
    : DBUser() {
    *this = ::std::move(from);
  }

  inline DBUser& operator=(const DBUser& from) {
    CopyFrom(from);
    return *this;
  }
  inline DBUser& operator=(DBUser&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const DBUser& default_instance() {
    return *internal_default_instance();
  }
  static inline const DBUser* internal_default_instance() {
    return reinterpret_cast<const DBUser*>(
               &_DBUser_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    1;

  friend void swap(DBUser& a, DBUser& b) {
    a.Swap(&b);
  }
  inline void Swap(DBUser* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(DBUser* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline DBUser* New() const final {
    return CreateMaybeMessage<DBUser>(nullptr);
  }

  DBUser* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<DBUser>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const DBUser& from);
  void MergeFrom(const DBUser& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(DBUser* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "smart3dmap.v1.DBUser";
  }
  protected:
  explicit DBUser(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    return ::descriptor_table_data_5fengine_2fdata_5fengine_2eproto_metadata_getter(kIndexInFileMessages);
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kNameFieldNumber = 1,
    kPasswordFieldNumber = 2,
  };
  // string name = 1;
  void clear_name();
  const std::string& name() const;
  void set_name(const std::string& value);
  void set_name(std::string&& value);
  void set_name(const char* value);
  void set_name(const char* value, size_t size);
  std::string* mutable_name();
  std::string* release_name();
  void set_allocated_name(std::string* name);
  private:
  const std::string& _internal_name() const;
  void _internal_set_name(const std::string& value);
  std::string* _internal_mutable_name();
  public:

  // string password = 2;
  void clear_password();
  const std::string& password() const;
  void set_password(const std::string& value);
  void set_password(std::string&& value);
  void set_password(const char* value);
  void set_password(const char* value, size_t size);
  std::string* mutable_password();
  std::string* release_password();
  void set_allocated_password(std::string* password);
  private:
  const std::string& _internal_password() const;
  void _internal_set_password(const std::string& value);
  std::string* _internal_mutable_password();
  public:

  // @@protoc_insertion_point(class_scope:smart3dmap.v1.DBUser)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr name_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr password_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_data_5fengine_2fdata_5fengine_2eproto;
};
// -------------------------------------------------------------------

class LIBS3DMGRPC_API ListDBServerTypesRequest PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:smart3dmap.v1.ListDBServerTypesRequest) */ {
 public:
  inline ListDBServerTypesRequest() : ListDBServerTypesRequest(nullptr) {}
  virtual ~ListDBServerTypesRequest();
  explicit constexpr ListDBServerTypesRequest(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  ListDBServerTypesRequest(const ListDBServerTypesRequest& from);
  ListDBServerTypesRequest(ListDBServerTypesRequest&& from) noexcept
    : ListDBServerTypesRequest() {
    *this = ::std::move(from);
  }

  inline ListDBServerTypesRequest& operator=(const ListDBServerTypesRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline ListDBServerTypesRequest& operator=(ListDBServerTypesRequest&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const ListDBServerTypesRequest& default_instance() {
    return *internal_default_instance();
  }
  static inline const ListDBServerTypesRequest* internal_default_instance() {
    return reinterpret_cast<const ListDBServerTypesRequest*>(
               &_ListDBServerTypesRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    2;

  friend void swap(ListDBServerTypesRequest& a, ListDBServerTypesRequest& b) {
    a.Swap(&b);
  }
  inline void Swap(ListDBServerTypesRequest* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(ListDBServerTypesRequest* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline ListDBServerTypesRequest* New() const final {
    return CreateMaybeMessage<ListDBServerTypesRequest>(nullptr);
  }

  ListDBServerTypesRequest* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<ListDBServerTypesRequest>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const ListDBServerTypesRequest& from);
  void MergeFrom(const ListDBServerTypesRequest& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(ListDBServerTypesRequest* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "smart3dmap.v1.ListDBServerTypesRequest";
  }
  protected:
  explicit ListDBServerTypesRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    return ::descriptor_table_data_5fengine_2fdata_5fengine_2eproto_metadata_getter(kIndexInFileMessages);
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // @@protoc_insertion_point(class_scope:smart3dmap.v1.ListDBServerTypesRequest)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_data_5fengine_2fdata_5fengine_2eproto;
};
// -------------------------------------------------------------------

class LIBS3DMGRPC_API ListDBServerTypesResponse_TypeItem PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:smart3dmap.v1.ListDBServerTypesResponse.TypeItem) */ {
 public:
  inline ListDBServerTypesResponse_TypeItem() : ListDBServerTypesResponse_TypeItem(nullptr) {}
  virtual ~ListDBServerTypesResponse_TypeItem();
  explicit constexpr ListDBServerTypesResponse_TypeItem(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  ListDBServerTypesResponse_TypeItem(const ListDBServerTypesResponse_TypeItem& from);
  ListDBServerTypesResponse_TypeItem(ListDBServerTypesResponse_TypeItem&& from) noexcept
    : ListDBServerTypesResponse_TypeItem() {
    *this = ::std::move(from);
  }

  inline ListDBServerTypesResponse_TypeItem& operator=(const ListDBServerTypesResponse_TypeItem& from) {
    CopyFrom(from);
    return *this;
  }
  inline ListDBServerTypesResponse_TypeItem& operator=(ListDBServerTypesResponse_TypeItem&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const ListDBServerTypesResponse_TypeItem& default_instance() {
    return *internal_default_instance();
  }
  static inline const ListDBServerTypesResponse_TypeItem* internal_default_instance() {
    return reinterpret_cast<const ListDBServerTypesResponse_TypeItem*>(
               &_ListDBServerTypesResponse_TypeItem_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    3;

  friend void swap(ListDBServerTypesResponse_TypeItem& a, ListDBServerTypesResponse_TypeItem& b) {
    a.Swap(&b);
  }
  inline void Swap(ListDBServerTypesResponse_TypeItem* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(ListDBServerTypesResponse_TypeItem* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline ListDBServerTypesResponse_TypeItem* New() const final {
    return CreateMaybeMessage<ListDBServerTypesResponse_TypeItem>(nullptr);
  }

  ListDBServerTypesResponse_TypeItem* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<ListDBServerTypesResponse_TypeItem>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const ListDBServerTypesResponse_TypeItem& from);
  void MergeFrom(const ListDBServerTypesResponse_TypeItem& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(ListDBServerTypesResponse_TypeItem* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "smart3dmap.v1.ListDBServerTypesResponse.TypeItem";
  }
  protected:
  explicit ListDBServerTypesResponse_TypeItem(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    return ::descriptor_table_data_5fengine_2fdata_5fengine_2eproto_metadata_getter(kIndexInFileMessages);
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kNameFieldNumber = 1,
    kTypeFieldNumber = 2,
  };
  // string name = 1;
  void clear_name();
  const std::string& name() const;
  void set_name(const std::string& value);
  void set_name(std::string&& value);
  void set_name(const char* value);
  void set_name(const char* value, size_t size);
  std::string* mutable_name();
  std::string* release_name();
  void set_allocated_name(std::string* name);
  private:
  const std::string& _internal_name() const;
  void _internal_set_name(const std::string& value);
  std::string* _internal_mutable_name();
  public:

  // .smart3dmap.v1.DBServerType type = 2;
  void clear_type();
  ::smart3dmap::v1::DBServerType type() const;
  void set_type(::smart3dmap::v1::DBServerType value);
  private:
  ::smart3dmap::v1::DBServerType _internal_type() const;
  void _internal_set_type(::smart3dmap::v1::DBServerType value);
  public:

  // @@protoc_insertion_point(class_scope:smart3dmap.v1.ListDBServerTypesResponse.TypeItem)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr name_;
  int type_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_data_5fengine_2fdata_5fengine_2eproto;
};
// -------------------------------------------------------------------

class LIBS3DMGRPC_API ListDBServerTypesResponse PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:smart3dmap.v1.ListDBServerTypesResponse) */ {
 public:
  inline ListDBServerTypesResponse() : ListDBServerTypesResponse(nullptr) {}
  virtual ~ListDBServerTypesResponse();
  explicit constexpr ListDBServerTypesResponse(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  ListDBServerTypesResponse(const ListDBServerTypesResponse& from);
  ListDBServerTypesResponse(ListDBServerTypesResponse&& from) noexcept
    : ListDBServerTypesResponse() {
    *this = ::std::move(from);
  }

  inline ListDBServerTypesResponse& operator=(const ListDBServerTypesResponse& from) {
    CopyFrom(from);
    return *this;
  }
  inline ListDBServerTypesResponse& operator=(ListDBServerTypesResponse&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const ListDBServerTypesResponse& default_instance() {
    return *internal_default_instance();
  }
  static inline const ListDBServerTypesResponse* internal_default_instance() {
    return reinterpret_cast<const ListDBServerTypesResponse*>(
               &_ListDBServerTypesResponse_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    4;

  friend void swap(ListDBServerTypesResponse& a, ListDBServerTypesResponse& b) {
    a.Swap(&b);
  }
  inline void Swap(ListDBServerTypesResponse* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(ListDBServerTypesResponse* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline ListDBServerTypesResponse* New() const final {
    return CreateMaybeMessage<ListDBServerTypesResponse>(nullptr);
  }

  ListDBServerTypesResponse* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<ListDBServerTypesResponse>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const ListDBServerTypesResponse& from);
  void MergeFrom(const ListDBServerTypesResponse& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(ListDBServerTypesResponse* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "smart3dmap.v1.ListDBServerTypesResponse";
  }
  protected:
  explicit ListDBServerTypesResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    return ::descriptor_table_data_5fengine_2fdata_5fengine_2eproto_metadata_getter(kIndexInFileMessages);
  }

  public:

  // nested types ----------------------------------------------------

  typedef ListDBServerTypesResponse_TypeItem TypeItem;

  // accessors -------------------------------------------------------

  enum : int {
    kItemsFieldNumber = 1,
  };
  // repeated .smart3dmap.v1.ListDBServerTypesResponse.TypeItem items = 1;
  int items_size() const;
  private:
  int _internal_items_size() const;
  public:
  void clear_items();
  ::smart3dmap::v1::ListDBServerTypesResponse_TypeItem* mutable_items(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::smart3dmap::v1::ListDBServerTypesResponse_TypeItem >*
      mutable_items();
  private:
  const ::smart3dmap::v1::ListDBServerTypesResponse_TypeItem& _internal_items(int index) const;
  ::smart3dmap::v1::ListDBServerTypesResponse_TypeItem* _internal_add_items();
  public:
  const ::smart3dmap::v1::ListDBServerTypesResponse_TypeItem& items(int index) const;
  ::smart3dmap::v1::ListDBServerTypesResponse_TypeItem* add_items();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::smart3dmap::v1::ListDBServerTypesResponse_TypeItem >&
      items() const;

  // @@protoc_insertion_point(class_scope:smart3dmap.v1.ListDBServerTypesResponse)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::smart3dmap::v1::ListDBServerTypesResponse_TypeItem > items_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_data_5fengine_2fdata_5fengine_2eproto;
};
// -------------------------------------------------------------------

class LIBS3DMGRPC_API CreateDatabaseServerRequest PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:smart3dmap.v1.CreateDatabaseServerRequest) */ {
 public:
  inline CreateDatabaseServerRequest() : CreateDatabaseServerRequest(nullptr) {}
  virtual ~CreateDatabaseServerRequest();
  explicit constexpr CreateDatabaseServerRequest(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  CreateDatabaseServerRequest(const CreateDatabaseServerRequest& from);
  CreateDatabaseServerRequest(CreateDatabaseServerRequest&& from) noexcept
    : CreateDatabaseServerRequest() {
    *this = ::std::move(from);
  }

  inline CreateDatabaseServerRequest& operator=(const CreateDatabaseServerRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline CreateDatabaseServerRequest& operator=(CreateDatabaseServerRequest&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const CreateDatabaseServerRequest& default_instance() {
    return *internal_default_instance();
  }
  static inline const CreateDatabaseServerRequest* internal_default_instance() {
    return reinterpret_cast<const CreateDatabaseServerRequest*>(
               &_CreateDatabaseServerRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    5;

  friend void swap(CreateDatabaseServerRequest& a, CreateDatabaseServerRequest& b) {
    a.Swap(&b);
  }
  inline void Swap(CreateDatabaseServerRequest* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(CreateDatabaseServerRequest* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline CreateDatabaseServerRequest* New() const final {
    return CreateMaybeMessage<CreateDatabaseServerRequest>(nullptr);
  }

  CreateDatabaseServerRequest* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<CreateDatabaseServerRequest>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const CreateDatabaseServerRequest& from);
  void MergeFrom(const CreateDatabaseServerRequest& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(CreateDatabaseServerRequest* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "smart3dmap.v1.CreateDatabaseServerRequest";
  }
  protected:
  explicit CreateDatabaseServerRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    return ::descriptor_table_data_5fengine_2fdata_5fengine_2eproto_metadata_getter(kIndexInFileMessages);
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kNameFieldNumber = 1,
    kHostFieldNumber = 3,
    kInnerHostFieldNumber = 7,
    kAdminFieldNumber = 5,
    kUserFieldNumber = 6,
    kTypeFieldNumber = 2,
    kPortFieldNumber = 4,
  };
  // string name = 1;
  void clear_name();
  const std::string& name() const;
  void set_name(const std::string& value);
  void set_name(std::string&& value);
  void set_name(const char* value);
  void set_name(const char* value, size_t size);
  std::string* mutable_name();
  std::string* release_name();
  void set_allocated_name(std::string* name);
  private:
  const std::string& _internal_name() const;
  void _internal_set_name(const std::string& value);
  std::string* _internal_mutable_name();
  public:

  // string host = 3;
  void clear_host();
  const std::string& host() const;
  void set_host(const std::string& value);
  void set_host(std::string&& value);
  void set_host(const char* value);
  void set_host(const char* value, size_t size);
  std::string* mutable_host();
  std::string* release_host();
  void set_allocated_host(std::string* host);
  private:
  const std::string& _internal_host() const;
  void _internal_set_host(const std::string& value);
  std::string* _internal_mutable_host();
  public:

  // string inner_host = 7;
  void clear_inner_host();
  const std::string& inner_host() const;
  void set_inner_host(const std::string& value);
  void set_inner_host(std::string&& value);
  void set_inner_host(const char* value);
  void set_inner_host(const char* value, size_t size);
  std::string* mutable_inner_host();
  std::string* release_inner_host();
  void set_allocated_inner_host(std::string* inner_host);
  private:
  const std::string& _internal_inner_host() const;
  void _internal_set_inner_host(const std::string& value);
  std::string* _internal_mutable_inner_host();
  public:

  // .smart3dmap.v1.DBUser admin = 5;
  bool has_admin() const;
  private:
  bool _internal_has_admin() const;
  public:
  void clear_admin();
  const ::smart3dmap::v1::DBUser& admin() const;
  ::smart3dmap::v1::DBUser* release_admin();
  ::smart3dmap::v1::DBUser* mutable_admin();
  void set_allocated_admin(::smart3dmap::v1::DBUser* admin);
  private:
  const ::smart3dmap::v1::DBUser& _internal_admin() const;
  ::smart3dmap::v1::DBUser* _internal_mutable_admin();
  public:
  void unsafe_arena_set_allocated_admin(
      ::smart3dmap::v1::DBUser* admin);
  ::smart3dmap::v1::DBUser* unsafe_arena_release_admin();

  // .smart3dmap.v1.DBUser user = 6;
  bool has_user() const;
  private:
  bool _internal_has_user() const;
  public:
  void clear_user();
  const ::smart3dmap::v1::DBUser& user() const;
  ::smart3dmap::v1::DBUser* release_user();
  ::smart3dmap::v1::DBUser* mutable_user();
  void set_allocated_user(::smart3dmap::v1::DBUser* user);
  private:
  const ::smart3dmap::v1::DBUser& _internal_user() const;
  ::smart3dmap::v1::DBUser* _internal_mutable_user();
  public:
  void unsafe_arena_set_allocated_user(
      ::smart3dmap::v1::DBUser* user);
  ::smart3dmap::v1::DBUser* unsafe_arena_release_user();

  // .smart3dmap.v1.DBServerType type = 2;
  void clear_type();
  ::smart3dmap::v1::DBServerType type() const;
  void set_type(::smart3dmap::v1::DBServerType value);
  private:
  ::smart3dmap::v1::DBServerType _internal_type() const;
  void _internal_set_type(::smart3dmap::v1::DBServerType value);
  public:

  // int32 port = 4;
  void clear_port();
  ::PROTOBUF_NAMESPACE_ID::int32 port() const;
  void set_port(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_port() const;
  void _internal_set_port(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // @@protoc_insertion_point(class_scope:smart3dmap.v1.CreateDatabaseServerRequest)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr name_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr host_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr inner_host_;
  ::smart3dmap::v1::DBUser* admin_;
  ::smart3dmap::v1::DBUser* user_;
  int type_;
  ::PROTOBUF_NAMESPACE_ID::int32 port_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_data_5fengine_2fdata_5fengine_2eproto;
};
// -------------------------------------------------------------------

class LIBS3DMGRPC_API GetDatabaseServerRequest PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:smart3dmap.v1.GetDatabaseServerRequest) */ {
 public:
  inline GetDatabaseServerRequest() : GetDatabaseServerRequest(nullptr) {}
  virtual ~GetDatabaseServerRequest();
  explicit constexpr GetDatabaseServerRequest(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  GetDatabaseServerRequest(const GetDatabaseServerRequest& from);
  GetDatabaseServerRequest(GetDatabaseServerRequest&& from) noexcept
    : GetDatabaseServerRequest() {
    *this = ::std::move(from);
  }

  inline GetDatabaseServerRequest& operator=(const GetDatabaseServerRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline GetDatabaseServerRequest& operator=(GetDatabaseServerRequest&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const GetDatabaseServerRequest& default_instance() {
    return *internal_default_instance();
  }
  enum ServerLabelCase {
    kId = 1,
    kName = 2,
    SERVER_LABEL_NOT_SET = 0,
  };

  static inline const GetDatabaseServerRequest* internal_default_instance() {
    return reinterpret_cast<const GetDatabaseServerRequest*>(
               &_GetDatabaseServerRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    6;

  friend void swap(GetDatabaseServerRequest& a, GetDatabaseServerRequest& b) {
    a.Swap(&b);
  }
  inline void Swap(GetDatabaseServerRequest* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(GetDatabaseServerRequest* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline GetDatabaseServerRequest* New() const final {
    return CreateMaybeMessage<GetDatabaseServerRequest>(nullptr);
  }

  GetDatabaseServerRequest* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<GetDatabaseServerRequest>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const GetDatabaseServerRequest& from);
  void MergeFrom(const GetDatabaseServerRequest& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(GetDatabaseServerRequest* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "smart3dmap.v1.GetDatabaseServerRequest";
  }
  protected:
  explicit GetDatabaseServerRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    return ::descriptor_table_data_5fengine_2fdata_5fengine_2eproto_metadata_getter(kIndexInFileMessages);
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kIdFieldNumber = 1,
    kNameFieldNumber = 2,
  };
  // int32 id = 1;
  bool has_id() const;
  private:
  bool _internal_has_id() const;
  public:
  void clear_id();
  ::PROTOBUF_NAMESPACE_ID::int32 id() const;
  void set_id(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_id() const;
  void _internal_set_id(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // string name = 2;
  bool has_name() const;
  private:
  bool _internal_has_name() const;
  public:
  void clear_name();
  const std::string& name() const;
  void set_name(const std::string& value);
  void set_name(std::string&& value);
  void set_name(const char* value);
  void set_name(const char* value, size_t size);
  std::string* mutable_name();
  std::string* release_name();
  void set_allocated_name(std::string* name);
  private:
  const std::string& _internal_name() const;
  void _internal_set_name(const std::string& value);
  std::string* _internal_mutable_name();
  public:

  void clear_server_label();
  ServerLabelCase server_label_case() const;
  // @@protoc_insertion_point(class_scope:smart3dmap.v1.GetDatabaseServerRequest)
 private:
  class _Internal;
  void set_has_id();
  void set_has_name();

  inline bool has_server_label() const;
  inline void clear_has_server_label();

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  union ServerLabelUnion {
    constexpr ServerLabelUnion() : _constinit_{} {}
      ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized _constinit_;
    ::PROTOBUF_NAMESPACE_ID::int32 id_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr name_;
  } server_label_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::uint32 _oneof_case_[1];

  friend struct ::TableStruct_data_5fengine_2fdata_5fengine_2eproto;
};
// -------------------------------------------------------------------

class LIBS3DMGRPC_API ListDatabaseServersRequest PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:smart3dmap.v1.ListDatabaseServersRequest) */ {
 public:
  inline ListDatabaseServersRequest() : ListDatabaseServersRequest(nullptr) {}
  virtual ~ListDatabaseServersRequest();
  explicit constexpr ListDatabaseServersRequest(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  ListDatabaseServersRequest(const ListDatabaseServersRequest& from);
  ListDatabaseServersRequest(ListDatabaseServersRequest&& from) noexcept
    : ListDatabaseServersRequest() {
    *this = ::std::move(from);
  }

  inline ListDatabaseServersRequest& operator=(const ListDatabaseServersRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline ListDatabaseServersRequest& operator=(ListDatabaseServersRequest&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const ListDatabaseServersRequest& default_instance() {
    return *internal_default_instance();
  }
  static inline const ListDatabaseServersRequest* internal_default_instance() {
    return reinterpret_cast<const ListDatabaseServersRequest*>(
               &_ListDatabaseServersRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    7;

  friend void swap(ListDatabaseServersRequest& a, ListDatabaseServersRequest& b) {
    a.Swap(&b);
  }
  inline void Swap(ListDatabaseServersRequest* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(ListDatabaseServersRequest* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline ListDatabaseServersRequest* New() const final {
    return CreateMaybeMessage<ListDatabaseServersRequest>(nullptr);
  }

  ListDatabaseServersRequest* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<ListDatabaseServersRequest>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const ListDatabaseServersRequest& from);
  void MergeFrom(const ListDatabaseServersRequest& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(ListDatabaseServersRequest* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "smart3dmap.v1.ListDatabaseServersRequest";
  }
  protected:
  explicit ListDatabaseServersRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    return ::descriptor_table_data_5fengine_2fdata_5fengine_2eproto_metadata_getter(kIndexInFileMessages);
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kPaginationFieldNumber = 1,
  };
  // .smart3dmap.v1.Pagination pagination = 1;
  bool has_pagination() const;
  private:
  bool _internal_has_pagination() const;
  public:
  void clear_pagination();
  const ::smart3dmap::v1::Pagination& pagination() const;
  ::smart3dmap::v1::Pagination* release_pagination();
  ::smart3dmap::v1::Pagination* mutable_pagination();
  void set_allocated_pagination(::smart3dmap::v1::Pagination* pagination);
  private:
  const ::smart3dmap::v1::Pagination& _internal_pagination() const;
  ::smart3dmap::v1::Pagination* _internal_mutable_pagination();
  public:
  void unsafe_arena_set_allocated_pagination(
      ::smart3dmap::v1::Pagination* pagination);
  ::smart3dmap::v1::Pagination* unsafe_arena_release_pagination();

  // @@protoc_insertion_point(class_scope:smart3dmap.v1.ListDatabaseServersRequest)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::smart3dmap::v1::Pagination* pagination_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_data_5fengine_2fdata_5fengine_2eproto;
};
// -------------------------------------------------------------------

class LIBS3DMGRPC_API ListDatabaseServersResponse PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:smart3dmap.v1.ListDatabaseServersResponse) */ {
 public:
  inline ListDatabaseServersResponse() : ListDatabaseServersResponse(nullptr) {}
  virtual ~ListDatabaseServersResponse();
  explicit constexpr ListDatabaseServersResponse(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  ListDatabaseServersResponse(const ListDatabaseServersResponse& from);
  ListDatabaseServersResponse(ListDatabaseServersResponse&& from) noexcept
    : ListDatabaseServersResponse() {
    *this = ::std::move(from);
  }

  inline ListDatabaseServersResponse& operator=(const ListDatabaseServersResponse& from) {
    CopyFrom(from);
    return *this;
  }
  inline ListDatabaseServersResponse& operator=(ListDatabaseServersResponse&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const ListDatabaseServersResponse& default_instance() {
    return *internal_default_instance();
  }
  static inline const ListDatabaseServersResponse* internal_default_instance() {
    return reinterpret_cast<const ListDatabaseServersResponse*>(
               &_ListDatabaseServersResponse_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    8;

  friend void swap(ListDatabaseServersResponse& a, ListDatabaseServersResponse& b) {
    a.Swap(&b);
  }
  inline void Swap(ListDatabaseServersResponse* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(ListDatabaseServersResponse* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline ListDatabaseServersResponse* New() const final {
    return CreateMaybeMessage<ListDatabaseServersResponse>(nullptr);
  }

  ListDatabaseServersResponse* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<ListDatabaseServersResponse>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const ListDatabaseServersResponse& from);
  void MergeFrom(const ListDatabaseServersResponse& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(ListDatabaseServersResponse* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "smart3dmap.v1.ListDatabaseServersResponse";
  }
  protected:
  explicit ListDatabaseServersResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    return ::descriptor_table_data_5fengine_2fdata_5fengine_2eproto_metadata_getter(kIndexInFileMessages);
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kServersFieldNumber = 1,
    kTotalCountFieldNumber = 2,
  };
  // repeated .smart3dmap.v1.DBServer servers = 1;
  int servers_size() const;
  private:
  int _internal_servers_size() const;
  public:
  void clear_servers();
  ::smart3dmap::v1::DBServer* mutable_servers(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::smart3dmap::v1::DBServer >*
      mutable_servers();
  private:
  const ::smart3dmap::v1::DBServer& _internal_servers(int index) const;
  ::smart3dmap::v1::DBServer* _internal_add_servers();
  public:
  const ::smart3dmap::v1::DBServer& servers(int index) const;
  ::smart3dmap::v1::DBServer* add_servers();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::smart3dmap::v1::DBServer >&
      servers() const;

  // int32 total_count = 2;
  void clear_total_count();
  ::PROTOBUF_NAMESPACE_ID::int32 total_count() const;
  void set_total_count(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_total_count() const;
  void _internal_set_total_count(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // @@protoc_insertion_point(class_scope:smart3dmap.v1.ListDatabaseServersResponse)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::smart3dmap::v1::DBServer > servers_;
  ::PROTOBUF_NAMESPACE_ID::int32 total_count_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_data_5fengine_2fdata_5fengine_2eproto;
};
// -------------------------------------------------------------------

class LIBS3DMGRPC_API UpdateDatabaseServerRequest PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:smart3dmap.v1.UpdateDatabaseServerRequest) */ {
 public:
  inline UpdateDatabaseServerRequest() : UpdateDatabaseServerRequest(nullptr) {}
  virtual ~UpdateDatabaseServerRequest();
  explicit constexpr UpdateDatabaseServerRequest(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  UpdateDatabaseServerRequest(const UpdateDatabaseServerRequest& from);
  UpdateDatabaseServerRequest(UpdateDatabaseServerRequest&& from) noexcept
    : UpdateDatabaseServerRequest() {
    *this = ::std::move(from);
  }

  inline UpdateDatabaseServerRequest& operator=(const UpdateDatabaseServerRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline UpdateDatabaseServerRequest& operator=(UpdateDatabaseServerRequest&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const UpdateDatabaseServerRequest& default_instance() {
    return *internal_default_instance();
  }
  static inline const UpdateDatabaseServerRequest* internal_default_instance() {
    return reinterpret_cast<const UpdateDatabaseServerRequest*>(
               &_UpdateDatabaseServerRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    9;

  friend void swap(UpdateDatabaseServerRequest& a, UpdateDatabaseServerRequest& b) {
    a.Swap(&b);
  }
  inline void Swap(UpdateDatabaseServerRequest* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(UpdateDatabaseServerRequest* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline UpdateDatabaseServerRequest* New() const final {
    return CreateMaybeMessage<UpdateDatabaseServerRequest>(nullptr);
  }

  UpdateDatabaseServerRequest* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<UpdateDatabaseServerRequest>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const UpdateDatabaseServerRequest& from);
  void MergeFrom(const UpdateDatabaseServerRequest& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(UpdateDatabaseServerRequest* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "smart3dmap.v1.UpdateDatabaseServerRequest";
  }
  protected:
  explicit UpdateDatabaseServerRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    return ::descriptor_table_data_5fengine_2fdata_5fengine_2eproto_metadata_getter(kIndexInFileMessages);
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kNameFieldNumber = 2,
    kHostFieldNumber = 4,
    kPortFieldNumber = 5,
    kAdminFieldNumber = 6,
    kUserFieldNumber = 7,
    kInnerHostFieldNumber = 8,
    kIdFieldNumber = 1,
    kTypeFieldNumber = 3,
  };
  // .google.protobuf.StringValue name = 2;
  bool has_name() const;
  private:
  bool _internal_has_name() const;
  public:
  void clear_name();
  const PROTOBUF_NAMESPACE_ID::StringValue& name() const;
  PROTOBUF_NAMESPACE_ID::StringValue* release_name();
  PROTOBUF_NAMESPACE_ID::StringValue* mutable_name();
  void set_allocated_name(PROTOBUF_NAMESPACE_ID::StringValue* name);
  private:
  const PROTOBUF_NAMESPACE_ID::StringValue& _internal_name() const;
  PROTOBUF_NAMESPACE_ID::StringValue* _internal_mutable_name();
  public:
  void unsafe_arena_set_allocated_name(
      PROTOBUF_NAMESPACE_ID::StringValue* name);
  PROTOBUF_NAMESPACE_ID::StringValue* unsafe_arena_release_name();

  // .google.protobuf.StringValue host = 4;
  bool has_host() const;
  private:
  bool _internal_has_host() const;
  public:
  void clear_host();
  const PROTOBUF_NAMESPACE_ID::StringValue& host() const;
  PROTOBUF_NAMESPACE_ID::StringValue* release_host();
  PROTOBUF_NAMESPACE_ID::StringValue* mutable_host();
  void set_allocated_host(PROTOBUF_NAMESPACE_ID::StringValue* host);
  private:
  const PROTOBUF_NAMESPACE_ID::StringValue& _internal_host() const;
  PROTOBUF_NAMESPACE_ID::StringValue* _internal_mutable_host();
  public:
  void unsafe_arena_set_allocated_host(
      PROTOBUF_NAMESPACE_ID::StringValue* host);
  PROTOBUF_NAMESPACE_ID::StringValue* unsafe_arena_release_host();

  // .google.protobuf.Int32Value port = 5;
  bool has_port() const;
  private:
  bool _internal_has_port() const;
  public:
  void clear_port();
  const PROTOBUF_NAMESPACE_ID::Int32Value& port() const;
  PROTOBUF_NAMESPACE_ID::Int32Value* release_port();
  PROTOBUF_NAMESPACE_ID::Int32Value* mutable_port();
  void set_allocated_port(PROTOBUF_NAMESPACE_ID::Int32Value* port);
  private:
  const PROTOBUF_NAMESPACE_ID::Int32Value& _internal_port() const;
  PROTOBUF_NAMESPACE_ID::Int32Value* _internal_mutable_port();
  public:
  void unsafe_arena_set_allocated_port(
      PROTOBUF_NAMESPACE_ID::Int32Value* port);
  PROTOBUF_NAMESPACE_ID::Int32Value* unsafe_arena_release_port();

  // .smart3dmap.v1.DBUser admin = 6;
  bool has_admin() const;
  private:
  bool _internal_has_admin() const;
  public:
  void clear_admin();
  const ::smart3dmap::v1::DBUser& admin() const;
  ::smart3dmap::v1::DBUser* release_admin();
  ::smart3dmap::v1::DBUser* mutable_admin();
  void set_allocated_admin(::smart3dmap::v1::DBUser* admin);
  private:
  const ::smart3dmap::v1::DBUser& _internal_admin() const;
  ::smart3dmap::v1::DBUser* _internal_mutable_admin();
  public:
  void unsafe_arena_set_allocated_admin(
      ::smart3dmap::v1::DBUser* admin);
  ::smart3dmap::v1::DBUser* unsafe_arena_release_admin();

  // .smart3dmap.v1.DBUser user = 7;
  bool has_user() const;
  private:
  bool _internal_has_user() const;
  public:
  void clear_user();
  const ::smart3dmap::v1::DBUser& user() const;
  ::smart3dmap::v1::DBUser* release_user();
  ::smart3dmap::v1::DBUser* mutable_user();
  void set_allocated_user(::smart3dmap::v1::DBUser* user);
  private:
  const ::smart3dmap::v1::DBUser& _internal_user() const;
  ::smart3dmap::v1::DBUser* _internal_mutable_user();
  public:
  void unsafe_arena_set_allocated_user(
      ::smart3dmap::v1::DBUser* user);
  ::smart3dmap::v1::DBUser* unsafe_arena_release_user();

  // .google.protobuf.StringValue inner_host = 8;
  bool has_inner_host() const;
  private:
  bool _internal_has_inner_host() const;
  public:
  void clear_inner_host();
  const PROTOBUF_NAMESPACE_ID::StringValue& inner_host() const;
  PROTOBUF_NAMESPACE_ID::StringValue* release_inner_host();
  PROTOBUF_NAMESPACE_ID::StringValue* mutable_inner_host();
  void set_allocated_inner_host(PROTOBUF_NAMESPACE_ID::StringValue* inner_host);
  private:
  const PROTOBUF_NAMESPACE_ID::StringValue& _internal_inner_host() const;
  PROTOBUF_NAMESPACE_ID::StringValue* _internal_mutable_inner_host();
  public:
  void unsafe_arena_set_allocated_inner_host(
      PROTOBUF_NAMESPACE_ID::StringValue* inner_host);
  PROTOBUF_NAMESPACE_ID::StringValue* unsafe_arena_release_inner_host();

  // int32 id = 1;
  void clear_id();
  ::PROTOBUF_NAMESPACE_ID::int32 id() const;
  void set_id(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_id() const;
  void _internal_set_id(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // .smart3dmap.v1.DBServerType type = 3;
  void clear_type();
  ::smart3dmap::v1::DBServerType type() const;
  void set_type(::smart3dmap::v1::DBServerType value);
  private:
  ::smart3dmap::v1::DBServerType _internal_type() const;
  void _internal_set_type(::smart3dmap::v1::DBServerType value);
  public:

  // @@protoc_insertion_point(class_scope:smart3dmap.v1.UpdateDatabaseServerRequest)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  PROTOBUF_NAMESPACE_ID::StringValue* name_;
  PROTOBUF_NAMESPACE_ID::StringValue* host_;
  PROTOBUF_NAMESPACE_ID::Int32Value* port_;
  ::smart3dmap::v1::DBUser* admin_;
  ::smart3dmap::v1::DBUser* user_;
  PROTOBUF_NAMESPACE_ID::StringValue* inner_host_;
  ::PROTOBUF_NAMESPACE_ID::int32 id_;
  int type_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_data_5fengine_2fdata_5fengine_2eproto;
};
// -------------------------------------------------------------------

class LIBS3DMGRPC_API UpdateDatabaseServerResponse PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:smart3dmap.v1.UpdateDatabaseServerResponse) */ {
 public:
  inline UpdateDatabaseServerResponse() : UpdateDatabaseServerResponse(nullptr) {}
  virtual ~UpdateDatabaseServerResponse();
  explicit constexpr UpdateDatabaseServerResponse(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  UpdateDatabaseServerResponse(const UpdateDatabaseServerResponse& from);
  UpdateDatabaseServerResponse(UpdateDatabaseServerResponse&& from) noexcept
    : UpdateDatabaseServerResponse() {
    *this = ::std::move(from);
  }

  inline UpdateDatabaseServerResponse& operator=(const UpdateDatabaseServerResponse& from) {
    CopyFrom(from);
    return *this;
  }
  inline UpdateDatabaseServerResponse& operator=(UpdateDatabaseServerResponse&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const UpdateDatabaseServerResponse& default_instance() {
    return *internal_default_instance();
  }
  static inline const UpdateDatabaseServerResponse* internal_default_instance() {
    return reinterpret_cast<const UpdateDatabaseServerResponse*>(
               &_UpdateDatabaseServerResponse_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    10;

  friend void swap(UpdateDatabaseServerResponse& a, UpdateDatabaseServerResponse& b) {
    a.Swap(&b);
  }
  inline void Swap(UpdateDatabaseServerResponse* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(UpdateDatabaseServerResponse* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline UpdateDatabaseServerResponse* New() const final {
    return CreateMaybeMessage<UpdateDatabaseServerResponse>(nullptr);
  }

  UpdateDatabaseServerResponse* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<UpdateDatabaseServerResponse>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const UpdateDatabaseServerResponse& from);
  void MergeFrom(const UpdateDatabaseServerResponse& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(UpdateDatabaseServerResponse* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "smart3dmap.v1.UpdateDatabaseServerResponse";
  }
  protected:
  explicit UpdateDatabaseServerResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    return ::descriptor_table_data_5fengine_2fdata_5fengine_2eproto_metadata_getter(kIndexInFileMessages);
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kErrorFieldNumber = 2,
    kStatusFieldNumber = 1,
  };
  // string error = 2;
  void clear_error();
  const std::string& error() const;
  void set_error(const std::string& value);
  void set_error(std::string&& value);
  void set_error(const char* value);
  void set_error(const char* value, size_t size);
  std::string* mutable_error();
  std::string* release_error();
  void set_allocated_error(std::string* error);
  private:
  const std::string& _internal_error() const;
  void _internal_set_error(const std::string& value);
  std::string* _internal_mutable_error();
  public:

  // bool status = 1;
  void clear_status();
  bool status() const;
  void set_status(bool value);
  private:
  bool _internal_status() const;
  void _internal_set_status(bool value);
  public:

  // @@protoc_insertion_point(class_scope:smart3dmap.v1.UpdateDatabaseServerResponse)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr error_;
  bool status_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_data_5fengine_2fdata_5fengine_2eproto;
};
// -------------------------------------------------------------------

class LIBS3DMGRPC_API DeleteDatabaseServerRequest PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:smart3dmap.v1.DeleteDatabaseServerRequest) */ {
 public:
  inline DeleteDatabaseServerRequest() : DeleteDatabaseServerRequest(nullptr) {}
  virtual ~DeleteDatabaseServerRequest();
  explicit constexpr DeleteDatabaseServerRequest(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  DeleteDatabaseServerRequest(const DeleteDatabaseServerRequest& from);
  DeleteDatabaseServerRequest(DeleteDatabaseServerRequest&& from) noexcept
    : DeleteDatabaseServerRequest() {
    *this = ::std::move(from);
  }

  inline DeleteDatabaseServerRequest& operator=(const DeleteDatabaseServerRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline DeleteDatabaseServerRequest& operator=(DeleteDatabaseServerRequest&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const DeleteDatabaseServerRequest& default_instance() {
    return *internal_default_instance();
  }
  static inline const DeleteDatabaseServerRequest* internal_default_instance() {
    return reinterpret_cast<const DeleteDatabaseServerRequest*>(
               &_DeleteDatabaseServerRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    11;

  friend void swap(DeleteDatabaseServerRequest& a, DeleteDatabaseServerRequest& b) {
    a.Swap(&b);
  }
  inline void Swap(DeleteDatabaseServerRequest* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(DeleteDatabaseServerRequest* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline DeleteDatabaseServerRequest* New() const final {
    return CreateMaybeMessage<DeleteDatabaseServerRequest>(nullptr);
  }

  DeleteDatabaseServerRequest* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<DeleteDatabaseServerRequest>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const DeleteDatabaseServerRequest& from);
  void MergeFrom(const DeleteDatabaseServerRequest& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(DeleteDatabaseServerRequest* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "smart3dmap.v1.DeleteDatabaseServerRequest";
  }
  protected:
  explicit DeleteDatabaseServerRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    return ::descriptor_table_data_5fengine_2fdata_5fengine_2eproto_metadata_getter(kIndexInFileMessages);
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kIdFieldNumber = 1,
  };
  // int32 id = 1;
  void clear_id();
  ::PROTOBUF_NAMESPACE_ID::int32 id() const;
  void set_id(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_id() const;
  void _internal_set_id(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // @@protoc_insertion_point(class_scope:smart3dmap.v1.DeleteDatabaseServerRequest)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::int32 id_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_data_5fengine_2fdata_5fengine_2eproto;
};
// -------------------------------------------------------------------

class LIBS3DMGRPC_API DeleteDatabaseServerResponse PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:smart3dmap.v1.DeleteDatabaseServerResponse) */ {
 public:
  inline DeleteDatabaseServerResponse() : DeleteDatabaseServerResponse(nullptr) {}
  virtual ~DeleteDatabaseServerResponse();
  explicit constexpr DeleteDatabaseServerResponse(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  DeleteDatabaseServerResponse(const DeleteDatabaseServerResponse& from);
  DeleteDatabaseServerResponse(DeleteDatabaseServerResponse&& from) noexcept
    : DeleteDatabaseServerResponse() {
    *this = ::std::move(from);
  }

  inline DeleteDatabaseServerResponse& operator=(const DeleteDatabaseServerResponse& from) {
    CopyFrom(from);
    return *this;
  }
  inline DeleteDatabaseServerResponse& operator=(DeleteDatabaseServerResponse&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const DeleteDatabaseServerResponse& default_instance() {
    return *internal_default_instance();
  }
  static inline const DeleteDatabaseServerResponse* internal_default_instance() {
    return reinterpret_cast<const DeleteDatabaseServerResponse*>(
               &_DeleteDatabaseServerResponse_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    12;

  friend void swap(DeleteDatabaseServerResponse& a, DeleteDatabaseServerResponse& b) {
    a.Swap(&b);
  }
  inline void Swap(DeleteDatabaseServerResponse* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(DeleteDatabaseServerResponse* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline DeleteDatabaseServerResponse* New() const final {
    return CreateMaybeMessage<DeleteDatabaseServerResponse>(nullptr);
  }

  DeleteDatabaseServerResponse* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<DeleteDatabaseServerResponse>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const DeleteDatabaseServerResponse& from);
  void MergeFrom(const DeleteDatabaseServerResponse& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(DeleteDatabaseServerResponse* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "smart3dmap.v1.DeleteDatabaseServerResponse";
  }
  protected:
  explicit DeleteDatabaseServerResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    return ::descriptor_table_data_5fengine_2fdata_5fengine_2eproto_metadata_getter(kIndexInFileMessages);
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kErrorFieldNumber = 2,
    kStatusFieldNumber = 1,
  };
  // string error = 2;
  void clear_error();
  const std::string& error() const;
  void set_error(const std::string& value);
  void set_error(std::string&& value);
  void set_error(const char* value);
  void set_error(const char* value, size_t size);
  std::string* mutable_error();
  std::string* release_error();
  void set_allocated_error(std::string* error);
  private:
  const std::string& _internal_error() const;
  void _internal_set_error(const std::string& value);
  std::string* _internal_mutable_error();
  public:

  // bool status = 1;
  void clear_status();
  bool status() const;
  void set_status(bool value);
  private:
  bool _internal_status() const;
  void _internal_set_status(bool value);
  public:

  // @@protoc_insertion_point(class_scope:smart3dmap.v1.DeleteDatabaseServerResponse)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr error_;
  bool status_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_data_5fengine_2fdata_5fengine_2eproto;
};
// -------------------------------------------------------------------

class LIBS3DMGRPC_API ListDatabaseAppTypesRequest PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:smart3dmap.v1.ListDatabaseAppTypesRequest) */ {
 public:
  inline ListDatabaseAppTypesRequest() : ListDatabaseAppTypesRequest(nullptr) {}
  virtual ~ListDatabaseAppTypesRequest();
  explicit constexpr ListDatabaseAppTypesRequest(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  ListDatabaseAppTypesRequest(const ListDatabaseAppTypesRequest& from);
  ListDatabaseAppTypesRequest(ListDatabaseAppTypesRequest&& from) noexcept
    : ListDatabaseAppTypesRequest() {
    *this = ::std::move(from);
  }

  inline ListDatabaseAppTypesRequest& operator=(const ListDatabaseAppTypesRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline ListDatabaseAppTypesRequest& operator=(ListDatabaseAppTypesRequest&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const ListDatabaseAppTypesRequest& default_instance() {
    return *internal_default_instance();
  }
  static inline const ListDatabaseAppTypesRequest* internal_default_instance() {
    return reinterpret_cast<const ListDatabaseAppTypesRequest*>(
               &_ListDatabaseAppTypesRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    13;

  friend void swap(ListDatabaseAppTypesRequest& a, ListDatabaseAppTypesRequest& b) {
    a.Swap(&b);
  }
  inline void Swap(ListDatabaseAppTypesRequest* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(ListDatabaseAppTypesRequest* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline ListDatabaseAppTypesRequest* New() const final {
    return CreateMaybeMessage<ListDatabaseAppTypesRequest>(nullptr);
  }

  ListDatabaseAppTypesRequest* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<ListDatabaseAppTypesRequest>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const ListDatabaseAppTypesRequest& from);
  void MergeFrom(const ListDatabaseAppTypesRequest& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(ListDatabaseAppTypesRequest* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "smart3dmap.v1.ListDatabaseAppTypesRequest";
  }
  protected:
  explicit ListDatabaseAppTypesRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    return ::descriptor_table_data_5fengine_2fdata_5fengine_2eproto_metadata_getter(kIndexInFileMessages);
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // @@protoc_insertion_point(class_scope:smart3dmap.v1.ListDatabaseAppTypesRequest)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_data_5fengine_2fdata_5fengine_2eproto;
};
// -------------------------------------------------------------------

class LIBS3DMGRPC_API ListDatabaseAppTypesResponse_TypeItem PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:smart3dmap.v1.ListDatabaseAppTypesResponse.TypeItem) */ {
 public:
  inline ListDatabaseAppTypesResponse_TypeItem() : ListDatabaseAppTypesResponse_TypeItem(nullptr) {}
  virtual ~ListDatabaseAppTypesResponse_TypeItem();
  explicit constexpr ListDatabaseAppTypesResponse_TypeItem(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  ListDatabaseAppTypesResponse_TypeItem(const ListDatabaseAppTypesResponse_TypeItem& from);
  ListDatabaseAppTypesResponse_TypeItem(ListDatabaseAppTypesResponse_TypeItem&& from) noexcept
    : ListDatabaseAppTypesResponse_TypeItem() {
    *this = ::std::move(from);
  }

  inline ListDatabaseAppTypesResponse_TypeItem& operator=(const ListDatabaseAppTypesResponse_TypeItem& from) {
    CopyFrom(from);
    return *this;
  }
  inline ListDatabaseAppTypesResponse_TypeItem& operator=(ListDatabaseAppTypesResponse_TypeItem&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const ListDatabaseAppTypesResponse_TypeItem& default_instance() {
    return *internal_default_instance();
  }
  static inline const ListDatabaseAppTypesResponse_TypeItem* internal_default_instance() {
    return reinterpret_cast<const ListDatabaseAppTypesResponse_TypeItem*>(
               &_ListDatabaseAppTypesResponse_TypeItem_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    14;

  friend void swap(ListDatabaseAppTypesResponse_TypeItem& a, ListDatabaseAppTypesResponse_TypeItem& b) {
    a.Swap(&b);
  }
  inline void Swap(ListDatabaseAppTypesResponse_TypeItem* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(ListDatabaseAppTypesResponse_TypeItem* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline ListDatabaseAppTypesResponse_TypeItem* New() const final {
    return CreateMaybeMessage<ListDatabaseAppTypesResponse_TypeItem>(nullptr);
  }

  ListDatabaseAppTypesResponse_TypeItem* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<ListDatabaseAppTypesResponse_TypeItem>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const ListDatabaseAppTypesResponse_TypeItem& from);
  void MergeFrom(const ListDatabaseAppTypesResponse_TypeItem& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(ListDatabaseAppTypesResponse_TypeItem* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "smart3dmap.v1.ListDatabaseAppTypesResponse.TypeItem";
  }
  protected:
  explicit ListDatabaseAppTypesResponse_TypeItem(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    return ::descriptor_table_data_5fengine_2fdata_5fengine_2eproto_metadata_getter(kIndexInFileMessages);
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kNameFieldNumber = 1,
    kTypeFieldNumber = 2,
  };
  // string name = 1;
  void clear_name();
  const std::string& name() const;
  void set_name(const std::string& value);
  void set_name(std::string&& value);
  void set_name(const char* value);
  void set_name(const char* value, size_t size);
  std::string* mutable_name();
  std::string* release_name();
  void set_allocated_name(std::string* name);
  private:
  const std::string& _internal_name() const;
  void _internal_set_name(const std::string& value);
  std::string* _internal_mutable_name();
  public:

  // .smart3dmap.v1.DBAppType type = 2;
  void clear_type();
  ::smart3dmap::v1::DBAppType type() const;
  void set_type(::smart3dmap::v1::DBAppType value);
  private:
  ::smart3dmap::v1::DBAppType _internal_type() const;
  void _internal_set_type(::smart3dmap::v1::DBAppType value);
  public:

  // @@protoc_insertion_point(class_scope:smart3dmap.v1.ListDatabaseAppTypesResponse.TypeItem)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr name_;
  int type_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_data_5fengine_2fdata_5fengine_2eproto;
};
// -------------------------------------------------------------------

class LIBS3DMGRPC_API ListDatabaseAppTypesResponse PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:smart3dmap.v1.ListDatabaseAppTypesResponse) */ {
 public:
  inline ListDatabaseAppTypesResponse() : ListDatabaseAppTypesResponse(nullptr) {}
  virtual ~ListDatabaseAppTypesResponse();
  explicit constexpr ListDatabaseAppTypesResponse(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  ListDatabaseAppTypesResponse(const ListDatabaseAppTypesResponse& from);
  ListDatabaseAppTypesResponse(ListDatabaseAppTypesResponse&& from) noexcept
    : ListDatabaseAppTypesResponse() {
    *this = ::std::move(from);
  }

  inline ListDatabaseAppTypesResponse& operator=(const ListDatabaseAppTypesResponse& from) {
    CopyFrom(from);
    return *this;
  }
  inline ListDatabaseAppTypesResponse& operator=(ListDatabaseAppTypesResponse&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const ListDatabaseAppTypesResponse& default_instance() {
    return *internal_default_instance();
  }
  static inline const ListDatabaseAppTypesResponse* internal_default_instance() {
    return reinterpret_cast<const ListDatabaseAppTypesResponse*>(
               &_ListDatabaseAppTypesResponse_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    15;

  friend void swap(ListDatabaseAppTypesResponse& a, ListDatabaseAppTypesResponse& b) {
    a.Swap(&b);
  }
  inline void Swap(ListDatabaseAppTypesResponse* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(ListDatabaseAppTypesResponse* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline ListDatabaseAppTypesResponse* New() const final {
    return CreateMaybeMessage<ListDatabaseAppTypesResponse>(nullptr);
  }

  ListDatabaseAppTypesResponse* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<ListDatabaseAppTypesResponse>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const ListDatabaseAppTypesResponse& from);
  void MergeFrom(const ListDatabaseAppTypesResponse& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(ListDatabaseAppTypesResponse* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "smart3dmap.v1.ListDatabaseAppTypesResponse";
  }
  protected:
  explicit ListDatabaseAppTypesResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    return ::descriptor_table_data_5fengine_2fdata_5fengine_2eproto_metadata_getter(kIndexInFileMessages);
  }

  public:

  // nested types ----------------------------------------------------

  typedef ListDatabaseAppTypesResponse_TypeItem TypeItem;

  // accessors -------------------------------------------------------

  enum : int {
    kItemsFieldNumber = 1,
  };
  // repeated .smart3dmap.v1.ListDatabaseAppTypesResponse.TypeItem items = 1;
  int items_size() const;
  private:
  int _internal_items_size() const;
  public:
  void clear_items();
  ::smart3dmap::v1::ListDatabaseAppTypesResponse_TypeItem* mutable_items(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::smart3dmap::v1::ListDatabaseAppTypesResponse_TypeItem >*
      mutable_items();
  private:
  const ::smart3dmap::v1::ListDatabaseAppTypesResponse_TypeItem& _internal_items(int index) const;
  ::smart3dmap::v1::ListDatabaseAppTypesResponse_TypeItem* _internal_add_items();
  public:
  const ::smart3dmap::v1::ListDatabaseAppTypesResponse_TypeItem& items(int index) const;
  ::smart3dmap::v1::ListDatabaseAppTypesResponse_TypeItem* add_items();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::smart3dmap::v1::ListDatabaseAppTypesResponse_TypeItem >&
      items() const;

  // @@protoc_insertion_point(class_scope:smart3dmap.v1.ListDatabaseAppTypesResponse)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::smart3dmap::v1::ListDatabaseAppTypesResponse_TypeItem > items_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_data_5fengine_2fdata_5fengine_2eproto;
};
// -------------------------------------------------------------------

class LIBS3DMGRPC_API CreateDatabaseRequest PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:smart3dmap.v1.CreateDatabaseRequest) */ {
 public:
  inline CreateDatabaseRequest() : CreateDatabaseRequest(nullptr) {}
  virtual ~CreateDatabaseRequest();
  explicit constexpr CreateDatabaseRequest(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  CreateDatabaseRequest(const CreateDatabaseRequest& from);
  CreateDatabaseRequest(CreateDatabaseRequest&& from) noexcept
    : CreateDatabaseRequest() {
    *this = ::std::move(from);
  }

  inline CreateDatabaseRequest& operator=(const CreateDatabaseRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline CreateDatabaseRequest& operator=(CreateDatabaseRequest&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const CreateDatabaseRequest& default_instance() {
    return *internal_default_instance();
  }
  static inline const CreateDatabaseRequest* internal_default_instance() {
    return reinterpret_cast<const CreateDatabaseRequest*>(
               &_CreateDatabaseRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    16;

  friend void swap(CreateDatabaseRequest& a, CreateDatabaseRequest& b) {
    a.Swap(&b);
  }
  inline void Swap(CreateDatabaseRequest* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(CreateDatabaseRequest* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline CreateDatabaseRequest* New() const final {
    return CreateMaybeMessage<CreateDatabaseRequest>(nullptr);
  }

  CreateDatabaseRequest* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<CreateDatabaseRequest>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const CreateDatabaseRequest& from);
  void MergeFrom(const CreateDatabaseRequest& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(CreateDatabaseRequest* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "smart3dmap.v1.CreateDatabaseRequest";
  }
  protected:
  explicit CreateDatabaseRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    return ::descriptor_table_data_5fengine_2fdata_5fengine_2eproto_metadata_getter(kIndexInFileMessages);
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kNameFieldNumber = 1,
    kDbNameFieldNumber = 2,
    kDbServerIdFieldNumber = 3,
    kAppTypeFieldNumber = 4,
  };
  // string name = 1;
  void clear_name();
  const std::string& name() const;
  void set_name(const std::string& value);
  void set_name(std::string&& value);
  void set_name(const char* value);
  void set_name(const char* value, size_t size);
  std::string* mutable_name();
  std::string* release_name();
  void set_allocated_name(std::string* name);
  private:
  const std::string& _internal_name() const;
  void _internal_set_name(const std::string& value);
  std::string* _internal_mutable_name();
  public:

  // string db_name = 2;
  void clear_db_name();
  const std::string& db_name() const;
  void set_db_name(const std::string& value);
  void set_db_name(std::string&& value);
  void set_db_name(const char* value);
  void set_db_name(const char* value, size_t size);
  std::string* mutable_db_name();
  std::string* release_db_name();
  void set_allocated_db_name(std::string* db_name);
  private:
  const std::string& _internal_db_name() const;
  void _internal_set_db_name(const std::string& value);
  std::string* _internal_mutable_db_name();
  public:

  // int32 db_server_id = 3;
  void clear_db_server_id();
  ::PROTOBUF_NAMESPACE_ID::int32 db_server_id() const;
  void set_db_server_id(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_db_server_id() const;
  void _internal_set_db_server_id(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // .smart3dmap.v1.DBAppType app_type = 4;
  void clear_app_type();
  ::smart3dmap::v1::DBAppType app_type() const;
  void set_app_type(::smart3dmap::v1::DBAppType value);
  private:
  ::smart3dmap::v1::DBAppType _internal_app_type() const;
  void _internal_set_app_type(::smart3dmap::v1::DBAppType value);
  public:

  // @@protoc_insertion_point(class_scope:smart3dmap.v1.CreateDatabaseRequest)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr name_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr db_name_;
  ::PROTOBUF_NAMESPACE_ID::int32 db_server_id_;
  int app_type_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_data_5fengine_2fdata_5fengine_2eproto;
};
// -------------------------------------------------------------------

class LIBS3DMGRPC_API AddExistingDatabaseRequest PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:smart3dmap.v1.AddExistingDatabaseRequest) */ {
 public:
  inline AddExistingDatabaseRequest() : AddExistingDatabaseRequest(nullptr) {}
  virtual ~AddExistingDatabaseRequest();
  explicit constexpr AddExistingDatabaseRequest(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  AddExistingDatabaseRequest(const AddExistingDatabaseRequest& from);
  AddExistingDatabaseRequest(AddExistingDatabaseRequest&& from) noexcept
    : AddExistingDatabaseRequest() {
    *this = ::std::move(from);
  }

  inline AddExistingDatabaseRequest& operator=(const AddExistingDatabaseRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline AddExistingDatabaseRequest& operator=(AddExistingDatabaseRequest&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const AddExistingDatabaseRequest& default_instance() {
    return *internal_default_instance();
  }
  static inline const AddExistingDatabaseRequest* internal_default_instance() {
    return reinterpret_cast<const AddExistingDatabaseRequest*>(
               &_AddExistingDatabaseRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    17;

  friend void swap(AddExistingDatabaseRequest& a, AddExistingDatabaseRequest& b) {
    a.Swap(&b);
  }
  inline void Swap(AddExistingDatabaseRequest* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(AddExistingDatabaseRequest* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline AddExistingDatabaseRequest* New() const final {
    return CreateMaybeMessage<AddExistingDatabaseRequest>(nullptr);
  }

  AddExistingDatabaseRequest* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<AddExistingDatabaseRequest>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const AddExistingDatabaseRequest& from);
  void MergeFrom(const AddExistingDatabaseRequest& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(AddExistingDatabaseRequest* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "smart3dmap.v1.AddExistingDatabaseRequest";
  }
  protected:
  explicit AddExistingDatabaseRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    return ::descriptor_table_data_5fengine_2fdata_5fengine_2eproto_metadata_getter(kIndexInFileMessages);
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kNameFieldNumber = 1,
    kDbHostFieldNumber = 2,
    kDbNameFieldNumber = 4,
    kDbInnerHostFieldNumber = 8,
    kDbUserFieldNumber = 5,
    kDbPortFieldNumber = 3,
    kServerTypeFieldNumber = 6,
    kAppTypeFieldNumber = 7,
  };
  // string name = 1;
  void clear_name();
  const std::string& name() const;
  void set_name(const std::string& value);
  void set_name(std::string&& value);
  void set_name(const char* value);
  void set_name(const char* value, size_t size);
  std::string* mutable_name();
  std::string* release_name();
  void set_allocated_name(std::string* name);
  private:
  const std::string& _internal_name() const;
  void _internal_set_name(const std::string& value);
  std::string* _internal_mutable_name();
  public:

  // string db_host = 2;
  void clear_db_host();
  const std::string& db_host() const;
  void set_db_host(const std::string& value);
  void set_db_host(std::string&& value);
  void set_db_host(const char* value);
  void set_db_host(const char* value, size_t size);
  std::string* mutable_db_host();
  std::string* release_db_host();
  void set_allocated_db_host(std::string* db_host);
  private:
  const std::string& _internal_db_host() const;
  void _internal_set_db_host(const std::string& value);
  std::string* _internal_mutable_db_host();
  public:

  // string db_name = 4;
  void clear_db_name();
  const std::string& db_name() const;
  void set_db_name(const std::string& value);
  void set_db_name(std::string&& value);
  void set_db_name(const char* value);
  void set_db_name(const char* value, size_t size);
  std::string* mutable_db_name();
  std::string* release_db_name();
  void set_allocated_db_name(std::string* db_name);
  private:
  const std::string& _internal_db_name() const;
  void _internal_set_db_name(const std::string& value);
  std::string* _internal_mutable_db_name();
  public:

  // string db_inner_host = 8;
  void clear_db_inner_host();
  const std::string& db_inner_host() const;
  void set_db_inner_host(const std::string& value);
  void set_db_inner_host(std::string&& value);
  void set_db_inner_host(const char* value);
  void set_db_inner_host(const char* value, size_t size);
  std::string* mutable_db_inner_host();
  std::string* release_db_inner_host();
  void set_allocated_db_inner_host(std::string* db_inner_host);
  private:
  const std::string& _internal_db_inner_host() const;
  void _internal_set_db_inner_host(const std::string& value);
  std::string* _internal_mutable_db_inner_host();
  public:

  // .smart3dmap.v1.DBUser db_user = 5;
  bool has_db_user() const;
  private:
  bool _internal_has_db_user() const;
  public:
  void clear_db_user();
  const ::smart3dmap::v1::DBUser& db_user() const;
  ::smart3dmap::v1::DBUser* release_db_user();
  ::smart3dmap::v1::DBUser* mutable_db_user();
  void set_allocated_db_user(::smart3dmap::v1::DBUser* db_user);
  private:
  const ::smart3dmap::v1::DBUser& _internal_db_user() const;
  ::smart3dmap::v1::DBUser* _internal_mutable_db_user();
  public:
  void unsafe_arena_set_allocated_db_user(
      ::smart3dmap::v1::DBUser* db_user);
  ::smart3dmap::v1::DBUser* unsafe_arena_release_db_user();

  // int32 db_port = 3;
  void clear_db_port();
  ::PROTOBUF_NAMESPACE_ID::int32 db_port() const;
  void set_db_port(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_db_port() const;
  void _internal_set_db_port(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // .smart3dmap.v1.DBServerType server_type = 6;
  void clear_server_type();
  ::smart3dmap::v1::DBServerType server_type() const;
  void set_server_type(::smart3dmap::v1::DBServerType value);
  private:
  ::smart3dmap::v1::DBServerType _internal_server_type() const;
  void _internal_set_server_type(::smart3dmap::v1::DBServerType value);
  public:

  // .smart3dmap.v1.DBAppType app_type = 7;
  void clear_app_type();
  ::smart3dmap::v1::DBAppType app_type() const;
  void set_app_type(::smart3dmap::v1::DBAppType value);
  private:
  ::smart3dmap::v1::DBAppType _internal_app_type() const;
  void _internal_set_app_type(::smart3dmap::v1::DBAppType value);
  public:

  // @@protoc_insertion_point(class_scope:smart3dmap.v1.AddExistingDatabaseRequest)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr name_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr db_host_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr db_name_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr db_inner_host_;
  ::smart3dmap::v1::DBUser* db_user_;
  ::PROTOBUF_NAMESPACE_ID::int32 db_port_;
  int server_type_;
  int app_type_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_data_5fengine_2fdata_5fengine_2eproto;
};
// -------------------------------------------------------------------

class LIBS3DMGRPC_API ListDatabasesRequest PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:smart3dmap.v1.ListDatabasesRequest) */ {
 public:
  inline ListDatabasesRequest() : ListDatabasesRequest(nullptr) {}
  virtual ~ListDatabasesRequest();
  explicit constexpr ListDatabasesRequest(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  ListDatabasesRequest(const ListDatabasesRequest& from);
  ListDatabasesRequest(ListDatabasesRequest&& from) noexcept
    : ListDatabasesRequest() {
    *this = ::std::move(from);
  }

  inline ListDatabasesRequest& operator=(const ListDatabasesRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline ListDatabasesRequest& operator=(ListDatabasesRequest&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const ListDatabasesRequest& default_instance() {
    return *internal_default_instance();
  }
  static inline const ListDatabasesRequest* internal_default_instance() {
    return reinterpret_cast<const ListDatabasesRequest*>(
               &_ListDatabasesRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    18;

  friend void swap(ListDatabasesRequest& a, ListDatabasesRequest& b) {
    a.Swap(&b);
  }
  inline void Swap(ListDatabasesRequest* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(ListDatabasesRequest* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline ListDatabasesRequest* New() const final {
    return CreateMaybeMessage<ListDatabasesRequest>(nullptr);
  }

  ListDatabasesRequest* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<ListDatabasesRequest>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const ListDatabasesRequest& from);
  void MergeFrom(const ListDatabasesRequest& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(ListDatabasesRequest* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "smart3dmap.v1.ListDatabasesRequest";
  }
  protected:
  explicit ListDatabasesRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    return ::descriptor_table_data_5fengine_2fdata_5fengine_2eproto_metadata_getter(kIndexInFileMessages);
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kPaginationFieldNumber = 1,
    kAppTypeFieldNumber = 2,
  };
  // .smart3dmap.v1.Pagination pagination = 1;
  bool has_pagination() const;
  private:
  bool _internal_has_pagination() const;
  public:
  void clear_pagination();
  const ::smart3dmap::v1::Pagination& pagination() const;
  ::smart3dmap::v1::Pagination* release_pagination();
  ::smart3dmap::v1::Pagination* mutable_pagination();
  void set_allocated_pagination(::smart3dmap::v1::Pagination* pagination);
  private:
  const ::smart3dmap::v1::Pagination& _internal_pagination() const;
  ::smart3dmap::v1::Pagination* _internal_mutable_pagination();
  public:
  void unsafe_arena_set_allocated_pagination(
      ::smart3dmap::v1::Pagination* pagination);
  ::smart3dmap::v1::Pagination* unsafe_arena_release_pagination();

  // .smart3dmap.v1.DBAppType app_type = 2;
  void clear_app_type();
  ::smart3dmap::v1::DBAppType app_type() const;
  void set_app_type(::smart3dmap::v1::DBAppType value);
  private:
  ::smart3dmap::v1::DBAppType _internal_app_type() const;
  void _internal_set_app_type(::smart3dmap::v1::DBAppType value);
  public:

  // @@protoc_insertion_point(class_scope:smart3dmap.v1.ListDatabasesRequest)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::smart3dmap::v1::Pagination* pagination_;
  int app_type_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_data_5fengine_2fdata_5fengine_2eproto;
};
// -------------------------------------------------------------------

class LIBS3DMGRPC_API ListDatabasesResponse PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:smart3dmap.v1.ListDatabasesResponse) */ {
 public:
  inline ListDatabasesResponse() : ListDatabasesResponse(nullptr) {}
  virtual ~ListDatabasesResponse();
  explicit constexpr ListDatabasesResponse(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  ListDatabasesResponse(const ListDatabasesResponse& from);
  ListDatabasesResponse(ListDatabasesResponse&& from) noexcept
    : ListDatabasesResponse() {
    *this = ::std::move(from);
  }

  inline ListDatabasesResponse& operator=(const ListDatabasesResponse& from) {
    CopyFrom(from);
    return *this;
  }
  inline ListDatabasesResponse& operator=(ListDatabasesResponse&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const ListDatabasesResponse& default_instance() {
    return *internal_default_instance();
  }
  static inline const ListDatabasesResponse* internal_default_instance() {
    return reinterpret_cast<const ListDatabasesResponse*>(
               &_ListDatabasesResponse_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    19;

  friend void swap(ListDatabasesResponse& a, ListDatabasesResponse& b) {
    a.Swap(&b);
  }
  inline void Swap(ListDatabasesResponse* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(ListDatabasesResponse* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline ListDatabasesResponse* New() const final {
    return CreateMaybeMessage<ListDatabasesResponse>(nullptr);
  }

  ListDatabasesResponse* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<ListDatabasesResponse>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const ListDatabasesResponse& from);
  void MergeFrom(const ListDatabasesResponse& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(ListDatabasesResponse* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "smart3dmap.v1.ListDatabasesResponse";
  }
  protected:
  explicit ListDatabasesResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    return ::descriptor_table_data_5fengine_2fdata_5fengine_2eproto_metadata_getter(kIndexInFileMessages);
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kDatabasesFieldNumber = 1,
    kTotalCountFieldNumber = 2,
  };
  // repeated .smart3dmap.v1.Database databases = 1;
  int databases_size() const;
  private:
  int _internal_databases_size() const;
  public:
  void clear_databases();
  ::smart3dmap::v1::Database* mutable_databases(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::smart3dmap::v1::Database >*
      mutable_databases();
  private:
  const ::smart3dmap::v1::Database& _internal_databases(int index) const;
  ::smart3dmap::v1::Database* _internal_add_databases();
  public:
  const ::smart3dmap::v1::Database& databases(int index) const;
  ::smart3dmap::v1::Database* add_databases();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::smart3dmap::v1::Database >&
      databases() const;

  // int32 total_count = 2;
  void clear_total_count();
  ::PROTOBUF_NAMESPACE_ID::int32 total_count() const;
  void set_total_count(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_total_count() const;
  void _internal_set_total_count(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // @@protoc_insertion_point(class_scope:smart3dmap.v1.ListDatabasesResponse)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::smart3dmap::v1::Database > databases_;
  ::PROTOBUF_NAMESPACE_ID::int32 total_count_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_data_5fengine_2fdata_5fengine_2eproto;
};
// -------------------------------------------------------------------

class LIBS3DMGRPC_API GetDatabaseRequest PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:smart3dmap.v1.GetDatabaseRequest) */ {
 public:
  inline GetDatabaseRequest() : GetDatabaseRequest(nullptr) {}
  virtual ~GetDatabaseRequest();
  explicit constexpr GetDatabaseRequest(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  GetDatabaseRequest(const GetDatabaseRequest& from);
  GetDatabaseRequest(GetDatabaseRequest&& from) noexcept
    : GetDatabaseRequest() {
    *this = ::std::move(from);
  }

  inline GetDatabaseRequest& operator=(const GetDatabaseRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline GetDatabaseRequest& operator=(GetDatabaseRequest&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const GetDatabaseRequest& default_instance() {
    return *internal_default_instance();
  }
  enum DbLabelCase {
    kId = 1,
    kName = 2,
    DB_LABEL_NOT_SET = 0,
  };

  static inline const GetDatabaseRequest* internal_default_instance() {
    return reinterpret_cast<const GetDatabaseRequest*>(
               &_GetDatabaseRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    20;

  friend void swap(GetDatabaseRequest& a, GetDatabaseRequest& b) {
    a.Swap(&b);
  }
  inline void Swap(GetDatabaseRequest* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(GetDatabaseRequest* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline GetDatabaseRequest* New() const final {
    return CreateMaybeMessage<GetDatabaseRequest>(nullptr);
  }

  GetDatabaseRequest* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<GetDatabaseRequest>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const GetDatabaseRequest& from);
  void MergeFrom(const GetDatabaseRequest& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(GetDatabaseRequest* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "smart3dmap.v1.GetDatabaseRequest";
  }
  protected:
  explicit GetDatabaseRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    return ::descriptor_table_data_5fengine_2fdata_5fengine_2eproto_metadata_getter(kIndexInFileMessages);
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kIdFieldNumber = 1,
    kNameFieldNumber = 2,
  };
  // int32 id = 1;
  bool has_id() const;
  private:
  bool _internal_has_id() const;
  public:
  void clear_id();
  ::PROTOBUF_NAMESPACE_ID::int32 id() const;
  void set_id(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_id() const;
  void _internal_set_id(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // string name = 2;
  bool has_name() const;
  private:
  bool _internal_has_name() const;
  public:
  void clear_name();
  const std::string& name() const;
  void set_name(const std::string& value);
  void set_name(std::string&& value);
  void set_name(const char* value);
  void set_name(const char* value, size_t size);
  std::string* mutable_name();
  std::string* release_name();
  void set_allocated_name(std::string* name);
  private:
  const std::string& _internal_name() const;
  void _internal_set_name(const std::string& value);
  std::string* _internal_mutable_name();
  public:

  void clear_db_label();
  DbLabelCase db_label_case() const;
  // @@protoc_insertion_point(class_scope:smart3dmap.v1.GetDatabaseRequest)
 private:
  class _Internal;
  void set_has_id();
  void set_has_name();

  inline bool has_db_label() const;
  inline void clear_has_db_label();

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  union DbLabelUnion {
    constexpr DbLabelUnion() : _constinit_{} {}
      ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized _constinit_;
    ::PROTOBUF_NAMESPACE_ID::int32 id_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr name_;
  } db_label_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::uint32 _oneof_case_[1];

  friend struct ::TableStruct_data_5fengine_2fdata_5fengine_2eproto;
};
// -------------------------------------------------------------------

class LIBS3DMGRPC_API DeleteDatabaseRequest PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:smart3dmap.v1.DeleteDatabaseRequest) */ {
 public:
  inline DeleteDatabaseRequest() : DeleteDatabaseRequest(nullptr) {}
  virtual ~DeleteDatabaseRequest();
  explicit constexpr DeleteDatabaseRequest(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  DeleteDatabaseRequest(const DeleteDatabaseRequest& from);
  DeleteDatabaseRequest(DeleteDatabaseRequest&& from) noexcept
    : DeleteDatabaseRequest() {
    *this = ::std::move(from);
  }

  inline DeleteDatabaseRequest& operator=(const DeleteDatabaseRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline DeleteDatabaseRequest& operator=(DeleteDatabaseRequest&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const DeleteDatabaseRequest& default_instance() {
    return *internal_default_instance();
  }
  static inline const DeleteDatabaseRequest* internal_default_instance() {
    return reinterpret_cast<const DeleteDatabaseRequest*>(
               &_DeleteDatabaseRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    21;

  friend void swap(DeleteDatabaseRequest& a, DeleteDatabaseRequest& b) {
    a.Swap(&b);
  }
  inline void Swap(DeleteDatabaseRequest* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(DeleteDatabaseRequest* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline DeleteDatabaseRequest* New() const final {
    return CreateMaybeMessage<DeleteDatabaseRequest>(nullptr);
  }

  DeleteDatabaseRequest* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<DeleteDatabaseRequest>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const DeleteDatabaseRequest& from);
  void MergeFrom(const DeleteDatabaseRequest& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(DeleteDatabaseRequest* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "smart3dmap.v1.DeleteDatabaseRequest";
  }
  protected:
  explicit DeleteDatabaseRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    return ::descriptor_table_data_5fengine_2fdata_5fengine_2eproto_metadata_getter(kIndexInFileMessages);
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kIdFieldNumber = 1,
  };
  // int32 id = 1;
  void clear_id();
  ::PROTOBUF_NAMESPACE_ID::int32 id() const;
  void set_id(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_id() const;
  void _internal_set_id(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // @@protoc_insertion_point(class_scope:smart3dmap.v1.DeleteDatabaseRequest)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::int32 id_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_data_5fengine_2fdata_5fengine_2eproto;
};
// -------------------------------------------------------------------

class LIBS3DMGRPC_API DeleteDatabaseResponse PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:smart3dmap.v1.DeleteDatabaseResponse) */ {
 public:
  inline DeleteDatabaseResponse() : DeleteDatabaseResponse(nullptr) {}
  virtual ~DeleteDatabaseResponse();
  explicit constexpr DeleteDatabaseResponse(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  DeleteDatabaseResponse(const DeleteDatabaseResponse& from);
  DeleteDatabaseResponse(DeleteDatabaseResponse&& from) noexcept
    : DeleteDatabaseResponse() {
    *this = ::std::move(from);
  }

  inline DeleteDatabaseResponse& operator=(const DeleteDatabaseResponse& from) {
    CopyFrom(from);
    return *this;
  }
  inline DeleteDatabaseResponse& operator=(DeleteDatabaseResponse&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const DeleteDatabaseResponse& default_instance() {
    return *internal_default_instance();
  }
  static inline const DeleteDatabaseResponse* internal_default_instance() {
    return reinterpret_cast<const DeleteDatabaseResponse*>(
               &_DeleteDatabaseResponse_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    22;

  friend void swap(DeleteDatabaseResponse& a, DeleteDatabaseResponse& b) {
    a.Swap(&b);
  }
  inline void Swap(DeleteDatabaseResponse* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(DeleteDatabaseResponse* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline DeleteDatabaseResponse* New() const final {
    return CreateMaybeMessage<DeleteDatabaseResponse>(nullptr);
  }

  DeleteDatabaseResponse* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<DeleteDatabaseResponse>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const DeleteDatabaseResponse& from);
  void MergeFrom(const DeleteDatabaseResponse& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(DeleteDatabaseResponse* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "smart3dmap.v1.DeleteDatabaseResponse";
  }
  protected:
  explicit DeleteDatabaseResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    return ::descriptor_table_data_5fengine_2fdata_5fengine_2eproto_metadata_getter(kIndexInFileMessages);
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kErrorFieldNumber = 2,
    kStatusFieldNumber = 1,
  };
  // string error = 2;
  void clear_error();
  const std::string& error() const;
  void set_error(const std::string& value);
  void set_error(std::string&& value);
  void set_error(const char* value);
  void set_error(const char* value, size_t size);
  std::string* mutable_error();
  std::string* release_error();
  void set_allocated_error(std::string* error);
  private:
  const std::string& _internal_error() const;
  void _internal_set_error(const std::string& value);
  std::string* _internal_mutable_error();
  public:

  // bool status = 1;
  void clear_status();
  bool status() const;
  void set_status(bool value);
  private:
  bool _internal_status() const;
  void _internal_set_status(bool value);
  public:

  // @@protoc_insertion_point(class_scope:smart3dmap.v1.DeleteDatabaseResponse)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr error_;
  bool status_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_data_5fengine_2fdata_5fengine_2eproto;
};
// -------------------------------------------------------------------

class LIBS3DMGRPC_API Database PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:smart3dmap.v1.Database) */ {
 public:
  inline Database() : Database(nullptr) {}
  virtual ~Database();
  explicit constexpr Database(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  Database(const Database& from);
  Database(Database&& from) noexcept
    : Database() {
    *this = ::std::move(from);
  }

  inline Database& operator=(const Database& from) {
    CopyFrom(from);
    return *this;
  }
  inline Database& operator=(Database&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const Database& default_instance() {
    return *internal_default_instance();
  }
  static inline const Database* internal_default_instance() {
    return reinterpret_cast<const Database*>(
               &_Database_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    23;

  friend void swap(Database& a, Database& b) {
    a.Swap(&b);
  }
  inline void Swap(Database* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(Database* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline Database* New() const final {
    return CreateMaybeMessage<Database>(nullptr);
  }

  Database* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<Database>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const Database& from);
  void MergeFrom(const Database& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Database* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "smart3dmap.v1.Database";
  }
  protected:
  explicit Database(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    return ::descriptor_table_data_5fengine_2fdata_5fengine_2eproto_metadata_getter(kIndexInFileMessages);
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kNameFieldNumber = 2,
    kDbHostFieldNumber = 5,
    kDbNameFieldNumber = 7,
    kVersionFieldNumber = 9,
    kDbInnerHostFieldNumber = 13,
    kDbUserFieldNumber = 8,
    kCreatedAtFieldNumber = 10,
    kUpdatedAtFieldNumber = 11,
    kIdFieldNumber = 1,
    kDbServerIdFieldNumber = 3,
    kDbServerTypeFieldNumber = 4,
    kDbPortFieldNumber = 6,
    kAppTypeFieldNumber = 12,
  };
  // string name = 2;
  void clear_name();
  const std::string& name() const;
  void set_name(const std::string& value);
  void set_name(std::string&& value);
  void set_name(const char* value);
  void set_name(const char* value, size_t size);
  std::string* mutable_name();
  std::string* release_name();
  void set_allocated_name(std::string* name);
  private:
  const std::string& _internal_name() const;
  void _internal_set_name(const std::string& value);
  std::string* _internal_mutable_name();
  public:

  // string db_host = 5;
  void clear_db_host();
  const std::string& db_host() const;
  void set_db_host(const std::string& value);
  void set_db_host(std::string&& value);
  void set_db_host(const char* value);
  void set_db_host(const char* value, size_t size);
  std::string* mutable_db_host();
  std::string* release_db_host();
  void set_allocated_db_host(std::string* db_host);
  private:
  const std::string& _internal_db_host() const;
  void _internal_set_db_host(const std::string& value);
  std::string* _internal_mutable_db_host();
  public:

  // string db_name = 7;
  void clear_db_name();
  const std::string& db_name() const;
  void set_db_name(const std::string& value);
  void set_db_name(std::string&& value);
  void set_db_name(const char* value);
  void set_db_name(const char* value, size_t size);
  std::string* mutable_db_name();
  std::string* release_db_name();
  void set_allocated_db_name(std::string* db_name);
  private:
  const std::string& _internal_db_name() const;
  void _internal_set_db_name(const std::string& value);
  std::string* _internal_mutable_db_name();
  public:

  // string version = 9;
  void clear_version();
  const std::string& version() const;
  void set_version(const std::string& value);
  void set_version(std::string&& value);
  void set_version(const char* value);
  void set_version(const char* value, size_t size);
  std::string* mutable_version();
  std::string* release_version();
  void set_allocated_version(std::string* version);
  private:
  const std::string& _internal_version() const;
  void _internal_set_version(const std::string& value);
  std::string* _internal_mutable_version();
  public:

  // string db_inner_host = 13;
  void clear_db_inner_host();
  const std::string& db_inner_host() const;
  void set_db_inner_host(const std::string& value);
  void set_db_inner_host(std::string&& value);
  void set_db_inner_host(const char* value);
  void set_db_inner_host(const char* value, size_t size);
  std::string* mutable_db_inner_host();
  std::string* release_db_inner_host();
  void set_allocated_db_inner_host(std::string* db_inner_host);
  private:
  const std::string& _internal_db_inner_host() const;
  void _internal_set_db_inner_host(const std::string& value);
  std::string* _internal_mutable_db_inner_host();
  public:

  // .smart3dmap.v1.DBUser db_user = 8;
  bool has_db_user() const;
  private:
  bool _internal_has_db_user() const;
  public:
  void clear_db_user();
  const ::smart3dmap::v1::DBUser& db_user() const;
  ::smart3dmap::v1::DBUser* release_db_user();
  ::smart3dmap::v1::DBUser* mutable_db_user();
  void set_allocated_db_user(::smart3dmap::v1::DBUser* db_user);
  private:
  const ::smart3dmap::v1::DBUser& _internal_db_user() const;
  ::smart3dmap::v1::DBUser* _internal_mutable_db_user();
  public:
  void unsafe_arena_set_allocated_db_user(
      ::smart3dmap::v1::DBUser* db_user);
  ::smart3dmap::v1::DBUser* unsafe_arena_release_db_user();

  // .google.protobuf.Timestamp created_at = 10;
  bool has_created_at() const;
  private:
  bool _internal_has_created_at() const;
  public:
  void clear_created_at();
  const PROTOBUF_NAMESPACE_ID::Timestamp& created_at() const;
  PROTOBUF_NAMESPACE_ID::Timestamp* release_created_at();
  PROTOBUF_NAMESPACE_ID::Timestamp* mutable_created_at();
  void set_allocated_created_at(PROTOBUF_NAMESPACE_ID::Timestamp* created_at);
  private:
  const PROTOBUF_NAMESPACE_ID::Timestamp& _internal_created_at() const;
  PROTOBUF_NAMESPACE_ID::Timestamp* _internal_mutable_created_at();
  public:
  void unsafe_arena_set_allocated_created_at(
      PROTOBUF_NAMESPACE_ID::Timestamp* created_at);
  PROTOBUF_NAMESPACE_ID::Timestamp* unsafe_arena_release_created_at();

  // .google.protobuf.Timestamp updated_at = 11;
  bool has_updated_at() const;
  private:
  bool _internal_has_updated_at() const;
  public:
  void clear_updated_at();
  const PROTOBUF_NAMESPACE_ID::Timestamp& updated_at() const;
  PROTOBUF_NAMESPACE_ID::Timestamp* release_updated_at();
  PROTOBUF_NAMESPACE_ID::Timestamp* mutable_updated_at();
  void set_allocated_updated_at(PROTOBUF_NAMESPACE_ID::Timestamp* updated_at);
  private:
  const PROTOBUF_NAMESPACE_ID::Timestamp& _internal_updated_at() const;
  PROTOBUF_NAMESPACE_ID::Timestamp* _internal_mutable_updated_at();
  public:
  void unsafe_arena_set_allocated_updated_at(
      PROTOBUF_NAMESPACE_ID::Timestamp* updated_at);
  PROTOBUF_NAMESPACE_ID::Timestamp* unsafe_arena_release_updated_at();

  // int32 id = 1;
  void clear_id();
  ::PROTOBUF_NAMESPACE_ID::int32 id() const;
  void set_id(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_id() const;
  void _internal_set_id(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // int32 db_server_id = 3;
  void clear_db_server_id();
  ::PROTOBUF_NAMESPACE_ID::int32 db_server_id() const;
  void set_db_server_id(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_db_server_id() const;
  void _internal_set_db_server_id(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // .smart3dmap.v1.DBServerType db_server_type = 4;
  void clear_db_server_type();
  ::smart3dmap::v1::DBServerType db_server_type() const;
  void set_db_server_type(::smart3dmap::v1::DBServerType value);
  private:
  ::smart3dmap::v1::DBServerType _internal_db_server_type() const;
  void _internal_set_db_server_type(::smart3dmap::v1::DBServerType value);
  public:

  // int32 db_port = 6;
  void clear_db_port();
  ::PROTOBUF_NAMESPACE_ID::int32 db_port() const;
  void set_db_port(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_db_port() const;
  void _internal_set_db_port(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // .smart3dmap.v1.DBAppType app_type = 12;
  void clear_app_type();
  ::smart3dmap::v1::DBAppType app_type() const;
  void set_app_type(::smart3dmap::v1::DBAppType value);
  private:
  ::smart3dmap::v1::DBAppType _internal_app_type() const;
  void _internal_set_app_type(::smart3dmap::v1::DBAppType value);
  public:

  // @@protoc_insertion_point(class_scope:smart3dmap.v1.Database)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr name_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr db_host_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr db_name_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr version_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr db_inner_host_;
  ::smart3dmap::v1::DBUser* db_user_;
  PROTOBUF_NAMESPACE_ID::Timestamp* created_at_;
  PROTOBUF_NAMESPACE_ID::Timestamp* updated_at_;
  ::PROTOBUF_NAMESPACE_ID::int32 id_;
  ::PROTOBUF_NAMESPACE_ID::int32 db_server_id_;
  int db_server_type_;
  ::PROTOBUF_NAMESPACE_ID::int32 db_port_;
  int app_type_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_data_5fengine_2fdata_5fengine_2eproto;
};
// -------------------------------------------------------------------

class LIBS3DMGRPC_API ListProjectsRequest PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:smart3dmap.v1.ListProjectsRequest) */ {
 public:
  inline ListProjectsRequest() : ListProjectsRequest(nullptr) {}
  virtual ~ListProjectsRequest();
  explicit constexpr ListProjectsRequest(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  ListProjectsRequest(const ListProjectsRequest& from);
  ListProjectsRequest(ListProjectsRequest&& from) noexcept
    : ListProjectsRequest() {
    *this = ::std::move(from);
  }

  inline ListProjectsRequest& operator=(const ListProjectsRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline ListProjectsRequest& operator=(ListProjectsRequest&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const ListProjectsRequest& default_instance() {
    return *internal_default_instance();
  }
  static inline const ListProjectsRequest* internal_default_instance() {
    return reinterpret_cast<const ListProjectsRequest*>(
               &_ListProjectsRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    24;

  friend void swap(ListProjectsRequest& a, ListProjectsRequest& b) {
    a.Swap(&b);
  }
  inline void Swap(ListProjectsRequest* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(ListProjectsRequest* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline ListProjectsRequest* New() const final {
    return CreateMaybeMessage<ListProjectsRequest>(nullptr);
  }

  ListProjectsRequest* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<ListProjectsRequest>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const ListProjectsRequest& from);
  void MergeFrom(const ListProjectsRequest& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(ListProjectsRequest* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "smart3dmap.v1.ListProjectsRequest";
  }
  protected:
  explicit ListProjectsRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    return ::descriptor_table_data_5fengine_2fdata_5fengine_2eproto_metadata_getter(kIndexInFileMessages);
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kNameFieldNumber = 2,
    kPaginationFieldNumber = 1,
  };
  // string name = 2;
  void clear_name();
  const std::string& name() const;
  void set_name(const std::string& value);
  void set_name(std::string&& value);
  void set_name(const char* value);
  void set_name(const char* value, size_t size);
  std::string* mutable_name();
  std::string* release_name();
  void set_allocated_name(std::string* name);
  private:
  const std::string& _internal_name() const;
  void _internal_set_name(const std::string& value);
  std::string* _internal_mutable_name();
  public:

  // .smart3dmap.v1.Pagination pagination = 1;
  bool has_pagination() const;
  private:
  bool _internal_has_pagination() const;
  public:
  void clear_pagination();
  const ::smart3dmap::v1::Pagination& pagination() const;
  ::smart3dmap::v1::Pagination* release_pagination();
  ::smart3dmap::v1::Pagination* mutable_pagination();
  void set_allocated_pagination(::smart3dmap::v1::Pagination* pagination);
  private:
  const ::smart3dmap::v1::Pagination& _internal_pagination() const;
  ::smart3dmap::v1::Pagination* _internal_mutable_pagination();
  public:
  void unsafe_arena_set_allocated_pagination(
      ::smart3dmap::v1::Pagination* pagination);
  ::smart3dmap::v1::Pagination* unsafe_arena_release_pagination();

  // @@protoc_insertion_point(class_scope:smart3dmap.v1.ListProjectsRequest)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr name_;
  ::smart3dmap::v1::Pagination* pagination_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_data_5fengine_2fdata_5fengine_2eproto;
};
// -------------------------------------------------------------------

class LIBS3DMGRPC_API ListProjectsResponse PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:smart3dmap.v1.ListProjectsResponse) */ {
 public:
  inline ListProjectsResponse() : ListProjectsResponse(nullptr) {}
  virtual ~ListProjectsResponse();
  explicit constexpr ListProjectsResponse(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  ListProjectsResponse(const ListProjectsResponse& from);
  ListProjectsResponse(ListProjectsResponse&& from) noexcept
    : ListProjectsResponse() {
    *this = ::std::move(from);
  }

  inline ListProjectsResponse& operator=(const ListProjectsResponse& from) {
    CopyFrom(from);
    return *this;
  }
  inline ListProjectsResponse& operator=(ListProjectsResponse&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const ListProjectsResponse& default_instance() {
    return *internal_default_instance();
  }
  static inline const ListProjectsResponse* internal_default_instance() {
    return reinterpret_cast<const ListProjectsResponse*>(
               &_ListProjectsResponse_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    25;

  friend void swap(ListProjectsResponse& a, ListProjectsResponse& b) {
    a.Swap(&b);
  }
  inline void Swap(ListProjectsResponse* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(ListProjectsResponse* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline ListProjectsResponse* New() const final {
    return CreateMaybeMessage<ListProjectsResponse>(nullptr);
  }

  ListProjectsResponse* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<ListProjectsResponse>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const ListProjectsResponse& from);
  void MergeFrom(const ListProjectsResponse& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(ListProjectsResponse* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "smart3dmap.v1.ListProjectsResponse";
  }
  protected:
  explicit ListProjectsResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    return ::descriptor_table_data_5fengine_2fdata_5fengine_2eproto_metadata_getter(kIndexInFileMessages);
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kProjectsFieldNumber = 1,
    kTotalCountFieldNumber = 2,
  };
  // repeated .smart3dmap.v1.BasicProject projects = 1;
  int projects_size() const;
  private:
  int _internal_projects_size() const;
  public:
  void clear_projects();
  ::smart3dmap::v1::BasicProject* mutable_projects(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::smart3dmap::v1::BasicProject >*
      mutable_projects();
  private:
  const ::smart3dmap::v1::BasicProject& _internal_projects(int index) const;
  ::smart3dmap::v1::BasicProject* _internal_add_projects();
  public:
  const ::smart3dmap::v1::BasicProject& projects(int index) const;
  ::smart3dmap::v1::BasicProject* add_projects();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::smart3dmap::v1::BasicProject >&
      projects() const;

  // int32 total_count = 2;
  void clear_total_count();
  ::PROTOBUF_NAMESPACE_ID::int32 total_count() const;
  void set_total_count(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_total_count() const;
  void _internal_set_total_count(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // @@protoc_insertion_point(class_scope:smart3dmap.v1.ListProjectsResponse)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::smart3dmap::v1::BasicProject > projects_;
  ::PROTOBUF_NAMESPACE_ID::int32 total_count_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_data_5fengine_2fdata_5fengine_2eproto;
};
// -------------------------------------------------------------------

class LIBS3DMGRPC_API CreateProjectRequest PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:smart3dmap.v1.CreateProjectRequest) */ {
 public:
  inline CreateProjectRequest() : CreateProjectRequest(nullptr) {}
  virtual ~CreateProjectRequest();
  explicit constexpr CreateProjectRequest(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  CreateProjectRequest(const CreateProjectRequest& from);
  CreateProjectRequest(CreateProjectRequest&& from) noexcept
    : CreateProjectRequest() {
    *this = ::std::move(from);
  }

  inline CreateProjectRequest& operator=(const CreateProjectRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline CreateProjectRequest& operator=(CreateProjectRequest&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const CreateProjectRequest& default_instance() {
    return *internal_default_instance();
  }
  static inline const CreateProjectRequest* internal_default_instance() {
    return reinterpret_cast<const CreateProjectRequest*>(
               &_CreateProjectRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    26;

  friend void swap(CreateProjectRequest& a, CreateProjectRequest& b) {
    a.Swap(&b);
  }
  inline void Swap(CreateProjectRequest* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(CreateProjectRequest* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline CreateProjectRequest* New() const final {
    return CreateMaybeMessage<CreateProjectRequest>(nullptr);
  }

  CreateProjectRequest* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<CreateProjectRequest>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const CreateProjectRequest& from);
  void MergeFrom(const CreateProjectRequest& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(CreateProjectRequest* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "smart3dmap.v1.CreateProjectRequest";
  }
  protected:
  explicit CreateProjectRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    return ::descriptor_table_data_5fengine_2fdata_5fengine_2eproto_metadata_getter(kIndexInFileMessages);
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kNameFieldNumber = 1,
    kAuthorsFieldNumber = 2,
    kDescriptionFieldNumber = 3,
    kCrsFieldNumber = 4,
    kUnitFieldNumber = 5,
    kMinXFieldNumber = 6,
    kMinYFieldNumber = 7,
    kMinZFieldNumber = 8,
    kMaxXFieldNumber = 9,
    kMaxYFieldNumber = 10,
    kMaxZFieldNumber = 11,
    kStdStratVersionFieldNumber = 12,
    kDbInfoFieldNumber = 13,
    kDataTree2DFieldNumber = 14,
    kDataTree3DFieldNumber = 15,
    kDataTreeDbFieldNumber = 16,
  };
  // string name = 1;
  void clear_name();
  const std::string& name() const;
  void set_name(const std::string& value);
  void set_name(std::string&& value);
  void set_name(const char* value);
  void set_name(const char* value, size_t size);
  std::string* mutable_name();
  std::string* release_name();
  void set_allocated_name(std::string* name);
  private:
  const std::string& _internal_name() const;
  void _internal_set_name(const std::string& value);
  std::string* _internal_mutable_name();
  public:

  // .google.protobuf.StringValue authors = 2;
  bool has_authors() const;
  private:
  bool _internal_has_authors() const;
  public:
  void clear_authors();
  const PROTOBUF_NAMESPACE_ID::StringValue& authors() const;
  PROTOBUF_NAMESPACE_ID::StringValue* release_authors();
  PROTOBUF_NAMESPACE_ID::StringValue* mutable_authors();
  void set_allocated_authors(PROTOBUF_NAMESPACE_ID::StringValue* authors);
  private:
  const PROTOBUF_NAMESPACE_ID::StringValue& _internal_authors() const;
  PROTOBUF_NAMESPACE_ID::StringValue* _internal_mutable_authors();
  public:
  void unsafe_arena_set_allocated_authors(
      PROTOBUF_NAMESPACE_ID::StringValue* authors);
  PROTOBUF_NAMESPACE_ID::StringValue* unsafe_arena_release_authors();

  // .google.protobuf.StringValue description = 3;
  bool has_description() const;
  private:
  bool _internal_has_description() const;
  public:
  void clear_description();
  const PROTOBUF_NAMESPACE_ID::StringValue& description() const;
  PROTOBUF_NAMESPACE_ID::StringValue* release_description();
  PROTOBUF_NAMESPACE_ID::StringValue* mutable_description();
  void set_allocated_description(PROTOBUF_NAMESPACE_ID::StringValue* description);
  private:
  const PROTOBUF_NAMESPACE_ID::StringValue& _internal_description() const;
  PROTOBUF_NAMESPACE_ID::StringValue* _internal_mutable_description();
  public:
  void unsafe_arena_set_allocated_description(
      PROTOBUF_NAMESPACE_ID::StringValue* description);
  PROTOBUF_NAMESPACE_ID::StringValue* unsafe_arena_release_description();

  // .google.protobuf.StringValue crs = 4;
  bool has_crs() const;
  private:
  bool _internal_has_crs() const;
  public:
  void clear_crs();
  const PROTOBUF_NAMESPACE_ID::StringValue& crs() const;
  PROTOBUF_NAMESPACE_ID::StringValue* release_crs();
  PROTOBUF_NAMESPACE_ID::StringValue* mutable_crs();
  void set_allocated_crs(PROTOBUF_NAMESPACE_ID::StringValue* crs);
  private:
  const PROTOBUF_NAMESPACE_ID::StringValue& _internal_crs() const;
  PROTOBUF_NAMESPACE_ID::StringValue* _internal_mutable_crs();
  public:
  void unsafe_arena_set_allocated_crs(
      PROTOBUF_NAMESPACE_ID::StringValue* crs);
  PROTOBUF_NAMESPACE_ID::StringValue* unsafe_arena_release_crs();

  // .google.protobuf.StringValue unit = 5;
  bool has_unit() const;
  private:
  bool _internal_has_unit() const;
  public:
  void clear_unit();
  const PROTOBUF_NAMESPACE_ID::StringValue& unit() const;
  PROTOBUF_NAMESPACE_ID::StringValue* release_unit();
  PROTOBUF_NAMESPACE_ID::StringValue* mutable_unit();
  void set_allocated_unit(PROTOBUF_NAMESPACE_ID::StringValue* unit);
  private:
  const PROTOBUF_NAMESPACE_ID::StringValue& _internal_unit() const;
  PROTOBUF_NAMESPACE_ID::StringValue* _internal_mutable_unit();
  public:
  void unsafe_arena_set_allocated_unit(
      PROTOBUF_NAMESPACE_ID::StringValue* unit);
  PROTOBUF_NAMESPACE_ID::StringValue* unsafe_arena_release_unit();

  // .google.protobuf.DoubleValue min_x = 6;
  bool has_min_x() const;
  private:
  bool _internal_has_min_x() const;
  public:
  void clear_min_x();
  const PROTOBUF_NAMESPACE_ID::DoubleValue& min_x() const;
  PROTOBUF_NAMESPACE_ID::DoubleValue* release_min_x();
  PROTOBUF_NAMESPACE_ID::DoubleValue* mutable_min_x();
  void set_allocated_min_x(PROTOBUF_NAMESPACE_ID::DoubleValue* min_x);
  private:
  const PROTOBUF_NAMESPACE_ID::DoubleValue& _internal_min_x() const;
  PROTOBUF_NAMESPACE_ID::DoubleValue* _internal_mutable_min_x();
  public:
  void unsafe_arena_set_allocated_min_x(
      PROTOBUF_NAMESPACE_ID::DoubleValue* min_x);
  PROTOBUF_NAMESPACE_ID::DoubleValue* unsafe_arena_release_min_x();

  // .google.protobuf.DoubleValue min_y = 7;
  bool has_min_y() const;
  private:
  bool _internal_has_min_y() const;
  public:
  void clear_min_y();
  const PROTOBUF_NAMESPACE_ID::DoubleValue& min_y() const;
  PROTOBUF_NAMESPACE_ID::DoubleValue* release_min_y();
  PROTOBUF_NAMESPACE_ID::DoubleValue* mutable_min_y();
  void set_allocated_min_y(PROTOBUF_NAMESPACE_ID::DoubleValue* min_y);
  private:
  const PROTOBUF_NAMESPACE_ID::DoubleValue& _internal_min_y() const;
  PROTOBUF_NAMESPACE_ID::DoubleValue* _internal_mutable_min_y();
  public:
  void unsafe_arena_set_allocated_min_y(
      PROTOBUF_NAMESPACE_ID::DoubleValue* min_y);
  PROTOBUF_NAMESPACE_ID::DoubleValue* unsafe_arena_release_min_y();

  // .google.protobuf.DoubleValue min_z = 8;
  bool has_min_z() const;
  private:
  bool _internal_has_min_z() const;
  public:
  void clear_min_z();
  const PROTOBUF_NAMESPACE_ID::DoubleValue& min_z() const;
  PROTOBUF_NAMESPACE_ID::DoubleValue* release_min_z();
  PROTOBUF_NAMESPACE_ID::DoubleValue* mutable_min_z();
  void set_allocated_min_z(PROTOBUF_NAMESPACE_ID::DoubleValue* min_z);
  private:
  const PROTOBUF_NAMESPACE_ID::DoubleValue& _internal_min_z() const;
  PROTOBUF_NAMESPACE_ID::DoubleValue* _internal_mutable_min_z();
  public:
  void unsafe_arena_set_allocated_min_z(
      PROTOBUF_NAMESPACE_ID::DoubleValue* min_z);
  PROTOBUF_NAMESPACE_ID::DoubleValue* unsafe_arena_release_min_z();

  // .google.protobuf.DoubleValue max_x = 9;
  bool has_max_x() const;
  private:
  bool _internal_has_max_x() const;
  public:
  void clear_max_x();
  const PROTOBUF_NAMESPACE_ID::DoubleValue& max_x() const;
  PROTOBUF_NAMESPACE_ID::DoubleValue* release_max_x();
  PROTOBUF_NAMESPACE_ID::DoubleValue* mutable_max_x();
  void set_allocated_max_x(PROTOBUF_NAMESPACE_ID::DoubleValue* max_x);
  private:
  const PROTOBUF_NAMESPACE_ID::DoubleValue& _internal_max_x() const;
  PROTOBUF_NAMESPACE_ID::DoubleValue* _internal_mutable_max_x();
  public:
  void unsafe_arena_set_allocated_max_x(
      PROTOBUF_NAMESPACE_ID::DoubleValue* max_x);
  PROTOBUF_NAMESPACE_ID::DoubleValue* unsafe_arena_release_max_x();

  // .google.protobuf.DoubleValue max_y = 10;
  bool has_max_y() const;
  private:
  bool _internal_has_max_y() const;
  public:
  void clear_max_y();
  const PROTOBUF_NAMESPACE_ID::DoubleValue& max_y() const;
  PROTOBUF_NAMESPACE_ID::DoubleValue* release_max_y();
  PROTOBUF_NAMESPACE_ID::DoubleValue* mutable_max_y();
  void set_allocated_max_y(PROTOBUF_NAMESPACE_ID::DoubleValue* max_y);
  private:
  const PROTOBUF_NAMESPACE_ID::DoubleValue& _internal_max_y() const;
  PROTOBUF_NAMESPACE_ID::DoubleValue* _internal_mutable_max_y();
  public:
  void unsafe_arena_set_allocated_max_y(
      PROTOBUF_NAMESPACE_ID::DoubleValue* max_y);
  PROTOBUF_NAMESPACE_ID::DoubleValue* unsafe_arena_release_max_y();

  // .google.protobuf.DoubleValue max_z = 11;
  bool has_max_z() const;
  private:
  bool _internal_has_max_z() const;
  public:
  void clear_max_z();
  const PROTOBUF_NAMESPACE_ID::DoubleValue& max_z() const;
  PROTOBUF_NAMESPACE_ID::DoubleValue* release_max_z();
  PROTOBUF_NAMESPACE_ID::DoubleValue* mutable_max_z();
  void set_allocated_max_z(PROTOBUF_NAMESPACE_ID::DoubleValue* max_z);
  private:
  const PROTOBUF_NAMESPACE_ID::DoubleValue& _internal_max_z() const;
  PROTOBUF_NAMESPACE_ID::DoubleValue* _internal_mutable_max_z();
  public:
  void unsafe_arena_set_allocated_max_z(
      PROTOBUF_NAMESPACE_ID::DoubleValue* max_z);
  PROTOBUF_NAMESPACE_ID::DoubleValue* unsafe_arena_release_max_z();

  // .google.protobuf.Int32Value std_strat_version = 12;
  bool has_std_strat_version() const;
  private:
  bool _internal_has_std_strat_version() const;
  public:
  void clear_std_strat_version();
  const PROTOBUF_NAMESPACE_ID::Int32Value& std_strat_version() const;
  PROTOBUF_NAMESPACE_ID::Int32Value* release_std_strat_version();
  PROTOBUF_NAMESPACE_ID::Int32Value* mutable_std_strat_version();
  void set_allocated_std_strat_version(PROTOBUF_NAMESPACE_ID::Int32Value* std_strat_version);
  private:
  const PROTOBUF_NAMESPACE_ID::Int32Value& _internal_std_strat_version() const;
  PROTOBUF_NAMESPACE_ID::Int32Value* _internal_mutable_std_strat_version();
  public:
  void unsafe_arena_set_allocated_std_strat_version(
      PROTOBUF_NAMESPACE_ID::Int32Value* std_strat_version);
  PROTOBUF_NAMESPACE_ID::Int32Value* unsafe_arena_release_std_strat_version();

  // .google.protobuf.StringValue db_info = 13;
  bool has_db_info() const;
  private:
  bool _internal_has_db_info() const;
  public:
  void clear_db_info();
  const PROTOBUF_NAMESPACE_ID::StringValue& db_info() const;
  PROTOBUF_NAMESPACE_ID::StringValue* release_db_info();
  PROTOBUF_NAMESPACE_ID::StringValue* mutable_db_info();
  void set_allocated_db_info(PROTOBUF_NAMESPACE_ID::StringValue* db_info);
  private:
  const PROTOBUF_NAMESPACE_ID::StringValue& _internal_db_info() const;
  PROTOBUF_NAMESPACE_ID::StringValue* _internal_mutable_db_info();
  public:
  void unsafe_arena_set_allocated_db_info(
      PROTOBUF_NAMESPACE_ID::StringValue* db_info);
  PROTOBUF_NAMESPACE_ID::StringValue* unsafe_arena_release_db_info();

  // .google.protobuf.StringValue data_tree_2d = 14;
  bool has_data_tree_2d() const;
  private:
  bool _internal_has_data_tree_2d() const;
  public:
  void clear_data_tree_2d();
  const PROTOBUF_NAMESPACE_ID::StringValue& data_tree_2d() const;
  PROTOBUF_NAMESPACE_ID::StringValue* release_data_tree_2d();
  PROTOBUF_NAMESPACE_ID::StringValue* mutable_data_tree_2d();
  void set_allocated_data_tree_2d(PROTOBUF_NAMESPACE_ID::StringValue* data_tree_2d);
  private:
  const PROTOBUF_NAMESPACE_ID::StringValue& _internal_data_tree_2d() const;
  PROTOBUF_NAMESPACE_ID::StringValue* _internal_mutable_data_tree_2d();
  public:
  void unsafe_arena_set_allocated_data_tree_2d(
      PROTOBUF_NAMESPACE_ID::StringValue* data_tree_2d);
  PROTOBUF_NAMESPACE_ID::StringValue* unsafe_arena_release_data_tree_2d();

  // .google.protobuf.StringValue data_tree_3d = 15;
  bool has_data_tree_3d() const;
  private:
  bool _internal_has_data_tree_3d() const;
  public:
  void clear_data_tree_3d();
  const PROTOBUF_NAMESPACE_ID::StringValue& data_tree_3d() const;
  PROTOBUF_NAMESPACE_ID::StringValue* release_data_tree_3d();
  PROTOBUF_NAMESPACE_ID::StringValue* mutable_data_tree_3d();
  void set_allocated_data_tree_3d(PROTOBUF_NAMESPACE_ID::StringValue* data_tree_3d);
  private:
  const PROTOBUF_NAMESPACE_ID::StringValue& _internal_data_tree_3d() const;
  PROTOBUF_NAMESPACE_ID::StringValue* _internal_mutable_data_tree_3d();
  public:
  void unsafe_arena_set_allocated_data_tree_3d(
      PROTOBUF_NAMESPACE_ID::StringValue* data_tree_3d);
  PROTOBUF_NAMESPACE_ID::StringValue* unsafe_arena_release_data_tree_3d();

  // .google.protobuf.StringValue data_tree_db = 16;
  bool has_data_tree_db() const;
  private:
  bool _internal_has_data_tree_db() const;
  public:
  void clear_data_tree_db();
  const PROTOBUF_NAMESPACE_ID::StringValue& data_tree_db() const;
  PROTOBUF_NAMESPACE_ID::StringValue* release_data_tree_db();
  PROTOBUF_NAMESPACE_ID::StringValue* mutable_data_tree_db();
  void set_allocated_data_tree_db(PROTOBUF_NAMESPACE_ID::StringValue* data_tree_db);
  private:
  const PROTOBUF_NAMESPACE_ID::StringValue& _internal_data_tree_db() const;
  PROTOBUF_NAMESPACE_ID::StringValue* _internal_mutable_data_tree_db();
  public:
  void unsafe_arena_set_allocated_data_tree_db(
      PROTOBUF_NAMESPACE_ID::StringValue* data_tree_db);
  PROTOBUF_NAMESPACE_ID::StringValue* unsafe_arena_release_data_tree_db();

  // @@protoc_insertion_point(class_scope:smart3dmap.v1.CreateProjectRequest)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr name_;
  PROTOBUF_NAMESPACE_ID::StringValue* authors_;
  PROTOBUF_NAMESPACE_ID::StringValue* description_;
  PROTOBUF_NAMESPACE_ID::StringValue* crs_;
  PROTOBUF_NAMESPACE_ID::StringValue* unit_;
  PROTOBUF_NAMESPACE_ID::DoubleValue* min_x_;
  PROTOBUF_NAMESPACE_ID::DoubleValue* min_y_;
  PROTOBUF_NAMESPACE_ID::DoubleValue* min_z_;
  PROTOBUF_NAMESPACE_ID::DoubleValue* max_x_;
  PROTOBUF_NAMESPACE_ID::DoubleValue* max_y_;
  PROTOBUF_NAMESPACE_ID::DoubleValue* max_z_;
  PROTOBUF_NAMESPACE_ID::Int32Value* std_strat_version_;
  PROTOBUF_NAMESPACE_ID::StringValue* db_info_;
  PROTOBUF_NAMESPACE_ID::StringValue* data_tree_2d_;
  PROTOBUF_NAMESPACE_ID::StringValue* data_tree_3d_;
  PROTOBUF_NAMESPACE_ID::StringValue* data_tree_db_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_data_5fengine_2fdata_5fengine_2eproto;
};
// -------------------------------------------------------------------

class LIBS3DMGRPC_API GetProjectRequest PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:smart3dmap.v1.GetProjectRequest) */ {
 public:
  inline GetProjectRequest() : GetProjectRequest(nullptr) {}
  virtual ~GetProjectRequest();
  explicit constexpr GetProjectRequest(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  GetProjectRequest(const GetProjectRequest& from);
  GetProjectRequest(GetProjectRequest&& from) noexcept
    : GetProjectRequest() {
    *this = ::std::move(from);
  }

  inline GetProjectRequest& operator=(const GetProjectRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline GetProjectRequest& operator=(GetProjectRequest&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const GetProjectRequest& default_instance() {
    return *internal_default_instance();
  }
  static inline const GetProjectRequest* internal_default_instance() {
    return reinterpret_cast<const GetProjectRequest*>(
               &_GetProjectRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    27;

  friend void swap(GetProjectRequest& a, GetProjectRequest& b) {
    a.Swap(&b);
  }
  inline void Swap(GetProjectRequest* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(GetProjectRequest* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline GetProjectRequest* New() const final {
    return CreateMaybeMessage<GetProjectRequest>(nullptr);
  }

  GetProjectRequest* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<GetProjectRequest>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const GetProjectRequest& from);
  void MergeFrom(const GetProjectRequest& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(GetProjectRequest* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "smart3dmap.v1.GetProjectRequest";
  }
  protected:
  explicit GetProjectRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    return ::descriptor_table_data_5fengine_2fdata_5fengine_2eproto_metadata_getter(kIndexInFileMessages);
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kIdFieldNumber = 1,
  };
  // int32 id = 1;
  void clear_id();
  ::PROTOBUF_NAMESPACE_ID::int32 id() const;
  void set_id(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_id() const;
  void _internal_set_id(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // @@protoc_insertion_point(class_scope:smart3dmap.v1.GetProjectRequest)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::int32 id_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_data_5fengine_2fdata_5fengine_2eproto;
};
// -------------------------------------------------------------------

class LIBS3DMGRPC_API UpdateProjectRequest PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:smart3dmap.v1.UpdateProjectRequest) */ {
 public:
  inline UpdateProjectRequest() : UpdateProjectRequest(nullptr) {}
  virtual ~UpdateProjectRequest();
  explicit constexpr UpdateProjectRequest(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  UpdateProjectRequest(const UpdateProjectRequest& from);
  UpdateProjectRequest(UpdateProjectRequest&& from) noexcept
    : UpdateProjectRequest() {
    *this = ::std::move(from);
  }

  inline UpdateProjectRequest& operator=(const UpdateProjectRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline UpdateProjectRequest& operator=(UpdateProjectRequest&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const UpdateProjectRequest& default_instance() {
    return *internal_default_instance();
  }
  static inline const UpdateProjectRequest* internal_default_instance() {
    return reinterpret_cast<const UpdateProjectRequest*>(
               &_UpdateProjectRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    28;

  friend void swap(UpdateProjectRequest& a, UpdateProjectRequest& b) {
    a.Swap(&b);
  }
  inline void Swap(UpdateProjectRequest* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(UpdateProjectRequest* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline UpdateProjectRequest* New() const final {
    return CreateMaybeMessage<UpdateProjectRequest>(nullptr);
  }

  UpdateProjectRequest* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<UpdateProjectRequest>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const UpdateProjectRequest& from);
  void MergeFrom(const UpdateProjectRequest& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(UpdateProjectRequest* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "smart3dmap.v1.UpdateProjectRequest";
  }
  protected:
  explicit UpdateProjectRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    return ::descriptor_table_data_5fengine_2fdata_5fengine_2eproto_metadata_getter(kIndexInFileMessages);
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kNameFieldNumber = 2,
    kAuthorsFieldNumber = 3,
    kDescriptionFieldNumber = 4,
    kCrsFieldNumber = 5,
    kUnitFieldNumber = 6,
    kMinXFieldNumber = 7,
    kMinYFieldNumber = 8,
    kMinZFieldNumber = 9,
    kMaxXFieldNumber = 10,
    kMaxYFieldNumber = 11,
    kMaxZFieldNumber = 12,
    kStdStratVersionFieldNumber = 13,
    kDbInfoFieldNumber = 14,
    kDataTree2DFieldNumber = 15,
    kDataTree3DFieldNumber = 16,
    kDataTreeDbFieldNumber = 17,
    kIdFieldNumber = 1,
  };
  // .google.protobuf.StringValue name = 2;
  bool has_name() const;
  private:
  bool _internal_has_name() const;
  public:
  void clear_name();
  const PROTOBUF_NAMESPACE_ID::StringValue& name() const;
  PROTOBUF_NAMESPACE_ID::StringValue* release_name();
  PROTOBUF_NAMESPACE_ID::StringValue* mutable_name();
  void set_allocated_name(PROTOBUF_NAMESPACE_ID::StringValue* name);
  private:
  const PROTOBUF_NAMESPACE_ID::StringValue& _internal_name() const;
  PROTOBUF_NAMESPACE_ID::StringValue* _internal_mutable_name();
  public:
  void unsafe_arena_set_allocated_name(
      PROTOBUF_NAMESPACE_ID::StringValue* name);
  PROTOBUF_NAMESPACE_ID::StringValue* unsafe_arena_release_name();

  // .google.protobuf.StringValue authors = 3;
  bool has_authors() const;
  private:
  bool _internal_has_authors() const;
  public:
  void clear_authors();
  const PROTOBUF_NAMESPACE_ID::StringValue& authors() const;
  PROTOBUF_NAMESPACE_ID::StringValue* release_authors();
  PROTOBUF_NAMESPACE_ID::StringValue* mutable_authors();
  void set_allocated_authors(PROTOBUF_NAMESPACE_ID::StringValue* authors);
  private:
  const PROTOBUF_NAMESPACE_ID::StringValue& _internal_authors() const;
  PROTOBUF_NAMESPACE_ID::StringValue* _internal_mutable_authors();
  public:
  void unsafe_arena_set_allocated_authors(
      PROTOBUF_NAMESPACE_ID::StringValue* authors);
  PROTOBUF_NAMESPACE_ID::StringValue* unsafe_arena_release_authors();

  // .google.protobuf.StringValue description = 4;
  bool has_description() const;
  private:
  bool _internal_has_description() const;
  public:
  void clear_description();
  const PROTOBUF_NAMESPACE_ID::StringValue& description() const;
  PROTOBUF_NAMESPACE_ID::StringValue* release_description();
  PROTOBUF_NAMESPACE_ID::StringValue* mutable_description();
  void set_allocated_description(PROTOBUF_NAMESPACE_ID::StringValue* description);
  private:
  const PROTOBUF_NAMESPACE_ID::StringValue& _internal_description() const;
  PROTOBUF_NAMESPACE_ID::StringValue* _internal_mutable_description();
  public:
  void unsafe_arena_set_allocated_description(
      PROTOBUF_NAMESPACE_ID::StringValue* description);
  PROTOBUF_NAMESPACE_ID::StringValue* unsafe_arena_release_description();

  // .google.protobuf.StringValue crs = 5;
  bool has_crs() const;
  private:
  bool _internal_has_crs() const;
  public:
  void clear_crs();
  const PROTOBUF_NAMESPACE_ID::StringValue& crs() const;
  PROTOBUF_NAMESPACE_ID::StringValue* release_crs();
  PROTOBUF_NAMESPACE_ID::StringValue* mutable_crs();
  void set_allocated_crs(PROTOBUF_NAMESPACE_ID::StringValue* crs);
  private:
  const PROTOBUF_NAMESPACE_ID::StringValue& _internal_crs() const;
  PROTOBUF_NAMESPACE_ID::StringValue* _internal_mutable_crs();
  public:
  void unsafe_arena_set_allocated_crs(
      PROTOBUF_NAMESPACE_ID::StringValue* crs);
  PROTOBUF_NAMESPACE_ID::StringValue* unsafe_arena_release_crs();

  // .google.protobuf.StringValue unit = 6;
  bool has_unit() const;
  private:
  bool _internal_has_unit() const;
  public:
  void clear_unit();
  const PROTOBUF_NAMESPACE_ID::StringValue& unit() const;
  PROTOBUF_NAMESPACE_ID::StringValue* release_unit();
  PROTOBUF_NAMESPACE_ID::StringValue* mutable_unit();
  void set_allocated_unit(PROTOBUF_NAMESPACE_ID::StringValue* unit);
  private:
  const PROTOBUF_NAMESPACE_ID::StringValue& _internal_unit() const;
  PROTOBUF_NAMESPACE_ID::StringValue* _internal_mutable_unit();
  public:
  void unsafe_arena_set_allocated_unit(
      PROTOBUF_NAMESPACE_ID::StringValue* unit);
  PROTOBUF_NAMESPACE_ID::StringValue* unsafe_arena_release_unit();

  // .google.protobuf.DoubleValue min_x = 7;
  bool has_min_x() const;
  private:
  bool _internal_has_min_x() const;
  public:
  void clear_min_x();
  const PROTOBUF_NAMESPACE_ID::DoubleValue& min_x() const;
  PROTOBUF_NAMESPACE_ID::DoubleValue* release_min_x();
  PROTOBUF_NAMESPACE_ID::DoubleValue* mutable_min_x();
  void set_allocated_min_x(PROTOBUF_NAMESPACE_ID::DoubleValue* min_x);
  private:
  const PROTOBUF_NAMESPACE_ID::DoubleValue& _internal_min_x() const;
  PROTOBUF_NAMESPACE_ID::DoubleValue* _internal_mutable_min_x();
  public:
  void unsafe_arena_set_allocated_min_x(
      PROTOBUF_NAMESPACE_ID::DoubleValue* min_x);
  PROTOBUF_NAMESPACE_ID::DoubleValue* unsafe_arena_release_min_x();

  // .google.protobuf.DoubleValue min_y = 8;
  bool has_min_y() const;
  private:
  bool _internal_has_min_y() const;
  public:
  void clear_min_y();
  const PROTOBUF_NAMESPACE_ID::DoubleValue& min_y() const;
  PROTOBUF_NAMESPACE_ID::DoubleValue* release_min_y();
  PROTOBUF_NAMESPACE_ID::DoubleValue* mutable_min_y();
  void set_allocated_min_y(PROTOBUF_NAMESPACE_ID::DoubleValue* min_y);
  private:
  const PROTOBUF_NAMESPACE_ID::DoubleValue& _internal_min_y() const;
  PROTOBUF_NAMESPACE_ID::DoubleValue* _internal_mutable_min_y();
  public:
  void unsafe_arena_set_allocated_min_y(
      PROTOBUF_NAMESPACE_ID::DoubleValue* min_y);
  PROTOBUF_NAMESPACE_ID::DoubleValue* unsafe_arena_release_min_y();

  // .google.protobuf.DoubleValue min_z = 9;
  bool has_min_z() const;
  private:
  bool _internal_has_min_z() const;
  public:
  void clear_min_z();
  const PROTOBUF_NAMESPACE_ID::DoubleValue& min_z() const;
  PROTOBUF_NAMESPACE_ID::DoubleValue* release_min_z();
  PROTOBUF_NAMESPACE_ID::DoubleValue* mutable_min_z();
  void set_allocated_min_z(PROTOBUF_NAMESPACE_ID::DoubleValue* min_z);
  private:
  const PROTOBUF_NAMESPACE_ID::DoubleValue& _internal_min_z() const;
  PROTOBUF_NAMESPACE_ID::DoubleValue* _internal_mutable_min_z();
  public:
  void unsafe_arena_set_allocated_min_z(
      PROTOBUF_NAMESPACE_ID::DoubleValue* min_z);
  PROTOBUF_NAMESPACE_ID::DoubleValue* unsafe_arena_release_min_z();

  // .google.protobuf.DoubleValue max_x = 10;
  bool has_max_x() const;
  private:
  bool _internal_has_max_x() const;
  public:
  void clear_max_x();
  const PROTOBUF_NAMESPACE_ID::DoubleValue& max_x() const;
  PROTOBUF_NAMESPACE_ID::DoubleValue* release_max_x();
  PROTOBUF_NAMESPACE_ID::DoubleValue* mutable_max_x();
  void set_allocated_max_x(PROTOBUF_NAMESPACE_ID::DoubleValue* max_x);
  private:
  const PROTOBUF_NAMESPACE_ID::DoubleValue& _internal_max_x() const;
  PROTOBUF_NAMESPACE_ID::DoubleValue* _internal_mutable_max_x();
  public:
  void unsafe_arena_set_allocated_max_x(
      PROTOBUF_NAMESPACE_ID::DoubleValue* max_x);
  PROTOBUF_NAMESPACE_ID::DoubleValue* unsafe_arena_release_max_x();

  // .google.protobuf.DoubleValue max_y = 11;
  bool has_max_y() const;
  private:
  bool _internal_has_max_y() const;
  public:
  void clear_max_y();
  const PROTOBUF_NAMESPACE_ID::DoubleValue& max_y() const;
  PROTOBUF_NAMESPACE_ID::DoubleValue* release_max_y();
  PROTOBUF_NAMESPACE_ID::DoubleValue* mutable_max_y();
  void set_allocated_max_y(PROTOBUF_NAMESPACE_ID::DoubleValue* max_y);
  private:
  const PROTOBUF_NAMESPACE_ID::DoubleValue& _internal_max_y() const;
  PROTOBUF_NAMESPACE_ID::DoubleValue* _internal_mutable_max_y();
  public:
  void unsafe_arena_set_allocated_max_y(
      PROTOBUF_NAMESPACE_ID::DoubleValue* max_y);
  PROTOBUF_NAMESPACE_ID::DoubleValue* unsafe_arena_release_max_y();

  // .google.protobuf.DoubleValue max_z = 12;
  bool has_max_z() const;
  private:
  bool _internal_has_max_z() const;
  public:
  void clear_max_z();
  const PROTOBUF_NAMESPACE_ID::DoubleValue& max_z() const;
  PROTOBUF_NAMESPACE_ID::DoubleValue* release_max_z();
  PROTOBUF_NAMESPACE_ID::DoubleValue* mutable_max_z();
  void set_allocated_max_z(PROTOBUF_NAMESPACE_ID::DoubleValue* max_z);
  private:
  const PROTOBUF_NAMESPACE_ID::DoubleValue& _internal_max_z() const;
  PROTOBUF_NAMESPACE_ID::DoubleValue* _internal_mutable_max_z();
  public:
  void unsafe_arena_set_allocated_max_z(
      PROTOBUF_NAMESPACE_ID::DoubleValue* max_z);
  PROTOBUF_NAMESPACE_ID::DoubleValue* unsafe_arena_release_max_z();

  // .google.protobuf.Int32Value std_strat_version = 13;
  bool has_std_strat_version() const;
  private:
  bool _internal_has_std_strat_version() const;
  public:
  void clear_std_strat_version();
  const PROTOBUF_NAMESPACE_ID::Int32Value& std_strat_version() const;
  PROTOBUF_NAMESPACE_ID::Int32Value* release_std_strat_version();
  PROTOBUF_NAMESPACE_ID::Int32Value* mutable_std_strat_version();
  void set_allocated_std_strat_version(PROTOBUF_NAMESPACE_ID::Int32Value* std_strat_version);
  private:
  const PROTOBUF_NAMESPACE_ID::Int32Value& _internal_std_strat_version() const;
  PROTOBUF_NAMESPACE_ID::Int32Value* _internal_mutable_std_strat_version();
  public:
  void unsafe_arena_set_allocated_std_strat_version(
      PROTOBUF_NAMESPACE_ID::Int32Value* std_strat_version);
  PROTOBUF_NAMESPACE_ID::Int32Value* unsafe_arena_release_std_strat_version();

  // .google.protobuf.StringValue db_info = 14;
  bool has_db_info() const;
  private:
  bool _internal_has_db_info() const;
  public:
  void clear_db_info();
  const PROTOBUF_NAMESPACE_ID::StringValue& db_info() const;
  PROTOBUF_NAMESPACE_ID::StringValue* release_db_info();
  PROTOBUF_NAMESPACE_ID::StringValue* mutable_db_info();
  void set_allocated_db_info(PROTOBUF_NAMESPACE_ID::StringValue* db_info);
  private:
  const PROTOBUF_NAMESPACE_ID::StringValue& _internal_db_info() const;
  PROTOBUF_NAMESPACE_ID::StringValue* _internal_mutable_db_info();
  public:
  void unsafe_arena_set_allocated_db_info(
      PROTOBUF_NAMESPACE_ID::StringValue* db_info);
  PROTOBUF_NAMESPACE_ID::StringValue* unsafe_arena_release_db_info();

  // .google.protobuf.StringValue data_tree_2d = 15;
  bool has_data_tree_2d() const;
  private:
  bool _internal_has_data_tree_2d() const;
  public:
  void clear_data_tree_2d();
  const PROTOBUF_NAMESPACE_ID::StringValue& data_tree_2d() const;
  PROTOBUF_NAMESPACE_ID::StringValue* release_data_tree_2d();
  PROTOBUF_NAMESPACE_ID::StringValue* mutable_data_tree_2d();
  void set_allocated_data_tree_2d(PROTOBUF_NAMESPACE_ID::StringValue* data_tree_2d);
  private:
  const PROTOBUF_NAMESPACE_ID::StringValue& _internal_data_tree_2d() const;
  PROTOBUF_NAMESPACE_ID::StringValue* _internal_mutable_data_tree_2d();
  public:
  void unsafe_arena_set_allocated_data_tree_2d(
      PROTOBUF_NAMESPACE_ID::StringValue* data_tree_2d);
  PROTOBUF_NAMESPACE_ID::StringValue* unsafe_arena_release_data_tree_2d();

  // .google.protobuf.StringValue data_tree_3d = 16;
  bool has_data_tree_3d() const;
  private:
  bool _internal_has_data_tree_3d() const;
  public:
  void clear_data_tree_3d();
  const PROTOBUF_NAMESPACE_ID::StringValue& data_tree_3d() const;
  PROTOBUF_NAMESPACE_ID::StringValue* release_data_tree_3d();
  PROTOBUF_NAMESPACE_ID::StringValue* mutable_data_tree_3d();
  void set_allocated_data_tree_3d(PROTOBUF_NAMESPACE_ID::StringValue* data_tree_3d);
  private:
  const PROTOBUF_NAMESPACE_ID::StringValue& _internal_data_tree_3d() const;
  PROTOBUF_NAMESPACE_ID::StringValue* _internal_mutable_data_tree_3d();
  public:
  void unsafe_arena_set_allocated_data_tree_3d(
      PROTOBUF_NAMESPACE_ID::StringValue* data_tree_3d);
  PROTOBUF_NAMESPACE_ID::StringValue* unsafe_arena_release_data_tree_3d();

  // .google.protobuf.StringValue data_tree_db = 17;
  bool has_data_tree_db() const;
  private:
  bool _internal_has_data_tree_db() const;
  public:
  void clear_data_tree_db();
  const PROTOBUF_NAMESPACE_ID::StringValue& data_tree_db() const;
  PROTOBUF_NAMESPACE_ID::StringValue* release_data_tree_db();
  PROTOBUF_NAMESPACE_ID::StringValue* mutable_data_tree_db();
  void set_allocated_data_tree_db(PROTOBUF_NAMESPACE_ID::StringValue* data_tree_db);
  private:
  const PROTOBUF_NAMESPACE_ID::StringValue& _internal_data_tree_db() const;
  PROTOBUF_NAMESPACE_ID::StringValue* _internal_mutable_data_tree_db();
  public:
  void unsafe_arena_set_allocated_data_tree_db(
      PROTOBUF_NAMESPACE_ID::StringValue* data_tree_db);
  PROTOBUF_NAMESPACE_ID::StringValue* unsafe_arena_release_data_tree_db();

  // int32 id = 1;
  void clear_id();
  ::PROTOBUF_NAMESPACE_ID::int32 id() const;
  void set_id(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_id() const;
  void _internal_set_id(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // @@protoc_insertion_point(class_scope:smart3dmap.v1.UpdateProjectRequest)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  PROTOBUF_NAMESPACE_ID::StringValue* name_;
  PROTOBUF_NAMESPACE_ID::StringValue* authors_;
  PROTOBUF_NAMESPACE_ID::StringValue* description_;
  PROTOBUF_NAMESPACE_ID::StringValue* crs_;
  PROTOBUF_NAMESPACE_ID::StringValue* unit_;
  PROTOBUF_NAMESPACE_ID::DoubleValue* min_x_;
  PROTOBUF_NAMESPACE_ID::DoubleValue* min_y_;
  PROTOBUF_NAMESPACE_ID::DoubleValue* min_z_;
  PROTOBUF_NAMESPACE_ID::DoubleValue* max_x_;
  PROTOBUF_NAMESPACE_ID::DoubleValue* max_y_;
  PROTOBUF_NAMESPACE_ID::DoubleValue* max_z_;
  PROTOBUF_NAMESPACE_ID::Int32Value* std_strat_version_;
  PROTOBUF_NAMESPACE_ID::StringValue* db_info_;
  PROTOBUF_NAMESPACE_ID::StringValue* data_tree_2d_;
  PROTOBUF_NAMESPACE_ID::StringValue* data_tree_3d_;
  PROTOBUF_NAMESPACE_ID::StringValue* data_tree_db_;
  ::PROTOBUF_NAMESPACE_ID::int32 id_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_data_5fengine_2fdata_5fengine_2eproto;
};
// -------------------------------------------------------------------

class LIBS3DMGRPC_API UpdateProjectResponse PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:smart3dmap.v1.UpdateProjectResponse) */ {
 public:
  inline UpdateProjectResponse() : UpdateProjectResponse(nullptr) {}
  virtual ~UpdateProjectResponse();
  explicit constexpr UpdateProjectResponse(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  UpdateProjectResponse(const UpdateProjectResponse& from);
  UpdateProjectResponse(UpdateProjectResponse&& from) noexcept
    : UpdateProjectResponse() {
    *this = ::std::move(from);
  }

  inline UpdateProjectResponse& operator=(const UpdateProjectResponse& from) {
    CopyFrom(from);
    return *this;
  }
  inline UpdateProjectResponse& operator=(UpdateProjectResponse&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const UpdateProjectResponse& default_instance() {
    return *internal_default_instance();
  }
  static inline const UpdateProjectResponse* internal_default_instance() {
    return reinterpret_cast<const UpdateProjectResponse*>(
               &_UpdateProjectResponse_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    29;

  friend void swap(UpdateProjectResponse& a, UpdateProjectResponse& b) {
    a.Swap(&b);
  }
  inline void Swap(UpdateProjectResponse* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(UpdateProjectResponse* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline UpdateProjectResponse* New() const final {
    return CreateMaybeMessage<UpdateProjectResponse>(nullptr);
  }

  UpdateProjectResponse* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<UpdateProjectResponse>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const UpdateProjectResponse& from);
  void MergeFrom(const UpdateProjectResponse& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(UpdateProjectResponse* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "smart3dmap.v1.UpdateProjectResponse";
  }
  protected:
  explicit UpdateProjectResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    return ::descriptor_table_data_5fengine_2fdata_5fengine_2eproto_metadata_getter(kIndexInFileMessages);
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kErrorFieldNumber = 2,
    kStatusFieldNumber = 1,
  };
  // string error = 2;
  void clear_error();
  const std::string& error() const;
  void set_error(const std::string& value);
  void set_error(std::string&& value);
  void set_error(const char* value);
  void set_error(const char* value, size_t size);
  std::string* mutable_error();
  std::string* release_error();
  void set_allocated_error(std::string* error);
  private:
  const std::string& _internal_error() const;
  void _internal_set_error(const std::string& value);
  std::string* _internal_mutable_error();
  public:

  // bool status = 1;
  void clear_status();
  bool status() const;
  void set_status(bool value);
  private:
  bool _internal_status() const;
  void _internal_set_status(bool value);
  public:

  // @@protoc_insertion_point(class_scope:smart3dmap.v1.UpdateProjectResponse)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr error_;
  bool status_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_data_5fengine_2fdata_5fengine_2eproto;
};
// -------------------------------------------------------------------

class LIBS3DMGRPC_API PublishProjectRequest PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:smart3dmap.v1.PublishProjectRequest) */ {
 public:
  inline PublishProjectRequest() : PublishProjectRequest(nullptr) {}
  virtual ~PublishProjectRequest();
  explicit constexpr PublishProjectRequest(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  PublishProjectRequest(const PublishProjectRequest& from);
  PublishProjectRequest(PublishProjectRequest&& from) noexcept
    : PublishProjectRequest() {
    *this = ::std::move(from);
  }

  inline PublishProjectRequest& operator=(const PublishProjectRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline PublishProjectRequest& operator=(PublishProjectRequest&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const PublishProjectRequest& default_instance() {
    return *internal_default_instance();
  }
  static inline const PublishProjectRequest* internal_default_instance() {
    return reinterpret_cast<const PublishProjectRequest*>(
               &_PublishProjectRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    30;

  friend void swap(PublishProjectRequest& a, PublishProjectRequest& b) {
    a.Swap(&b);
  }
  inline void Swap(PublishProjectRequest* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(PublishProjectRequest* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline PublishProjectRequest* New() const final {
    return CreateMaybeMessage<PublishProjectRequest>(nullptr);
  }

  PublishProjectRequest* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<PublishProjectRequest>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const PublishProjectRequest& from);
  void MergeFrom(const PublishProjectRequest& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(PublishProjectRequest* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "smart3dmap.v1.PublishProjectRequest";
  }
  protected:
  explicit PublishProjectRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    return ::descriptor_table_data_5fengine_2fdata_5fengine_2eproto_metadata_getter(kIndexInFileMessages);
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kIdFieldNumber = 1,
    kPublishFieldNumber = 2,
  };
  // int32 id = 1;
  void clear_id();
  ::PROTOBUF_NAMESPACE_ID::int32 id() const;
  void set_id(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_id() const;
  void _internal_set_id(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // bool publish = 2;
  void clear_publish();
  bool publish() const;
  void set_publish(bool value);
  private:
  bool _internal_publish() const;
  void _internal_set_publish(bool value);
  public:

  // @@protoc_insertion_point(class_scope:smart3dmap.v1.PublishProjectRequest)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::int32 id_;
  bool publish_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_data_5fengine_2fdata_5fengine_2eproto;
};
// -------------------------------------------------------------------

class LIBS3DMGRPC_API PublishProjectResponse PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:smart3dmap.v1.PublishProjectResponse) */ {
 public:
  inline PublishProjectResponse() : PublishProjectResponse(nullptr) {}
  virtual ~PublishProjectResponse();
  explicit constexpr PublishProjectResponse(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  PublishProjectResponse(const PublishProjectResponse& from);
  PublishProjectResponse(PublishProjectResponse&& from) noexcept
    : PublishProjectResponse() {
    *this = ::std::move(from);
  }

  inline PublishProjectResponse& operator=(const PublishProjectResponse& from) {
    CopyFrom(from);
    return *this;
  }
  inline PublishProjectResponse& operator=(PublishProjectResponse&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const PublishProjectResponse& default_instance() {
    return *internal_default_instance();
  }
  static inline const PublishProjectResponse* internal_default_instance() {
    return reinterpret_cast<const PublishProjectResponse*>(
               &_PublishProjectResponse_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    31;

  friend void swap(PublishProjectResponse& a, PublishProjectResponse& b) {
    a.Swap(&b);
  }
  inline void Swap(PublishProjectResponse* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(PublishProjectResponse* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline PublishProjectResponse* New() const final {
    return CreateMaybeMessage<PublishProjectResponse>(nullptr);
  }

  PublishProjectResponse* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<PublishProjectResponse>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const PublishProjectResponse& from);
  void MergeFrom(const PublishProjectResponse& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(PublishProjectResponse* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "smart3dmap.v1.PublishProjectResponse";
  }
  protected:
  explicit PublishProjectResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    return ::descriptor_table_data_5fengine_2fdata_5fengine_2eproto_metadata_getter(kIndexInFileMessages);
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kErrorFieldNumber = 2,
    kStatusFieldNumber = 1,
  };
  // string error = 2;
  void clear_error();
  const std::string& error() const;
  void set_error(const std::string& value);
  void set_error(std::string&& value);
  void set_error(const char* value);
  void set_error(const char* value, size_t size);
  std::string* mutable_error();
  std::string* release_error();
  void set_allocated_error(std::string* error);
  private:
  const std::string& _internal_error() const;
  void _internal_set_error(const std::string& value);
  std::string* _internal_mutable_error();
  public:

  // bool status = 1;
  void clear_status();
  bool status() const;
  void set_status(bool value);
  private:
  bool _internal_status() const;
  void _internal_set_status(bool value);
  public:

  // @@protoc_insertion_point(class_scope:smart3dmap.v1.PublishProjectResponse)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr error_;
  bool status_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_data_5fengine_2fdata_5fengine_2eproto;
};
// -------------------------------------------------------------------

class LIBS3DMGRPC_API DeleteProjectRequest PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:smart3dmap.v1.DeleteProjectRequest) */ {
 public:
  inline DeleteProjectRequest() : DeleteProjectRequest(nullptr) {}
  virtual ~DeleteProjectRequest();
  explicit constexpr DeleteProjectRequest(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  DeleteProjectRequest(const DeleteProjectRequest& from);
  DeleteProjectRequest(DeleteProjectRequest&& from) noexcept
    : DeleteProjectRequest() {
    *this = ::std::move(from);
  }

  inline DeleteProjectRequest& operator=(const DeleteProjectRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline DeleteProjectRequest& operator=(DeleteProjectRequest&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const DeleteProjectRequest& default_instance() {
    return *internal_default_instance();
  }
  static inline const DeleteProjectRequest* internal_default_instance() {
    return reinterpret_cast<const DeleteProjectRequest*>(
               &_DeleteProjectRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    32;

  friend void swap(DeleteProjectRequest& a, DeleteProjectRequest& b) {
    a.Swap(&b);
  }
  inline void Swap(DeleteProjectRequest* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(DeleteProjectRequest* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline DeleteProjectRequest* New() const final {
    return CreateMaybeMessage<DeleteProjectRequest>(nullptr);
  }

  DeleteProjectRequest* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<DeleteProjectRequest>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const DeleteProjectRequest& from);
  void MergeFrom(const DeleteProjectRequest& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(DeleteProjectRequest* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "smart3dmap.v1.DeleteProjectRequest";
  }
  protected:
  explicit DeleteProjectRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    return ::descriptor_table_data_5fengine_2fdata_5fengine_2eproto_metadata_getter(kIndexInFileMessages);
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kIdFieldNumber = 1,
  };
  // int32 id = 1;
  void clear_id();
  ::PROTOBUF_NAMESPACE_ID::int32 id() const;
  void set_id(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_id() const;
  void _internal_set_id(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // @@protoc_insertion_point(class_scope:smart3dmap.v1.DeleteProjectRequest)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::int32 id_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_data_5fengine_2fdata_5fengine_2eproto;
};
// -------------------------------------------------------------------

class LIBS3DMGRPC_API DeleteProjectResponse PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:smart3dmap.v1.DeleteProjectResponse) */ {
 public:
  inline DeleteProjectResponse() : DeleteProjectResponse(nullptr) {}
  virtual ~DeleteProjectResponse();
  explicit constexpr DeleteProjectResponse(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  DeleteProjectResponse(const DeleteProjectResponse& from);
  DeleteProjectResponse(DeleteProjectResponse&& from) noexcept
    : DeleteProjectResponse() {
    *this = ::std::move(from);
  }

  inline DeleteProjectResponse& operator=(const DeleteProjectResponse& from) {
    CopyFrom(from);
    return *this;
  }
  inline DeleteProjectResponse& operator=(DeleteProjectResponse&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const DeleteProjectResponse& default_instance() {
    return *internal_default_instance();
  }
  static inline const DeleteProjectResponse* internal_default_instance() {
    return reinterpret_cast<const DeleteProjectResponse*>(
               &_DeleteProjectResponse_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    33;

  friend void swap(DeleteProjectResponse& a, DeleteProjectResponse& b) {
    a.Swap(&b);
  }
  inline void Swap(DeleteProjectResponse* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(DeleteProjectResponse* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline DeleteProjectResponse* New() const final {
    return CreateMaybeMessage<DeleteProjectResponse>(nullptr);
  }

  DeleteProjectResponse* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<DeleteProjectResponse>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const DeleteProjectResponse& from);
  void MergeFrom(const DeleteProjectResponse& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(DeleteProjectResponse* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "smart3dmap.v1.DeleteProjectResponse";
  }
  protected:
  explicit DeleteProjectResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    return ::descriptor_table_data_5fengine_2fdata_5fengine_2eproto_metadata_getter(kIndexInFileMessages);
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kErrorFieldNumber = 2,
    kStatusFieldNumber = 1,
  };
  // string error = 2;
  void clear_error();
  const std::string& error() const;
  void set_error(const std::string& value);
  void set_error(std::string&& value);
  void set_error(const char* value);
  void set_error(const char* value, size_t size);
  std::string* mutable_error();
  std::string* release_error();
  void set_allocated_error(std::string* error);
  private:
  const std::string& _internal_error() const;
  void _internal_set_error(const std::string& value);
  std::string* _internal_mutable_error();
  public:

  // bool status = 1;
  void clear_status();
  bool status() const;
  void set_status(bool value);
  private:
  bool _internal_status() const;
  void _internal_set_status(bool value);
  public:

  // @@protoc_insertion_point(class_scope:smart3dmap.v1.DeleteProjectResponse)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr error_;
  bool status_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_data_5fengine_2fdata_5fengine_2eproto;
};
// -------------------------------------------------------------------

class LIBS3DMGRPC_API BasicProject PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:smart3dmap.v1.BasicProject) */ {
 public:
  inline BasicProject() : BasicProject(nullptr) {}
  virtual ~BasicProject();
  explicit constexpr BasicProject(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  BasicProject(const BasicProject& from);
  BasicProject(BasicProject&& from) noexcept
    : BasicProject() {
    *this = ::std::move(from);
  }

  inline BasicProject& operator=(const BasicProject& from) {
    CopyFrom(from);
    return *this;
  }
  inline BasicProject& operator=(BasicProject&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const BasicProject& default_instance() {
    return *internal_default_instance();
  }
  static inline const BasicProject* internal_default_instance() {
    return reinterpret_cast<const BasicProject*>(
               &_BasicProject_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    34;

  friend void swap(BasicProject& a, BasicProject& b) {
    a.Swap(&b);
  }
  inline void Swap(BasicProject* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(BasicProject* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline BasicProject* New() const final {
    return CreateMaybeMessage<BasicProject>(nullptr);
  }

  BasicProject* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<BasicProject>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const BasicProject& from);
  void MergeFrom(const BasicProject& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(BasicProject* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "smart3dmap.v1.BasicProject";
  }
  protected:
  explicit BasicProject(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    return ::descriptor_table_data_5fengine_2fdata_5fengine_2eproto_metadata_getter(kIndexInFileMessages);
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kNameFieldNumber = 2,
    kAuthorsFieldNumber = 3,
    kDescriptionFieldNumber = 4,
    kCrsFieldNumber = 5,
    kUnitFieldNumber = 6,
    kCreatedAtFieldNumber = 14,
    kUpdatedAtFieldNumber = 15,
    kMinXFieldNumber = 7,
    kIdFieldNumber = 1,
    kIsPublishedFieldNumber = 13,
    kMinYFieldNumber = 8,
    kMinZFieldNumber = 9,
    kMaxXFieldNumber = 10,
    kMaxYFieldNumber = 11,
    kMaxZFieldNumber = 12,
  };
  // string name = 2;
  void clear_name();
  const std::string& name() const;
  void set_name(const std::string& value);
  void set_name(std::string&& value);
  void set_name(const char* value);
  void set_name(const char* value, size_t size);
  std::string* mutable_name();
  std::string* release_name();
  void set_allocated_name(std::string* name);
  private:
  const std::string& _internal_name() const;
  void _internal_set_name(const std::string& value);
  std::string* _internal_mutable_name();
  public:

  // string authors = 3;
  void clear_authors();
  const std::string& authors() const;
  void set_authors(const std::string& value);
  void set_authors(std::string&& value);
  void set_authors(const char* value);
  void set_authors(const char* value, size_t size);
  std::string* mutable_authors();
  std::string* release_authors();
  void set_allocated_authors(std::string* authors);
  private:
  const std::string& _internal_authors() const;
  void _internal_set_authors(const std::string& value);
  std::string* _internal_mutable_authors();
  public:

  // string description = 4;
  void clear_description();
  const std::string& description() const;
  void set_description(const std::string& value);
  void set_description(std::string&& value);
  void set_description(const char* value);
  void set_description(const char* value, size_t size);
  std::string* mutable_description();
  std::string* release_description();
  void set_allocated_description(std::string* description);
  private:
  const std::string& _internal_description() const;
  void _internal_set_description(const std::string& value);
  std::string* _internal_mutable_description();
  public:

  // string crs = 5;
  void clear_crs();
  const std::string& crs() const;
  void set_crs(const std::string& value);
  void set_crs(std::string&& value);
  void set_crs(const char* value);
  void set_crs(const char* value, size_t size);
  std::string* mutable_crs();
  std::string* release_crs();
  void set_allocated_crs(std::string* crs);
  private:
  const std::string& _internal_crs() const;
  void _internal_set_crs(const std::string& value);
  std::string* _internal_mutable_crs();
  public:

  // string unit = 6;
  void clear_unit();
  const std::string& unit() const;
  void set_unit(const std::string& value);
  void set_unit(std::string&& value);
  void set_unit(const char* value);
  void set_unit(const char* value, size_t size);
  std::string* mutable_unit();
  std::string* release_unit();
  void set_allocated_unit(std::string* unit);
  private:
  const std::string& _internal_unit() const;
  void _internal_set_unit(const std::string& value);
  std::string* _internal_mutable_unit();
  public:

  // .google.protobuf.Timestamp created_at = 14;
  bool has_created_at() const;
  private:
  bool _internal_has_created_at() const;
  public:
  void clear_created_at();
  const PROTOBUF_NAMESPACE_ID::Timestamp& created_at() const;
  PROTOBUF_NAMESPACE_ID::Timestamp* release_created_at();
  PROTOBUF_NAMESPACE_ID::Timestamp* mutable_created_at();
  void set_allocated_created_at(PROTOBUF_NAMESPACE_ID::Timestamp* created_at);
  private:
  const PROTOBUF_NAMESPACE_ID::Timestamp& _internal_created_at() const;
  PROTOBUF_NAMESPACE_ID::Timestamp* _internal_mutable_created_at();
  public:
  void unsafe_arena_set_allocated_created_at(
      PROTOBUF_NAMESPACE_ID::Timestamp* created_at);
  PROTOBUF_NAMESPACE_ID::Timestamp* unsafe_arena_release_created_at();

  // .google.protobuf.Timestamp updated_at = 15;
  bool has_updated_at() const;
  private:
  bool _internal_has_updated_at() const;
  public:
  void clear_updated_at();
  const PROTOBUF_NAMESPACE_ID::Timestamp& updated_at() const;
  PROTOBUF_NAMESPACE_ID::Timestamp* release_updated_at();
  PROTOBUF_NAMESPACE_ID::Timestamp* mutable_updated_at();
  void set_allocated_updated_at(PROTOBUF_NAMESPACE_ID::Timestamp* updated_at);
  private:
  const PROTOBUF_NAMESPACE_ID::Timestamp& _internal_updated_at() const;
  PROTOBUF_NAMESPACE_ID::Timestamp* _internal_mutable_updated_at();
  public:
  void unsafe_arena_set_allocated_updated_at(
      PROTOBUF_NAMESPACE_ID::Timestamp* updated_at);
  PROTOBUF_NAMESPACE_ID::Timestamp* unsafe_arena_release_updated_at();

  // double min_x = 7;
  void clear_min_x();
  double min_x() const;
  void set_min_x(double value);
  private:
  double _internal_min_x() const;
  void _internal_set_min_x(double value);
  public:

  // int32 id = 1;
  void clear_id();
  ::PROTOBUF_NAMESPACE_ID::int32 id() const;
  void set_id(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_id() const;
  void _internal_set_id(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // bool is_published = 13;
  void clear_is_published();
  bool is_published() const;
  void set_is_published(bool value);
  private:
  bool _internal_is_published() const;
  void _internal_set_is_published(bool value);
  public:

  // double min_y = 8;
  void clear_min_y();
  double min_y() const;
  void set_min_y(double value);
  private:
  double _internal_min_y() const;
  void _internal_set_min_y(double value);
  public:

  // double min_z = 9;
  void clear_min_z();
  double min_z() const;
  void set_min_z(double value);
  private:
  double _internal_min_z() const;
  void _internal_set_min_z(double value);
  public:

  // double max_x = 10;
  void clear_max_x();
  double max_x() const;
  void set_max_x(double value);
  private:
  double _internal_max_x() const;
  void _internal_set_max_x(double value);
  public:

  // double max_y = 11;
  void clear_max_y();
  double max_y() const;
  void set_max_y(double value);
  private:
  double _internal_max_y() const;
  void _internal_set_max_y(double value);
  public:

  // double max_z = 12;
  void clear_max_z();
  double max_z() const;
  void set_max_z(double value);
  private:
  double _internal_max_z() const;
  void _internal_set_max_z(double value);
  public:

  // @@protoc_insertion_point(class_scope:smart3dmap.v1.BasicProject)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr name_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr authors_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr description_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr crs_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr unit_;
  PROTOBUF_NAMESPACE_ID::Timestamp* created_at_;
  PROTOBUF_NAMESPACE_ID::Timestamp* updated_at_;
  double min_x_;
  ::PROTOBUF_NAMESPACE_ID::int32 id_;
  bool is_published_;
  double min_y_;
  double min_z_;
  double max_x_;
  double max_y_;
  double max_z_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_data_5fengine_2fdata_5fengine_2eproto;
};
// -------------------------------------------------------------------

class LIBS3DMGRPC_API Project PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:smart3dmap.v1.Project) */ {
 public:
  inline Project() : Project(nullptr) {}
  virtual ~Project();
  explicit constexpr Project(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  Project(const Project& from);
  Project(Project&& from) noexcept
    : Project() {
    *this = ::std::move(from);
  }

  inline Project& operator=(const Project& from) {
    CopyFrom(from);
    return *this;
  }
  inline Project& operator=(Project&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const Project& default_instance() {
    return *internal_default_instance();
  }
  static inline const Project* internal_default_instance() {
    return reinterpret_cast<const Project*>(
               &_Project_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    35;

  friend void swap(Project& a, Project& b) {
    a.Swap(&b);
  }
  inline void Swap(Project* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(Project* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline Project* New() const final {
    return CreateMaybeMessage<Project>(nullptr);
  }

  Project* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<Project>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const Project& from);
  void MergeFrom(const Project& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Project* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "smart3dmap.v1.Project";
  }
  protected:
  explicit Project(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    return ::descriptor_table_data_5fengine_2fdata_5fengine_2eproto_metadata_getter(kIndexInFileMessages);
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kNameFieldNumber = 2,
    kAuthorsFieldNumber = 3,
    kDescriptionFieldNumber = 4,
    kCrsFieldNumber = 5,
    kUnitFieldNumber = 6,
    kDbInfoFieldNumber = 15,
    kDataTree2DFieldNumber = 16,
    kDataTree3DFieldNumber = 17,
    kDataTreeDbFieldNumber = 18,
    kCreatedAtFieldNumber = 19,
    kUpdatedAtFieldNumber = 20,
    kMinXFieldNumber = 7,
    kIdFieldNumber = 1,
    kIsPublishedFieldNumber = 13,
    kMinYFieldNumber = 8,
    kMinZFieldNumber = 9,
    kMaxXFieldNumber = 10,
    kMaxYFieldNumber = 11,
    kMaxZFieldNumber = 12,
    kStdStratVersionFieldNumber = 14,
  };
  // string name = 2;
  void clear_name();
  const std::string& name() const;
  void set_name(const std::string& value);
  void set_name(std::string&& value);
  void set_name(const char* value);
  void set_name(const char* value, size_t size);
  std::string* mutable_name();
  std::string* release_name();
  void set_allocated_name(std::string* name);
  private:
  const std::string& _internal_name() const;
  void _internal_set_name(const std::string& value);
  std::string* _internal_mutable_name();
  public:

  // string authors = 3;
  void clear_authors();
  const std::string& authors() const;
  void set_authors(const std::string& value);
  void set_authors(std::string&& value);
  void set_authors(const char* value);
  void set_authors(const char* value, size_t size);
  std::string* mutable_authors();
  std::string* release_authors();
  void set_allocated_authors(std::string* authors);
  private:
  const std::string& _internal_authors() const;
  void _internal_set_authors(const std::string& value);
  std::string* _internal_mutable_authors();
  public:

  // string description = 4;
  void clear_description();
  const std::string& description() const;
  void set_description(const std::string& value);
  void set_description(std::string&& value);
  void set_description(const char* value);
  void set_description(const char* value, size_t size);
  std::string* mutable_description();
  std::string* release_description();
  void set_allocated_description(std::string* description);
  private:
  const std::string& _internal_description() const;
  void _internal_set_description(const std::string& value);
  std::string* _internal_mutable_description();
  public:

  // string crs = 5;
  void clear_crs();
  const std::string& crs() const;
  void set_crs(const std::string& value);
  void set_crs(std::string&& value);
  void set_crs(const char* value);
  void set_crs(const char* value, size_t size);
  std::string* mutable_crs();
  std::string* release_crs();
  void set_allocated_crs(std::string* crs);
  private:
  const std::string& _internal_crs() const;
  void _internal_set_crs(const std::string& value);
  std::string* _internal_mutable_crs();
  public:

  // string unit = 6;
  void clear_unit();
  const std::string& unit() const;
  void set_unit(const std::string& value);
  void set_unit(std::string&& value);
  void set_unit(const char* value);
  void set_unit(const char* value, size_t size);
  std::string* mutable_unit();
  std::string* release_unit();
  void set_allocated_unit(std::string* unit);
  private:
  const std::string& _internal_unit() const;
  void _internal_set_unit(const std::string& value);
  std::string* _internal_mutable_unit();
  public:

  // string db_info = 15;
  void clear_db_info();
  const std::string& db_info() const;
  void set_db_info(const std::string& value);
  void set_db_info(std::string&& value);
  void set_db_info(const char* value);
  void set_db_info(const char* value, size_t size);
  std::string* mutable_db_info();
  std::string* release_db_info();
  void set_allocated_db_info(std::string* db_info);
  private:
  const std::string& _internal_db_info() const;
  void _internal_set_db_info(const std::string& value);
  std::string* _internal_mutable_db_info();
  public:

  // string data_tree_2d = 16;
  void clear_data_tree_2d();
  const std::string& data_tree_2d() const;
  void set_data_tree_2d(const std::string& value);
  void set_data_tree_2d(std::string&& value);
  void set_data_tree_2d(const char* value);
  void set_data_tree_2d(const char* value, size_t size);
  std::string* mutable_data_tree_2d();
  std::string* release_data_tree_2d();
  void set_allocated_data_tree_2d(std::string* data_tree_2d);
  private:
  const std::string& _internal_data_tree_2d() const;
  void _internal_set_data_tree_2d(const std::string& value);
  std::string* _internal_mutable_data_tree_2d();
  public:

  // string data_tree_3d = 17;
  void clear_data_tree_3d();
  const std::string& data_tree_3d() const;
  void set_data_tree_3d(const std::string& value);
  void set_data_tree_3d(std::string&& value);
  void set_data_tree_3d(const char* value);
  void set_data_tree_3d(const char* value, size_t size);
  std::string* mutable_data_tree_3d();
  std::string* release_data_tree_3d();
  void set_allocated_data_tree_3d(std::string* data_tree_3d);
  private:
  const std::string& _internal_data_tree_3d() const;
  void _internal_set_data_tree_3d(const std::string& value);
  std::string* _internal_mutable_data_tree_3d();
  public:

  // string data_tree_db = 18;
  void clear_data_tree_db();
  const std::string& data_tree_db() const;
  void set_data_tree_db(const std::string& value);
  void set_data_tree_db(std::string&& value);
  void set_data_tree_db(const char* value);
  void set_data_tree_db(const char* value, size_t size);
  std::string* mutable_data_tree_db();
  std::string* release_data_tree_db();
  void set_allocated_data_tree_db(std::string* data_tree_db);
  private:
  const std::string& _internal_data_tree_db() const;
  void _internal_set_data_tree_db(const std::string& value);
  std::string* _internal_mutable_data_tree_db();
  public:

  // .google.protobuf.Timestamp created_at = 19;
  bool has_created_at() const;
  private:
  bool _internal_has_created_at() const;
  public:
  void clear_created_at();
  const PROTOBUF_NAMESPACE_ID::Timestamp& created_at() const;
  PROTOBUF_NAMESPACE_ID::Timestamp* release_created_at();
  PROTOBUF_NAMESPACE_ID::Timestamp* mutable_created_at();
  void set_allocated_created_at(PROTOBUF_NAMESPACE_ID::Timestamp* created_at);
  private:
  const PROTOBUF_NAMESPACE_ID::Timestamp& _internal_created_at() const;
  PROTOBUF_NAMESPACE_ID::Timestamp* _internal_mutable_created_at();
  public:
  void unsafe_arena_set_allocated_created_at(
      PROTOBUF_NAMESPACE_ID::Timestamp* created_at);
  PROTOBUF_NAMESPACE_ID::Timestamp* unsafe_arena_release_created_at();

  // .google.protobuf.Timestamp updated_at = 20;
  bool has_updated_at() const;
  private:
  bool _internal_has_updated_at() const;
  public:
  void clear_updated_at();
  const PROTOBUF_NAMESPACE_ID::Timestamp& updated_at() const;
  PROTOBUF_NAMESPACE_ID::Timestamp* release_updated_at();
  PROTOBUF_NAMESPACE_ID::Timestamp* mutable_updated_at();
  void set_allocated_updated_at(PROTOBUF_NAMESPACE_ID::Timestamp* updated_at);
  private:
  const PROTOBUF_NAMESPACE_ID::Timestamp& _internal_updated_at() const;
  PROTOBUF_NAMESPACE_ID::Timestamp* _internal_mutable_updated_at();
  public:
  void unsafe_arena_set_allocated_updated_at(
      PROTOBUF_NAMESPACE_ID::Timestamp* updated_at);
  PROTOBUF_NAMESPACE_ID::Timestamp* unsafe_arena_release_updated_at();

  // double min_x = 7;
  void clear_min_x();
  double min_x() const;
  void set_min_x(double value);
  private:
  double _internal_min_x() const;
  void _internal_set_min_x(double value);
  public:

  // int32 id = 1;
  void clear_id();
  ::PROTOBUF_NAMESPACE_ID::int32 id() const;
  void set_id(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_id() const;
  void _internal_set_id(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // bool is_published = 13;
  void clear_is_published();
  bool is_published() const;
  void set_is_published(bool value);
  private:
  bool _internal_is_published() const;
  void _internal_set_is_published(bool value);
  public:

  // double min_y = 8;
  void clear_min_y();
  double min_y() const;
  void set_min_y(double value);
  private:
  double _internal_min_y() const;
  void _internal_set_min_y(double value);
  public:

  // double min_z = 9;
  void clear_min_z();
  double min_z() const;
  void set_min_z(double value);
  private:
  double _internal_min_z() const;
  void _internal_set_min_z(double value);
  public:

  // double max_x = 10;
  void clear_max_x();
  double max_x() const;
  void set_max_x(double value);
  private:
  double _internal_max_x() const;
  void _internal_set_max_x(double value);
  public:

  // double max_y = 11;
  void clear_max_y();
  double max_y() const;
  void set_max_y(double value);
  private:
  double _internal_max_y() const;
  void _internal_set_max_y(double value);
  public:

  // double max_z = 12;
  void clear_max_z();
  double max_z() const;
  void set_max_z(double value);
  private:
  double _internal_max_z() const;
  void _internal_set_max_z(double value);
  public:

  // int32 std_strat_version = 14;
  void clear_std_strat_version();
  ::PROTOBUF_NAMESPACE_ID::int32 std_strat_version() const;
  void set_std_strat_version(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_std_strat_version() const;
  void _internal_set_std_strat_version(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // @@protoc_insertion_point(class_scope:smart3dmap.v1.Project)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr name_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr authors_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr description_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr crs_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr unit_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr db_info_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr data_tree_2d_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr data_tree_3d_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr data_tree_db_;
  PROTOBUF_NAMESPACE_ID::Timestamp* created_at_;
  PROTOBUF_NAMESPACE_ID::Timestamp* updated_at_;
  double min_x_;
  ::PROTOBUF_NAMESPACE_ID::int32 id_;
  bool is_published_;
  double min_y_;
  double min_z_;
  double max_x_;
  double max_y_;
  double max_z_;
  ::PROTOBUF_NAMESPACE_ID::int32 std_strat_version_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_data_5fengine_2fdata_5fengine_2eproto;
};
// -------------------------------------------------------------------

class LIBS3DMGRPC_API DicTableCategory PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:smart3dmap.v1.DicTableCategory) */ {
 public:
  inline DicTableCategory() : DicTableCategory(nullptr) {}
  virtual ~DicTableCategory();
  explicit constexpr DicTableCategory(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  DicTableCategory(const DicTableCategory& from);
  DicTableCategory(DicTableCategory&& from) noexcept
    : DicTableCategory() {
    *this = ::std::move(from);
  }

  inline DicTableCategory& operator=(const DicTableCategory& from) {
    CopyFrom(from);
    return *this;
  }
  inline DicTableCategory& operator=(DicTableCategory&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const DicTableCategory& default_instance() {
    return *internal_default_instance();
  }
  static inline const DicTableCategory* internal_default_instance() {
    return reinterpret_cast<const DicTableCategory*>(
               &_DicTableCategory_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    36;

  friend void swap(DicTableCategory& a, DicTableCategory& b) {
    a.Swap(&b);
  }
  inline void Swap(DicTableCategory* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(DicTableCategory* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline DicTableCategory* New() const final {
    return CreateMaybeMessage<DicTableCategory>(nullptr);
  }

  DicTableCategory* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<DicTableCategory>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const DicTableCategory& from);
  void MergeFrom(const DicTableCategory& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(DicTableCategory* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "smart3dmap.v1.DicTableCategory";
  }
  protected:
  explicit DicTableCategory(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    return ::descriptor_table_data_5fengine_2fdata_5fengine_2eproto_metadata_getter(kIndexInFileMessages);
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kNameFieldNumber = 2,
    kAliasFieldNumber = 3,
    kIdFieldNumber = 1,
  };
  // string name = 2;
  void clear_name();
  const std::string& name() const;
  void set_name(const std::string& value);
  void set_name(std::string&& value);
  void set_name(const char* value);
  void set_name(const char* value, size_t size);
  std::string* mutable_name();
  std::string* release_name();
  void set_allocated_name(std::string* name);
  private:
  const std::string& _internal_name() const;
  void _internal_set_name(const std::string& value);
  std::string* _internal_mutable_name();
  public:

  // string alias = 3;
  void clear_alias();
  const std::string& alias() const;
  void set_alias(const std::string& value);
  void set_alias(std::string&& value);
  void set_alias(const char* value);
  void set_alias(const char* value, size_t size);
  std::string* mutable_alias();
  std::string* release_alias();
  void set_allocated_alias(std::string* alias);
  private:
  const std::string& _internal_alias() const;
  void _internal_set_alias(const std::string& value);
  std::string* _internal_mutable_alias();
  public:

  // int32 id = 1;
  void clear_id();
  ::PROTOBUF_NAMESPACE_ID::int32 id() const;
  void set_id(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_id() const;
  void _internal_set_id(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // @@protoc_insertion_point(class_scope:smart3dmap.v1.DicTableCategory)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr name_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr alias_;
  ::PROTOBUF_NAMESPACE_ID::int32 id_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_data_5fengine_2fdata_5fengine_2eproto;
};
// -------------------------------------------------------------------

class LIBS3DMGRPC_API DicTable PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:smart3dmap.v1.DicTable) */ {
 public:
  inline DicTable() : DicTable(nullptr) {}
  virtual ~DicTable();
  explicit constexpr DicTable(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  DicTable(const DicTable& from);
  DicTable(DicTable&& from) noexcept
    : DicTable() {
    *this = ::std::move(from);
  }

  inline DicTable& operator=(const DicTable& from) {
    CopyFrom(from);
    return *this;
  }
  inline DicTable& operator=(DicTable&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const DicTable& default_instance() {
    return *internal_default_instance();
  }
  static inline const DicTable* internal_default_instance() {
    return reinterpret_cast<const DicTable*>(
               &_DicTable_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    37;

  friend void swap(DicTable& a, DicTable& b) {
    a.Swap(&b);
  }
  inline void Swap(DicTable* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(DicTable* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline DicTable* New() const final {
    return CreateMaybeMessage<DicTable>(nullptr);
  }

  DicTable* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<DicTable>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const DicTable& from);
  void MergeFrom(const DicTable& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(DicTable* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "smart3dmap.v1.DicTable";
  }
  protected:
  explicit DicTable(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    return ::descriptor_table_data_5fengine_2fdata_5fengine_2eproto_metadata_getter(kIndexInFileMessages);
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kNameFieldNumber = 2,
    kAliasFieldNumber = 3,
    kUserTableNameFieldNumber = 6,
    kIdFieldNumber = 1,
    kIsRequiredFieldNumber = 4,
    kCategoryIdFieldNumber = 5,
  };
  // string name = 2;
  void clear_name();
  const std::string& name() const;
  void set_name(const std::string& value);
  void set_name(std::string&& value);
  void set_name(const char* value);
  void set_name(const char* value, size_t size);
  std::string* mutable_name();
  std::string* release_name();
  void set_allocated_name(std::string* name);
  private:
  const std::string& _internal_name() const;
  void _internal_set_name(const std::string& value);
  std::string* _internal_mutable_name();
  public:

  // string alias = 3;
  void clear_alias();
  const std::string& alias() const;
  void set_alias(const std::string& value);
  void set_alias(std::string&& value);
  void set_alias(const char* value);
  void set_alias(const char* value, size_t size);
  std::string* mutable_alias();
  std::string* release_alias();
  void set_allocated_alias(std::string* alias);
  private:
  const std::string& _internal_alias() const;
  void _internal_set_alias(const std::string& value);
  std::string* _internal_mutable_alias();
  public:

  // string user_table_name = 6;
  void clear_user_table_name();
  const std::string& user_table_name() const;
  void set_user_table_name(const std::string& value);
  void set_user_table_name(std::string&& value);
  void set_user_table_name(const char* value);
  void set_user_table_name(const char* value, size_t size);
  std::string* mutable_user_table_name();
  std::string* release_user_table_name();
  void set_allocated_user_table_name(std::string* user_table_name);
  private:
  const std::string& _internal_user_table_name() const;
  void _internal_set_user_table_name(const std::string& value);
  std::string* _internal_mutable_user_table_name();
  public:

  // int32 id = 1;
  void clear_id();
  ::PROTOBUF_NAMESPACE_ID::int32 id() const;
  void set_id(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_id() const;
  void _internal_set_id(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // bool is_required = 4;
  void clear_is_required();
  bool is_required() const;
  void set_is_required(bool value);
  private:
  bool _internal_is_required() const;
  void _internal_set_is_required(bool value);
  public:

  // int32 category_id = 5;
  void clear_category_id();
  ::PROTOBUF_NAMESPACE_ID::int32 category_id() const;
  void set_category_id(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_category_id() const;
  void _internal_set_category_id(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // @@protoc_insertion_point(class_scope:smart3dmap.v1.DicTable)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr name_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr alias_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr user_table_name_;
  ::PROTOBUF_NAMESPACE_ID::int32 id_;
  bool is_required_;
  ::PROTOBUF_NAMESPACE_ID::int32 category_id_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_data_5fengine_2fdata_5fengine_2eproto;
};
// -------------------------------------------------------------------

class LIBS3DMGRPC_API DicTableField PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:smart3dmap.v1.DicTableField) */ {
 public:
  inline DicTableField() : DicTableField(nullptr) {}
  virtual ~DicTableField();
  explicit constexpr DicTableField(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  DicTableField(const DicTableField& from);
  DicTableField(DicTableField&& from) noexcept
    : DicTableField() {
    *this = ::std::move(from);
  }

  inline DicTableField& operator=(const DicTableField& from) {
    CopyFrom(from);
    return *this;
  }
  inline DicTableField& operator=(DicTableField&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const DicTableField& default_instance() {
    return *internal_default_instance();
  }
  static inline const DicTableField* internal_default_instance() {
    return reinterpret_cast<const DicTableField*>(
               &_DicTableField_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    38;

  friend void swap(DicTableField& a, DicTableField& b) {
    a.Swap(&b);
  }
  inline void Swap(DicTableField* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(DicTableField* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline DicTableField* New() const final {
    return CreateMaybeMessage<DicTableField>(nullptr);
  }

  DicTableField* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<DicTableField>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const DicTableField& from);
  void MergeFrom(const DicTableField& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(DicTableField* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "smart3dmap.v1.DicTableField";
  }
  protected:
  explicit DicTableField(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    return ::descriptor_table_data_5fengine_2fdata_5fengine_2eproto_metadata_getter(kIndexInFileMessages);
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kNameFieldNumber = 3,
    kAliasFieldNumber = 4,
    kDataTypeFieldNumber = 5,
    kUserFieldNameFieldNumber = 6,
    kIdFieldNumber = 1,
    kTableIdFieldNumber = 2,
    kIsRequiredFieldNumber = 7,
  };
  // string name = 3;
  void clear_name();
  const std::string& name() const;
  void set_name(const std::string& value);
  void set_name(std::string&& value);
  void set_name(const char* value);
  void set_name(const char* value, size_t size);
  std::string* mutable_name();
  std::string* release_name();
  void set_allocated_name(std::string* name);
  private:
  const std::string& _internal_name() const;
  void _internal_set_name(const std::string& value);
  std::string* _internal_mutable_name();
  public:

  // string alias = 4;
  void clear_alias();
  const std::string& alias() const;
  void set_alias(const std::string& value);
  void set_alias(std::string&& value);
  void set_alias(const char* value);
  void set_alias(const char* value, size_t size);
  std::string* mutable_alias();
  std::string* release_alias();
  void set_allocated_alias(std::string* alias);
  private:
  const std::string& _internal_alias() const;
  void _internal_set_alias(const std::string& value);
  std::string* _internal_mutable_alias();
  public:

  // string data_type = 5;
  void clear_data_type();
  const std::string& data_type() const;
  void set_data_type(const std::string& value);
  void set_data_type(std::string&& value);
  void set_data_type(const char* value);
  void set_data_type(const char* value, size_t size);
  std::string* mutable_data_type();
  std::string* release_data_type();
  void set_allocated_data_type(std::string* data_type);
  private:
  const std::string& _internal_data_type() const;
  void _internal_set_data_type(const std::string& value);
  std::string* _internal_mutable_data_type();
  public:

  // string user_field_name = 6;
  void clear_user_field_name();
  const std::string& user_field_name() const;
  void set_user_field_name(const std::string& value);
  void set_user_field_name(std::string&& value);
  void set_user_field_name(const char* value);
  void set_user_field_name(const char* value, size_t size);
  std::string* mutable_user_field_name();
  std::string* release_user_field_name();
  void set_allocated_user_field_name(std::string* user_field_name);
  private:
  const std::string& _internal_user_field_name() const;
  void _internal_set_user_field_name(const std::string& value);
  std::string* _internal_mutable_user_field_name();
  public:

  // int32 id = 1;
  void clear_id();
  ::PROTOBUF_NAMESPACE_ID::int32 id() const;
  void set_id(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_id() const;
  void _internal_set_id(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // int32 table_id = 2;
  void clear_table_id();
  ::PROTOBUF_NAMESPACE_ID::int32 table_id() const;
  void set_table_id(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_table_id() const;
  void _internal_set_table_id(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // bool is_required = 7;
  void clear_is_required();
  bool is_required() const;
  void set_is_required(bool value);
  private:
  bool _internal_is_required() const;
  void _internal_set_is_required(bool value);
  public:

  // @@protoc_insertion_point(class_scope:smart3dmap.v1.DicTableField)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr name_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr alias_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr data_type_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr user_field_name_;
  ::PROTOBUF_NAMESPACE_ID::int32 id_;
  ::PROTOBUF_NAMESPACE_ID::int32 table_id_;
  bool is_required_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_data_5fengine_2fdata_5fengine_2eproto;
};
// -------------------------------------------------------------------

class LIBS3DMGRPC_API ListDicTableCategoriesRequest PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:smart3dmap.v1.ListDicTableCategoriesRequest) */ {
 public:
  inline ListDicTableCategoriesRequest() : ListDicTableCategoriesRequest(nullptr) {}
  virtual ~ListDicTableCategoriesRequest();
  explicit constexpr ListDicTableCategoriesRequest(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  ListDicTableCategoriesRequest(const ListDicTableCategoriesRequest& from);
  ListDicTableCategoriesRequest(ListDicTableCategoriesRequest&& from) noexcept
    : ListDicTableCategoriesRequest() {
    *this = ::std::move(from);
  }

  inline ListDicTableCategoriesRequest& operator=(const ListDicTableCategoriesRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline ListDicTableCategoriesRequest& operator=(ListDicTableCategoriesRequest&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const ListDicTableCategoriesRequest& default_instance() {
    return *internal_default_instance();
  }
  static inline const ListDicTableCategoriesRequest* internal_default_instance() {
    return reinterpret_cast<const ListDicTableCategoriesRequest*>(
               &_ListDicTableCategoriesRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    39;

  friend void swap(ListDicTableCategoriesRequest& a, ListDicTableCategoriesRequest& b) {
    a.Swap(&b);
  }
  inline void Swap(ListDicTableCategoriesRequest* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(ListDicTableCategoriesRequest* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline ListDicTableCategoriesRequest* New() const final {
    return CreateMaybeMessage<ListDicTableCategoriesRequest>(nullptr);
  }

  ListDicTableCategoriesRequest* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<ListDicTableCategoriesRequest>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const ListDicTableCategoriesRequest& from);
  void MergeFrom(const ListDicTableCategoriesRequest& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(ListDicTableCategoriesRequest* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "smart3dmap.v1.ListDicTableCategoriesRequest";
  }
  protected:
  explicit ListDicTableCategoriesRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    return ::descriptor_table_data_5fengine_2fdata_5fengine_2eproto_metadata_getter(kIndexInFileMessages);
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kDbIdFieldNumber = 1,
  };
  // int32 db_id = 1;
  void clear_db_id();
  ::PROTOBUF_NAMESPACE_ID::int32 db_id() const;
  void set_db_id(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_db_id() const;
  void _internal_set_db_id(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // @@protoc_insertion_point(class_scope:smart3dmap.v1.ListDicTableCategoriesRequest)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::int32 db_id_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_data_5fengine_2fdata_5fengine_2eproto;
};
// -------------------------------------------------------------------

class LIBS3DMGRPC_API ListDicTableCategoriesResponse PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:smart3dmap.v1.ListDicTableCategoriesResponse) */ {
 public:
  inline ListDicTableCategoriesResponse() : ListDicTableCategoriesResponse(nullptr) {}
  virtual ~ListDicTableCategoriesResponse();
  explicit constexpr ListDicTableCategoriesResponse(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  ListDicTableCategoriesResponse(const ListDicTableCategoriesResponse& from);
  ListDicTableCategoriesResponse(ListDicTableCategoriesResponse&& from) noexcept
    : ListDicTableCategoriesResponse() {
    *this = ::std::move(from);
  }

  inline ListDicTableCategoriesResponse& operator=(const ListDicTableCategoriesResponse& from) {
    CopyFrom(from);
    return *this;
  }
  inline ListDicTableCategoriesResponse& operator=(ListDicTableCategoriesResponse&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const ListDicTableCategoriesResponse& default_instance() {
    return *internal_default_instance();
  }
  static inline const ListDicTableCategoriesResponse* internal_default_instance() {
    return reinterpret_cast<const ListDicTableCategoriesResponse*>(
               &_ListDicTableCategoriesResponse_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    40;

  friend void swap(ListDicTableCategoriesResponse& a, ListDicTableCategoriesResponse& b) {
    a.Swap(&b);
  }
  inline void Swap(ListDicTableCategoriesResponse* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(ListDicTableCategoriesResponse* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline ListDicTableCategoriesResponse* New() const final {
    return CreateMaybeMessage<ListDicTableCategoriesResponse>(nullptr);
  }

  ListDicTableCategoriesResponse* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<ListDicTableCategoriesResponse>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const ListDicTableCategoriesResponse& from);
  void MergeFrom(const ListDicTableCategoriesResponse& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(ListDicTableCategoriesResponse* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "smart3dmap.v1.ListDicTableCategoriesResponse";
  }
  protected:
  explicit ListDicTableCategoriesResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    return ::descriptor_table_data_5fengine_2fdata_5fengine_2eproto_metadata_getter(kIndexInFileMessages);
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kCategoriesFieldNumber = 2,
    kDbIdFieldNumber = 1,
  };
  // repeated .smart3dmap.v1.DicTableCategory categories = 2;
  int categories_size() const;
  private:
  int _internal_categories_size() const;
  public:
  void clear_categories();
  ::smart3dmap::v1::DicTableCategory* mutable_categories(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::smart3dmap::v1::DicTableCategory >*
      mutable_categories();
  private:
  const ::smart3dmap::v1::DicTableCategory& _internal_categories(int index) const;
  ::smart3dmap::v1::DicTableCategory* _internal_add_categories();
  public:
  const ::smart3dmap::v1::DicTableCategory& categories(int index) const;
  ::smart3dmap::v1::DicTableCategory* add_categories();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::smart3dmap::v1::DicTableCategory >&
      categories() const;

  // int32 db_id = 1;
  void clear_db_id();
  ::PROTOBUF_NAMESPACE_ID::int32 db_id() const;
  void set_db_id(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_db_id() const;
  void _internal_set_db_id(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // @@protoc_insertion_point(class_scope:smart3dmap.v1.ListDicTableCategoriesResponse)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::smart3dmap::v1::DicTableCategory > categories_;
  ::PROTOBUF_NAMESPACE_ID::int32 db_id_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_data_5fengine_2fdata_5fengine_2eproto;
};
// -------------------------------------------------------------------

class LIBS3DMGRPC_API ListDicTablesRequest PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:smart3dmap.v1.ListDicTablesRequest) */ {
 public:
  inline ListDicTablesRequest() : ListDicTablesRequest(nullptr) {}
  virtual ~ListDicTablesRequest();
  explicit constexpr ListDicTablesRequest(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  ListDicTablesRequest(const ListDicTablesRequest& from);
  ListDicTablesRequest(ListDicTablesRequest&& from) noexcept
    : ListDicTablesRequest() {
    *this = ::std::move(from);
  }

  inline ListDicTablesRequest& operator=(const ListDicTablesRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline ListDicTablesRequest& operator=(ListDicTablesRequest&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const ListDicTablesRequest& default_instance() {
    return *internal_default_instance();
  }
  static inline const ListDicTablesRequest* internal_default_instance() {
    return reinterpret_cast<const ListDicTablesRequest*>(
               &_ListDicTablesRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    41;

  friend void swap(ListDicTablesRequest& a, ListDicTablesRequest& b) {
    a.Swap(&b);
  }
  inline void Swap(ListDicTablesRequest* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(ListDicTablesRequest* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline ListDicTablesRequest* New() const final {
    return CreateMaybeMessage<ListDicTablesRequest>(nullptr);
  }

  ListDicTablesRequest* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<ListDicTablesRequest>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const ListDicTablesRequest& from);
  void MergeFrom(const ListDicTablesRequest& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(ListDicTablesRequest* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "smart3dmap.v1.ListDicTablesRequest";
  }
  protected:
  explicit ListDicTablesRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    return ::descriptor_table_data_5fengine_2fdata_5fengine_2eproto_metadata_getter(kIndexInFileMessages);
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kDbIdFieldNumber = 1,
    kCategoryIdFieldNumber = 2,
  };
  // int32 db_id = 1;
  void clear_db_id();
  ::PROTOBUF_NAMESPACE_ID::int32 db_id() const;
  void set_db_id(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_db_id() const;
  void _internal_set_db_id(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // int32 category_id = 2;
  void clear_category_id();
  ::PROTOBUF_NAMESPACE_ID::int32 category_id() const;
  void set_category_id(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_category_id() const;
  void _internal_set_category_id(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // @@protoc_insertion_point(class_scope:smart3dmap.v1.ListDicTablesRequest)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::int32 db_id_;
  ::PROTOBUF_NAMESPACE_ID::int32 category_id_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_data_5fengine_2fdata_5fengine_2eproto;
};
// -------------------------------------------------------------------

class LIBS3DMGRPC_API ListDicTablesResponse PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:smart3dmap.v1.ListDicTablesResponse) */ {
 public:
  inline ListDicTablesResponse() : ListDicTablesResponse(nullptr) {}
  virtual ~ListDicTablesResponse();
  explicit constexpr ListDicTablesResponse(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  ListDicTablesResponse(const ListDicTablesResponse& from);
  ListDicTablesResponse(ListDicTablesResponse&& from) noexcept
    : ListDicTablesResponse() {
    *this = ::std::move(from);
  }

  inline ListDicTablesResponse& operator=(const ListDicTablesResponse& from) {
    CopyFrom(from);
    return *this;
  }
  inline ListDicTablesResponse& operator=(ListDicTablesResponse&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const ListDicTablesResponse& default_instance() {
    return *internal_default_instance();
  }
  static inline const ListDicTablesResponse* internal_default_instance() {
    return reinterpret_cast<const ListDicTablesResponse*>(
               &_ListDicTablesResponse_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    42;

  friend void swap(ListDicTablesResponse& a, ListDicTablesResponse& b) {
    a.Swap(&b);
  }
  inline void Swap(ListDicTablesResponse* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(ListDicTablesResponse* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline ListDicTablesResponse* New() const final {
    return CreateMaybeMessage<ListDicTablesResponse>(nullptr);
  }

  ListDicTablesResponse* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<ListDicTablesResponse>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const ListDicTablesResponse& from);
  void MergeFrom(const ListDicTablesResponse& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(ListDicTablesResponse* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "smart3dmap.v1.ListDicTablesResponse";
  }
  protected:
  explicit ListDicTablesResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    return ::descriptor_table_data_5fengine_2fdata_5fengine_2eproto_metadata_getter(kIndexInFileMessages);
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kTablesFieldNumber = 2,
    kDbIdFieldNumber = 1,
  };
  // repeated .smart3dmap.v1.DicTable tables = 2;
  int tables_size() const;
  private:
  int _internal_tables_size() const;
  public:
  void clear_tables();
  ::smart3dmap::v1::DicTable* mutable_tables(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::smart3dmap::v1::DicTable >*
      mutable_tables();
  private:
  const ::smart3dmap::v1::DicTable& _internal_tables(int index) const;
  ::smart3dmap::v1::DicTable* _internal_add_tables();
  public:
  const ::smart3dmap::v1::DicTable& tables(int index) const;
  ::smart3dmap::v1::DicTable* add_tables();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::smart3dmap::v1::DicTable >&
      tables() const;

  // int32 db_id = 1;
  void clear_db_id();
  ::PROTOBUF_NAMESPACE_ID::int32 db_id() const;
  void set_db_id(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_db_id() const;
  void _internal_set_db_id(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // @@protoc_insertion_point(class_scope:smart3dmap.v1.ListDicTablesResponse)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::smart3dmap::v1::DicTable > tables_;
  ::PROTOBUF_NAMESPACE_ID::int32 db_id_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_data_5fengine_2fdata_5fengine_2eproto;
};
// -------------------------------------------------------------------

class LIBS3DMGRPC_API ListDicTableFieldsRequest PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:smart3dmap.v1.ListDicTableFieldsRequest) */ {
 public:
  inline ListDicTableFieldsRequest() : ListDicTableFieldsRequest(nullptr) {}
  virtual ~ListDicTableFieldsRequest();
  explicit constexpr ListDicTableFieldsRequest(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  ListDicTableFieldsRequest(const ListDicTableFieldsRequest& from);
  ListDicTableFieldsRequest(ListDicTableFieldsRequest&& from) noexcept
    : ListDicTableFieldsRequest() {
    *this = ::std::move(from);
  }

  inline ListDicTableFieldsRequest& operator=(const ListDicTableFieldsRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline ListDicTableFieldsRequest& operator=(ListDicTableFieldsRequest&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const ListDicTableFieldsRequest& default_instance() {
    return *internal_default_instance();
  }
  static inline const ListDicTableFieldsRequest* internal_default_instance() {
    return reinterpret_cast<const ListDicTableFieldsRequest*>(
               &_ListDicTableFieldsRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    43;

  friend void swap(ListDicTableFieldsRequest& a, ListDicTableFieldsRequest& b) {
    a.Swap(&b);
  }
  inline void Swap(ListDicTableFieldsRequest* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(ListDicTableFieldsRequest* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline ListDicTableFieldsRequest* New() const final {
    return CreateMaybeMessage<ListDicTableFieldsRequest>(nullptr);
  }

  ListDicTableFieldsRequest* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<ListDicTableFieldsRequest>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const ListDicTableFieldsRequest& from);
  void MergeFrom(const ListDicTableFieldsRequest& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(ListDicTableFieldsRequest* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "smart3dmap.v1.ListDicTableFieldsRequest";
  }
  protected:
  explicit ListDicTableFieldsRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    return ::descriptor_table_data_5fengine_2fdata_5fengine_2eproto_metadata_getter(kIndexInFileMessages);
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kDbIdFieldNumber = 1,
    kTableIdFieldNumber = 2,
  };
  // int32 db_id = 1;
  void clear_db_id();
  ::PROTOBUF_NAMESPACE_ID::int32 db_id() const;
  void set_db_id(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_db_id() const;
  void _internal_set_db_id(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // int32 table_id = 2;
  void clear_table_id();
  ::PROTOBUF_NAMESPACE_ID::int32 table_id() const;
  void set_table_id(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_table_id() const;
  void _internal_set_table_id(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // @@protoc_insertion_point(class_scope:smart3dmap.v1.ListDicTableFieldsRequest)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::int32 db_id_;
  ::PROTOBUF_NAMESPACE_ID::int32 table_id_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_data_5fengine_2fdata_5fengine_2eproto;
};
// -------------------------------------------------------------------

class LIBS3DMGRPC_API ListDicTableFieldsResponse PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:smart3dmap.v1.ListDicTableFieldsResponse) */ {
 public:
  inline ListDicTableFieldsResponse() : ListDicTableFieldsResponse(nullptr) {}
  virtual ~ListDicTableFieldsResponse();
  explicit constexpr ListDicTableFieldsResponse(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  ListDicTableFieldsResponse(const ListDicTableFieldsResponse& from);
  ListDicTableFieldsResponse(ListDicTableFieldsResponse&& from) noexcept
    : ListDicTableFieldsResponse() {
    *this = ::std::move(from);
  }

  inline ListDicTableFieldsResponse& operator=(const ListDicTableFieldsResponse& from) {
    CopyFrom(from);
    return *this;
  }
  inline ListDicTableFieldsResponse& operator=(ListDicTableFieldsResponse&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const ListDicTableFieldsResponse& default_instance() {
    return *internal_default_instance();
  }
  static inline const ListDicTableFieldsResponse* internal_default_instance() {
    return reinterpret_cast<const ListDicTableFieldsResponse*>(
               &_ListDicTableFieldsResponse_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    44;

  friend void swap(ListDicTableFieldsResponse& a, ListDicTableFieldsResponse& b) {
    a.Swap(&b);
  }
  inline void Swap(ListDicTableFieldsResponse* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(ListDicTableFieldsResponse* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline ListDicTableFieldsResponse* New() const final {
    return CreateMaybeMessage<ListDicTableFieldsResponse>(nullptr);
  }

  ListDicTableFieldsResponse* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<ListDicTableFieldsResponse>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const ListDicTableFieldsResponse& from);
  void MergeFrom(const ListDicTableFieldsResponse& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(ListDicTableFieldsResponse* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "smart3dmap.v1.ListDicTableFieldsResponse";
  }
  protected:
  explicit ListDicTableFieldsResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    return ::descriptor_table_data_5fengine_2fdata_5fengine_2eproto_metadata_getter(kIndexInFileMessages);
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kFieldsFieldNumber = 3,
    kTableFieldNumber = 2,
    kDbIdFieldNumber = 1,
  };
  // repeated .smart3dmap.v1.DicTableField fields = 3;
  int fields_size() const;
  private:
  int _internal_fields_size() const;
  public:
  void clear_fields();
  ::smart3dmap::v1::DicTableField* mutable_fields(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::smart3dmap::v1::DicTableField >*
      mutable_fields();
  private:
  const ::smart3dmap::v1::DicTableField& _internal_fields(int index) const;
  ::smart3dmap::v1::DicTableField* _internal_add_fields();
  public:
  const ::smart3dmap::v1::DicTableField& fields(int index) const;
  ::smart3dmap::v1::DicTableField* add_fields();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::smart3dmap::v1::DicTableField >&
      fields() const;

  // .smart3dmap.v1.DicTable table = 2;
  bool has_table() const;
  private:
  bool _internal_has_table() const;
  public:
  void clear_table();
  const ::smart3dmap::v1::DicTable& table() const;
  ::smart3dmap::v1::DicTable* release_table();
  ::smart3dmap::v1::DicTable* mutable_table();
  void set_allocated_table(::smart3dmap::v1::DicTable* table);
  private:
  const ::smart3dmap::v1::DicTable& _internal_table() const;
  ::smart3dmap::v1::DicTable* _internal_mutable_table();
  public:
  void unsafe_arena_set_allocated_table(
      ::smart3dmap::v1::DicTable* table);
  ::smart3dmap::v1::DicTable* unsafe_arena_release_table();

  // int32 db_id = 1;
  void clear_db_id();
  ::PROTOBUF_NAMESPACE_ID::int32 db_id() const;
  void set_db_id(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_db_id() const;
  void _internal_set_db_id(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // @@protoc_insertion_point(class_scope:smart3dmap.v1.ListDicTableFieldsResponse)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::smart3dmap::v1::DicTableField > fields_;
  ::smart3dmap::v1::DicTable* table_;
  ::PROTOBUF_NAMESPACE_ID::int32 db_id_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_data_5fengine_2fdata_5fengine_2eproto;
};
// -------------------------------------------------------------------

class LIBS3DMGRPC_API ConfigTableFieldMapRequest_FieldMap PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:smart3dmap.v1.ConfigTableFieldMapRequest.FieldMap) */ {
 public:
  inline ConfigTableFieldMapRequest_FieldMap() : ConfigTableFieldMapRequest_FieldMap(nullptr) {}
  virtual ~ConfigTableFieldMapRequest_FieldMap();
  explicit constexpr ConfigTableFieldMapRequest_FieldMap(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  ConfigTableFieldMapRequest_FieldMap(const ConfigTableFieldMapRequest_FieldMap& from);
  ConfigTableFieldMapRequest_FieldMap(ConfigTableFieldMapRequest_FieldMap&& from) noexcept
    : ConfigTableFieldMapRequest_FieldMap() {
    *this = ::std::move(from);
  }

  inline ConfigTableFieldMapRequest_FieldMap& operator=(const ConfigTableFieldMapRequest_FieldMap& from) {
    CopyFrom(from);
    return *this;
  }
  inline ConfigTableFieldMapRequest_FieldMap& operator=(ConfigTableFieldMapRequest_FieldMap&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const ConfigTableFieldMapRequest_FieldMap& default_instance() {
    return *internal_default_instance();
  }
  static inline const ConfigTableFieldMapRequest_FieldMap* internal_default_instance() {
    return reinterpret_cast<const ConfigTableFieldMapRequest_FieldMap*>(
               &_ConfigTableFieldMapRequest_FieldMap_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    45;

  friend void swap(ConfigTableFieldMapRequest_FieldMap& a, ConfigTableFieldMapRequest_FieldMap& b) {
    a.Swap(&b);
  }
  inline void Swap(ConfigTableFieldMapRequest_FieldMap* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(ConfigTableFieldMapRequest_FieldMap* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline ConfigTableFieldMapRequest_FieldMap* New() const final {
    return CreateMaybeMessage<ConfigTableFieldMapRequest_FieldMap>(nullptr);
  }

  ConfigTableFieldMapRequest_FieldMap* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<ConfigTableFieldMapRequest_FieldMap>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const ConfigTableFieldMapRequest_FieldMap& from);
  void MergeFrom(const ConfigTableFieldMapRequest_FieldMap& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(ConfigTableFieldMapRequest_FieldMap* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "smart3dmap.v1.ConfigTableFieldMapRequest.FieldMap";
  }
  protected:
  explicit ConfigTableFieldMapRequest_FieldMap(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    return ::descriptor_table_data_5fengine_2fdata_5fengine_2eproto_metadata_getter(kIndexInFileMessages);
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kUserFieldNameFieldNumber = 2,
    kFieldIdFieldNumber = 1,
  };
  // string user_field_name = 2;
  void clear_user_field_name();
  const std::string& user_field_name() const;
  void set_user_field_name(const std::string& value);
  void set_user_field_name(std::string&& value);
  void set_user_field_name(const char* value);
  void set_user_field_name(const char* value, size_t size);
  std::string* mutable_user_field_name();
  std::string* release_user_field_name();
  void set_allocated_user_field_name(std::string* user_field_name);
  private:
  const std::string& _internal_user_field_name() const;
  void _internal_set_user_field_name(const std::string& value);
  std::string* _internal_mutable_user_field_name();
  public:

  // int32 field_id = 1;
  void clear_field_id();
  ::PROTOBUF_NAMESPACE_ID::int32 field_id() const;
  void set_field_id(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_field_id() const;
  void _internal_set_field_id(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // @@protoc_insertion_point(class_scope:smart3dmap.v1.ConfigTableFieldMapRequest.FieldMap)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr user_field_name_;
  ::PROTOBUF_NAMESPACE_ID::int32 field_id_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_data_5fengine_2fdata_5fengine_2eproto;
};
// -------------------------------------------------------------------

class LIBS3DMGRPC_API ConfigTableFieldMapRequest PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:smart3dmap.v1.ConfigTableFieldMapRequest) */ {
 public:
  inline ConfigTableFieldMapRequest() : ConfigTableFieldMapRequest(nullptr) {}
  virtual ~ConfigTableFieldMapRequest();
  explicit constexpr ConfigTableFieldMapRequest(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  ConfigTableFieldMapRequest(const ConfigTableFieldMapRequest& from);
  ConfigTableFieldMapRequest(ConfigTableFieldMapRequest&& from) noexcept
    : ConfigTableFieldMapRequest() {
    *this = ::std::move(from);
  }

  inline ConfigTableFieldMapRequest& operator=(const ConfigTableFieldMapRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline ConfigTableFieldMapRequest& operator=(ConfigTableFieldMapRequest&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const ConfigTableFieldMapRequest& default_instance() {
    return *internal_default_instance();
  }
  static inline const ConfigTableFieldMapRequest* internal_default_instance() {
    return reinterpret_cast<const ConfigTableFieldMapRequest*>(
               &_ConfigTableFieldMapRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    46;

  friend void swap(ConfigTableFieldMapRequest& a, ConfigTableFieldMapRequest& b) {
    a.Swap(&b);
  }
  inline void Swap(ConfigTableFieldMapRequest* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(ConfigTableFieldMapRequest* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline ConfigTableFieldMapRequest* New() const final {
    return CreateMaybeMessage<ConfigTableFieldMapRequest>(nullptr);
  }

  ConfigTableFieldMapRequest* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<ConfigTableFieldMapRequest>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const ConfigTableFieldMapRequest& from);
  void MergeFrom(const ConfigTableFieldMapRequest& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(ConfigTableFieldMapRequest* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "smart3dmap.v1.ConfigTableFieldMapRequest";
  }
  protected:
  explicit ConfigTableFieldMapRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    return ::descriptor_table_data_5fengine_2fdata_5fengine_2eproto_metadata_getter(kIndexInFileMessages);
  }

  public:

  // nested types ----------------------------------------------------

  typedef ConfigTableFieldMapRequest_FieldMap FieldMap;

  // accessors -------------------------------------------------------

  enum : int {
    kFieldMappingFieldNumber = 4,
    kUserTableNameFieldNumber = 3,
    kDbIdFieldNumber = 1,
    kTableIdFieldNumber = 2,
  };
  // repeated .smart3dmap.v1.ConfigTableFieldMapRequest.FieldMap field_mapping = 4;
  int field_mapping_size() const;
  private:
  int _internal_field_mapping_size() const;
  public:
  void clear_field_mapping();
  ::smart3dmap::v1::ConfigTableFieldMapRequest_FieldMap* mutable_field_mapping(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::smart3dmap::v1::ConfigTableFieldMapRequest_FieldMap >*
      mutable_field_mapping();
  private:
  const ::smart3dmap::v1::ConfigTableFieldMapRequest_FieldMap& _internal_field_mapping(int index) const;
  ::smart3dmap::v1::ConfigTableFieldMapRequest_FieldMap* _internal_add_field_mapping();
  public:
  const ::smart3dmap::v1::ConfigTableFieldMapRequest_FieldMap& field_mapping(int index) const;
  ::smart3dmap::v1::ConfigTableFieldMapRequest_FieldMap* add_field_mapping();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::smart3dmap::v1::ConfigTableFieldMapRequest_FieldMap >&
      field_mapping() const;

  // string user_table_name = 3;
  void clear_user_table_name();
  const std::string& user_table_name() const;
  void set_user_table_name(const std::string& value);
  void set_user_table_name(std::string&& value);
  void set_user_table_name(const char* value);
  void set_user_table_name(const char* value, size_t size);
  std::string* mutable_user_table_name();
  std::string* release_user_table_name();
  void set_allocated_user_table_name(std::string* user_table_name);
  private:
  const std::string& _internal_user_table_name() const;
  void _internal_set_user_table_name(const std::string& value);
  std::string* _internal_mutable_user_table_name();
  public:

  // int32 db_id = 1;
  void clear_db_id();
  ::PROTOBUF_NAMESPACE_ID::int32 db_id() const;
  void set_db_id(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_db_id() const;
  void _internal_set_db_id(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // int32 table_id = 2;
  void clear_table_id();
  ::PROTOBUF_NAMESPACE_ID::int32 table_id() const;
  void set_table_id(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_table_id() const;
  void _internal_set_table_id(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // @@protoc_insertion_point(class_scope:smart3dmap.v1.ConfigTableFieldMapRequest)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::smart3dmap::v1::ConfigTableFieldMapRequest_FieldMap > field_mapping_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr user_table_name_;
  ::PROTOBUF_NAMESPACE_ID::int32 db_id_;
  ::PROTOBUF_NAMESPACE_ID::int32 table_id_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_data_5fengine_2fdata_5fengine_2eproto;
};
// -------------------------------------------------------------------

class LIBS3DMGRPC_API ConfigTableFieldMapResponse PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:smart3dmap.v1.ConfigTableFieldMapResponse) */ {
 public:
  inline ConfigTableFieldMapResponse() : ConfigTableFieldMapResponse(nullptr) {}
  virtual ~ConfigTableFieldMapResponse();
  explicit constexpr ConfigTableFieldMapResponse(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  ConfigTableFieldMapResponse(const ConfigTableFieldMapResponse& from);
  ConfigTableFieldMapResponse(ConfigTableFieldMapResponse&& from) noexcept
    : ConfigTableFieldMapResponse() {
    *this = ::std::move(from);
  }

  inline ConfigTableFieldMapResponse& operator=(const ConfigTableFieldMapResponse& from) {
    CopyFrom(from);
    return *this;
  }
  inline ConfigTableFieldMapResponse& operator=(ConfigTableFieldMapResponse&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const ConfigTableFieldMapResponse& default_instance() {
    return *internal_default_instance();
  }
  static inline const ConfigTableFieldMapResponse* internal_default_instance() {
    return reinterpret_cast<const ConfigTableFieldMapResponse*>(
               &_ConfigTableFieldMapResponse_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    47;

  friend void swap(ConfigTableFieldMapResponse& a, ConfigTableFieldMapResponse& b) {
    a.Swap(&b);
  }
  inline void Swap(ConfigTableFieldMapResponse* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(ConfigTableFieldMapResponse* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline ConfigTableFieldMapResponse* New() const final {
    return CreateMaybeMessage<ConfigTableFieldMapResponse>(nullptr);
  }

  ConfigTableFieldMapResponse* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<ConfigTableFieldMapResponse>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const ConfigTableFieldMapResponse& from);
  void MergeFrom(const ConfigTableFieldMapResponse& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(ConfigTableFieldMapResponse* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "smart3dmap.v1.ConfigTableFieldMapResponse";
  }
  protected:
  explicit ConfigTableFieldMapResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    return ::descriptor_table_data_5fengine_2fdata_5fengine_2eproto_metadata_getter(kIndexInFileMessages);
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kErrorFieldNumber = 2,
    kStatusFieldNumber = 1,
  };
  // string error = 2;
  void clear_error();
  const std::string& error() const;
  void set_error(const std::string& value);
  void set_error(std::string&& value);
  void set_error(const char* value);
  void set_error(const char* value, size_t size);
  std::string* mutable_error();
  std::string* release_error();
  void set_allocated_error(std::string* error);
  private:
  const std::string& _internal_error() const;
  void _internal_set_error(const std::string& value);
  std::string* _internal_mutable_error();
  public:

  // bool status = 1;
  void clear_status();
  bool status() const;
  void set_status(bool value);
  private:
  bool _internal_status() const;
  void _internal_set_status(bool value);
  public:

  // @@protoc_insertion_point(class_scope:smart3dmap.v1.ConfigTableFieldMapResponse)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr error_;
  bool status_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_data_5fengine_2fdata_5fengine_2eproto;
};
// -------------------------------------------------------------------

class LIBS3DMGRPC_API ListTablesInDBRequest PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:smart3dmap.v1.ListTablesInDBRequest) */ {
 public:
  inline ListTablesInDBRequest() : ListTablesInDBRequest(nullptr) {}
  virtual ~ListTablesInDBRequest();
  explicit constexpr ListTablesInDBRequest(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  ListTablesInDBRequest(const ListTablesInDBRequest& from);
  ListTablesInDBRequest(ListTablesInDBRequest&& from) noexcept
    : ListTablesInDBRequest() {
    *this = ::std::move(from);
  }

  inline ListTablesInDBRequest& operator=(const ListTablesInDBRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline ListTablesInDBRequest& operator=(ListTablesInDBRequest&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const ListTablesInDBRequest& default_instance() {
    return *internal_default_instance();
  }
  static inline const ListTablesInDBRequest* internal_default_instance() {
    return reinterpret_cast<const ListTablesInDBRequest*>(
               &_ListTablesInDBRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    48;

  friend void swap(ListTablesInDBRequest& a, ListTablesInDBRequest& b) {
    a.Swap(&b);
  }
  inline void Swap(ListTablesInDBRequest* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(ListTablesInDBRequest* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline ListTablesInDBRequest* New() const final {
    return CreateMaybeMessage<ListTablesInDBRequest>(nullptr);
  }

  ListTablesInDBRequest* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<ListTablesInDBRequest>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const ListTablesInDBRequest& from);
  void MergeFrom(const ListTablesInDBRequest& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(ListTablesInDBRequest* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "smart3dmap.v1.ListTablesInDBRequest";
  }
  protected:
  explicit ListTablesInDBRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    return ::descriptor_table_data_5fengine_2fdata_5fengine_2eproto_metadata_getter(kIndexInFileMessages);
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kDbIdFieldNumber = 1,
  };
  // int32 db_id = 1;
  void clear_db_id();
  ::PROTOBUF_NAMESPACE_ID::int32 db_id() const;
  void set_db_id(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_db_id() const;
  void _internal_set_db_id(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // @@protoc_insertion_point(class_scope:smart3dmap.v1.ListTablesInDBRequest)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::int32 db_id_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_data_5fengine_2fdata_5fengine_2eproto;
};
// -------------------------------------------------------------------

class LIBS3DMGRPC_API ListTablesInDBResponse PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:smart3dmap.v1.ListTablesInDBResponse) */ {
 public:
  inline ListTablesInDBResponse() : ListTablesInDBResponse(nullptr) {}
  virtual ~ListTablesInDBResponse();
  explicit constexpr ListTablesInDBResponse(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  ListTablesInDBResponse(const ListTablesInDBResponse& from);
  ListTablesInDBResponse(ListTablesInDBResponse&& from) noexcept
    : ListTablesInDBResponse() {
    *this = ::std::move(from);
  }

  inline ListTablesInDBResponse& operator=(const ListTablesInDBResponse& from) {
    CopyFrom(from);
    return *this;
  }
  inline ListTablesInDBResponse& operator=(ListTablesInDBResponse&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const ListTablesInDBResponse& default_instance() {
    return *internal_default_instance();
  }
  static inline const ListTablesInDBResponse* internal_default_instance() {
    return reinterpret_cast<const ListTablesInDBResponse*>(
               &_ListTablesInDBResponse_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    49;

  friend void swap(ListTablesInDBResponse& a, ListTablesInDBResponse& b) {
    a.Swap(&b);
  }
  inline void Swap(ListTablesInDBResponse* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(ListTablesInDBResponse* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline ListTablesInDBResponse* New() const final {
    return CreateMaybeMessage<ListTablesInDBResponse>(nullptr);
  }

  ListTablesInDBResponse* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<ListTablesInDBResponse>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const ListTablesInDBResponse& from);
  void MergeFrom(const ListTablesInDBResponse& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(ListTablesInDBResponse* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "smart3dmap.v1.ListTablesInDBResponse";
  }
  protected:
  explicit ListTablesInDBResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    return ::descriptor_table_data_5fengine_2fdata_5fengine_2eproto_metadata_getter(kIndexInFileMessages);
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kTableNamesFieldNumber = 2,
    kDbIdFieldNumber = 1,
  };
  // repeated string table_names = 2;
  int table_names_size() const;
  private:
  int _internal_table_names_size() const;
  public:
  void clear_table_names();
  const std::string& table_names(int index) const;
  std::string* mutable_table_names(int index);
  void set_table_names(int index, const std::string& value);
  void set_table_names(int index, std::string&& value);
  void set_table_names(int index, const char* value);
  void set_table_names(int index, const char* value, size_t size);
  std::string* add_table_names();
  void add_table_names(const std::string& value);
  void add_table_names(std::string&& value);
  void add_table_names(const char* value);
  void add_table_names(const char* value, size_t size);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>& table_names() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>* mutable_table_names();
  private:
  const std::string& _internal_table_names(int index) const;
  std::string* _internal_add_table_names();
  public:

  // int32 db_id = 1;
  void clear_db_id();
  ::PROTOBUF_NAMESPACE_ID::int32 db_id() const;
  void set_db_id(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_db_id() const;
  void _internal_set_db_id(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // @@protoc_insertion_point(class_scope:smart3dmap.v1.ListTablesInDBResponse)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string> table_names_;
  ::PROTOBUF_NAMESPACE_ID::int32 db_id_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_data_5fengine_2fdata_5fengine_2eproto;
};
// -------------------------------------------------------------------

class LIBS3DMGRPC_API ListFieldsOfTableRequest PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:smart3dmap.v1.ListFieldsOfTableRequest) */ {
 public:
  inline ListFieldsOfTableRequest() : ListFieldsOfTableRequest(nullptr) {}
  virtual ~ListFieldsOfTableRequest();
  explicit constexpr ListFieldsOfTableRequest(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  ListFieldsOfTableRequest(const ListFieldsOfTableRequest& from);
  ListFieldsOfTableRequest(ListFieldsOfTableRequest&& from) noexcept
    : ListFieldsOfTableRequest() {
    *this = ::std::move(from);
  }

  inline ListFieldsOfTableRequest& operator=(const ListFieldsOfTableRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline ListFieldsOfTableRequest& operator=(ListFieldsOfTableRequest&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const ListFieldsOfTableRequest& default_instance() {
    return *internal_default_instance();
  }
  static inline const ListFieldsOfTableRequest* internal_default_instance() {
    return reinterpret_cast<const ListFieldsOfTableRequest*>(
               &_ListFieldsOfTableRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    50;

  friend void swap(ListFieldsOfTableRequest& a, ListFieldsOfTableRequest& b) {
    a.Swap(&b);
  }
  inline void Swap(ListFieldsOfTableRequest* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(ListFieldsOfTableRequest* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline ListFieldsOfTableRequest* New() const final {
    return CreateMaybeMessage<ListFieldsOfTableRequest>(nullptr);
  }

  ListFieldsOfTableRequest* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<ListFieldsOfTableRequest>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const ListFieldsOfTableRequest& from);
  void MergeFrom(const ListFieldsOfTableRequest& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(ListFieldsOfTableRequest* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "smart3dmap.v1.ListFieldsOfTableRequest";
  }
  protected:
  explicit ListFieldsOfTableRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    return ::descriptor_table_data_5fengine_2fdata_5fengine_2eproto_metadata_getter(kIndexInFileMessages);
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kTableNameFieldNumber = 2,
    kDbIdFieldNumber = 1,
  };
  // string table_name = 2;
  void clear_table_name();
  const std::string& table_name() const;
  void set_table_name(const std::string& value);
  void set_table_name(std::string&& value);
  void set_table_name(const char* value);
  void set_table_name(const char* value, size_t size);
  std::string* mutable_table_name();
  std::string* release_table_name();
  void set_allocated_table_name(std::string* table_name);
  private:
  const std::string& _internal_table_name() const;
  void _internal_set_table_name(const std::string& value);
  std::string* _internal_mutable_table_name();
  public:

  // int32 db_id = 1;
  void clear_db_id();
  ::PROTOBUF_NAMESPACE_ID::int32 db_id() const;
  void set_db_id(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_db_id() const;
  void _internal_set_db_id(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // @@protoc_insertion_point(class_scope:smart3dmap.v1.ListFieldsOfTableRequest)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr table_name_;
  ::PROTOBUF_NAMESPACE_ID::int32 db_id_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_data_5fengine_2fdata_5fengine_2eproto;
};
// -------------------------------------------------------------------

class LIBS3DMGRPC_API ListFieldsOfTableResponse_TableField PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:smart3dmap.v1.ListFieldsOfTableResponse.TableField) */ {
 public:
  inline ListFieldsOfTableResponse_TableField() : ListFieldsOfTableResponse_TableField(nullptr) {}
  virtual ~ListFieldsOfTableResponse_TableField();
  explicit constexpr ListFieldsOfTableResponse_TableField(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  ListFieldsOfTableResponse_TableField(const ListFieldsOfTableResponse_TableField& from);
  ListFieldsOfTableResponse_TableField(ListFieldsOfTableResponse_TableField&& from) noexcept
    : ListFieldsOfTableResponse_TableField() {
    *this = ::std::move(from);
  }

  inline ListFieldsOfTableResponse_TableField& operator=(const ListFieldsOfTableResponse_TableField& from) {
    CopyFrom(from);
    return *this;
  }
  inline ListFieldsOfTableResponse_TableField& operator=(ListFieldsOfTableResponse_TableField&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const ListFieldsOfTableResponse_TableField& default_instance() {
    return *internal_default_instance();
  }
  static inline const ListFieldsOfTableResponse_TableField* internal_default_instance() {
    return reinterpret_cast<const ListFieldsOfTableResponse_TableField*>(
               &_ListFieldsOfTableResponse_TableField_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    51;

  friend void swap(ListFieldsOfTableResponse_TableField& a, ListFieldsOfTableResponse_TableField& b) {
    a.Swap(&b);
  }
  inline void Swap(ListFieldsOfTableResponse_TableField* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(ListFieldsOfTableResponse_TableField* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline ListFieldsOfTableResponse_TableField* New() const final {
    return CreateMaybeMessage<ListFieldsOfTableResponse_TableField>(nullptr);
  }

  ListFieldsOfTableResponse_TableField* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<ListFieldsOfTableResponse_TableField>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const ListFieldsOfTableResponse_TableField& from);
  void MergeFrom(const ListFieldsOfTableResponse_TableField& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(ListFieldsOfTableResponse_TableField* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "smart3dmap.v1.ListFieldsOfTableResponse.TableField";
  }
  protected:
  explicit ListFieldsOfTableResponse_TableField(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    return ::descriptor_table_data_5fengine_2fdata_5fengine_2eproto_metadata_getter(kIndexInFileMessages);
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kNameFieldNumber = 1,
    kDataTypeFieldNumber = 2,
  };
  // string name = 1;
  void clear_name();
  const std::string& name() const;
  void set_name(const std::string& value);
  void set_name(std::string&& value);
  void set_name(const char* value);
  void set_name(const char* value, size_t size);
  std::string* mutable_name();
  std::string* release_name();
  void set_allocated_name(std::string* name);
  private:
  const std::string& _internal_name() const;
  void _internal_set_name(const std::string& value);
  std::string* _internal_mutable_name();
  public:

  // string data_type = 2;
  void clear_data_type();
  const std::string& data_type() const;
  void set_data_type(const std::string& value);
  void set_data_type(std::string&& value);
  void set_data_type(const char* value);
  void set_data_type(const char* value, size_t size);
  std::string* mutable_data_type();
  std::string* release_data_type();
  void set_allocated_data_type(std::string* data_type);
  private:
  const std::string& _internal_data_type() const;
  void _internal_set_data_type(const std::string& value);
  std::string* _internal_mutable_data_type();
  public:

  // @@protoc_insertion_point(class_scope:smart3dmap.v1.ListFieldsOfTableResponse.TableField)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr name_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr data_type_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_data_5fengine_2fdata_5fengine_2eproto;
};
// -------------------------------------------------------------------

class LIBS3DMGRPC_API ListFieldsOfTableResponse PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:smart3dmap.v1.ListFieldsOfTableResponse) */ {
 public:
  inline ListFieldsOfTableResponse() : ListFieldsOfTableResponse(nullptr) {}
  virtual ~ListFieldsOfTableResponse();
  explicit constexpr ListFieldsOfTableResponse(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  ListFieldsOfTableResponse(const ListFieldsOfTableResponse& from);
  ListFieldsOfTableResponse(ListFieldsOfTableResponse&& from) noexcept
    : ListFieldsOfTableResponse() {
    *this = ::std::move(from);
  }

  inline ListFieldsOfTableResponse& operator=(const ListFieldsOfTableResponse& from) {
    CopyFrom(from);
    return *this;
  }
  inline ListFieldsOfTableResponse& operator=(ListFieldsOfTableResponse&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const ListFieldsOfTableResponse& default_instance() {
    return *internal_default_instance();
  }
  static inline const ListFieldsOfTableResponse* internal_default_instance() {
    return reinterpret_cast<const ListFieldsOfTableResponse*>(
               &_ListFieldsOfTableResponse_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    52;

  friend void swap(ListFieldsOfTableResponse& a, ListFieldsOfTableResponse& b) {
    a.Swap(&b);
  }
  inline void Swap(ListFieldsOfTableResponse* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(ListFieldsOfTableResponse* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline ListFieldsOfTableResponse* New() const final {
    return CreateMaybeMessage<ListFieldsOfTableResponse>(nullptr);
  }

  ListFieldsOfTableResponse* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<ListFieldsOfTableResponse>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const ListFieldsOfTableResponse& from);
  void MergeFrom(const ListFieldsOfTableResponse& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(ListFieldsOfTableResponse* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "smart3dmap.v1.ListFieldsOfTableResponse";
  }
  protected:
  explicit ListFieldsOfTableResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    return ::descriptor_table_data_5fengine_2fdata_5fengine_2eproto_metadata_getter(kIndexInFileMessages);
  }

  public:

  // nested types ----------------------------------------------------

  typedef ListFieldsOfTableResponse_TableField TableField;

  // accessors -------------------------------------------------------

  enum : int {
    kFieldsFieldNumber = 3,
    kTableNameFieldNumber = 2,
    kDbIdFieldNumber = 1,
  };
  // repeated .smart3dmap.v1.ListFieldsOfTableResponse.TableField fields = 3;
  int fields_size() const;
  private:
  int _internal_fields_size() const;
  public:
  void clear_fields();
  ::smart3dmap::v1::ListFieldsOfTableResponse_TableField* mutable_fields(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::smart3dmap::v1::ListFieldsOfTableResponse_TableField >*
      mutable_fields();
  private:
  const ::smart3dmap::v1::ListFieldsOfTableResponse_TableField& _internal_fields(int index) const;
  ::smart3dmap::v1::ListFieldsOfTableResponse_TableField* _internal_add_fields();
  public:
  const ::smart3dmap::v1::ListFieldsOfTableResponse_TableField& fields(int index) const;
  ::smart3dmap::v1::ListFieldsOfTableResponse_TableField* add_fields();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::smart3dmap::v1::ListFieldsOfTableResponse_TableField >&
      fields() const;

  // string table_name = 2;
  void clear_table_name();
  const std::string& table_name() const;
  void set_table_name(const std::string& value);
  void set_table_name(std::string&& value);
  void set_table_name(const char* value);
  void set_table_name(const char* value, size_t size);
  std::string* mutable_table_name();
  std::string* release_table_name();
  void set_allocated_table_name(std::string* table_name);
  private:
  const std::string& _internal_table_name() const;
  void _internal_set_table_name(const std::string& value);
  std::string* _internal_mutable_table_name();
  public:

  // int32 db_id = 1;
  void clear_db_id();
  ::PROTOBUF_NAMESPACE_ID::int32 db_id() const;
  void set_db_id(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_db_id() const;
  void _internal_set_db_id(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // @@protoc_insertion_point(class_scope:smart3dmap.v1.ListFieldsOfTableResponse)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::smart3dmap::v1::ListFieldsOfTableResponse_TableField > fields_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr table_name_;
  ::PROTOBUF_NAMESPACE_ID::int32 db_id_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_data_5fengine_2fdata_5fengine_2eproto;
};
// -------------------------------------------------------------------

class LIBS3DMGRPC_API ListDataResourceTypesRequest PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:smart3dmap.v1.ListDataResourceTypesRequest) */ {
 public:
  inline ListDataResourceTypesRequest() : ListDataResourceTypesRequest(nullptr) {}
  virtual ~ListDataResourceTypesRequest();
  explicit constexpr ListDataResourceTypesRequest(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  ListDataResourceTypesRequest(const ListDataResourceTypesRequest& from);
  ListDataResourceTypesRequest(ListDataResourceTypesRequest&& from) noexcept
    : ListDataResourceTypesRequest() {
    *this = ::std::move(from);
  }

  inline ListDataResourceTypesRequest& operator=(const ListDataResourceTypesRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline ListDataResourceTypesRequest& operator=(ListDataResourceTypesRequest&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const ListDataResourceTypesRequest& default_instance() {
    return *internal_default_instance();
  }
  static inline const ListDataResourceTypesRequest* internal_default_instance() {
    return reinterpret_cast<const ListDataResourceTypesRequest*>(
               &_ListDataResourceTypesRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    53;

  friend void swap(ListDataResourceTypesRequest& a, ListDataResourceTypesRequest& b) {
    a.Swap(&b);
  }
  inline void Swap(ListDataResourceTypesRequest* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(ListDataResourceTypesRequest* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline ListDataResourceTypesRequest* New() const final {
    return CreateMaybeMessage<ListDataResourceTypesRequest>(nullptr);
  }

  ListDataResourceTypesRequest* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<ListDataResourceTypesRequest>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const ListDataResourceTypesRequest& from);
  void MergeFrom(const ListDataResourceTypesRequest& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(ListDataResourceTypesRequest* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "smart3dmap.v1.ListDataResourceTypesRequest";
  }
  protected:
  explicit ListDataResourceTypesRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    return ::descriptor_table_data_5fengine_2fdata_5fengine_2eproto_metadata_getter(kIndexInFileMessages);
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // @@protoc_insertion_point(class_scope:smart3dmap.v1.ListDataResourceTypesRequest)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_data_5fengine_2fdata_5fengine_2eproto;
};
// -------------------------------------------------------------------

class LIBS3DMGRPC_API ListDataResourceTypesResponse_TypeItem PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:smart3dmap.v1.ListDataResourceTypesResponse.TypeItem) */ {
 public:
  inline ListDataResourceTypesResponse_TypeItem() : ListDataResourceTypesResponse_TypeItem(nullptr) {}
  virtual ~ListDataResourceTypesResponse_TypeItem();
  explicit constexpr ListDataResourceTypesResponse_TypeItem(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  ListDataResourceTypesResponse_TypeItem(const ListDataResourceTypesResponse_TypeItem& from);
  ListDataResourceTypesResponse_TypeItem(ListDataResourceTypesResponse_TypeItem&& from) noexcept
    : ListDataResourceTypesResponse_TypeItem() {
    *this = ::std::move(from);
  }

  inline ListDataResourceTypesResponse_TypeItem& operator=(const ListDataResourceTypesResponse_TypeItem& from) {
    CopyFrom(from);
    return *this;
  }
  inline ListDataResourceTypesResponse_TypeItem& operator=(ListDataResourceTypesResponse_TypeItem&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const ListDataResourceTypesResponse_TypeItem& default_instance() {
    return *internal_default_instance();
  }
  static inline const ListDataResourceTypesResponse_TypeItem* internal_default_instance() {
    return reinterpret_cast<const ListDataResourceTypesResponse_TypeItem*>(
               &_ListDataResourceTypesResponse_TypeItem_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    54;

  friend void swap(ListDataResourceTypesResponse_TypeItem& a, ListDataResourceTypesResponse_TypeItem& b) {
    a.Swap(&b);
  }
  inline void Swap(ListDataResourceTypesResponse_TypeItem* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(ListDataResourceTypesResponse_TypeItem* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline ListDataResourceTypesResponse_TypeItem* New() const final {
    return CreateMaybeMessage<ListDataResourceTypesResponse_TypeItem>(nullptr);
  }

  ListDataResourceTypesResponse_TypeItem* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<ListDataResourceTypesResponse_TypeItem>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const ListDataResourceTypesResponse_TypeItem& from);
  void MergeFrom(const ListDataResourceTypesResponse_TypeItem& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(ListDataResourceTypesResponse_TypeItem* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "smart3dmap.v1.ListDataResourceTypesResponse.TypeItem";
  }
  protected:
  explicit ListDataResourceTypesResponse_TypeItem(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    return ::descriptor_table_data_5fengine_2fdata_5fengine_2eproto_metadata_getter(kIndexInFileMessages);
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kNameFieldNumber = 1,
    kTypeFieldNumber = 2,
    kAppTypeFieldNumber = 4,
    kPreviewModeFieldNumber = 5,
  };
  // string name = 1;
  void clear_name();
  const std::string& name() const;
  void set_name(const std::string& value);
  void set_name(std::string&& value);
  void set_name(const char* value);
  void set_name(const char* value, size_t size);
  std::string* mutable_name();
  std::string* release_name();
  void set_allocated_name(std::string* name);
  private:
  const std::string& _internal_name() const;
  void _internal_set_name(const std::string& value);
  std::string* _internal_mutable_name();
  public:

  // .smart3dmap.v1.DataResourceType type = 2;
  void clear_type();
  ::smart3dmap::v1::DataResourceType type() const;
  void set_type(::smart3dmap::v1::DataResourceType value);
  private:
  ::smart3dmap::v1::DataResourceType _internal_type() const;
  void _internal_set_type(::smart3dmap::v1::DataResourceType value);
  public:

  // .smart3dmap.v1.DBAppType app_type = 4;
  void clear_app_type();
  ::smart3dmap::v1::DBAppType app_type() const;
  void set_app_type(::smart3dmap::v1::DBAppType value);
  private:
  ::smart3dmap::v1::DBAppType _internal_app_type() const;
  void _internal_set_app_type(::smart3dmap::v1::DBAppType value);
  public:

  // .smart3dmap.v1.DataPreviewMode preview_mode = 5;
  void clear_preview_mode();
  ::smart3dmap::v1::DataPreviewMode preview_mode() const;
  void set_preview_mode(::smart3dmap::v1::DataPreviewMode value);
  private:
  ::smart3dmap::v1::DataPreviewMode _internal_preview_mode() const;
  void _internal_set_preview_mode(::smart3dmap::v1::DataPreviewMode value);
  public:

  // @@protoc_insertion_point(class_scope:smart3dmap.v1.ListDataResourceTypesResponse.TypeItem)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr name_;
  int type_;
  int app_type_;
  int preview_mode_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_data_5fengine_2fdata_5fengine_2eproto;
};
// -------------------------------------------------------------------

class LIBS3DMGRPC_API ListDataResourceTypesResponse PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:smart3dmap.v1.ListDataResourceTypesResponse) */ {
 public:
  inline ListDataResourceTypesResponse() : ListDataResourceTypesResponse(nullptr) {}
  virtual ~ListDataResourceTypesResponse();
  explicit constexpr ListDataResourceTypesResponse(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  ListDataResourceTypesResponse(const ListDataResourceTypesResponse& from);
  ListDataResourceTypesResponse(ListDataResourceTypesResponse&& from) noexcept
    : ListDataResourceTypesResponse() {
    *this = ::std::move(from);
  }

  inline ListDataResourceTypesResponse& operator=(const ListDataResourceTypesResponse& from) {
    CopyFrom(from);
    return *this;
  }
  inline ListDataResourceTypesResponse& operator=(ListDataResourceTypesResponse&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const ListDataResourceTypesResponse& default_instance() {
    return *internal_default_instance();
  }
  static inline const ListDataResourceTypesResponse* internal_default_instance() {
    return reinterpret_cast<const ListDataResourceTypesResponse*>(
               &_ListDataResourceTypesResponse_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    55;

  friend void swap(ListDataResourceTypesResponse& a, ListDataResourceTypesResponse& b) {
    a.Swap(&b);
  }
  inline void Swap(ListDataResourceTypesResponse* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(ListDataResourceTypesResponse* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline ListDataResourceTypesResponse* New() const final {
    return CreateMaybeMessage<ListDataResourceTypesResponse>(nullptr);
  }

  ListDataResourceTypesResponse* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<ListDataResourceTypesResponse>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const ListDataResourceTypesResponse& from);
  void MergeFrom(const ListDataResourceTypesResponse& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(ListDataResourceTypesResponse* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "smart3dmap.v1.ListDataResourceTypesResponse";
  }
  protected:
  explicit ListDataResourceTypesResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    return ::descriptor_table_data_5fengine_2fdata_5fengine_2eproto_metadata_getter(kIndexInFileMessages);
  }

  public:

  // nested types ----------------------------------------------------

  typedef ListDataResourceTypesResponse_TypeItem TypeItem;

  // accessors -------------------------------------------------------

  enum : int {
    kItemsFieldNumber = 1,
  };
  // repeated .smart3dmap.v1.ListDataResourceTypesResponse.TypeItem items = 1;
  int items_size() const;
  private:
  int _internal_items_size() const;
  public:
  void clear_items();
  ::smart3dmap::v1::ListDataResourceTypesResponse_TypeItem* mutable_items(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::smart3dmap::v1::ListDataResourceTypesResponse_TypeItem >*
      mutable_items();
  private:
  const ::smart3dmap::v1::ListDataResourceTypesResponse_TypeItem& _internal_items(int index) const;
  ::smart3dmap::v1::ListDataResourceTypesResponse_TypeItem* _internal_add_items();
  public:
  const ::smart3dmap::v1::ListDataResourceTypesResponse_TypeItem& items(int index) const;
  ::smart3dmap::v1::ListDataResourceTypesResponse_TypeItem* add_items();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::smart3dmap::v1::ListDataResourceTypesResponse_TypeItem >&
      items() const;

  // @@protoc_insertion_point(class_scope:smart3dmap.v1.ListDataResourceTypesResponse)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::smart3dmap::v1::ListDataResourceTypesResponse_TypeItem > items_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_data_5fengine_2fdata_5fengine_2eproto;
};
// -------------------------------------------------------------------

class LIBS3DMGRPC_API Layer PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:smart3dmap.v1.Layer) */ {
 public:
  inline Layer() : Layer(nullptr) {}
  virtual ~Layer();
  explicit constexpr Layer(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  Layer(const Layer& from);
  Layer(Layer&& from) noexcept
    : Layer() {
    *this = ::std::move(from);
  }

  inline Layer& operator=(const Layer& from) {
    CopyFrom(from);
    return *this;
  }
  inline Layer& operator=(Layer&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const Layer& default_instance() {
    return *internal_default_instance();
  }
  static inline const Layer* internal_default_instance() {
    return reinterpret_cast<const Layer*>(
               &_Layer_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    56;

  friend void swap(Layer& a, Layer& b) {
    a.Swap(&b);
  }
  inline void Swap(Layer* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(Layer* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline Layer* New() const final {
    return CreateMaybeMessage<Layer>(nullptr);
  }

  Layer* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<Layer>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const Layer& from);
  void MergeFrom(const Layer& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Layer* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "smart3dmap.v1.Layer";
  }
  protected:
  explicit Layer(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    return ::descriptor_table_data_5fengine_2fdata_5fengine_2eproto_metadata_getter(kIndexInFileMessages);
  }

  public:

  // nested types ----------------------------------------------------

  typedef Layer_Type Type;
  static constexpr Type LAYER_TYPE_UNKNOWN =
    Layer_Type_LAYER_TYPE_UNKNOWN;
  static constexpr Type LAYER_TYPE_VECTOR =
    Layer_Type_LAYER_TYPE_VECTOR;
  static constexpr Type LAYER_TYPE_RASTER =
    Layer_Type_LAYER_TYPE_RASTER;
  static inline bool Type_IsValid(int value) {
    return Layer_Type_IsValid(value);
  }
  static constexpr Type Type_MIN =
    Layer_Type_Type_MIN;
  static constexpr Type Type_MAX =
    Layer_Type_Type_MAX;
  static constexpr int Type_ARRAYSIZE =
    Layer_Type_Type_ARRAYSIZE;
  static inline const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor*
  Type_descriptor() {
    return Layer_Type_descriptor();
  }
  template<typename T>
  static inline const std::string& Type_Name(T enum_t_value) {
    static_assert(::std::is_same<T, Type>::value ||
      ::std::is_integral<T>::value,
      "Incorrect type passed to function Type_Name.");
    return Layer_Type_Name(enum_t_value);
  }
  static inline bool Type_Parse(::PROTOBUF_NAMESPACE_ID::ConstStringParam name,
      Type* value) {
    return Layer_Type_Parse(name, value);
  }

  // accessors -------------------------------------------------------

  enum : int {
    kNameFieldNumber = 3,
    kBaseNameFieldNumber = 4,
    kTableNameFieldNumber = 5,
    kCrsCodeFieldNumber = 7,
    kSldFieldNumber = 8,
    kCrsWktFieldNumber = 14,
    kBoundBoxFieldNumber = 6,
    kCreatedAtFieldNumber = 11,
    kUpdatedAtFieldNumber = 12,
    kIdFieldNumber = 1,
    kMapIdFieldNumber = 2,
    kOrderFieldNumber = 9,
    kDbIdFieldNumber = 10,
    kTypeFieldNumber = 13,
  };
  // string name = 3;
  void clear_name();
  const std::string& name() const;
  void set_name(const std::string& value);
  void set_name(std::string&& value);
  void set_name(const char* value);
  void set_name(const char* value, size_t size);
  std::string* mutable_name();
  std::string* release_name();
  void set_allocated_name(std::string* name);
  private:
  const std::string& _internal_name() const;
  void _internal_set_name(const std::string& value);
  std::string* _internal_mutable_name();
  public:

  // string base_name = 4;
  void clear_base_name();
  const std::string& base_name() const;
  void set_base_name(const std::string& value);
  void set_base_name(std::string&& value);
  void set_base_name(const char* value);
  void set_base_name(const char* value, size_t size);
  std::string* mutable_base_name();
  std::string* release_base_name();
  void set_allocated_base_name(std::string* base_name);
  private:
  const std::string& _internal_base_name() const;
  void _internal_set_base_name(const std::string& value);
  std::string* _internal_mutable_base_name();
  public:

  // string table_name = 5;
  void clear_table_name();
  const std::string& table_name() const;
  void set_table_name(const std::string& value);
  void set_table_name(std::string&& value);
  void set_table_name(const char* value);
  void set_table_name(const char* value, size_t size);
  std::string* mutable_table_name();
  std::string* release_table_name();
  void set_allocated_table_name(std::string* table_name);
  private:
  const std::string& _internal_table_name() const;
  void _internal_set_table_name(const std::string& value);
  std::string* _internal_mutable_table_name();
  public:

  // string crs_code = 7;
  void clear_crs_code();
  const std::string& crs_code() const;
  void set_crs_code(const std::string& value);
  void set_crs_code(std::string&& value);
  void set_crs_code(const char* value);
  void set_crs_code(const char* value, size_t size);
  std::string* mutable_crs_code();
  std::string* release_crs_code();
  void set_allocated_crs_code(std::string* crs_code);
  private:
  const std::string& _internal_crs_code() const;
  void _internal_set_crs_code(const std::string& value);
  std::string* _internal_mutable_crs_code();
  public:

  // string sld = 8;
  void clear_sld();
  const std::string& sld() const;
  void set_sld(const std::string& value);
  void set_sld(std::string&& value);
  void set_sld(const char* value);
  void set_sld(const char* value, size_t size);
  std::string* mutable_sld();
  std::string* release_sld();
  void set_allocated_sld(std::string* sld);
  private:
  const std::string& _internal_sld() const;
  void _internal_set_sld(const std::string& value);
  std::string* _internal_mutable_sld();
  public:

  // string crs_wkt = 14;
  void clear_crs_wkt();
  const std::string& crs_wkt() const;
  void set_crs_wkt(const std::string& value);
  void set_crs_wkt(std::string&& value);
  void set_crs_wkt(const char* value);
  void set_crs_wkt(const char* value, size_t size);
  std::string* mutable_crs_wkt();
  std::string* release_crs_wkt();
  void set_allocated_crs_wkt(std::string* crs_wkt);
  private:
  const std::string& _internal_crs_wkt() const;
  void _internal_set_crs_wkt(const std::string& value);
  std::string* _internal_mutable_crs_wkt();
  public:

  // .smart3dmap.v1.Rect2D bound_box = 6;
  bool has_bound_box() const;
  private:
  bool _internal_has_bound_box() const;
  public:
  void clear_bound_box();
  const ::smart3dmap::v1::Rect2D& bound_box() const;
  ::smart3dmap::v1::Rect2D* release_bound_box();
  ::smart3dmap::v1::Rect2D* mutable_bound_box();
  void set_allocated_bound_box(::smart3dmap::v1::Rect2D* bound_box);
  private:
  const ::smart3dmap::v1::Rect2D& _internal_bound_box() const;
  ::smart3dmap::v1::Rect2D* _internal_mutable_bound_box();
  public:
  void unsafe_arena_set_allocated_bound_box(
      ::smart3dmap::v1::Rect2D* bound_box);
  ::smart3dmap::v1::Rect2D* unsafe_arena_release_bound_box();

  // .google.protobuf.Timestamp created_at = 11;
  bool has_created_at() const;
  private:
  bool _internal_has_created_at() const;
  public:
  void clear_created_at();
  const PROTOBUF_NAMESPACE_ID::Timestamp& created_at() const;
  PROTOBUF_NAMESPACE_ID::Timestamp* release_created_at();
  PROTOBUF_NAMESPACE_ID::Timestamp* mutable_created_at();
  void set_allocated_created_at(PROTOBUF_NAMESPACE_ID::Timestamp* created_at);
  private:
  const PROTOBUF_NAMESPACE_ID::Timestamp& _internal_created_at() const;
  PROTOBUF_NAMESPACE_ID::Timestamp* _internal_mutable_created_at();
  public:
  void unsafe_arena_set_allocated_created_at(
      PROTOBUF_NAMESPACE_ID::Timestamp* created_at);
  PROTOBUF_NAMESPACE_ID::Timestamp* unsafe_arena_release_created_at();

  // .google.protobuf.Timestamp updated_at = 12;
  bool has_updated_at() const;
  private:
  bool _internal_has_updated_at() const;
  public:
  void clear_updated_at();
  const PROTOBUF_NAMESPACE_ID::Timestamp& updated_at() const;
  PROTOBUF_NAMESPACE_ID::Timestamp* release_updated_at();
  PROTOBUF_NAMESPACE_ID::Timestamp* mutable_updated_at();
  void set_allocated_updated_at(PROTOBUF_NAMESPACE_ID::Timestamp* updated_at);
  private:
  const PROTOBUF_NAMESPACE_ID::Timestamp& _internal_updated_at() const;
  PROTOBUF_NAMESPACE_ID::Timestamp* _internal_mutable_updated_at();
  public:
  void unsafe_arena_set_allocated_updated_at(
      PROTOBUF_NAMESPACE_ID::Timestamp* updated_at);
  PROTOBUF_NAMESPACE_ID::Timestamp* unsafe_arena_release_updated_at();

  // int32 id = 1;
  void clear_id();
  ::PROTOBUF_NAMESPACE_ID::int32 id() const;
  void set_id(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_id() const;
  void _internal_set_id(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // int32 map_id = 2;
  void clear_map_id();
  ::PROTOBUF_NAMESPACE_ID::int32 map_id() const;
  void set_map_id(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_map_id() const;
  void _internal_set_map_id(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // int32 order = 9;
  void clear_order();
  ::PROTOBUF_NAMESPACE_ID::int32 order() const;
  void set_order(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_order() const;
  void _internal_set_order(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // int32 db_id = 10;
  void clear_db_id();
  ::PROTOBUF_NAMESPACE_ID::int32 db_id() const;
  void set_db_id(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_db_id() const;
  void _internal_set_db_id(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // .smart3dmap.v1.Layer.Type type = 13;
  void clear_type();
  ::smart3dmap::v1::Layer_Type type() const;
  void set_type(::smart3dmap::v1::Layer_Type value);
  private:
  ::smart3dmap::v1::Layer_Type _internal_type() const;
  void _internal_set_type(::smart3dmap::v1::Layer_Type value);
  public:

  // @@protoc_insertion_point(class_scope:smart3dmap.v1.Layer)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr name_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr base_name_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr table_name_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr crs_code_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr sld_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr crs_wkt_;
  ::smart3dmap::v1::Rect2D* bound_box_;
  PROTOBUF_NAMESPACE_ID::Timestamp* created_at_;
  PROTOBUF_NAMESPACE_ID::Timestamp* updated_at_;
  ::PROTOBUF_NAMESPACE_ID::int32 id_;
  ::PROTOBUF_NAMESPACE_ID::int32 map_id_;
  ::PROTOBUF_NAMESPACE_ID::int32 order_;
  ::PROTOBUF_NAMESPACE_ID::int32 db_id_;
  int type_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_data_5fengine_2fdata_5fengine_2eproto;
};
// -------------------------------------------------------------------

class LIBS3DMGRPC_API Map PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:smart3dmap.v1.Map) */ {
 public:
  inline Map() : Map(nullptr) {}
  virtual ~Map();
  explicit constexpr Map(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  Map(const Map& from);
  Map(Map&& from) noexcept
    : Map() {
    *this = ::std::move(from);
  }

  inline Map& operator=(const Map& from) {
    CopyFrom(from);
    return *this;
  }
  inline Map& operator=(Map&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const Map& default_instance() {
    return *internal_default_instance();
  }
  static inline const Map* internal_default_instance() {
    return reinterpret_cast<const Map*>(
               &_Map_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    57;

  friend void swap(Map& a, Map& b) {
    a.Swap(&b);
  }
  inline void Swap(Map* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(Map* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline Map* New() const final {
    return CreateMaybeMessage<Map>(nullptr);
  }

  Map* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<Map>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const Map& from);
  void MergeFrom(const Map& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Map* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "smart3dmap.v1.Map";
  }
  protected:
  explicit Map(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    return ::descriptor_table_data_5fengine_2fdata_5fengine_2eproto_metadata_getter(kIndexInFileMessages);
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kNameFieldNumber = 3,
    kCrsCodeFieldNumber = 6,
    kQgsProjectFieldNumber = 7,
    kCrsWktFieldNumber = 11,
    kBoundBoxFieldNumber = 5,
    kCreatedAtFieldNumber = 9,
    kUpdatedAtFieldNumber = 10,
    kDbIdFieldNumber = 1,
    kIdFieldNumber = 2,
    kTypeFieldNumber = 4,
  };
  // string name = 3;
  void clear_name();
  const std::string& name() const;
  void set_name(const std::string& value);
  void set_name(std::string&& value);
  void set_name(const char* value);
  void set_name(const char* value, size_t size);
  std::string* mutable_name();
  std::string* release_name();
  void set_allocated_name(std::string* name);
  private:
  const std::string& _internal_name() const;
  void _internal_set_name(const std::string& value);
  std::string* _internal_mutable_name();
  public:

  // string crs_code = 6;
  void clear_crs_code();
  const std::string& crs_code() const;
  void set_crs_code(const std::string& value);
  void set_crs_code(std::string&& value);
  void set_crs_code(const char* value);
  void set_crs_code(const char* value, size_t size);
  std::string* mutable_crs_code();
  std::string* release_crs_code();
  void set_allocated_crs_code(std::string* crs_code);
  private:
  const std::string& _internal_crs_code() const;
  void _internal_set_crs_code(const std::string& value);
  std::string* _internal_mutable_crs_code();
  public:

  // string qgs_project = 7;
  void clear_qgs_project();
  const std::string& qgs_project() const;
  void set_qgs_project(const std::string& value);
  void set_qgs_project(std::string&& value);
  void set_qgs_project(const char* value);
  void set_qgs_project(const char* value, size_t size);
  std::string* mutable_qgs_project();
  std::string* release_qgs_project();
  void set_allocated_qgs_project(std::string* qgs_project);
  private:
  const std::string& _internal_qgs_project() const;
  void _internal_set_qgs_project(const std::string& value);
  std::string* _internal_mutable_qgs_project();
  public:

  // string crs_wkt = 11;
  void clear_crs_wkt();
  const std::string& crs_wkt() const;
  void set_crs_wkt(const std::string& value);
  void set_crs_wkt(std::string&& value);
  void set_crs_wkt(const char* value);
  void set_crs_wkt(const char* value, size_t size);
  std::string* mutable_crs_wkt();
  std::string* release_crs_wkt();
  void set_allocated_crs_wkt(std::string* crs_wkt);
  private:
  const std::string& _internal_crs_wkt() const;
  void _internal_set_crs_wkt(const std::string& value);
  std::string* _internal_mutable_crs_wkt();
  public:

  // .smart3dmap.v1.Rect2D bound_box = 5;
  bool has_bound_box() const;
  private:
  bool _internal_has_bound_box() const;
  public:
  void clear_bound_box();
  const ::smart3dmap::v1::Rect2D& bound_box() const;
  ::smart3dmap::v1::Rect2D* release_bound_box();
  ::smart3dmap::v1::Rect2D* mutable_bound_box();
  void set_allocated_bound_box(::smart3dmap::v1::Rect2D* bound_box);
  private:
  const ::smart3dmap::v1::Rect2D& _internal_bound_box() const;
  ::smart3dmap::v1::Rect2D* _internal_mutable_bound_box();
  public:
  void unsafe_arena_set_allocated_bound_box(
      ::smart3dmap::v1::Rect2D* bound_box);
  ::smart3dmap::v1::Rect2D* unsafe_arena_release_bound_box();

  // .google.protobuf.Timestamp created_at = 9;
  bool has_created_at() const;
  private:
  bool _internal_has_created_at() const;
  public:
  void clear_created_at();
  const PROTOBUF_NAMESPACE_ID::Timestamp& created_at() const;
  PROTOBUF_NAMESPACE_ID::Timestamp* release_created_at();
  PROTOBUF_NAMESPACE_ID::Timestamp* mutable_created_at();
  void set_allocated_created_at(PROTOBUF_NAMESPACE_ID::Timestamp* created_at);
  private:
  const PROTOBUF_NAMESPACE_ID::Timestamp& _internal_created_at() const;
  PROTOBUF_NAMESPACE_ID::Timestamp* _internal_mutable_created_at();
  public:
  void unsafe_arena_set_allocated_created_at(
      PROTOBUF_NAMESPACE_ID::Timestamp* created_at);
  PROTOBUF_NAMESPACE_ID::Timestamp* unsafe_arena_release_created_at();

  // .google.protobuf.Timestamp updated_at = 10;
  bool has_updated_at() const;
  private:
  bool _internal_has_updated_at() const;
  public:
  void clear_updated_at();
  const PROTOBUF_NAMESPACE_ID::Timestamp& updated_at() const;
  PROTOBUF_NAMESPACE_ID::Timestamp* release_updated_at();
  PROTOBUF_NAMESPACE_ID::Timestamp* mutable_updated_at();
  void set_allocated_updated_at(PROTOBUF_NAMESPACE_ID::Timestamp* updated_at);
  private:
  const PROTOBUF_NAMESPACE_ID::Timestamp& _internal_updated_at() const;
  PROTOBUF_NAMESPACE_ID::Timestamp* _internal_mutable_updated_at();
  public:
  void unsafe_arena_set_allocated_updated_at(
      PROTOBUF_NAMESPACE_ID::Timestamp* updated_at);
  PROTOBUF_NAMESPACE_ID::Timestamp* unsafe_arena_release_updated_at();

  // int32 db_id = 1;
  void clear_db_id();
  ::PROTOBUF_NAMESPACE_ID::int32 db_id() const;
  void set_db_id(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_db_id() const;
  void _internal_set_db_id(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // int32 id = 2;
  void clear_id();
  ::PROTOBUF_NAMESPACE_ID::int32 id() const;
  void set_id(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_id() const;
  void _internal_set_id(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // .smart3dmap.v1.DataResourceType type = 4;
  void clear_type();
  ::smart3dmap::v1::DataResourceType type() const;
  void set_type(::smart3dmap::v1::DataResourceType value);
  private:
  ::smart3dmap::v1::DataResourceType _internal_type() const;
  void _internal_set_type(::smart3dmap::v1::DataResourceType value);
  public:

  // @@protoc_insertion_point(class_scope:smart3dmap.v1.Map)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr name_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr crs_code_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr qgs_project_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr crs_wkt_;
  ::smart3dmap::v1::Rect2D* bound_box_;
  PROTOBUF_NAMESPACE_ID::Timestamp* created_at_;
  PROTOBUF_NAMESPACE_ID::Timestamp* updated_at_;
  ::PROTOBUF_NAMESPACE_ID::int32 db_id_;
  ::PROTOBUF_NAMESPACE_ID::int32 id_;
  int type_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_data_5fengine_2fdata_5fengine_2eproto;
};
// -------------------------------------------------------------------

class LIBS3DMGRPC_API ListMapsRequest PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:smart3dmap.v1.ListMapsRequest) */ {
 public:
  inline ListMapsRequest() : ListMapsRequest(nullptr) {}
  virtual ~ListMapsRequest();
  explicit constexpr ListMapsRequest(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  ListMapsRequest(const ListMapsRequest& from);
  ListMapsRequest(ListMapsRequest&& from) noexcept
    : ListMapsRequest() {
    *this = ::std::move(from);
  }

  inline ListMapsRequest& operator=(const ListMapsRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline ListMapsRequest& operator=(ListMapsRequest&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const ListMapsRequest& default_instance() {
    return *internal_default_instance();
  }
  static inline const ListMapsRequest* internal_default_instance() {
    return reinterpret_cast<const ListMapsRequest*>(
               &_ListMapsRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    58;

  friend void swap(ListMapsRequest& a, ListMapsRequest& b) {
    a.Swap(&b);
  }
  inline void Swap(ListMapsRequest* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(ListMapsRequest* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline ListMapsRequest* New() const final {
    return CreateMaybeMessage<ListMapsRequest>(nullptr);
  }

  ListMapsRequest* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<ListMapsRequest>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const ListMapsRequest& from);
  void MergeFrom(const ListMapsRequest& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(ListMapsRequest* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "smart3dmap.v1.ListMapsRequest";
  }
  protected:
  explicit ListMapsRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    return ::descriptor_table_data_5fengine_2fdata_5fengine_2eproto_metadata_getter(kIndexInFileMessages);
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kPaginationFieldNumber = 1,
    kDbIdFieldNumber = 2,
    kTypeFieldNumber = 3,
  };
  // .smart3dmap.v1.Pagination pagination = 1;
  bool has_pagination() const;
  private:
  bool _internal_has_pagination() const;
  public:
  void clear_pagination();
  const ::smart3dmap::v1::Pagination& pagination() const;
  ::smart3dmap::v1::Pagination* release_pagination();
  ::smart3dmap::v1::Pagination* mutable_pagination();
  void set_allocated_pagination(::smart3dmap::v1::Pagination* pagination);
  private:
  const ::smart3dmap::v1::Pagination& _internal_pagination() const;
  ::smart3dmap::v1::Pagination* _internal_mutable_pagination();
  public:
  void unsafe_arena_set_allocated_pagination(
      ::smart3dmap::v1::Pagination* pagination);
  ::smart3dmap::v1::Pagination* unsafe_arena_release_pagination();

  // int32 db_id = 2;
  void clear_db_id();
  ::PROTOBUF_NAMESPACE_ID::int32 db_id() const;
  void set_db_id(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_db_id() const;
  void _internal_set_db_id(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // .smart3dmap.v1.DataResourceType type = 3;
  void clear_type();
  ::smart3dmap::v1::DataResourceType type() const;
  void set_type(::smart3dmap::v1::DataResourceType value);
  private:
  ::smart3dmap::v1::DataResourceType _internal_type() const;
  void _internal_set_type(::smart3dmap::v1::DataResourceType value);
  public:

  // @@protoc_insertion_point(class_scope:smart3dmap.v1.ListMapsRequest)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::smart3dmap::v1::Pagination* pagination_;
  ::PROTOBUF_NAMESPACE_ID::int32 db_id_;
  int type_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_data_5fengine_2fdata_5fengine_2eproto;
};
// -------------------------------------------------------------------

class LIBS3DMGRPC_API ListMapsResponse PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:smart3dmap.v1.ListMapsResponse) */ {
 public:
  inline ListMapsResponse() : ListMapsResponse(nullptr) {}
  virtual ~ListMapsResponse();
  explicit constexpr ListMapsResponse(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  ListMapsResponse(const ListMapsResponse& from);
  ListMapsResponse(ListMapsResponse&& from) noexcept
    : ListMapsResponse() {
    *this = ::std::move(from);
  }

  inline ListMapsResponse& operator=(const ListMapsResponse& from) {
    CopyFrom(from);
    return *this;
  }
  inline ListMapsResponse& operator=(ListMapsResponse&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const ListMapsResponse& default_instance() {
    return *internal_default_instance();
  }
  static inline const ListMapsResponse* internal_default_instance() {
    return reinterpret_cast<const ListMapsResponse*>(
               &_ListMapsResponse_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    59;

  friend void swap(ListMapsResponse& a, ListMapsResponse& b) {
    a.Swap(&b);
  }
  inline void Swap(ListMapsResponse* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(ListMapsResponse* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline ListMapsResponse* New() const final {
    return CreateMaybeMessage<ListMapsResponse>(nullptr);
  }

  ListMapsResponse* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<ListMapsResponse>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const ListMapsResponse& from);
  void MergeFrom(const ListMapsResponse& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(ListMapsResponse* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "smart3dmap.v1.ListMapsResponse";
  }
  protected:
  explicit ListMapsResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    return ::descriptor_table_data_5fengine_2fdata_5fengine_2eproto_metadata_getter(kIndexInFileMessages);
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kMapsFieldNumber = 2,
    kTotalCountFieldNumber = 1,
  };
  // repeated .smart3dmap.v1.Map maps = 2;
  int maps_size() const;
  private:
  int _internal_maps_size() const;
  public:
  void clear_maps();
  ::smart3dmap::v1::Map* mutable_maps(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::smart3dmap::v1::Map >*
      mutable_maps();
  private:
  const ::smart3dmap::v1::Map& _internal_maps(int index) const;
  ::smart3dmap::v1::Map* _internal_add_maps();
  public:
  const ::smart3dmap::v1::Map& maps(int index) const;
  ::smart3dmap::v1::Map* add_maps();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::smart3dmap::v1::Map >&
      maps() const;

  // int32 total_count = 1;
  void clear_total_count();
  ::PROTOBUF_NAMESPACE_ID::int32 total_count() const;
  void set_total_count(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_total_count() const;
  void _internal_set_total_count(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // @@protoc_insertion_point(class_scope:smart3dmap.v1.ListMapsResponse)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::smart3dmap::v1::Map > maps_;
  ::PROTOBUF_NAMESPACE_ID::int32 total_count_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_data_5fengine_2fdata_5fengine_2eproto;
};
// -------------------------------------------------------------------

class LIBS3DMGRPC_API GetMapRequest PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:smart3dmap.v1.GetMapRequest) */ {
 public:
  inline GetMapRequest() : GetMapRequest(nullptr) {}
  virtual ~GetMapRequest();
  explicit constexpr GetMapRequest(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  GetMapRequest(const GetMapRequest& from);
  GetMapRequest(GetMapRequest&& from) noexcept
    : GetMapRequest() {
    *this = ::std::move(from);
  }

  inline GetMapRequest& operator=(const GetMapRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline GetMapRequest& operator=(GetMapRequest&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const GetMapRequest& default_instance() {
    return *internal_default_instance();
  }
  static inline const GetMapRequest* internal_default_instance() {
    return reinterpret_cast<const GetMapRequest*>(
               &_GetMapRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    60;

  friend void swap(GetMapRequest& a, GetMapRequest& b) {
    a.Swap(&b);
  }
  inline void Swap(GetMapRequest* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(GetMapRequest* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline GetMapRequest* New() const final {
    return CreateMaybeMessage<GetMapRequest>(nullptr);
  }

  GetMapRequest* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<GetMapRequest>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const GetMapRequest& from);
  void MergeFrom(const GetMapRequest& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(GetMapRequest* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "smart3dmap.v1.GetMapRequest";
  }
  protected:
  explicit GetMapRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    return ::descriptor_table_data_5fengine_2fdata_5fengine_2eproto_metadata_getter(kIndexInFileMessages);
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kDbIdFieldNumber = 1,
    kMapIdFieldNumber = 2,
    kIncludingQgsProjectFieldNumber = 3,
  };
  // int32 db_id = 1;
  void clear_db_id();
  ::PROTOBUF_NAMESPACE_ID::int32 db_id() const;
  void set_db_id(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_db_id() const;
  void _internal_set_db_id(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // int32 map_id = 2;
  void clear_map_id();
  ::PROTOBUF_NAMESPACE_ID::int32 map_id() const;
  void set_map_id(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_map_id() const;
  void _internal_set_map_id(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // bool including_qgs_project = 3;
  void clear_including_qgs_project();
  bool including_qgs_project() const;
  void set_including_qgs_project(bool value);
  private:
  bool _internal_including_qgs_project() const;
  void _internal_set_including_qgs_project(bool value);
  public:

  // @@protoc_insertion_point(class_scope:smart3dmap.v1.GetMapRequest)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::int32 db_id_;
  ::PROTOBUF_NAMESPACE_ID::int32 map_id_;
  bool including_qgs_project_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_data_5fengine_2fdata_5fengine_2eproto;
};
// -------------------------------------------------------------------

class LIBS3DMGRPC_API ListLayersOfMapRequest PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:smart3dmap.v1.ListLayersOfMapRequest) */ {
 public:
  inline ListLayersOfMapRequest() : ListLayersOfMapRequest(nullptr) {}
  virtual ~ListLayersOfMapRequest();
  explicit constexpr ListLayersOfMapRequest(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  ListLayersOfMapRequest(const ListLayersOfMapRequest& from);
  ListLayersOfMapRequest(ListLayersOfMapRequest&& from) noexcept
    : ListLayersOfMapRequest() {
    *this = ::std::move(from);
  }

  inline ListLayersOfMapRequest& operator=(const ListLayersOfMapRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline ListLayersOfMapRequest& operator=(ListLayersOfMapRequest&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const ListLayersOfMapRequest& default_instance() {
    return *internal_default_instance();
  }
  static inline const ListLayersOfMapRequest* internal_default_instance() {
    return reinterpret_cast<const ListLayersOfMapRequest*>(
               &_ListLayersOfMapRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    61;

  friend void swap(ListLayersOfMapRequest& a, ListLayersOfMapRequest& b) {
    a.Swap(&b);
  }
  inline void Swap(ListLayersOfMapRequest* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(ListLayersOfMapRequest* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline ListLayersOfMapRequest* New() const final {
    return CreateMaybeMessage<ListLayersOfMapRequest>(nullptr);
  }

  ListLayersOfMapRequest* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<ListLayersOfMapRequest>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const ListLayersOfMapRequest& from);
  void MergeFrom(const ListLayersOfMapRequest& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(ListLayersOfMapRequest* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "smart3dmap.v1.ListLayersOfMapRequest";
  }
  protected:
  explicit ListLayersOfMapRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    return ::descriptor_table_data_5fengine_2fdata_5fengine_2eproto_metadata_getter(kIndexInFileMessages);
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kDbIdFieldNumber = 1,
    kMapIdFieldNumber = 2,
    kIncludingSldFieldNumber = 3,
  };
  // int32 db_id = 1;
  void clear_db_id();
  ::PROTOBUF_NAMESPACE_ID::int32 db_id() const;
  void set_db_id(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_db_id() const;
  void _internal_set_db_id(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // int32 map_id = 2;
  void clear_map_id();
  ::PROTOBUF_NAMESPACE_ID::int32 map_id() const;
  void set_map_id(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_map_id() const;
  void _internal_set_map_id(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // bool including_sld = 3;
  void clear_including_sld();
  bool including_sld() const;
  void set_including_sld(bool value);
  private:
  bool _internal_including_sld() const;
  void _internal_set_including_sld(bool value);
  public:

  // @@protoc_insertion_point(class_scope:smart3dmap.v1.ListLayersOfMapRequest)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::int32 db_id_;
  ::PROTOBUF_NAMESPACE_ID::int32 map_id_;
  bool including_sld_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_data_5fengine_2fdata_5fengine_2eproto;
};
// -------------------------------------------------------------------

class LIBS3DMGRPC_API ListLayersOfMapByPageRequest PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:smart3dmap.v1.ListLayersOfMapByPageRequest) */ {
 public:
  inline ListLayersOfMapByPageRequest() : ListLayersOfMapByPageRequest(nullptr) {}
  virtual ~ListLayersOfMapByPageRequest();
  explicit constexpr ListLayersOfMapByPageRequest(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  ListLayersOfMapByPageRequest(const ListLayersOfMapByPageRequest& from);
  ListLayersOfMapByPageRequest(ListLayersOfMapByPageRequest&& from) noexcept
    : ListLayersOfMapByPageRequest() {
    *this = ::std::move(from);
  }

  inline ListLayersOfMapByPageRequest& operator=(const ListLayersOfMapByPageRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline ListLayersOfMapByPageRequest& operator=(ListLayersOfMapByPageRequest&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const ListLayersOfMapByPageRequest& default_instance() {
    return *internal_default_instance();
  }
  static inline const ListLayersOfMapByPageRequest* internal_default_instance() {
    return reinterpret_cast<const ListLayersOfMapByPageRequest*>(
               &_ListLayersOfMapByPageRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    62;

  friend void swap(ListLayersOfMapByPageRequest& a, ListLayersOfMapByPageRequest& b) {
    a.Swap(&b);
  }
  inline void Swap(ListLayersOfMapByPageRequest* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(ListLayersOfMapByPageRequest* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline ListLayersOfMapByPageRequest* New() const final {
    return CreateMaybeMessage<ListLayersOfMapByPageRequest>(nullptr);
  }

  ListLayersOfMapByPageRequest* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<ListLayersOfMapByPageRequest>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const ListLayersOfMapByPageRequest& from);
  void MergeFrom(const ListLayersOfMapByPageRequest& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(ListLayersOfMapByPageRequest* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "smart3dmap.v1.ListLayersOfMapByPageRequest";
  }
  protected:
  explicit ListLayersOfMapByPageRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    return ::descriptor_table_data_5fengine_2fdata_5fengine_2eproto_metadata_getter(kIndexInFileMessages);
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kPaginationFieldNumber = 1,
    kDbIdFieldNumber = 2,
    kMapIdFieldNumber = 3,
    kIncludingSldFieldNumber = 4,
  };
  // .smart3dmap.v1.Pagination pagination = 1;
  bool has_pagination() const;
  private:
  bool _internal_has_pagination() const;
  public:
  void clear_pagination();
  const ::smart3dmap::v1::Pagination& pagination() const;
  ::smart3dmap::v1::Pagination* release_pagination();
  ::smart3dmap::v1::Pagination* mutable_pagination();
  void set_allocated_pagination(::smart3dmap::v1::Pagination* pagination);
  private:
  const ::smart3dmap::v1::Pagination& _internal_pagination() const;
  ::smart3dmap::v1::Pagination* _internal_mutable_pagination();
  public:
  void unsafe_arena_set_allocated_pagination(
      ::smart3dmap::v1::Pagination* pagination);
  ::smart3dmap::v1::Pagination* unsafe_arena_release_pagination();

  // int32 db_id = 2;
  void clear_db_id();
  ::PROTOBUF_NAMESPACE_ID::int32 db_id() const;
  void set_db_id(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_db_id() const;
  void _internal_set_db_id(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // int32 map_id = 3;
  void clear_map_id();
  ::PROTOBUF_NAMESPACE_ID::int32 map_id() const;
  void set_map_id(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_map_id() const;
  void _internal_set_map_id(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // bool including_sld = 4;
  void clear_including_sld();
  bool including_sld() const;
  void set_including_sld(bool value);
  private:
  bool _internal_including_sld() const;
  void _internal_set_including_sld(bool value);
  public:

  // @@protoc_insertion_point(class_scope:smart3dmap.v1.ListLayersOfMapByPageRequest)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::smart3dmap::v1::Pagination* pagination_;
  ::PROTOBUF_NAMESPACE_ID::int32 db_id_;
  ::PROTOBUF_NAMESPACE_ID::int32 map_id_;
  bool including_sld_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_data_5fengine_2fdata_5fengine_2eproto;
};
// -------------------------------------------------------------------

class LIBS3DMGRPC_API ListLayersOfMapByPageResponse PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:smart3dmap.v1.ListLayersOfMapByPageResponse) */ {
 public:
  inline ListLayersOfMapByPageResponse() : ListLayersOfMapByPageResponse(nullptr) {}
  virtual ~ListLayersOfMapByPageResponse();
  explicit constexpr ListLayersOfMapByPageResponse(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  ListLayersOfMapByPageResponse(const ListLayersOfMapByPageResponse& from);
  ListLayersOfMapByPageResponse(ListLayersOfMapByPageResponse&& from) noexcept
    : ListLayersOfMapByPageResponse() {
    *this = ::std::move(from);
  }

  inline ListLayersOfMapByPageResponse& operator=(const ListLayersOfMapByPageResponse& from) {
    CopyFrom(from);
    return *this;
  }
  inline ListLayersOfMapByPageResponse& operator=(ListLayersOfMapByPageResponse&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const ListLayersOfMapByPageResponse& default_instance() {
    return *internal_default_instance();
  }
  static inline const ListLayersOfMapByPageResponse* internal_default_instance() {
    return reinterpret_cast<const ListLayersOfMapByPageResponse*>(
               &_ListLayersOfMapByPageResponse_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    63;

  friend void swap(ListLayersOfMapByPageResponse& a, ListLayersOfMapByPageResponse& b) {
    a.Swap(&b);
  }
  inline void Swap(ListLayersOfMapByPageResponse* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(ListLayersOfMapByPageResponse* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline ListLayersOfMapByPageResponse* New() const final {
    return CreateMaybeMessage<ListLayersOfMapByPageResponse>(nullptr);
  }

  ListLayersOfMapByPageResponse* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<ListLayersOfMapByPageResponse>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const ListLayersOfMapByPageResponse& from);
  void MergeFrom(const ListLayersOfMapByPageResponse& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(ListLayersOfMapByPageResponse* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "smart3dmap.v1.ListLayersOfMapByPageResponse";
  }
  protected:
  explicit ListLayersOfMapByPageResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    return ::descriptor_table_data_5fengine_2fdata_5fengine_2eproto_metadata_getter(kIndexInFileMessages);
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kLayersFieldNumber = 2,
    kTotalCountFieldNumber = 1,
  };
  // repeated .smart3dmap.v1.Layer layers = 2;
  int layers_size() const;
  private:
  int _internal_layers_size() const;
  public:
  void clear_layers();
  ::smart3dmap::v1::Layer* mutable_layers(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::smart3dmap::v1::Layer >*
      mutable_layers();
  private:
  const ::smart3dmap::v1::Layer& _internal_layers(int index) const;
  ::smart3dmap::v1::Layer* _internal_add_layers();
  public:
  const ::smart3dmap::v1::Layer& layers(int index) const;
  ::smart3dmap::v1::Layer* add_layers();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::smart3dmap::v1::Layer >&
      layers() const;

  // int32 total_count = 1;
  void clear_total_count();
  ::PROTOBUF_NAMESPACE_ID::int32 total_count() const;
  void set_total_count(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_total_count() const;
  void _internal_set_total_count(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // @@protoc_insertion_point(class_scope:smart3dmap.v1.ListLayersOfMapByPageResponse)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::smart3dmap::v1::Layer > layers_;
  ::PROTOBUF_NAMESPACE_ID::int32 total_count_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_data_5fengine_2fdata_5fengine_2eproto;
};
// -------------------------------------------------------------------

class LIBS3DMGRPC_API GetRasterLayerDataRequest PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:smart3dmap.v1.GetRasterLayerDataRequest) */ {
 public:
  inline GetRasterLayerDataRequest() : GetRasterLayerDataRequest(nullptr) {}
  virtual ~GetRasterLayerDataRequest();
  explicit constexpr GetRasterLayerDataRequest(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  GetRasterLayerDataRequest(const GetRasterLayerDataRequest& from);
  GetRasterLayerDataRequest(GetRasterLayerDataRequest&& from) noexcept
    : GetRasterLayerDataRequest() {
    *this = ::std::move(from);
  }

  inline GetRasterLayerDataRequest& operator=(const GetRasterLayerDataRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline GetRasterLayerDataRequest& operator=(GetRasterLayerDataRequest&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const GetRasterLayerDataRequest& default_instance() {
    return *internal_default_instance();
  }
  static inline const GetRasterLayerDataRequest* internal_default_instance() {
    return reinterpret_cast<const GetRasterLayerDataRequest*>(
               &_GetRasterLayerDataRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    64;

  friend void swap(GetRasterLayerDataRequest& a, GetRasterLayerDataRequest& b) {
    a.Swap(&b);
  }
  inline void Swap(GetRasterLayerDataRequest* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(GetRasterLayerDataRequest* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline GetRasterLayerDataRequest* New() const final {
    return CreateMaybeMessage<GetRasterLayerDataRequest>(nullptr);
  }

  GetRasterLayerDataRequest* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<GetRasterLayerDataRequest>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const GetRasterLayerDataRequest& from);
  void MergeFrom(const GetRasterLayerDataRequest& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(GetRasterLayerDataRequest* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "smart3dmap.v1.GetRasterLayerDataRequest";
  }
  protected:
  explicit GetRasterLayerDataRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    return ::descriptor_table_data_5fengine_2fdata_5fengine_2eproto_metadata_getter(kIndexInFileMessages);
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kDbIdFieldNumber = 1,
    kLayerIdFieldNumber = 2,
  };
  // int32 db_id = 1;
  void clear_db_id();
  ::PROTOBUF_NAMESPACE_ID::int32 db_id() const;
  void set_db_id(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_db_id() const;
  void _internal_set_db_id(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // int32 layer_id = 2;
  void clear_layer_id();
  ::PROTOBUF_NAMESPACE_ID::int32 layer_id() const;
  void set_layer_id(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_layer_id() const;
  void _internal_set_layer_id(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // @@protoc_insertion_point(class_scope:smart3dmap.v1.GetRasterLayerDataRequest)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::int32 db_id_;
  ::PROTOBUF_NAMESPACE_ID::int32 layer_id_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_data_5fengine_2fdata_5fengine_2eproto;
};
// -------------------------------------------------------------------

class LIBS3DMGRPC_API RasterLayerData PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:smart3dmap.v1.RasterLayerData) */ {
 public:
  inline RasterLayerData() : RasterLayerData(nullptr) {}
  virtual ~RasterLayerData();
  explicit constexpr RasterLayerData(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  RasterLayerData(const RasterLayerData& from);
  RasterLayerData(RasterLayerData&& from) noexcept
    : RasterLayerData() {
    *this = ::std::move(from);
  }

  inline RasterLayerData& operator=(const RasterLayerData& from) {
    CopyFrom(from);
    return *this;
  }
  inline RasterLayerData& operator=(RasterLayerData&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const RasterLayerData& default_instance() {
    return *internal_default_instance();
  }
  static inline const RasterLayerData* internal_default_instance() {
    return reinterpret_cast<const RasterLayerData*>(
               &_RasterLayerData_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    65;

  friend void swap(RasterLayerData& a, RasterLayerData& b) {
    a.Swap(&b);
  }
  inline void Swap(RasterLayerData* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(RasterLayerData* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline RasterLayerData* New() const final {
    return CreateMaybeMessage<RasterLayerData>(nullptr);
  }

  RasterLayerData* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<RasterLayerData>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const RasterLayerData& from);
  void MergeFrom(const RasterLayerData& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(RasterLayerData* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "smart3dmap.v1.RasterLayerData";
  }
  protected:
  explicit RasterLayerData(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    return ::descriptor_table_data_5fengine_2fdata_5fengine_2eproto_metadata_getter(kIndexInFileMessages);
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kFileNameFieldNumber = 6,
    kFileContentFieldNumber = 7,
    kDbIdFieldNumber = 1,
    kMapIdFieldNumber = 2,
    kLayerIdFieldNumber = 3,
    kLayerOrderFieldNumber = 4,
    kStepXFieldNumber = 8,
    kStepYFieldNumber = 9,
    kRotationCoefXFieldNumber = 10,
    kRotationCoefYFieldNumber = 11,
    kTopLeftXFieldNumber = 12,
    kTopLeftYFieldNumber = 13,
    kTypeFieldNumber = 5,
  };
  // string file_name = 6;
  void clear_file_name();
  const std::string& file_name() const;
  void set_file_name(const std::string& value);
  void set_file_name(std::string&& value);
  void set_file_name(const char* value);
  void set_file_name(const char* value, size_t size);
  std::string* mutable_file_name();
  std::string* release_file_name();
  void set_allocated_file_name(std::string* file_name);
  private:
  const std::string& _internal_file_name() const;
  void _internal_set_file_name(const std::string& value);
  std::string* _internal_mutable_file_name();
  public:

  // bytes file_content = 7;
  void clear_file_content();
  const std::string& file_content() const;
  void set_file_content(const std::string& value);
  void set_file_content(std::string&& value);
  void set_file_content(const char* value);
  void set_file_content(const void* value, size_t size);
  std::string* mutable_file_content();
  std::string* release_file_content();
  void set_allocated_file_content(std::string* file_content);
  private:
  const std::string& _internal_file_content() const;
  void _internal_set_file_content(const std::string& value);
  std::string* _internal_mutable_file_content();
  public:

  // int32 db_id = 1;
  void clear_db_id();
  ::PROTOBUF_NAMESPACE_ID::int32 db_id() const;
  void set_db_id(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_db_id() const;
  void _internal_set_db_id(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // int32 map_id = 2;
  void clear_map_id();
  ::PROTOBUF_NAMESPACE_ID::int32 map_id() const;
  void set_map_id(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_map_id() const;
  void _internal_set_map_id(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // int32 layer_id = 3;
  void clear_layer_id();
  ::PROTOBUF_NAMESPACE_ID::int32 layer_id() const;
  void set_layer_id(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_layer_id() const;
  void _internal_set_layer_id(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // int32 layer_order = 4;
  void clear_layer_order();
  ::PROTOBUF_NAMESPACE_ID::int32 layer_order() const;
  void set_layer_order(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_layer_order() const;
  void _internal_set_layer_order(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // double step_x = 8;
  void clear_step_x();
  double step_x() const;
  void set_step_x(double value);
  private:
  double _internal_step_x() const;
  void _internal_set_step_x(double value);
  public:

  // double step_y = 9;
  void clear_step_y();
  double step_y() const;
  void set_step_y(double value);
  private:
  double _internal_step_y() const;
  void _internal_set_step_y(double value);
  public:

  // double rotation_coef_x = 10;
  void clear_rotation_coef_x();
  double rotation_coef_x() const;
  void set_rotation_coef_x(double value);
  private:
  double _internal_rotation_coef_x() const;
  void _internal_set_rotation_coef_x(double value);
  public:

  // double rotation_coef_y = 11;
  void clear_rotation_coef_y();
  double rotation_coef_y() const;
  void set_rotation_coef_y(double value);
  private:
  double _internal_rotation_coef_y() const;
  void _internal_set_rotation_coef_y(double value);
  public:

  // double top_left_x = 12;
  void clear_top_left_x();
  double top_left_x() const;
  void set_top_left_x(double value);
  private:
  double _internal_top_left_x() const;
  void _internal_set_top_left_x(double value);
  public:

  // double top_left_y = 13;
  void clear_top_left_y();
  double top_left_y() const;
  void set_top_left_y(double value);
  private:
  double _internal_top_left_y() const;
  void _internal_set_top_left_y(double value);
  public:

  // .smart3dmap.v1.Layer.Type type = 5;
  void clear_type();
  ::smart3dmap::v1::Layer_Type type() const;
  void set_type(::smart3dmap::v1::Layer_Type value);
  private:
  ::smart3dmap::v1::Layer_Type _internal_type() const;
  void _internal_set_type(::smart3dmap::v1::Layer_Type value);
  public:

  // @@protoc_insertion_point(class_scope:smart3dmap.v1.RasterLayerData)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr file_name_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr file_content_;
  ::PROTOBUF_NAMESPACE_ID::int32 db_id_;
  ::PROTOBUF_NAMESPACE_ID::int32 map_id_;
  ::PROTOBUF_NAMESPACE_ID::int32 layer_id_;
  ::PROTOBUF_NAMESPACE_ID::int32 layer_order_;
  double step_x_;
  double step_y_;
  double rotation_coef_x_;
  double rotation_coef_y_;
  double top_left_x_;
  double top_left_y_;
  int type_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_data_5fengine_2fdata_5fengine_2eproto;
};
// -------------------------------------------------------------------

class LIBS3DMGRPC_API DeleteMapRequest PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:smart3dmap.v1.DeleteMapRequest) */ {
 public:
  inline DeleteMapRequest() : DeleteMapRequest(nullptr) {}
  virtual ~DeleteMapRequest();
  explicit constexpr DeleteMapRequest(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  DeleteMapRequest(const DeleteMapRequest& from);
  DeleteMapRequest(DeleteMapRequest&& from) noexcept
    : DeleteMapRequest() {
    *this = ::std::move(from);
  }

  inline DeleteMapRequest& operator=(const DeleteMapRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline DeleteMapRequest& operator=(DeleteMapRequest&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const DeleteMapRequest& default_instance() {
    return *internal_default_instance();
  }
  static inline const DeleteMapRequest* internal_default_instance() {
    return reinterpret_cast<const DeleteMapRequest*>(
               &_DeleteMapRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    66;

  friend void swap(DeleteMapRequest& a, DeleteMapRequest& b) {
    a.Swap(&b);
  }
  inline void Swap(DeleteMapRequest* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(DeleteMapRequest* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline DeleteMapRequest* New() const final {
    return CreateMaybeMessage<DeleteMapRequest>(nullptr);
  }

  DeleteMapRequest* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<DeleteMapRequest>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const DeleteMapRequest& from);
  void MergeFrom(const DeleteMapRequest& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(DeleteMapRequest* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "smart3dmap.v1.DeleteMapRequest";
  }
  protected:
  explicit DeleteMapRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    return ::descriptor_table_data_5fengine_2fdata_5fengine_2eproto_metadata_getter(kIndexInFileMessages);
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kDbIdFieldNumber = 1,
    kMapIdFieldNumber = 2,
  };
  // int32 db_id = 1;
  void clear_db_id();
  ::PROTOBUF_NAMESPACE_ID::int32 db_id() const;
  void set_db_id(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_db_id() const;
  void _internal_set_db_id(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // int32 map_id = 2;
  void clear_map_id();
  ::PROTOBUF_NAMESPACE_ID::int32 map_id() const;
  void set_map_id(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_map_id() const;
  void _internal_set_map_id(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // @@protoc_insertion_point(class_scope:smart3dmap.v1.DeleteMapRequest)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::int32 db_id_;
  ::PROTOBUF_NAMESPACE_ID::int32 map_id_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_data_5fengine_2fdata_5fengine_2eproto;
};
// -------------------------------------------------------------------

class LIBS3DMGRPC_API DeleteMapResponse PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:smart3dmap.v1.DeleteMapResponse) */ {
 public:
  inline DeleteMapResponse() : DeleteMapResponse(nullptr) {}
  virtual ~DeleteMapResponse();
  explicit constexpr DeleteMapResponse(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  DeleteMapResponse(const DeleteMapResponse& from);
  DeleteMapResponse(DeleteMapResponse&& from) noexcept
    : DeleteMapResponse() {
    *this = ::std::move(from);
  }

  inline DeleteMapResponse& operator=(const DeleteMapResponse& from) {
    CopyFrom(from);
    return *this;
  }
  inline DeleteMapResponse& operator=(DeleteMapResponse&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const DeleteMapResponse& default_instance() {
    return *internal_default_instance();
  }
  static inline const DeleteMapResponse* internal_default_instance() {
    return reinterpret_cast<const DeleteMapResponse*>(
               &_DeleteMapResponse_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    67;

  friend void swap(DeleteMapResponse& a, DeleteMapResponse& b) {
    a.Swap(&b);
  }
  inline void Swap(DeleteMapResponse* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(DeleteMapResponse* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline DeleteMapResponse* New() const final {
    return CreateMaybeMessage<DeleteMapResponse>(nullptr);
  }

  DeleteMapResponse* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<DeleteMapResponse>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const DeleteMapResponse& from);
  void MergeFrom(const DeleteMapResponse& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(DeleteMapResponse* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "smart3dmap.v1.DeleteMapResponse";
  }
  protected:
  explicit DeleteMapResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    return ::descriptor_table_data_5fengine_2fdata_5fengine_2eproto_metadata_getter(kIndexInFileMessages);
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kErrorFieldNumber = 2,
    kStatusFieldNumber = 1,
  };
  // string error = 2;
  void clear_error();
  const std::string& error() const;
  void set_error(const std::string& value);
  void set_error(std::string&& value);
  void set_error(const char* value);
  void set_error(const char* value, size_t size);
  std::string* mutable_error();
  std::string* release_error();
  void set_allocated_error(std::string* error);
  private:
  const std::string& _internal_error() const;
  void _internal_set_error(const std::string& value);
  std::string* _internal_mutable_error();
  public:

  // bool status = 1;
  void clear_status();
  bool status() const;
  void set_status(bool value);
  private:
  bool _internal_status() const;
  void _internal_set_status(bool value);
  public:

  // @@protoc_insertion_point(class_scope:smart3dmap.v1.DeleteMapResponse)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr error_;
  bool status_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_data_5fengine_2fdata_5fengine_2eproto;
};
// -------------------------------------------------------------------

class LIBS3DMGRPC_API ListDrillsByPageRequest PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:smart3dmap.v1.ListDrillsByPageRequest) */ {
 public:
  inline ListDrillsByPageRequest() : ListDrillsByPageRequest(nullptr) {}
  virtual ~ListDrillsByPageRequest();
  explicit constexpr ListDrillsByPageRequest(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  ListDrillsByPageRequest(const ListDrillsByPageRequest& from);
  ListDrillsByPageRequest(ListDrillsByPageRequest&& from) noexcept
    : ListDrillsByPageRequest() {
    *this = ::std::move(from);
  }

  inline ListDrillsByPageRequest& operator=(const ListDrillsByPageRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline ListDrillsByPageRequest& operator=(ListDrillsByPageRequest&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const ListDrillsByPageRequest& default_instance() {
    return *internal_default_instance();
  }
  static inline const ListDrillsByPageRequest* internal_default_instance() {
    return reinterpret_cast<const ListDrillsByPageRequest*>(
               &_ListDrillsByPageRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    68;

  friend void swap(ListDrillsByPageRequest& a, ListDrillsByPageRequest& b) {
    a.Swap(&b);
  }
  inline void Swap(ListDrillsByPageRequest* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(ListDrillsByPageRequest* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline ListDrillsByPageRequest* New() const final {
    return CreateMaybeMessage<ListDrillsByPageRequest>(nullptr);
  }

  ListDrillsByPageRequest* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<ListDrillsByPageRequest>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const ListDrillsByPageRequest& from);
  void MergeFrom(const ListDrillsByPageRequest& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(ListDrillsByPageRequest* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "smart3dmap.v1.ListDrillsByPageRequest";
  }
  protected:
  explicit ListDrillsByPageRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    return ::descriptor_table_data_5fengine_2fdata_5fengine_2eproto_metadata_getter(kIndexInFileMessages);
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kPaginationFieldNumber = 1,
    kDbIdFieldNumber = 2,
    kGeoSurveyProjectIdFieldNumber = 3,
  };
  // .smart3dmap.v1.Pagination pagination = 1;
  bool has_pagination() const;
  private:
  bool _internal_has_pagination() const;
  public:
  void clear_pagination();
  const ::smart3dmap::v1::Pagination& pagination() const;
  ::smart3dmap::v1::Pagination* release_pagination();
  ::smart3dmap::v1::Pagination* mutable_pagination();
  void set_allocated_pagination(::smart3dmap::v1::Pagination* pagination);
  private:
  const ::smart3dmap::v1::Pagination& _internal_pagination() const;
  ::smart3dmap::v1::Pagination* _internal_mutable_pagination();
  public:
  void unsafe_arena_set_allocated_pagination(
      ::smart3dmap::v1::Pagination* pagination);
  ::smart3dmap::v1::Pagination* unsafe_arena_release_pagination();

  // int32 db_id = 2;
  void clear_db_id();
  ::PROTOBUF_NAMESPACE_ID::int32 db_id() const;
  void set_db_id(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_db_id() const;
  void _internal_set_db_id(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // int32 geo_survey_project_id = 3;
  void clear_geo_survey_project_id();
  ::PROTOBUF_NAMESPACE_ID::int32 geo_survey_project_id() const;
  void set_geo_survey_project_id(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_geo_survey_project_id() const;
  void _internal_set_geo_survey_project_id(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // @@protoc_insertion_point(class_scope:smart3dmap.v1.ListDrillsByPageRequest)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::smart3dmap::v1::Pagination* pagination_;
  ::PROTOBUF_NAMESPACE_ID::int32 db_id_;
  ::PROTOBUF_NAMESPACE_ID::int32 geo_survey_project_id_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_data_5fengine_2fdata_5fengine_2eproto;
};
// -------------------------------------------------------------------

class LIBS3DMGRPC_API ListDrillsByPageResponse PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:smart3dmap.v1.ListDrillsByPageResponse) */ {
 public:
  inline ListDrillsByPageResponse() : ListDrillsByPageResponse(nullptr) {}
  virtual ~ListDrillsByPageResponse();
  explicit constexpr ListDrillsByPageResponse(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  ListDrillsByPageResponse(const ListDrillsByPageResponse& from);
  ListDrillsByPageResponse(ListDrillsByPageResponse&& from) noexcept
    : ListDrillsByPageResponse() {
    *this = ::std::move(from);
  }

  inline ListDrillsByPageResponse& operator=(const ListDrillsByPageResponse& from) {
    CopyFrom(from);
    return *this;
  }
  inline ListDrillsByPageResponse& operator=(ListDrillsByPageResponse&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const ListDrillsByPageResponse& default_instance() {
    return *internal_default_instance();
  }
  static inline const ListDrillsByPageResponse* internal_default_instance() {
    return reinterpret_cast<const ListDrillsByPageResponse*>(
               &_ListDrillsByPageResponse_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    69;

  friend void swap(ListDrillsByPageResponse& a, ListDrillsByPageResponse& b) {
    a.Swap(&b);
  }
  inline void Swap(ListDrillsByPageResponse* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(ListDrillsByPageResponse* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline ListDrillsByPageResponse* New() const final {
    return CreateMaybeMessage<ListDrillsByPageResponse>(nullptr);
  }

  ListDrillsByPageResponse* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<ListDrillsByPageResponse>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const ListDrillsByPageResponse& from);
  void MergeFrom(const ListDrillsByPageResponse& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(ListDrillsByPageResponse* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "smart3dmap.v1.ListDrillsByPageResponse";
  }
  protected:
  explicit ListDrillsByPageResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    return ::descriptor_table_data_5fengine_2fdata_5fengine_2eproto_metadata_getter(kIndexInFileMessages);
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kDrillsFieldNumber = 2,
    kTotalCountFieldNumber = 1,
  };
  // repeated .smart3dmap.v1.Drill drills = 2;
  int drills_size() const;
  private:
  int _internal_drills_size() const;
  public:
  void clear_drills();
  ::smart3dmap::v1::Drill* mutable_drills(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::smart3dmap::v1::Drill >*
      mutable_drills();
  private:
  const ::smart3dmap::v1::Drill& _internal_drills(int index) const;
  ::smart3dmap::v1::Drill* _internal_add_drills();
  public:
  const ::smart3dmap::v1::Drill& drills(int index) const;
  ::smart3dmap::v1::Drill* add_drills();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::smart3dmap::v1::Drill >&
      drills() const;

  // int32 total_count = 1;
  void clear_total_count();
  ::PROTOBUF_NAMESPACE_ID::int32 total_count() const;
  void set_total_count(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_total_count() const;
  void _internal_set_total_count(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // @@protoc_insertion_point(class_scope:smart3dmap.v1.ListDrillsByPageResponse)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::smart3dmap::v1::Drill > drills_;
  ::PROTOBUF_NAMESPACE_ID::int32 total_count_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_data_5fengine_2fdata_5fengine_2eproto;
};
// -------------------------------------------------------------------

class LIBS3DMGRPC_API ListDrillsByStreamRequest PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:smart3dmap.v1.ListDrillsByStreamRequest) */ {
 public:
  inline ListDrillsByStreamRequest() : ListDrillsByStreamRequest(nullptr) {}
  virtual ~ListDrillsByStreamRequest();
  explicit constexpr ListDrillsByStreamRequest(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  ListDrillsByStreamRequest(const ListDrillsByStreamRequest& from);
  ListDrillsByStreamRequest(ListDrillsByStreamRequest&& from) noexcept
    : ListDrillsByStreamRequest() {
    *this = ::std::move(from);
  }

  inline ListDrillsByStreamRequest& operator=(const ListDrillsByStreamRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline ListDrillsByStreamRequest& operator=(ListDrillsByStreamRequest&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const ListDrillsByStreamRequest& default_instance() {
    return *internal_default_instance();
  }
  static inline const ListDrillsByStreamRequest* internal_default_instance() {
    return reinterpret_cast<const ListDrillsByStreamRequest*>(
               &_ListDrillsByStreamRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    70;

  friend void swap(ListDrillsByStreamRequest& a, ListDrillsByStreamRequest& b) {
    a.Swap(&b);
  }
  inline void Swap(ListDrillsByStreamRequest* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(ListDrillsByStreamRequest* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline ListDrillsByStreamRequest* New() const final {
    return CreateMaybeMessage<ListDrillsByStreamRequest>(nullptr);
  }

  ListDrillsByStreamRequest* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<ListDrillsByStreamRequest>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const ListDrillsByStreamRequest& from);
  void MergeFrom(const ListDrillsByStreamRequest& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(ListDrillsByStreamRequest* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "smart3dmap.v1.ListDrillsByStreamRequest";
  }
  protected:
  explicit ListDrillsByStreamRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    return ::descriptor_table_data_5fengine_2fdata_5fengine_2eproto_metadata_getter(kIndexInFileMessages);
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kDbIdFieldNumber = 1,
    kGeoSurveyProjectIdFieldNumber = 2,
  };
  // int32 db_id = 1;
  void clear_db_id();
  ::PROTOBUF_NAMESPACE_ID::int32 db_id() const;
  void set_db_id(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_db_id() const;
  void _internal_set_db_id(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // int32 geo_survey_project_id = 2;
  void clear_geo_survey_project_id();
  ::PROTOBUF_NAMESPACE_ID::int32 geo_survey_project_id() const;
  void set_geo_survey_project_id(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_geo_survey_project_id() const;
  void _internal_set_geo_survey_project_id(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // @@protoc_insertion_point(class_scope:smart3dmap.v1.ListDrillsByStreamRequest)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::int32 db_id_;
  ::PROTOBUF_NAMESPACE_ID::int32 geo_survey_project_id_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_data_5fengine_2fdata_5fengine_2eproto;
};
// -------------------------------------------------------------------

class LIBS3DMGRPC_API DrillLog PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:smart3dmap.v1.DrillLog) */ {
 public:
  inline DrillLog() : DrillLog(nullptr) {}
  virtual ~DrillLog();
  explicit constexpr DrillLog(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  DrillLog(const DrillLog& from);
  DrillLog(DrillLog&& from) noexcept
    : DrillLog() {
    *this = ::std::move(from);
  }

  inline DrillLog& operator=(const DrillLog& from) {
    CopyFrom(from);
    return *this;
  }
  inline DrillLog& operator=(DrillLog&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const DrillLog& default_instance() {
    return *internal_default_instance();
  }
  static inline const DrillLog* internal_default_instance() {
    return reinterpret_cast<const DrillLog*>(
               &_DrillLog_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    71;

  friend void swap(DrillLog& a, DrillLog& b) {
    a.Swap(&b);
  }
  inline void Swap(DrillLog* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(DrillLog* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline DrillLog* New() const final {
    return CreateMaybeMessage<DrillLog>(nullptr);
  }

  DrillLog* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<DrillLog>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const DrillLog& from);
  void MergeFrom(const DrillLog& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(DrillLog* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "smart3dmap.v1.DrillLog";
  }
  protected:
  explicit DrillLog(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    return ::descriptor_table_data_5fengine_2fdata_5fengine_2eproto_metadata_getter(kIndexInFileMessages);
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kNameFieldNumber = 2,
    kCreatedAtFieldNumber = 5,
    kIdFieldNumber = 1,
    kDrillIdFieldNumber = 3,
    kDbIdFieldNumber = 4,
    kDrillDbIdFieldNumber = 6,
    kStratVersionIdFieldNumber = 7,
  };
  // string name = 2;
  void clear_name();
  const std::string& name() const;
  void set_name(const std::string& value);
  void set_name(std::string&& value);
  void set_name(const char* value);
  void set_name(const char* value, size_t size);
  std::string* mutable_name();
  std::string* release_name();
  void set_allocated_name(std::string* name);
  private:
  const std::string& _internal_name() const;
  void _internal_set_name(const std::string& value);
  std::string* _internal_mutable_name();
  public:

  // .google.protobuf.Timestamp created_at = 5;
  bool has_created_at() const;
  private:
  bool _internal_has_created_at() const;
  public:
  void clear_created_at();
  const PROTOBUF_NAMESPACE_ID::Timestamp& created_at() const;
  PROTOBUF_NAMESPACE_ID::Timestamp* release_created_at();
  PROTOBUF_NAMESPACE_ID::Timestamp* mutable_created_at();
  void set_allocated_created_at(PROTOBUF_NAMESPACE_ID::Timestamp* created_at);
  private:
  const PROTOBUF_NAMESPACE_ID::Timestamp& _internal_created_at() const;
  PROTOBUF_NAMESPACE_ID::Timestamp* _internal_mutable_created_at();
  public:
  void unsafe_arena_set_allocated_created_at(
      PROTOBUF_NAMESPACE_ID::Timestamp* created_at);
  PROTOBUF_NAMESPACE_ID::Timestamp* unsafe_arena_release_created_at();

  // int32 id = 1;
  void clear_id();
  ::PROTOBUF_NAMESPACE_ID::int32 id() const;
  void set_id(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_id() const;
  void _internal_set_id(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // int32 drill_id = 3;
  void clear_drill_id();
  ::PROTOBUF_NAMESPACE_ID::int32 drill_id() const;
  void set_drill_id(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_drill_id() const;
  void _internal_set_drill_id(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // int32 db_id = 4;
  void clear_db_id();
  ::PROTOBUF_NAMESPACE_ID::int32 db_id() const;
  void set_db_id(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_db_id() const;
  void _internal_set_db_id(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // int32 drill_db_id = 6;
  void clear_drill_db_id();
  ::PROTOBUF_NAMESPACE_ID::int32 drill_db_id() const;
  void set_drill_db_id(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_drill_db_id() const;
  void _internal_set_drill_db_id(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // int32 strat_version_id = 7;
  void clear_strat_version_id();
  ::PROTOBUF_NAMESPACE_ID::int32 strat_version_id() const;
  void set_strat_version_id(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_strat_version_id() const;
  void _internal_set_strat_version_id(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // @@protoc_insertion_point(class_scope:smart3dmap.v1.DrillLog)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr name_;
  PROTOBUF_NAMESPACE_ID::Timestamp* created_at_;
  ::PROTOBUF_NAMESPACE_ID::int32 id_;
  ::PROTOBUF_NAMESPACE_ID::int32 drill_id_;
  ::PROTOBUF_NAMESPACE_ID::int32 db_id_;
  ::PROTOBUF_NAMESPACE_ID::int32 drill_db_id_;
  ::PROTOBUF_NAMESPACE_ID::int32 strat_version_id_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_data_5fengine_2fdata_5fengine_2eproto;
};
// -------------------------------------------------------------------

class LIBS3DMGRPC_API ListDrillLogsRequest PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:smart3dmap.v1.ListDrillLogsRequest) */ {
 public:
  inline ListDrillLogsRequest() : ListDrillLogsRequest(nullptr) {}
  virtual ~ListDrillLogsRequest();
  explicit constexpr ListDrillLogsRequest(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  ListDrillLogsRequest(const ListDrillLogsRequest& from);
  ListDrillLogsRequest(ListDrillLogsRequest&& from) noexcept
    : ListDrillLogsRequest() {
    *this = ::std::move(from);
  }

  inline ListDrillLogsRequest& operator=(const ListDrillLogsRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline ListDrillLogsRequest& operator=(ListDrillLogsRequest&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const ListDrillLogsRequest& default_instance() {
    return *internal_default_instance();
  }
  static inline const ListDrillLogsRequest* internal_default_instance() {
    return reinterpret_cast<const ListDrillLogsRequest*>(
               &_ListDrillLogsRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    72;

  friend void swap(ListDrillLogsRequest& a, ListDrillLogsRequest& b) {
    a.Swap(&b);
  }
  inline void Swap(ListDrillLogsRequest* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(ListDrillLogsRequest* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline ListDrillLogsRequest* New() const final {
    return CreateMaybeMessage<ListDrillLogsRequest>(nullptr);
  }

  ListDrillLogsRequest* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<ListDrillLogsRequest>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const ListDrillLogsRequest& from);
  void MergeFrom(const ListDrillLogsRequest& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(ListDrillLogsRequest* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "smart3dmap.v1.ListDrillLogsRequest";
  }
  protected:
  explicit ListDrillLogsRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    return ::descriptor_table_data_5fengine_2fdata_5fengine_2eproto_metadata_getter(kIndexInFileMessages);
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kPaginationFieldNumber = 1,
    kDbIdFieldNumber = 2,
    kDrillDbIdFieldNumber = 3,
    kDrillIdFieldNumber = 4,
    kStratVersionIdFieldNumber = 5,
  };
  // .smart3dmap.v1.Pagination pagination = 1;
  bool has_pagination() const;
  private:
  bool _internal_has_pagination() const;
  public:
  void clear_pagination();
  const ::smart3dmap::v1::Pagination& pagination() const;
  ::smart3dmap::v1::Pagination* release_pagination();
  ::smart3dmap::v1::Pagination* mutable_pagination();
  void set_allocated_pagination(::smart3dmap::v1::Pagination* pagination);
  private:
  const ::smart3dmap::v1::Pagination& _internal_pagination() const;
  ::smart3dmap::v1::Pagination* _internal_mutable_pagination();
  public:
  void unsafe_arena_set_allocated_pagination(
      ::smart3dmap::v1::Pagination* pagination);
  ::smart3dmap::v1::Pagination* unsafe_arena_release_pagination();

  // int32 db_id = 2;
  void clear_db_id();
  ::PROTOBUF_NAMESPACE_ID::int32 db_id() const;
  void set_db_id(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_db_id() const;
  void _internal_set_db_id(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // int32 drill_db_id = 3;
  void clear_drill_db_id();
  ::PROTOBUF_NAMESPACE_ID::int32 drill_db_id() const;
  void set_drill_db_id(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_drill_db_id() const;
  void _internal_set_drill_db_id(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // int32 drill_id = 4;
  void clear_drill_id();
  ::PROTOBUF_NAMESPACE_ID::int32 drill_id() const;
  void set_drill_id(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_drill_id() const;
  void _internal_set_drill_id(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // int32 strat_version_id = 5;
  void clear_strat_version_id();
  ::PROTOBUF_NAMESPACE_ID::int32 strat_version_id() const;
  void set_strat_version_id(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_strat_version_id() const;
  void _internal_set_strat_version_id(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // @@protoc_insertion_point(class_scope:smart3dmap.v1.ListDrillLogsRequest)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::smart3dmap::v1::Pagination* pagination_;
  ::PROTOBUF_NAMESPACE_ID::int32 db_id_;
  ::PROTOBUF_NAMESPACE_ID::int32 drill_db_id_;
  ::PROTOBUF_NAMESPACE_ID::int32 drill_id_;
  ::PROTOBUF_NAMESPACE_ID::int32 strat_version_id_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_data_5fengine_2fdata_5fengine_2eproto;
};
// -------------------------------------------------------------------

class LIBS3DMGRPC_API ListDrillLogsResponse PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:smart3dmap.v1.ListDrillLogsResponse) */ {
 public:
  inline ListDrillLogsResponse() : ListDrillLogsResponse(nullptr) {}
  virtual ~ListDrillLogsResponse();
  explicit constexpr ListDrillLogsResponse(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  ListDrillLogsResponse(const ListDrillLogsResponse& from);
  ListDrillLogsResponse(ListDrillLogsResponse&& from) noexcept
    : ListDrillLogsResponse() {
    *this = ::std::move(from);
  }

  inline ListDrillLogsResponse& operator=(const ListDrillLogsResponse& from) {
    CopyFrom(from);
    return *this;
  }
  inline ListDrillLogsResponse& operator=(ListDrillLogsResponse&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const ListDrillLogsResponse& default_instance() {
    return *internal_default_instance();
  }
  static inline const ListDrillLogsResponse* internal_default_instance() {
    return reinterpret_cast<const ListDrillLogsResponse*>(
               &_ListDrillLogsResponse_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    73;

  friend void swap(ListDrillLogsResponse& a, ListDrillLogsResponse& b) {
    a.Swap(&b);
  }
  inline void Swap(ListDrillLogsResponse* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(ListDrillLogsResponse* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline ListDrillLogsResponse* New() const final {
    return CreateMaybeMessage<ListDrillLogsResponse>(nullptr);
  }

  ListDrillLogsResponse* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<ListDrillLogsResponse>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const ListDrillLogsResponse& from);
  void MergeFrom(const ListDrillLogsResponse& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(ListDrillLogsResponse* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "smart3dmap.v1.ListDrillLogsResponse";
  }
  protected:
  explicit ListDrillLogsResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    return ::descriptor_table_data_5fengine_2fdata_5fengine_2eproto_metadata_getter(kIndexInFileMessages);
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kLogsFieldNumber = 2,
    kTotalCountFieldNumber = 1,
  };
  // repeated .smart3dmap.v1.DrillLog logs = 2;
  int logs_size() const;
  private:
  int _internal_logs_size() const;
  public:
  void clear_logs();
  ::smart3dmap::v1::DrillLog* mutable_logs(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::smart3dmap::v1::DrillLog >*
      mutable_logs();
  private:
  const ::smart3dmap::v1::DrillLog& _internal_logs(int index) const;
  ::smart3dmap::v1::DrillLog* _internal_add_logs();
  public:
  const ::smart3dmap::v1::DrillLog& logs(int index) const;
  ::smart3dmap::v1::DrillLog* add_logs();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::smart3dmap::v1::DrillLog >&
      logs() const;

  // int32 total_count = 1;
  void clear_total_count();
  ::PROTOBUF_NAMESPACE_ID::int32 total_count() const;
  void set_total_count(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_total_count() const;
  void _internal_set_total_count(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // @@protoc_insertion_point(class_scope:smart3dmap.v1.ListDrillLogsResponse)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::smart3dmap::v1::DrillLog > logs_;
  ::PROTOBUF_NAMESPACE_ID::int32 total_count_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_data_5fengine_2fdata_5fengine_2eproto;
};
// -------------------------------------------------------------------

class LIBS3DMGRPC_API SectionMap PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:smart3dmap.v1.SectionMap) */ {
 public:
  inline SectionMap() : SectionMap(nullptr) {}
  virtual ~SectionMap();
  explicit constexpr SectionMap(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  SectionMap(const SectionMap& from);
  SectionMap(SectionMap&& from) noexcept
    : SectionMap() {
    *this = ::std::move(from);
  }

  inline SectionMap& operator=(const SectionMap& from) {
    CopyFrom(from);
    return *this;
  }
  inline SectionMap& operator=(SectionMap&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const SectionMap& default_instance() {
    return *internal_default_instance();
  }
  static inline const SectionMap* internal_default_instance() {
    return reinterpret_cast<const SectionMap*>(
               &_SectionMap_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    74;

  friend void swap(SectionMap& a, SectionMap& b) {
    a.Swap(&b);
  }
  inline void Swap(SectionMap* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(SectionMap* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline SectionMap* New() const final {
    return CreateMaybeMessage<SectionMap>(nullptr);
  }

  SectionMap* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<SectionMap>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const SectionMap& from);
  void MergeFrom(const SectionMap& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(SectionMap* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "smart3dmap.v1.SectionMap";
  }
  protected:
  explicit SectionMap(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    return ::descriptor_table_data_5fengine_2fdata_5fengine_2eproto_metadata_getter(kIndexInFileMessages);
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kNameFieldNumber = 2,
    kCreatedAtFieldNumber = 4,
    kIdFieldNumber = 1,
    kDbIdFieldNumber = 3,
  };
  // string name = 2;
  void clear_name();
  const std::string& name() const;
  void set_name(const std::string& value);
  void set_name(std::string&& value);
  void set_name(const char* value);
  void set_name(const char* value, size_t size);
  std::string* mutable_name();
  std::string* release_name();
  void set_allocated_name(std::string* name);
  private:
  const std::string& _internal_name() const;
  void _internal_set_name(const std::string& value);
  std::string* _internal_mutable_name();
  public:

  // .google.protobuf.Timestamp created_at = 4;
  bool has_created_at() const;
  private:
  bool _internal_has_created_at() const;
  public:
  void clear_created_at();
  const PROTOBUF_NAMESPACE_ID::Timestamp& created_at() const;
  PROTOBUF_NAMESPACE_ID::Timestamp* release_created_at();
  PROTOBUF_NAMESPACE_ID::Timestamp* mutable_created_at();
  void set_allocated_created_at(PROTOBUF_NAMESPACE_ID::Timestamp* created_at);
  private:
  const PROTOBUF_NAMESPACE_ID::Timestamp& _internal_created_at() const;
  PROTOBUF_NAMESPACE_ID::Timestamp* _internal_mutable_created_at();
  public:
  void unsafe_arena_set_allocated_created_at(
      PROTOBUF_NAMESPACE_ID::Timestamp* created_at);
  PROTOBUF_NAMESPACE_ID::Timestamp* unsafe_arena_release_created_at();

  // int32 id = 1;
  void clear_id();
  ::PROTOBUF_NAMESPACE_ID::int32 id() const;
  void set_id(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_id() const;
  void _internal_set_id(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // int32 db_id = 3;
  void clear_db_id();
  ::PROTOBUF_NAMESPACE_ID::int32 db_id() const;
  void set_db_id(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_db_id() const;
  void _internal_set_db_id(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // @@protoc_insertion_point(class_scope:smart3dmap.v1.SectionMap)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr name_;
  PROTOBUF_NAMESPACE_ID::Timestamp* created_at_;
  ::PROTOBUF_NAMESPACE_ID::int32 id_;
  ::PROTOBUF_NAMESPACE_ID::int32 db_id_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_data_5fengine_2fdata_5fengine_2eproto;
};
// -------------------------------------------------------------------

class LIBS3DMGRPC_API ListSectionMapsRequest PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:smart3dmap.v1.ListSectionMapsRequest) */ {
 public:
  inline ListSectionMapsRequest() : ListSectionMapsRequest(nullptr) {}
  virtual ~ListSectionMapsRequest();
  explicit constexpr ListSectionMapsRequest(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  ListSectionMapsRequest(const ListSectionMapsRequest& from);
  ListSectionMapsRequest(ListSectionMapsRequest&& from) noexcept
    : ListSectionMapsRequest() {
    *this = ::std::move(from);
  }

  inline ListSectionMapsRequest& operator=(const ListSectionMapsRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline ListSectionMapsRequest& operator=(ListSectionMapsRequest&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const ListSectionMapsRequest& default_instance() {
    return *internal_default_instance();
  }
  static inline const ListSectionMapsRequest* internal_default_instance() {
    return reinterpret_cast<const ListSectionMapsRequest*>(
               &_ListSectionMapsRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    75;

  friend void swap(ListSectionMapsRequest& a, ListSectionMapsRequest& b) {
    a.Swap(&b);
  }
  inline void Swap(ListSectionMapsRequest* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(ListSectionMapsRequest* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline ListSectionMapsRequest* New() const final {
    return CreateMaybeMessage<ListSectionMapsRequest>(nullptr);
  }

  ListSectionMapsRequest* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<ListSectionMapsRequest>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const ListSectionMapsRequest& from);
  void MergeFrom(const ListSectionMapsRequest& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(ListSectionMapsRequest* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "smart3dmap.v1.ListSectionMapsRequest";
  }
  protected:
  explicit ListSectionMapsRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    return ::descriptor_table_data_5fengine_2fdata_5fengine_2eproto_metadata_getter(kIndexInFileMessages);
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kPaginationFieldNumber = 1,
    kDbIdFieldNumber = 2,
  };
  // .smart3dmap.v1.Pagination pagination = 1;
  bool has_pagination() const;
  private:
  bool _internal_has_pagination() const;
  public:
  void clear_pagination();
  const ::smart3dmap::v1::Pagination& pagination() const;
  ::smart3dmap::v1::Pagination* release_pagination();
  ::smart3dmap::v1::Pagination* mutable_pagination();
  void set_allocated_pagination(::smart3dmap::v1::Pagination* pagination);
  private:
  const ::smart3dmap::v1::Pagination& _internal_pagination() const;
  ::smart3dmap::v1::Pagination* _internal_mutable_pagination();
  public:
  void unsafe_arena_set_allocated_pagination(
      ::smart3dmap::v1::Pagination* pagination);
  ::smart3dmap::v1::Pagination* unsafe_arena_release_pagination();

  // int32 db_id = 2;
  void clear_db_id();
  ::PROTOBUF_NAMESPACE_ID::int32 db_id() const;
  void set_db_id(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_db_id() const;
  void _internal_set_db_id(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // @@protoc_insertion_point(class_scope:smart3dmap.v1.ListSectionMapsRequest)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::smart3dmap::v1::Pagination* pagination_;
  ::PROTOBUF_NAMESPACE_ID::int32 db_id_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_data_5fengine_2fdata_5fengine_2eproto;
};
// -------------------------------------------------------------------

class LIBS3DMGRPC_API ListSectionMapsResponse PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:smart3dmap.v1.ListSectionMapsResponse) */ {
 public:
  inline ListSectionMapsResponse() : ListSectionMapsResponse(nullptr) {}
  virtual ~ListSectionMapsResponse();
  explicit constexpr ListSectionMapsResponse(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  ListSectionMapsResponse(const ListSectionMapsResponse& from);
  ListSectionMapsResponse(ListSectionMapsResponse&& from) noexcept
    : ListSectionMapsResponse() {
    *this = ::std::move(from);
  }

  inline ListSectionMapsResponse& operator=(const ListSectionMapsResponse& from) {
    CopyFrom(from);
    return *this;
  }
  inline ListSectionMapsResponse& operator=(ListSectionMapsResponse&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const ListSectionMapsResponse& default_instance() {
    return *internal_default_instance();
  }
  static inline const ListSectionMapsResponse* internal_default_instance() {
    return reinterpret_cast<const ListSectionMapsResponse*>(
               &_ListSectionMapsResponse_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    76;

  friend void swap(ListSectionMapsResponse& a, ListSectionMapsResponse& b) {
    a.Swap(&b);
  }
  inline void Swap(ListSectionMapsResponse* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(ListSectionMapsResponse* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline ListSectionMapsResponse* New() const final {
    return CreateMaybeMessage<ListSectionMapsResponse>(nullptr);
  }

  ListSectionMapsResponse* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<ListSectionMapsResponse>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const ListSectionMapsResponse& from);
  void MergeFrom(const ListSectionMapsResponse& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(ListSectionMapsResponse* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "smart3dmap.v1.ListSectionMapsResponse";
  }
  protected:
  explicit ListSectionMapsResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    return ::descriptor_table_data_5fengine_2fdata_5fengine_2eproto_metadata_getter(kIndexInFileMessages);
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kMapsFieldNumber = 2,
    kTotalCountFieldNumber = 1,
  };
  // repeated .smart3dmap.v1.SectionMap maps = 2;
  int maps_size() const;
  private:
  int _internal_maps_size() const;
  public:
  void clear_maps();
  ::smart3dmap::v1::SectionMap* mutable_maps(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::smart3dmap::v1::SectionMap >*
      mutable_maps();
  private:
  const ::smart3dmap::v1::SectionMap& _internal_maps(int index) const;
  ::smart3dmap::v1::SectionMap* _internal_add_maps();
  public:
  const ::smart3dmap::v1::SectionMap& maps(int index) const;
  ::smart3dmap::v1::SectionMap* add_maps();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::smart3dmap::v1::SectionMap >&
      maps() const;

  // int32 total_count = 1;
  void clear_total_count();
  ::PROTOBUF_NAMESPACE_ID::int32 total_count() const;
  void set_total_count(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_total_count() const;
  void _internal_set_total_count(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // @@protoc_insertion_point(class_scope:smart3dmap.v1.ListSectionMapsResponse)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::smart3dmap::v1::SectionMap > maps_;
  ::PROTOBUF_NAMESPACE_ID::int32 total_count_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_data_5fengine_2fdata_5fengine_2eproto;
};
// -------------------------------------------------------------------

class LIBS3DMGRPC_API Model3DStructure PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:smart3dmap.v1.Model3DStructure) */ {
 public:
  inline Model3DStructure() : Model3DStructure(nullptr) {}
  virtual ~Model3DStructure();
  explicit constexpr Model3DStructure(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  Model3DStructure(const Model3DStructure& from);
  Model3DStructure(Model3DStructure&& from) noexcept
    : Model3DStructure() {
    *this = ::std::move(from);
  }

  inline Model3DStructure& operator=(const Model3DStructure& from) {
    CopyFrom(from);
    return *this;
  }
  inline Model3DStructure& operator=(Model3DStructure&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const Model3DStructure& default_instance() {
    return *internal_default_instance();
  }
  static inline const Model3DStructure* internal_default_instance() {
    return reinterpret_cast<const Model3DStructure*>(
               &_Model3DStructure_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    77;

  friend void swap(Model3DStructure& a, Model3DStructure& b) {
    a.Swap(&b);
  }
  inline void Swap(Model3DStructure* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(Model3DStructure* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline Model3DStructure* New() const final {
    return CreateMaybeMessage<Model3DStructure>(nullptr);
  }

  Model3DStructure* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<Model3DStructure>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const Model3DStructure& from);
  void MergeFrom(const Model3DStructure& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Model3DStructure* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "smart3dmap.v1.Model3DStructure";
  }
  protected:
  explicit Model3DStructure(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    return ::descriptor_table_data_5fengine_2fdata_5fengine_2eproto_metadata_getter(kIndexInFileMessages);
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kNameFieldNumber = 2,
    kCreatedAtFieldNumber = 4,
    kIdFieldNumber = 1,
    kDbIdFieldNumber = 3,
  };
  // string name = 2;
  void clear_name();
  const std::string& name() const;
  void set_name(const std::string& value);
  void set_name(std::string&& value);
  void set_name(const char* value);
  void set_name(const char* value, size_t size);
  std::string* mutable_name();
  std::string* release_name();
  void set_allocated_name(std::string* name);
  private:
  const std::string& _internal_name() const;
  void _internal_set_name(const std::string& value);
  std::string* _internal_mutable_name();
  public:

  // .google.protobuf.Timestamp created_at = 4;
  bool has_created_at() const;
  private:
  bool _internal_has_created_at() const;
  public:
  void clear_created_at();
  const PROTOBUF_NAMESPACE_ID::Timestamp& created_at() const;
  PROTOBUF_NAMESPACE_ID::Timestamp* release_created_at();
  PROTOBUF_NAMESPACE_ID::Timestamp* mutable_created_at();
  void set_allocated_created_at(PROTOBUF_NAMESPACE_ID::Timestamp* created_at);
  private:
  const PROTOBUF_NAMESPACE_ID::Timestamp& _internal_created_at() const;
  PROTOBUF_NAMESPACE_ID::Timestamp* _internal_mutable_created_at();
  public:
  void unsafe_arena_set_allocated_created_at(
      PROTOBUF_NAMESPACE_ID::Timestamp* created_at);
  PROTOBUF_NAMESPACE_ID::Timestamp* unsafe_arena_release_created_at();

  // int32 id = 1;
  void clear_id();
  ::PROTOBUF_NAMESPACE_ID::int32 id() const;
  void set_id(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_id() const;
  void _internal_set_id(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // int32 db_id = 3;
  void clear_db_id();
  ::PROTOBUF_NAMESPACE_ID::int32 db_id() const;
  void set_db_id(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_db_id() const;
  void _internal_set_db_id(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // @@protoc_insertion_point(class_scope:smart3dmap.v1.Model3DStructure)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr name_;
  PROTOBUF_NAMESPACE_ID::Timestamp* created_at_;
  ::PROTOBUF_NAMESPACE_ID::int32 id_;
  ::PROTOBUF_NAMESPACE_ID::int32 db_id_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_data_5fengine_2fdata_5fengine_2eproto;
};
// -------------------------------------------------------------------

class LIBS3DMGRPC_API ListStructureModelsRequest PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:smart3dmap.v1.ListStructureModelsRequest) */ {
 public:
  inline ListStructureModelsRequest() : ListStructureModelsRequest(nullptr) {}
  virtual ~ListStructureModelsRequest();
  explicit constexpr ListStructureModelsRequest(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  ListStructureModelsRequest(const ListStructureModelsRequest& from);
  ListStructureModelsRequest(ListStructureModelsRequest&& from) noexcept
    : ListStructureModelsRequest() {
    *this = ::std::move(from);
  }

  inline ListStructureModelsRequest& operator=(const ListStructureModelsRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline ListStructureModelsRequest& operator=(ListStructureModelsRequest&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const ListStructureModelsRequest& default_instance() {
    return *internal_default_instance();
  }
  static inline const ListStructureModelsRequest* internal_default_instance() {
    return reinterpret_cast<const ListStructureModelsRequest*>(
               &_ListStructureModelsRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    78;

  friend void swap(ListStructureModelsRequest& a, ListStructureModelsRequest& b) {
    a.Swap(&b);
  }
  inline void Swap(ListStructureModelsRequest* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(ListStructureModelsRequest* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline ListStructureModelsRequest* New() const final {
    return CreateMaybeMessage<ListStructureModelsRequest>(nullptr);
  }

  ListStructureModelsRequest* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<ListStructureModelsRequest>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const ListStructureModelsRequest& from);
  void MergeFrom(const ListStructureModelsRequest& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(ListStructureModelsRequest* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "smart3dmap.v1.ListStructureModelsRequest";
  }
  protected:
  explicit ListStructureModelsRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    return ::descriptor_table_data_5fengine_2fdata_5fengine_2eproto_metadata_getter(kIndexInFileMessages);
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kPaginationFieldNumber = 1,
    kDbIdFieldNumber = 2,
  };
  // .smart3dmap.v1.Pagination pagination = 1;
  bool has_pagination() const;
  private:
  bool _internal_has_pagination() const;
  public:
  void clear_pagination();
  const ::smart3dmap::v1::Pagination& pagination() const;
  ::smart3dmap::v1::Pagination* release_pagination();
  ::smart3dmap::v1::Pagination* mutable_pagination();
  void set_allocated_pagination(::smart3dmap::v1::Pagination* pagination);
  private:
  const ::smart3dmap::v1::Pagination& _internal_pagination() const;
  ::smart3dmap::v1::Pagination* _internal_mutable_pagination();
  public:
  void unsafe_arena_set_allocated_pagination(
      ::smart3dmap::v1::Pagination* pagination);
  ::smart3dmap::v1::Pagination* unsafe_arena_release_pagination();

  // int32 db_id = 2;
  void clear_db_id();
  ::PROTOBUF_NAMESPACE_ID::int32 db_id() const;
  void set_db_id(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_db_id() const;
  void _internal_set_db_id(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // @@protoc_insertion_point(class_scope:smart3dmap.v1.ListStructureModelsRequest)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::smart3dmap::v1::Pagination* pagination_;
  ::PROTOBUF_NAMESPACE_ID::int32 db_id_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_data_5fengine_2fdata_5fengine_2eproto;
};
// -------------------------------------------------------------------

class LIBS3DMGRPC_API ListStructureModelsResponse PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:smart3dmap.v1.ListStructureModelsResponse) */ {
 public:
  inline ListStructureModelsResponse() : ListStructureModelsResponse(nullptr) {}
  virtual ~ListStructureModelsResponse();
  explicit constexpr ListStructureModelsResponse(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  ListStructureModelsResponse(const ListStructureModelsResponse& from);
  ListStructureModelsResponse(ListStructureModelsResponse&& from) noexcept
    : ListStructureModelsResponse() {
    *this = ::std::move(from);
  }

  inline ListStructureModelsResponse& operator=(const ListStructureModelsResponse& from) {
    CopyFrom(from);
    return *this;
  }
  inline ListStructureModelsResponse& operator=(ListStructureModelsResponse&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const ListStructureModelsResponse& default_instance() {
    return *internal_default_instance();
  }
  static inline const ListStructureModelsResponse* internal_default_instance() {
    return reinterpret_cast<const ListStructureModelsResponse*>(
               &_ListStructureModelsResponse_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    79;

  friend void swap(ListStructureModelsResponse& a, ListStructureModelsResponse& b) {
    a.Swap(&b);
  }
  inline void Swap(ListStructureModelsResponse* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(ListStructureModelsResponse* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline ListStructureModelsResponse* New() const final {
    return CreateMaybeMessage<ListStructureModelsResponse>(nullptr);
  }

  ListStructureModelsResponse* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<ListStructureModelsResponse>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const ListStructureModelsResponse& from);
  void MergeFrom(const ListStructureModelsResponse& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(ListStructureModelsResponse* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "smart3dmap.v1.ListStructureModelsResponse";
  }
  protected:
  explicit ListStructureModelsResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    return ::descriptor_table_data_5fengine_2fdata_5fengine_2eproto_metadata_getter(kIndexInFileMessages);
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kModelsFieldNumber = 2,
    kTotalCountFieldNumber = 1,
  };
  // repeated .smart3dmap.v1.Model3DStructure models = 2;
  int models_size() const;
  private:
  int _internal_models_size() const;
  public:
  void clear_models();
  ::smart3dmap::v1::Model3DStructure* mutable_models(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::smart3dmap::v1::Model3DStructure >*
      mutable_models();
  private:
  const ::smart3dmap::v1::Model3DStructure& _internal_models(int index) const;
  ::smart3dmap::v1::Model3DStructure* _internal_add_models();
  public:
  const ::smart3dmap::v1::Model3DStructure& models(int index) const;
  ::smart3dmap::v1::Model3DStructure* add_models();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::smart3dmap::v1::Model3DStructure >&
      models() const;

  // int32 total_count = 1;
  void clear_total_count();
  ::PROTOBUF_NAMESPACE_ID::int32 total_count() const;
  void set_total_count(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_total_count() const;
  void _internal_set_total_count(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // @@protoc_insertion_point(class_scope:smart3dmap.v1.ListStructureModelsResponse)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::smart3dmap::v1::Model3DStructure > models_;
  ::PROTOBUF_NAMESPACE_ID::int32 total_count_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_data_5fengine_2fdata_5fengine_2eproto;
};
// -------------------------------------------------------------------

class LIBS3DMGRPC_API Model3DField PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:smart3dmap.v1.Model3DField) */ {
 public:
  inline Model3DField() : Model3DField(nullptr) {}
  virtual ~Model3DField();
  explicit constexpr Model3DField(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  Model3DField(const Model3DField& from);
  Model3DField(Model3DField&& from) noexcept
    : Model3DField() {
    *this = ::std::move(from);
  }

  inline Model3DField& operator=(const Model3DField& from) {
    CopyFrom(from);
    return *this;
  }
  inline Model3DField& operator=(Model3DField&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const Model3DField& default_instance() {
    return *internal_default_instance();
  }
  static inline const Model3DField* internal_default_instance() {
    return reinterpret_cast<const Model3DField*>(
               &_Model3DField_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    80;

  friend void swap(Model3DField& a, Model3DField& b) {
    a.Swap(&b);
  }
  inline void Swap(Model3DField* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(Model3DField* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline Model3DField* New() const final {
    return CreateMaybeMessage<Model3DField>(nullptr);
  }

  Model3DField* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<Model3DField>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const Model3DField& from);
  void MergeFrom(const Model3DField& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Model3DField* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "smart3dmap.v1.Model3DField";
  }
  protected:
  explicit Model3DField(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    return ::descriptor_table_data_5fengine_2fdata_5fengine_2eproto_metadata_getter(kIndexInFileMessages);
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kNameFieldNumber = 2,
    kCreatedAtFieldNumber = 4,
    kIdFieldNumber = 1,
    kDbIdFieldNumber = 3,
  };
  // string name = 2;
  void clear_name();
  const std::string& name() const;
  void set_name(const std::string& value);
  void set_name(std::string&& value);
  void set_name(const char* value);
  void set_name(const char* value, size_t size);
  std::string* mutable_name();
  std::string* release_name();
  void set_allocated_name(std::string* name);
  private:
  const std::string& _internal_name() const;
  void _internal_set_name(const std::string& value);
  std::string* _internal_mutable_name();
  public:

  // .google.protobuf.Timestamp created_at = 4;
  bool has_created_at() const;
  private:
  bool _internal_has_created_at() const;
  public:
  void clear_created_at();
  const PROTOBUF_NAMESPACE_ID::Timestamp& created_at() const;
  PROTOBUF_NAMESPACE_ID::Timestamp* release_created_at();
  PROTOBUF_NAMESPACE_ID::Timestamp* mutable_created_at();
  void set_allocated_created_at(PROTOBUF_NAMESPACE_ID::Timestamp* created_at);
  private:
  const PROTOBUF_NAMESPACE_ID::Timestamp& _internal_created_at() const;
  PROTOBUF_NAMESPACE_ID::Timestamp* _internal_mutable_created_at();
  public:
  void unsafe_arena_set_allocated_created_at(
      PROTOBUF_NAMESPACE_ID::Timestamp* created_at);
  PROTOBUF_NAMESPACE_ID::Timestamp* unsafe_arena_release_created_at();

  // int32 id = 1;
  void clear_id();
  ::PROTOBUF_NAMESPACE_ID::int32 id() const;
  void set_id(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_id() const;
  void _internal_set_id(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // int32 db_id = 3;
  void clear_db_id();
  ::PROTOBUF_NAMESPACE_ID::int32 db_id() const;
  void set_db_id(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_db_id() const;
  void _internal_set_db_id(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // @@protoc_insertion_point(class_scope:smart3dmap.v1.Model3DField)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr name_;
  PROTOBUF_NAMESPACE_ID::Timestamp* created_at_;
  ::PROTOBUF_NAMESPACE_ID::int32 id_;
  ::PROTOBUF_NAMESPACE_ID::int32 db_id_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_data_5fengine_2fdata_5fengine_2eproto;
};
// -------------------------------------------------------------------

class LIBS3DMGRPC_API ListFieldModelsRequest PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:smart3dmap.v1.ListFieldModelsRequest) */ {
 public:
  inline ListFieldModelsRequest() : ListFieldModelsRequest(nullptr) {}
  virtual ~ListFieldModelsRequest();
  explicit constexpr ListFieldModelsRequest(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  ListFieldModelsRequest(const ListFieldModelsRequest& from);
  ListFieldModelsRequest(ListFieldModelsRequest&& from) noexcept
    : ListFieldModelsRequest() {
    *this = ::std::move(from);
  }

  inline ListFieldModelsRequest& operator=(const ListFieldModelsRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline ListFieldModelsRequest& operator=(ListFieldModelsRequest&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const ListFieldModelsRequest& default_instance() {
    return *internal_default_instance();
  }
  static inline const ListFieldModelsRequest* internal_default_instance() {
    return reinterpret_cast<const ListFieldModelsRequest*>(
               &_ListFieldModelsRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    81;

  friend void swap(ListFieldModelsRequest& a, ListFieldModelsRequest& b) {
    a.Swap(&b);
  }
  inline void Swap(ListFieldModelsRequest* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(ListFieldModelsRequest* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline ListFieldModelsRequest* New() const final {
    return CreateMaybeMessage<ListFieldModelsRequest>(nullptr);
  }

  ListFieldModelsRequest* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<ListFieldModelsRequest>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const ListFieldModelsRequest& from);
  void MergeFrom(const ListFieldModelsRequest& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(ListFieldModelsRequest* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "smart3dmap.v1.ListFieldModelsRequest";
  }
  protected:
  explicit ListFieldModelsRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    return ::descriptor_table_data_5fengine_2fdata_5fengine_2eproto_metadata_getter(kIndexInFileMessages);
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kPaginationFieldNumber = 1,
    kDbIdFieldNumber = 2,
  };
  // .smart3dmap.v1.Pagination pagination = 1;
  bool has_pagination() const;
  private:
  bool _internal_has_pagination() const;
  public:
  void clear_pagination();
  const ::smart3dmap::v1::Pagination& pagination() const;
  ::smart3dmap::v1::Pagination* release_pagination();
  ::smart3dmap::v1::Pagination* mutable_pagination();
  void set_allocated_pagination(::smart3dmap::v1::Pagination* pagination);
  private:
  const ::smart3dmap::v1::Pagination& _internal_pagination() const;
  ::smart3dmap::v1::Pagination* _internal_mutable_pagination();
  public:
  void unsafe_arena_set_allocated_pagination(
      ::smart3dmap::v1::Pagination* pagination);
  ::smart3dmap::v1::Pagination* unsafe_arena_release_pagination();

  // int32 db_id = 2;
  void clear_db_id();
  ::PROTOBUF_NAMESPACE_ID::int32 db_id() const;
  void set_db_id(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_db_id() const;
  void _internal_set_db_id(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // @@protoc_insertion_point(class_scope:smart3dmap.v1.ListFieldModelsRequest)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::smart3dmap::v1::Pagination* pagination_;
  ::PROTOBUF_NAMESPACE_ID::int32 db_id_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_data_5fengine_2fdata_5fengine_2eproto;
};
// -------------------------------------------------------------------

class LIBS3DMGRPC_API ListFieldModelsResponse PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:smart3dmap.v1.ListFieldModelsResponse) */ {
 public:
  inline ListFieldModelsResponse() : ListFieldModelsResponse(nullptr) {}
  virtual ~ListFieldModelsResponse();
  explicit constexpr ListFieldModelsResponse(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  ListFieldModelsResponse(const ListFieldModelsResponse& from);
  ListFieldModelsResponse(ListFieldModelsResponse&& from) noexcept
    : ListFieldModelsResponse() {
    *this = ::std::move(from);
  }

  inline ListFieldModelsResponse& operator=(const ListFieldModelsResponse& from) {
    CopyFrom(from);
    return *this;
  }
  inline ListFieldModelsResponse& operator=(ListFieldModelsResponse&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const ListFieldModelsResponse& default_instance() {
    return *internal_default_instance();
  }
  static inline const ListFieldModelsResponse* internal_default_instance() {
    return reinterpret_cast<const ListFieldModelsResponse*>(
               &_ListFieldModelsResponse_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    82;

  friend void swap(ListFieldModelsResponse& a, ListFieldModelsResponse& b) {
    a.Swap(&b);
  }
  inline void Swap(ListFieldModelsResponse* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(ListFieldModelsResponse* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline ListFieldModelsResponse* New() const final {
    return CreateMaybeMessage<ListFieldModelsResponse>(nullptr);
  }

  ListFieldModelsResponse* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<ListFieldModelsResponse>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const ListFieldModelsResponse& from);
  void MergeFrom(const ListFieldModelsResponse& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(ListFieldModelsResponse* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "smart3dmap.v1.ListFieldModelsResponse";
  }
  protected:
  explicit ListFieldModelsResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    return ::descriptor_table_data_5fengine_2fdata_5fengine_2eproto_metadata_getter(kIndexInFileMessages);
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kModelsFieldNumber = 2,
    kTotalCountFieldNumber = 1,
  };
  // repeated .smart3dmap.v1.Model3DField models = 2;
  int models_size() const;
  private:
  int _internal_models_size() const;
  public:
  void clear_models();
  ::smart3dmap::v1::Model3DField* mutable_models(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::smart3dmap::v1::Model3DField >*
      mutable_models();
  private:
  const ::smart3dmap::v1::Model3DField& _internal_models(int index) const;
  ::smart3dmap::v1::Model3DField* _internal_add_models();
  public:
  const ::smart3dmap::v1::Model3DField& models(int index) const;
  ::smart3dmap::v1::Model3DField* add_models();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::smart3dmap::v1::Model3DField >&
      models() const;

  // int32 total_count = 1;
  void clear_total_count();
  ::PROTOBUF_NAMESPACE_ID::int32 total_count() const;
  void set_total_count(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_total_count() const;
  void _internal_set_total_count(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // @@protoc_insertion_point(class_scope:smart3dmap.v1.ListFieldModelsResponse)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::smart3dmap::v1::Model3DField > models_;
  ::PROTOBUF_NAMESPACE_ID::int32 total_count_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_data_5fengine_2fdata_5fengine_2eproto;
};
// -------------------------------------------------------------------

class LIBS3DMGRPC_API StdStrat_Item PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:smart3dmap.v1.StdStrat.Item) */ {
 public:
  inline StdStrat_Item() : StdStrat_Item(nullptr) {}
  virtual ~StdStrat_Item();
  explicit constexpr StdStrat_Item(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  StdStrat_Item(const StdStrat_Item& from);
  StdStrat_Item(StdStrat_Item&& from) noexcept
    : StdStrat_Item() {
    *this = ::std::move(from);
  }

  inline StdStrat_Item& operator=(const StdStrat_Item& from) {
    CopyFrom(from);
    return *this;
  }
  inline StdStrat_Item& operator=(StdStrat_Item&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const StdStrat_Item& default_instance() {
    return *internal_default_instance();
  }
  static inline const StdStrat_Item* internal_default_instance() {
    return reinterpret_cast<const StdStrat_Item*>(
               &_StdStrat_Item_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    83;

  friend void swap(StdStrat_Item& a, StdStrat_Item& b) {
    a.Swap(&b);
  }
  inline void Swap(StdStrat_Item* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(StdStrat_Item* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline StdStrat_Item* New() const final {
    return CreateMaybeMessage<StdStrat_Item>(nullptr);
  }

  StdStrat_Item* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<StdStrat_Item>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const StdStrat_Item& from);
  void MergeFrom(const StdStrat_Item& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(StdStrat_Item* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "smart3dmap.v1.StdStrat.Item";
  }
  protected:
  explicit StdStrat_Item(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    return ::descriptor_table_data_5fengine_2fdata_5fengine_2eproto_metadata_getter(kIndexInFileMessages);
  }

  public:

  // nested types ----------------------------------------------------

  typedef StdStrat_Item_Type Type;
  static constexpr Type UNKNOWN =
    StdStrat_Item_Type_UNKNOWN;
  static constexpr Type STRAT_UNIT =
    StdStrat_Item_Type_STRAT_UNIT;
  static constexpr Type LENTICLE =
    StdStrat_Item_Type_LENTICLE;
  static constexpr Type ROCK =
    StdStrat_Item_Type_ROCK;
  static constexpr Type ISOLATED_STONE =
    StdStrat_Item_Type_ISOLATED_STONE;
  static constexpr Type DIKE =
    StdStrat_Item_Type_DIKE;
  static constexpr Type FILLING_STONE =
    StdStrat_Item_Type_FILLING_STONE;
  static constexpr Type FAULT =
    StdStrat_Item_Type_FAULT;
  static inline bool Type_IsValid(int value) {
    return StdStrat_Item_Type_IsValid(value);
  }
  static constexpr Type Type_MIN =
    StdStrat_Item_Type_Type_MIN;
  static constexpr Type Type_MAX =
    StdStrat_Item_Type_Type_MAX;
  static constexpr int Type_ARRAYSIZE =
    StdStrat_Item_Type_Type_ARRAYSIZE;
  static inline const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor*
  Type_descriptor() {
    return StdStrat_Item_Type_descriptor();
  }
  template<typename T>
  static inline const std::string& Type_Name(T enum_t_value) {
    static_assert(::std::is_same<T, Type>::value ||
      ::std::is_integral<T>::value,
      "Incorrect type passed to function Type_Name.");
    return StdStrat_Item_Type_Name(enum_t_value);
  }
  static inline bool Type_Parse(::PROTOBUF_NAMESPACE_ID::ConstStringParam name,
      Type* value) {
    return StdStrat_Item_Type_Parse(name, value);
  }

  // accessors -------------------------------------------------------

  enum : int {
    kSubItemsFieldNumber = 12,
    kLevelFieldNumber = 1,
    kCodeFieldNumber = 2,
    kNameFieldNumber = 3,
    kPatternNoFieldNumber = 5,
    kWeatheringDegreeFieldNumber = 8,
    kGeologicAgeFieldNumber = 9,
    kFormatingCauseFieldNumber = 10,
    kDescriptionFieldNumber = 11,
    kTypeFieldNumber = 4,
    kPatternClrFieldNumber = 6,
    kClrFieldNumber = 7,
  };
  // repeated .smart3dmap.v1.StdStrat.Item sub_items = 12;
  int sub_items_size() const;
  private:
  int _internal_sub_items_size() const;
  public:
  void clear_sub_items();
  ::smart3dmap::v1::StdStrat_Item* mutable_sub_items(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::smart3dmap::v1::StdStrat_Item >*
      mutable_sub_items();
  private:
  const ::smart3dmap::v1::StdStrat_Item& _internal_sub_items(int index) const;
  ::smart3dmap::v1::StdStrat_Item* _internal_add_sub_items();
  public:
  const ::smart3dmap::v1::StdStrat_Item& sub_items(int index) const;
  ::smart3dmap::v1::StdStrat_Item* add_sub_items();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::smart3dmap::v1::StdStrat_Item >&
      sub_items() const;

  // string level = 1;
  void clear_level();
  const std::string& level() const;
  void set_level(const std::string& value);
  void set_level(std::string&& value);
  void set_level(const char* value);
  void set_level(const char* value, size_t size);
  std::string* mutable_level();
  std::string* release_level();
  void set_allocated_level(std::string* level);
  private:
  const std::string& _internal_level() const;
  void _internal_set_level(const std::string& value);
  std::string* _internal_mutable_level();
  public:

  // string code = 2;
  void clear_code();
  const std::string& code() const;
  void set_code(const std::string& value);
  void set_code(std::string&& value);
  void set_code(const char* value);
  void set_code(const char* value, size_t size);
  std::string* mutable_code();
  std::string* release_code();
  void set_allocated_code(std::string* code);
  private:
  const std::string& _internal_code() const;
  void _internal_set_code(const std::string& value);
  std::string* _internal_mutable_code();
  public:

  // string name = 3;
  void clear_name();
  const std::string& name() const;
  void set_name(const std::string& value);
  void set_name(std::string&& value);
  void set_name(const char* value);
  void set_name(const char* value, size_t size);
  std::string* mutable_name();
  std::string* release_name();
  void set_allocated_name(std::string* name);
  private:
  const std::string& _internal_name() const;
  void _internal_set_name(const std::string& value);
  std::string* _internal_mutable_name();
  public:

  // string pattern_no = 5;
  void clear_pattern_no();
  const std::string& pattern_no() const;
  void set_pattern_no(const std::string& value);
  void set_pattern_no(std::string&& value);
  void set_pattern_no(const char* value);
  void set_pattern_no(const char* value, size_t size);
  std::string* mutable_pattern_no();
  std::string* release_pattern_no();
  void set_allocated_pattern_no(std::string* pattern_no);
  private:
  const std::string& _internal_pattern_no() const;
  void _internal_set_pattern_no(const std::string& value);
  std::string* _internal_mutable_pattern_no();
  public:

  // string weathering_degree = 8;
  void clear_weathering_degree();
  const std::string& weathering_degree() const;
  void set_weathering_degree(const std::string& value);
  void set_weathering_degree(std::string&& value);
  void set_weathering_degree(const char* value);
  void set_weathering_degree(const char* value, size_t size);
  std::string* mutable_weathering_degree();
  std::string* release_weathering_degree();
  void set_allocated_weathering_degree(std::string* weathering_degree);
  private:
  const std::string& _internal_weathering_degree() const;
  void _internal_set_weathering_degree(const std::string& value);
  std::string* _internal_mutable_weathering_degree();
  public:

  // string geologic_age = 9;
  void clear_geologic_age();
  const std::string& geologic_age() const;
  void set_geologic_age(const std::string& value);
  void set_geologic_age(std::string&& value);
  void set_geologic_age(const char* value);
  void set_geologic_age(const char* value, size_t size);
  std::string* mutable_geologic_age();
  std::string* release_geologic_age();
  void set_allocated_geologic_age(std::string* geologic_age);
  private:
  const std::string& _internal_geologic_age() const;
  void _internal_set_geologic_age(const std::string& value);
  std::string* _internal_mutable_geologic_age();
  public:

  // string formating_cause = 10;
  void clear_formating_cause();
  const std::string& formating_cause() const;
  void set_formating_cause(const std::string& value);
  void set_formating_cause(std::string&& value);
  void set_formating_cause(const char* value);
  void set_formating_cause(const char* value, size_t size);
  std::string* mutable_formating_cause();
  std::string* release_formating_cause();
  void set_allocated_formating_cause(std::string* formating_cause);
  private:
  const std::string& _internal_formating_cause() const;
  void _internal_set_formating_cause(const std::string& value);
  std::string* _internal_mutable_formating_cause();
  public:

  // string description = 11;
  void clear_description();
  const std::string& description() const;
  void set_description(const std::string& value);
  void set_description(std::string&& value);
  void set_description(const char* value);
  void set_description(const char* value, size_t size);
  std::string* mutable_description();
  std::string* release_description();
  void set_allocated_description(std::string* description);
  private:
  const std::string& _internal_description() const;
  void _internal_set_description(const std::string& value);
  std::string* _internal_mutable_description();
  public:

  // .smart3dmap.v1.StdStrat.Item.Type type = 4;
  void clear_type();
  ::smart3dmap::v1::StdStrat_Item_Type type() const;
  void set_type(::smart3dmap::v1::StdStrat_Item_Type value);
  private:
  ::smart3dmap::v1::StdStrat_Item_Type _internal_type() const;
  void _internal_set_type(::smart3dmap::v1::StdStrat_Item_Type value);
  public:

  // int32 pattern_clr = 6;
  void clear_pattern_clr();
  ::PROTOBUF_NAMESPACE_ID::int32 pattern_clr() const;
  void set_pattern_clr(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_pattern_clr() const;
  void _internal_set_pattern_clr(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // int32 clr = 7;
  void clear_clr();
  ::PROTOBUF_NAMESPACE_ID::int32 clr() const;
  void set_clr(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_clr() const;
  void _internal_set_clr(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // @@protoc_insertion_point(class_scope:smart3dmap.v1.StdStrat.Item)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::smart3dmap::v1::StdStrat_Item > sub_items_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr level_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr code_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr name_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr pattern_no_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr weathering_degree_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr geologic_age_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr formating_cause_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr description_;
  int type_;
  ::PROTOBUF_NAMESPACE_ID::int32 pattern_clr_;
  ::PROTOBUF_NAMESPACE_ID::int32 clr_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_data_5fengine_2fdata_5fengine_2eproto;
};
// -------------------------------------------------------------------

class LIBS3DMGRPC_API StdStrat PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:smart3dmap.v1.StdStrat) */ {
 public:
  inline StdStrat() : StdStrat(nullptr) {}
  virtual ~StdStrat();
  explicit constexpr StdStrat(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  StdStrat(const StdStrat& from);
  StdStrat(StdStrat&& from) noexcept
    : StdStrat() {
    *this = ::std::move(from);
  }

  inline StdStrat& operator=(const StdStrat& from) {
    CopyFrom(from);
    return *this;
  }
  inline StdStrat& operator=(StdStrat&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const StdStrat& default_instance() {
    return *internal_default_instance();
  }
  static inline const StdStrat* internal_default_instance() {
    return reinterpret_cast<const StdStrat*>(
               &_StdStrat_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    84;

  friend void swap(StdStrat& a, StdStrat& b) {
    a.Swap(&b);
  }
  inline void Swap(StdStrat* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(StdStrat* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline StdStrat* New() const final {
    return CreateMaybeMessage<StdStrat>(nullptr);
  }

  StdStrat* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<StdStrat>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const StdStrat& from);
  void MergeFrom(const StdStrat& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(StdStrat* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "smart3dmap.v1.StdStrat";
  }
  protected:
  explicit StdStrat(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    return ::descriptor_table_data_5fengine_2fdata_5fengine_2eproto_metadata_getter(kIndexInFileMessages);
  }

  public:

  // nested types ----------------------------------------------------

  typedef StdStrat_Item Item;

  // accessors -------------------------------------------------------

  enum : int {
    kItemsFieldNumber = 7,
    kNameFieldNumber = 2,
    kProNameFieldNumber = 3,
    kProCodeFieldNumber = 4,
    kProTypeFieldNumber = 5,
    kAuthorFieldNumber = 6,
    kIdFieldNumber = 1,
  };
  // repeated .smart3dmap.v1.StdStrat.Item items = 7;
  int items_size() const;
  private:
  int _internal_items_size() const;
  public:
  void clear_items();
  ::smart3dmap::v1::StdStrat_Item* mutable_items(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::smart3dmap::v1::StdStrat_Item >*
      mutable_items();
  private:
  const ::smart3dmap::v1::StdStrat_Item& _internal_items(int index) const;
  ::smart3dmap::v1::StdStrat_Item* _internal_add_items();
  public:
  const ::smart3dmap::v1::StdStrat_Item& items(int index) const;
  ::smart3dmap::v1::StdStrat_Item* add_items();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::smart3dmap::v1::StdStrat_Item >&
      items() const;

  // string name = 2;
  void clear_name();
  const std::string& name() const;
  void set_name(const std::string& value);
  void set_name(std::string&& value);
  void set_name(const char* value);
  void set_name(const char* value, size_t size);
  std::string* mutable_name();
  std::string* release_name();
  void set_allocated_name(std::string* name);
  private:
  const std::string& _internal_name() const;
  void _internal_set_name(const std::string& value);
  std::string* _internal_mutable_name();
  public:

  // string pro_name = 3;
  void clear_pro_name();
  const std::string& pro_name() const;
  void set_pro_name(const std::string& value);
  void set_pro_name(std::string&& value);
  void set_pro_name(const char* value);
  void set_pro_name(const char* value, size_t size);
  std::string* mutable_pro_name();
  std::string* release_pro_name();
  void set_allocated_pro_name(std::string* pro_name);
  private:
  const std::string& _internal_pro_name() const;
  void _internal_set_pro_name(const std::string& value);
  std::string* _internal_mutable_pro_name();
  public:

  // string pro_code = 4;
  void clear_pro_code();
  const std::string& pro_code() const;
  void set_pro_code(const std::string& value);
  void set_pro_code(std::string&& value);
  void set_pro_code(const char* value);
  void set_pro_code(const char* value, size_t size);
  std::string* mutable_pro_code();
  std::string* release_pro_code();
  void set_allocated_pro_code(std::string* pro_code);
  private:
  const std::string& _internal_pro_code() const;
  void _internal_set_pro_code(const std::string& value);
  std::string* _internal_mutable_pro_code();
  public:

  // string pro_type = 5;
  void clear_pro_type();
  const std::string& pro_type() const;
  void set_pro_type(const std::string& value);
  void set_pro_type(std::string&& value);
  void set_pro_type(const char* value);
  void set_pro_type(const char* value, size_t size);
  std::string* mutable_pro_type();
  std::string* release_pro_type();
  void set_allocated_pro_type(std::string* pro_type);
  private:
  const std::string& _internal_pro_type() const;
  void _internal_set_pro_type(const std::string& value);
  std::string* _internal_mutable_pro_type();
  public:

  // string author = 6;
  void clear_author();
  const std::string& author() const;
  void set_author(const std::string& value);
  void set_author(std::string&& value);
  void set_author(const char* value);
  void set_author(const char* value, size_t size);
  std::string* mutable_author();
  std::string* release_author();
  void set_allocated_author(std::string* author);
  private:
  const std::string& _internal_author() const;
  void _internal_set_author(const std::string& value);
  std::string* _internal_mutable_author();
  public:

  // int32 id = 1;
  void clear_id();
  ::PROTOBUF_NAMESPACE_ID::int32 id() const;
  void set_id(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_id() const;
  void _internal_set_id(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // @@protoc_insertion_point(class_scope:smart3dmap.v1.StdStrat)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::smart3dmap::v1::StdStrat_Item > items_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr name_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr pro_name_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr pro_code_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr pro_type_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr author_;
  ::PROTOBUF_NAMESPACE_ID::int32 id_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_data_5fengine_2fdata_5fengine_2eproto;
};
// -------------------------------------------------------------------

class LIBS3DMGRPC_API CreateStdStratRequest PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:smart3dmap.v1.CreateStdStratRequest) */ {
 public:
  inline CreateStdStratRequest() : CreateStdStratRequest(nullptr) {}
  virtual ~CreateStdStratRequest();
  explicit constexpr CreateStdStratRequest(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  CreateStdStratRequest(const CreateStdStratRequest& from);
  CreateStdStratRequest(CreateStdStratRequest&& from) noexcept
    : CreateStdStratRequest() {
    *this = ::std::move(from);
  }

  inline CreateStdStratRequest& operator=(const CreateStdStratRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline CreateStdStratRequest& operator=(CreateStdStratRequest&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const CreateStdStratRequest& default_instance() {
    return *internal_default_instance();
  }
  static inline const CreateStdStratRequest* internal_default_instance() {
    return reinterpret_cast<const CreateStdStratRequest*>(
               &_CreateStdStratRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    85;

  friend void swap(CreateStdStratRequest& a, CreateStdStratRequest& b) {
    a.Swap(&b);
  }
  inline void Swap(CreateStdStratRequest* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(CreateStdStratRequest* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline CreateStdStratRequest* New() const final {
    return CreateMaybeMessage<CreateStdStratRequest>(nullptr);
  }

  CreateStdStratRequest* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<CreateStdStratRequest>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const CreateStdStratRequest& from);
  void MergeFrom(const CreateStdStratRequest& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(CreateStdStratRequest* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "smart3dmap.v1.CreateStdStratRequest";
  }
  protected:
  explicit CreateStdStratRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    return ::descriptor_table_data_5fengine_2fdata_5fengine_2eproto_metadata_getter(kIndexInFileMessages);
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kNameFieldNumber = 2,
    kProNameFieldNumber = 3,
    kProCodeFieldNumber = 4,
    kProTypeFieldNumber = 5,
    kAuthorFieldNumber = 6,
    kDbIdFieldNumber = 1,
  };
  // string name = 2;
  void clear_name();
  const std::string& name() const;
  void set_name(const std::string& value);
  void set_name(std::string&& value);
  void set_name(const char* value);
  void set_name(const char* value, size_t size);
  std::string* mutable_name();
  std::string* release_name();
  void set_allocated_name(std::string* name);
  private:
  const std::string& _internal_name() const;
  void _internal_set_name(const std::string& value);
  std::string* _internal_mutable_name();
  public:

  // string pro_name = 3;
  void clear_pro_name();
  const std::string& pro_name() const;
  void set_pro_name(const std::string& value);
  void set_pro_name(std::string&& value);
  void set_pro_name(const char* value);
  void set_pro_name(const char* value, size_t size);
  std::string* mutable_pro_name();
  std::string* release_pro_name();
  void set_allocated_pro_name(std::string* pro_name);
  private:
  const std::string& _internal_pro_name() const;
  void _internal_set_pro_name(const std::string& value);
  std::string* _internal_mutable_pro_name();
  public:

  // string pro_code = 4;
  void clear_pro_code();
  const std::string& pro_code() const;
  void set_pro_code(const std::string& value);
  void set_pro_code(std::string&& value);
  void set_pro_code(const char* value);
  void set_pro_code(const char* value, size_t size);
  std::string* mutable_pro_code();
  std::string* release_pro_code();
  void set_allocated_pro_code(std::string* pro_code);
  private:
  const std::string& _internal_pro_code() const;
  void _internal_set_pro_code(const std::string& value);
  std::string* _internal_mutable_pro_code();
  public:

  // .google.protobuf.StringValue pro_type = 5;
  bool has_pro_type() const;
  private:
  bool _internal_has_pro_type() const;
  public:
  void clear_pro_type();
  const PROTOBUF_NAMESPACE_ID::StringValue& pro_type() const;
  PROTOBUF_NAMESPACE_ID::StringValue* release_pro_type();
  PROTOBUF_NAMESPACE_ID::StringValue* mutable_pro_type();
  void set_allocated_pro_type(PROTOBUF_NAMESPACE_ID::StringValue* pro_type);
  private:
  const PROTOBUF_NAMESPACE_ID::StringValue& _internal_pro_type() const;
  PROTOBUF_NAMESPACE_ID::StringValue* _internal_mutable_pro_type();
  public:
  void unsafe_arena_set_allocated_pro_type(
      PROTOBUF_NAMESPACE_ID::StringValue* pro_type);
  PROTOBUF_NAMESPACE_ID::StringValue* unsafe_arena_release_pro_type();

  // .google.protobuf.StringValue author = 6;
  bool has_author() const;
  private:
  bool _internal_has_author() const;
  public:
  void clear_author();
  const PROTOBUF_NAMESPACE_ID::StringValue& author() const;
  PROTOBUF_NAMESPACE_ID::StringValue* release_author();
  PROTOBUF_NAMESPACE_ID::StringValue* mutable_author();
  void set_allocated_author(PROTOBUF_NAMESPACE_ID::StringValue* author);
  private:
  const PROTOBUF_NAMESPACE_ID::StringValue& _internal_author() const;
  PROTOBUF_NAMESPACE_ID::StringValue* _internal_mutable_author();
  public:
  void unsafe_arena_set_allocated_author(
      PROTOBUF_NAMESPACE_ID::StringValue* author);
  PROTOBUF_NAMESPACE_ID::StringValue* unsafe_arena_release_author();

  // int32 db_id = 1;
  void clear_db_id();
  ::PROTOBUF_NAMESPACE_ID::int32 db_id() const;
  void set_db_id(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_db_id() const;
  void _internal_set_db_id(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // @@protoc_insertion_point(class_scope:smart3dmap.v1.CreateStdStratRequest)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr name_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr pro_name_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr pro_code_;
  PROTOBUF_NAMESPACE_ID::StringValue* pro_type_;
  PROTOBUF_NAMESPACE_ID::StringValue* author_;
  ::PROTOBUF_NAMESPACE_ID::int32 db_id_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_data_5fengine_2fdata_5fengine_2eproto;
};
// -------------------------------------------------------------------

class LIBS3DMGRPC_API ListStdStratsRequest PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:smart3dmap.v1.ListStdStratsRequest) */ {
 public:
  inline ListStdStratsRequest() : ListStdStratsRequest(nullptr) {}
  virtual ~ListStdStratsRequest();
  explicit constexpr ListStdStratsRequest(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  ListStdStratsRequest(const ListStdStratsRequest& from);
  ListStdStratsRequest(ListStdStratsRequest&& from) noexcept
    : ListStdStratsRequest() {
    *this = ::std::move(from);
  }

  inline ListStdStratsRequest& operator=(const ListStdStratsRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline ListStdStratsRequest& operator=(ListStdStratsRequest&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const ListStdStratsRequest& default_instance() {
    return *internal_default_instance();
  }
  static inline const ListStdStratsRequest* internal_default_instance() {
    return reinterpret_cast<const ListStdStratsRequest*>(
               &_ListStdStratsRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    86;

  friend void swap(ListStdStratsRequest& a, ListStdStratsRequest& b) {
    a.Swap(&b);
  }
  inline void Swap(ListStdStratsRequest* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(ListStdStratsRequest* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline ListStdStratsRequest* New() const final {
    return CreateMaybeMessage<ListStdStratsRequest>(nullptr);
  }

  ListStdStratsRequest* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<ListStdStratsRequest>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const ListStdStratsRequest& from);
  void MergeFrom(const ListStdStratsRequest& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(ListStdStratsRequest* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "smart3dmap.v1.ListStdStratsRequest";
  }
  protected:
  explicit ListStdStratsRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    return ::descriptor_table_data_5fengine_2fdata_5fengine_2eproto_metadata_getter(kIndexInFileMessages);
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kNameFieldNumber = 3,
    kPaginationFieldNumber = 1,
    kDbIdFieldNumber = 2,
  };
  // string name = 3;
  void clear_name();
  const std::string& name() const;
  void set_name(const std::string& value);
  void set_name(std::string&& value);
  void set_name(const char* value);
  void set_name(const char* value, size_t size);
  std::string* mutable_name();
  std::string* release_name();
  void set_allocated_name(std::string* name);
  private:
  const std::string& _internal_name() const;
  void _internal_set_name(const std::string& value);
  std::string* _internal_mutable_name();
  public:

  // .smart3dmap.v1.Pagination pagination = 1;
  bool has_pagination() const;
  private:
  bool _internal_has_pagination() const;
  public:
  void clear_pagination();
  const ::smart3dmap::v1::Pagination& pagination() const;
  ::smart3dmap::v1::Pagination* release_pagination();
  ::smart3dmap::v1::Pagination* mutable_pagination();
  void set_allocated_pagination(::smart3dmap::v1::Pagination* pagination);
  private:
  const ::smart3dmap::v1::Pagination& _internal_pagination() const;
  ::smart3dmap::v1::Pagination* _internal_mutable_pagination();
  public:
  void unsafe_arena_set_allocated_pagination(
      ::smart3dmap::v1::Pagination* pagination);
  ::smart3dmap::v1::Pagination* unsafe_arena_release_pagination();

  // int32 db_id = 2;
  void clear_db_id();
  ::PROTOBUF_NAMESPACE_ID::int32 db_id() const;
  void set_db_id(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_db_id() const;
  void _internal_set_db_id(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // @@protoc_insertion_point(class_scope:smart3dmap.v1.ListStdStratsRequest)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr name_;
  ::smart3dmap::v1::Pagination* pagination_;
  ::PROTOBUF_NAMESPACE_ID::int32 db_id_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_data_5fengine_2fdata_5fengine_2eproto;
};
// -------------------------------------------------------------------

class LIBS3DMGRPC_API ListStdStratsResponse PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:smart3dmap.v1.ListStdStratsResponse) */ {
 public:
  inline ListStdStratsResponse() : ListStdStratsResponse(nullptr) {}
  virtual ~ListStdStratsResponse();
  explicit constexpr ListStdStratsResponse(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  ListStdStratsResponse(const ListStdStratsResponse& from);
  ListStdStratsResponse(ListStdStratsResponse&& from) noexcept
    : ListStdStratsResponse() {
    *this = ::std::move(from);
  }

  inline ListStdStratsResponse& operator=(const ListStdStratsResponse& from) {
    CopyFrom(from);
    return *this;
  }
  inline ListStdStratsResponse& operator=(ListStdStratsResponse&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const ListStdStratsResponse& default_instance() {
    return *internal_default_instance();
  }
  static inline const ListStdStratsResponse* internal_default_instance() {
    return reinterpret_cast<const ListStdStratsResponse*>(
               &_ListStdStratsResponse_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    87;

  friend void swap(ListStdStratsResponse& a, ListStdStratsResponse& b) {
    a.Swap(&b);
  }
  inline void Swap(ListStdStratsResponse* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(ListStdStratsResponse* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline ListStdStratsResponse* New() const final {
    return CreateMaybeMessage<ListStdStratsResponse>(nullptr);
  }

  ListStdStratsResponse* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<ListStdStratsResponse>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const ListStdStratsResponse& from);
  void MergeFrom(const ListStdStratsResponse& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(ListStdStratsResponse* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "smart3dmap.v1.ListStdStratsResponse";
  }
  protected:
  explicit ListStdStratsResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    return ::descriptor_table_data_5fengine_2fdata_5fengine_2eproto_metadata_getter(kIndexInFileMessages);
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kStratsFieldNumber = 2,
    kTotalCountFieldNumber = 1,
  };
  // repeated .smart3dmap.v1.StdStrat strats = 2;
  int strats_size() const;
  private:
  int _internal_strats_size() const;
  public:
  void clear_strats();
  ::smart3dmap::v1::StdStrat* mutable_strats(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::smart3dmap::v1::StdStrat >*
      mutable_strats();
  private:
  const ::smart3dmap::v1::StdStrat& _internal_strats(int index) const;
  ::smart3dmap::v1::StdStrat* _internal_add_strats();
  public:
  const ::smart3dmap::v1::StdStrat& strats(int index) const;
  ::smart3dmap::v1::StdStrat* add_strats();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::smart3dmap::v1::StdStrat >&
      strats() const;

  // int32 total_count = 1;
  void clear_total_count();
  ::PROTOBUF_NAMESPACE_ID::int32 total_count() const;
  void set_total_count(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_total_count() const;
  void _internal_set_total_count(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // @@protoc_insertion_point(class_scope:smart3dmap.v1.ListStdStratsResponse)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::smart3dmap::v1::StdStrat > strats_;
  ::PROTOBUF_NAMESPACE_ID::int32 total_count_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_data_5fengine_2fdata_5fengine_2eproto;
};
// -------------------------------------------------------------------

class LIBS3DMGRPC_API GetStdStratRequest PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:smart3dmap.v1.GetStdStratRequest) */ {
 public:
  inline GetStdStratRequest() : GetStdStratRequest(nullptr) {}
  virtual ~GetStdStratRequest();
  explicit constexpr GetStdStratRequest(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  GetStdStratRequest(const GetStdStratRequest& from);
  GetStdStratRequest(GetStdStratRequest&& from) noexcept
    : GetStdStratRequest() {
    *this = ::std::move(from);
  }

  inline GetStdStratRequest& operator=(const GetStdStratRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline GetStdStratRequest& operator=(GetStdStratRequest&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const GetStdStratRequest& default_instance() {
    return *internal_default_instance();
  }
  static inline const GetStdStratRequest* internal_default_instance() {
    return reinterpret_cast<const GetStdStratRequest*>(
               &_GetStdStratRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    88;

  friend void swap(GetStdStratRequest& a, GetStdStratRequest& b) {
    a.Swap(&b);
  }
  inline void Swap(GetStdStratRequest* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(GetStdStratRequest* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline GetStdStratRequest* New() const final {
    return CreateMaybeMessage<GetStdStratRequest>(nullptr);
  }

  GetStdStratRequest* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<GetStdStratRequest>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const GetStdStratRequest& from);
  void MergeFrom(const GetStdStratRequest& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(GetStdStratRequest* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "smart3dmap.v1.GetStdStratRequest";
  }
  protected:
  explicit GetStdStratRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    return ::descriptor_table_data_5fengine_2fdata_5fengine_2eproto_metadata_getter(kIndexInFileMessages);
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kDbIdFieldNumber = 1,
    kIdFieldNumber = 2,
  };
  // int32 db_id = 1;
  void clear_db_id();
  ::PROTOBUF_NAMESPACE_ID::int32 db_id() const;
  void set_db_id(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_db_id() const;
  void _internal_set_db_id(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // int32 id = 2;
  void clear_id();
  ::PROTOBUF_NAMESPACE_ID::int32 id() const;
  void set_id(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_id() const;
  void _internal_set_id(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // @@protoc_insertion_point(class_scope:smart3dmap.v1.GetStdStratRequest)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::int32 db_id_;
  ::PROTOBUF_NAMESPACE_ID::int32 id_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_data_5fengine_2fdata_5fengine_2eproto;
};
// -------------------------------------------------------------------

class LIBS3DMGRPC_API UpdateStdStratRequest PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:smart3dmap.v1.UpdateStdStratRequest) */ {
 public:
  inline UpdateStdStratRequest() : UpdateStdStratRequest(nullptr) {}
  virtual ~UpdateStdStratRequest();
  explicit constexpr UpdateStdStratRequest(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  UpdateStdStratRequest(const UpdateStdStratRequest& from);
  UpdateStdStratRequest(UpdateStdStratRequest&& from) noexcept
    : UpdateStdStratRequest() {
    *this = ::std::move(from);
  }

  inline UpdateStdStratRequest& operator=(const UpdateStdStratRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline UpdateStdStratRequest& operator=(UpdateStdStratRequest&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const UpdateStdStratRequest& default_instance() {
    return *internal_default_instance();
  }
  static inline const UpdateStdStratRequest* internal_default_instance() {
    return reinterpret_cast<const UpdateStdStratRequest*>(
               &_UpdateStdStratRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    89;

  friend void swap(UpdateStdStratRequest& a, UpdateStdStratRequest& b) {
    a.Swap(&b);
  }
  inline void Swap(UpdateStdStratRequest* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(UpdateStdStratRequest* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline UpdateStdStratRequest* New() const final {
    return CreateMaybeMessage<UpdateStdStratRequest>(nullptr);
  }

  UpdateStdStratRequest* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<UpdateStdStratRequest>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const UpdateStdStratRequest& from);
  void MergeFrom(const UpdateStdStratRequest& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(UpdateStdStratRequest* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "smart3dmap.v1.UpdateStdStratRequest";
  }
  protected:
  explicit UpdateStdStratRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    return ::descriptor_table_data_5fengine_2fdata_5fengine_2eproto_metadata_getter(kIndexInFileMessages);
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kNameFieldNumber = 3,
    kProNameFieldNumber = 4,
    kProCodeFieldNumber = 5,
    kProTypeFieldNumber = 6,
    kAuthorFieldNumber = 7,
    kDbIdFieldNumber = 1,
    kIdFieldNumber = 2,
  };
  // .google.protobuf.StringValue name = 3;
  bool has_name() const;
  private:
  bool _internal_has_name() const;
  public:
  void clear_name();
  const PROTOBUF_NAMESPACE_ID::StringValue& name() const;
  PROTOBUF_NAMESPACE_ID::StringValue* release_name();
  PROTOBUF_NAMESPACE_ID::StringValue* mutable_name();
  void set_allocated_name(PROTOBUF_NAMESPACE_ID::StringValue* name);
  private:
  const PROTOBUF_NAMESPACE_ID::StringValue& _internal_name() const;
  PROTOBUF_NAMESPACE_ID::StringValue* _internal_mutable_name();
  public:
  void unsafe_arena_set_allocated_name(
      PROTOBUF_NAMESPACE_ID::StringValue* name);
  PROTOBUF_NAMESPACE_ID::StringValue* unsafe_arena_release_name();

  // .google.protobuf.StringValue pro_name = 4;
  bool has_pro_name() const;
  private:
  bool _internal_has_pro_name() const;
  public:
  void clear_pro_name();
  const PROTOBUF_NAMESPACE_ID::StringValue& pro_name() const;
  PROTOBUF_NAMESPACE_ID::StringValue* release_pro_name();
  PROTOBUF_NAMESPACE_ID::StringValue* mutable_pro_name();
  void set_allocated_pro_name(PROTOBUF_NAMESPACE_ID::StringValue* pro_name);
  private:
  const PROTOBUF_NAMESPACE_ID::StringValue& _internal_pro_name() const;
  PROTOBUF_NAMESPACE_ID::StringValue* _internal_mutable_pro_name();
  public:
  void unsafe_arena_set_allocated_pro_name(
      PROTOBUF_NAMESPACE_ID::StringValue* pro_name);
  PROTOBUF_NAMESPACE_ID::StringValue* unsafe_arena_release_pro_name();

  // .google.protobuf.StringValue pro_code = 5;
  bool has_pro_code() const;
  private:
  bool _internal_has_pro_code() const;
  public:
  void clear_pro_code();
  const PROTOBUF_NAMESPACE_ID::StringValue& pro_code() const;
  PROTOBUF_NAMESPACE_ID::StringValue* release_pro_code();
  PROTOBUF_NAMESPACE_ID::StringValue* mutable_pro_code();
  void set_allocated_pro_code(PROTOBUF_NAMESPACE_ID::StringValue* pro_code);
  private:
  const PROTOBUF_NAMESPACE_ID::StringValue& _internal_pro_code() const;
  PROTOBUF_NAMESPACE_ID::StringValue* _internal_mutable_pro_code();
  public:
  void unsafe_arena_set_allocated_pro_code(
      PROTOBUF_NAMESPACE_ID::StringValue* pro_code);
  PROTOBUF_NAMESPACE_ID::StringValue* unsafe_arena_release_pro_code();

  // .google.protobuf.StringValue pro_type = 6;
  bool has_pro_type() const;
  private:
  bool _internal_has_pro_type() const;
  public:
  void clear_pro_type();
  const PROTOBUF_NAMESPACE_ID::StringValue& pro_type() const;
  PROTOBUF_NAMESPACE_ID::StringValue* release_pro_type();
  PROTOBUF_NAMESPACE_ID::StringValue* mutable_pro_type();
  void set_allocated_pro_type(PROTOBUF_NAMESPACE_ID::StringValue* pro_type);
  private:
  const PROTOBUF_NAMESPACE_ID::StringValue& _internal_pro_type() const;
  PROTOBUF_NAMESPACE_ID::StringValue* _internal_mutable_pro_type();
  public:
  void unsafe_arena_set_allocated_pro_type(
      PROTOBUF_NAMESPACE_ID::StringValue* pro_type);
  PROTOBUF_NAMESPACE_ID::StringValue* unsafe_arena_release_pro_type();

  // .google.protobuf.StringValue author = 7;
  bool has_author() const;
  private:
  bool _internal_has_author() const;
  public:
  void clear_author();
  const PROTOBUF_NAMESPACE_ID::StringValue& author() const;
  PROTOBUF_NAMESPACE_ID::StringValue* release_author();
  PROTOBUF_NAMESPACE_ID::StringValue* mutable_author();
  void set_allocated_author(PROTOBUF_NAMESPACE_ID::StringValue* author);
  private:
  const PROTOBUF_NAMESPACE_ID::StringValue& _internal_author() const;
  PROTOBUF_NAMESPACE_ID::StringValue* _internal_mutable_author();
  public:
  void unsafe_arena_set_allocated_author(
      PROTOBUF_NAMESPACE_ID::StringValue* author);
  PROTOBUF_NAMESPACE_ID::StringValue* unsafe_arena_release_author();

  // int32 db_id = 1;
  void clear_db_id();
  ::PROTOBUF_NAMESPACE_ID::int32 db_id() const;
  void set_db_id(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_db_id() const;
  void _internal_set_db_id(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // int32 id = 2;
  void clear_id();
  ::PROTOBUF_NAMESPACE_ID::int32 id() const;
  void set_id(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_id() const;
  void _internal_set_id(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // @@protoc_insertion_point(class_scope:smart3dmap.v1.UpdateStdStratRequest)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  PROTOBUF_NAMESPACE_ID::StringValue* name_;
  PROTOBUF_NAMESPACE_ID::StringValue* pro_name_;
  PROTOBUF_NAMESPACE_ID::StringValue* pro_code_;
  PROTOBUF_NAMESPACE_ID::StringValue* pro_type_;
  PROTOBUF_NAMESPACE_ID::StringValue* author_;
  ::PROTOBUF_NAMESPACE_ID::int32 db_id_;
  ::PROTOBUF_NAMESPACE_ID::int32 id_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_data_5fengine_2fdata_5fengine_2eproto;
};
// -------------------------------------------------------------------

class LIBS3DMGRPC_API UpdateStdStratResponse PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:smart3dmap.v1.UpdateStdStratResponse) */ {
 public:
  inline UpdateStdStratResponse() : UpdateStdStratResponse(nullptr) {}
  virtual ~UpdateStdStratResponse();
  explicit constexpr UpdateStdStratResponse(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  UpdateStdStratResponse(const UpdateStdStratResponse& from);
  UpdateStdStratResponse(UpdateStdStratResponse&& from) noexcept
    : UpdateStdStratResponse() {
    *this = ::std::move(from);
  }

  inline UpdateStdStratResponse& operator=(const UpdateStdStratResponse& from) {
    CopyFrom(from);
    return *this;
  }
  inline UpdateStdStratResponse& operator=(UpdateStdStratResponse&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const UpdateStdStratResponse& default_instance() {
    return *internal_default_instance();
  }
  static inline const UpdateStdStratResponse* internal_default_instance() {
    return reinterpret_cast<const UpdateStdStratResponse*>(
               &_UpdateStdStratResponse_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    90;

  friend void swap(UpdateStdStratResponse& a, UpdateStdStratResponse& b) {
    a.Swap(&b);
  }
  inline void Swap(UpdateStdStratResponse* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(UpdateStdStratResponse* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline UpdateStdStratResponse* New() const final {
    return CreateMaybeMessage<UpdateStdStratResponse>(nullptr);
  }

  UpdateStdStratResponse* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<UpdateStdStratResponse>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const UpdateStdStratResponse& from);
  void MergeFrom(const UpdateStdStratResponse& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(UpdateStdStratResponse* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "smart3dmap.v1.UpdateStdStratResponse";
  }
  protected:
  explicit UpdateStdStratResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    return ::descriptor_table_data_5fengine_2fdata_5fengine_2eproto_metadata_getter(kIndexInFileMessages);
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kErrorFieldNumber = 2,
    kStatusFieldNumber = 1,
  };
  // string error = 2;
  void clear_error();
  const std::string& error() const;
  void set_error(const std::string& value);
  void set_error(std::string&& value);
  void set_error(const char* value);
  void set_error(const char* value, size_t size);
  std::string* mutable_error();
  std::string* release_error();
  void set_allocated_error(std::string* error);
  private:
  const std::string& _internal_error() const;
  void _internal_set_error(const std::string& value);
  std::string* _internal_mutable_error();
  public:

  // bool status = 1;
  void clear_status();
  bool status() const;
  void set_status(bool value);
  private:
  bool _internal_status() const;
  void _internal_set_status(bool value);
  public:

  // @@protoc_insertion_point(class_scope:smart3dmap.v1.UpdateStdStratResponse)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr error_;
  bool status_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_data_5fengine_2fdata_5fengine_2eproto;
};
// -------------------------------------------------------------------

class LIBS3DMGRPC_API ResetStdStratItemsRequest PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:smart3dmap.v1.ResetStdStratItemsRequest) */ {
 public:
  inline ResetStdStratItemsRequest() : ResetStdStratItemsRequest(nullptr) {}
  virtual ~ResetStdStratItemsRequest();
  explicit constexpr ResetStdStratItemsRequest(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  ResetStdStratItemsRequest(const ResetStdStratItemsRequest& from);
  ResetStdStratItemsRequest(ResetStdStratItemsRequest&& from) noexcept
    : ResetStdStratItemsRequest() {
    *this = ::std::move(from);
  }

  inline ResetStdStratItemsRequest& operator=(const ResetStdStratItemsRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline ResetStdStratItemsRequest& operator=(ResetStdStratItemsRequest&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const ResetStdStratItemsRequest& default_instance() {
    return *internal_default_instance();
  }
  static inline const ResetStdStratItemsRequest* internal_default_instance() {
    return reinterpret_cast<const ResetStdStratItemsRequest*>(
               &_ResetStdStratItemsRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    91;

  friend void swap(ResetStdStratItemsRequest& a, ResetStdStratItemsRequest& b) {
    a.Swap(&b);
  }
  inline void Swap(ResetStdStratItemsRequest* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(ResetStdStratItemsRequest* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline ResetStdStratItemsRequest* New() const final {
    return CreateMaybeMessage<ResetStdStratItemsRequest>(nullptr);
  }

  ResetStdStratItemsRequest* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<ResetStdStratItemsRequest>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const ResetStdStratItemsRequest& from);
  void MergeFrom(const ResetStdStratItemsRequest& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(ResetStdStratItemsRequest* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "smart3dmap.v1.ResetStdStratItemsRequest";
  }
  protected:
  explicit ResetStdStratItemsRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    return ::descriptor_table_data_5fengine_2fdata_5fengine_2eproto_metadata_getter(kIndexInFileMessages);
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kItemsFieldNumber = 3,
    kDbIdFieldNumber = 1,
    kIdFieldNumber = 2,
  };
  // repeated .smart3dmap.v1.StdStrat.Item items = 3;
  int items_size() const;
  private:
  int _internal_items_size() const;
  public:
  void clear_items();
  ::smart3dmap::v1::StdStrat_Item* mutable_items(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::smart3dmap::v1::StdStrat_Item >*
      mutable_items();
  private:
  const ::smart3dmap::v1::StdStrat_Item& _internal_items(int index) const;
  ::smart3dmap::v1::StdStrat_Item* _internal_add_items();
  public:
  const ::smart3dmap::v1::StdStrat_Item& items(int index) const;
  ::smart3dmap::v1::StdStrat_Item* add_items();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::smart3dmap::v1::StdStrat_Item >&
      items() const;

  // int32 db_id = 1;
  void clear_db_id();
  ::PROTOBUF_NAMESPACE_ID::int32 db_id() const;
  void set_db_id(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_db_id() const;
  void _internal_set_db_id(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // int32 id = 2;
  void clear_id();
  ::PROTOBUF_NAMESPACE_ID::int32 id() const;
  void set_id(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_id() const;
  void _internal_set_id(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // @@protoc_insertion_point(class_scope:smart3dmap.v1.ResetStdStratItemsRequest)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::smart3dmap::v1::StdStrat_Item > items_;
  ::PROTOBUF_NAMESPACE_ID::int32 db_id_;
  ::PROTOBUF_NAMESPACE_ID::int32 id_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_data_5fengine_2fdata_5fengine_2eproto;
};
// -------------------------------------------------------------------

class LIBS3DMGRPC_API ResetStdStratItemsResponse PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:smart3dmap.v1.ResetStdStratItemsResponse) */ {
 public:
  inline ResetStdStratItemsResponse() : ResetStdStratItemsResponse(nullptr) {}
  virtual ~ResetStdStratItemsResponse();
  explicit constexpr ResetStdStratItemsResponse(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  ResetStdStratItemsResponse(const ResetStdStratItemsResponse& from);
  ResetStdStratItemsResponse(ResetStdStratItemsResponse&& from) noexcept
    : ResetStdStratItemsResponse() {
    *this = ::std::move(from);
  }

  inline ResetStdStratItemsResponse& operator=(const ResetStdStratItemsResponse& from) {
    CopyFrom(from);
    return *this;
  }
  inline ResetStdStratItemsResponse& operator=(ResetStdStratItemsResponse&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const ResetStdStratItemsResponse& default_instance() {
    return *internal_default_instance();
  }
  static inline const ResetStdStratItemsResponse* internal_default_instance() {
    return reinterpret_cast<const ResetStdStratItemsResponse*>(
               &_ResetStdStratItemsResponse_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    92;

  friend void swap(ResetStdStratItemsResponse& a, ResetStdStratItemsResponse& b) {
    a.Swap(&b);
  }
  inline void Swap(ResetStdStratItemsResponse* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(ResetStdStratItemsResponse* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline ResetStdStratItemsResponse* New() const final {
    return CreateMaybeMessage<ResetStdStratItemsResponse>(nullptr);
  }

  ResetStdStratItemsResponse* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<ResetStdStratItemsResponse>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const ResetStdStratItemsResponse& from);
  void MergeFrom(const ResetStdStratItemsResponse& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(ResetStdStratItemsResponse* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "smart3dmap.v1.ResetStdStratItemsResponse";
  }
  protected:
  explicit ResetStdStratItemsResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    return ::descriptor_table_data_5fengine_2fdata_5fengine_2eproto_metadata_getter(kIndexInFileMessages);
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kErrorFieldNumber = 2,
    kStatusFieldNumber = 1,
  };
  // string error = 2;
  void clear_error();
  const std::string& error() const;
  void set_error(const std::string& value);
  void set_error(std::string&& value);
  void set_error(const char* value);
  void set_error(const char* value, size_t size);
  std::string* mutable_error();
  std::string* release_error();
  void set_allocated_error(std::string* error);
  private:
  const std::string& _internal_error() const;
  void _internal_set_error(const std::string& value);
  std::string* _internal_mutable_error();
  public:

  // bool status = 1;
  void clear_status();
  bool status() const;
  void set_status(bool value);
  private:
  bool _internal_status() const;
  void _internal_set_status(bool value);
  public:

  // @@protoc_insertion_point(class_scope:smart3dmap.v1.ResetStdStratItemsResponse)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr error_;
  bool status_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_data_5fengine_2fdata_5fengine_2eproto;
};
// -------------------------------------------------------------------

class LIBS3DMGRPC_API DeleteStdStratRequest PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:smart3dmap.v1.DeleteStdStratRequest) */ {
 public:
  inline DeleteStdStratRequest() : DeleteStdStratRequest(nullptr) {}
  virtual ~DeleteStdStratRequest();
  explicit constexpr DeleteStdStratRequest(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  DeleteStdStratRequest(const DeleteStdStratRequest& from);
  DeleteStdStratRequest(DeleteStdStratRequest&& from) noexcept
    : DeleteStdStratRequest() {
    *this = ::std::move(from);
  }

  inline DeleteStdStratRequest& operator=(const DeleteStdStratRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline DeleteStdStratRequest& operator=(DeleteStdStratRequest&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const DeleteStdStratRequest& default_instance() {
    return *internal_default_instance();
  }
  static inline const DeleteStdStratRequest* internal_default_instance() {
    return reinterpret_cast<const DeleteStdStratRequest*>(
               &_DeleteStdStratRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    93;

  friend void swap(DeleteStdStratRequest& a, DeleteStdStratRequest& b) {
    a.Swap(&b);
  }
  inline void Swap(DeleteStdStratRequest* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(DeleteStdStratRequest* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline DeleteStdStratRequest* New() const final {
    return CreateMaybeMessage<DeleteStdStratRequest>(nullptr);
  }

  DeleteStdStratRequest* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<DeleteStdStratRequest>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const DeleteStdStratRequest& from);
  void MergeFrom(const DeleteStdStratRequest& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(DeleteStdStratRequest* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "smart3dmap.v1.DeleteStdStratRequest";
  }
  protected:
  explicit DeleteStdStratRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    return ::descriptor_table_data_5fengine_2fdata_5fengine_2eproto_metadata_getter(kIndexInFileMessages);
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kDbIdFieldNumber = 1,
    kIdFieldNumber = 2,
  };
  // int32 db_id = 1;
  void clear_db_id();
  ::PROTOBUF_NAMESPACE_ID::int32 db_id() const;
  void set_db_id(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_db_id() const;
  void _internal_set_db_id(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // int32 id = 2;
  void clear_id();
  ::PROTOBUF_NAMESPACE_ID::int32 id() const;
  void set_id(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_id() const;
  void _internal_set_id(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // @@protoc_insertion_point(class_scope:smart3dmap.v1.DeleteStdStratRequest)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::int32 db_id_;
  ::PROTOBUF_NAMESPACE_ID::int32 id_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_data_5fengine_2fdata_5fengine_2eproto;
};
// -------------------------------------------------------------------

class LIBS3DMGRPC_API DeleteStdStratResponse PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:smart3dmap.v1.DeleteStdStratResponse) */ {
 public:
  inline DeleteStdStratResponse() : DeleteStdStratResponse(nullptr) {}
  virtual ~DeleteStdStratResponse();
  explicit constexpr DeleteStdStratResponse(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  DeleteStdStratResponse(const DeleteStdStratResponse& from);
  DeleteStdStratResponse(DeleteStdStratResponse&& from) noexcept
    : DeleteStdStratResponse() {
    *this = ::std::move(from);
  }

  inline DeleteStdStratResponse& operator=(const DeleteStdStratResponse& from) {
    CopyFrom(from);
    return *this;
  }
  inline DeleteStdStratResponse& operator=(DeleteStdStratResponse&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const DeleteStdStratResponse& default_instance() {
    return *internal_default_instance();
  }
  static inline const DeleteStdStratResponse* internal_default_instance() {
    return reinterpret_cast<const DeleteStdStratResponse*>(
               &_DeleteStdStratResponse_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    94;

  friend void swap(DeleteStdStratResponse& a, DeleteStdStratResponse& b) {
    a.Swap(&b);
  }
  inline void Swap(DeleteStdStratResponse* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(DeleteStdStratResponse* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline DeleteStdStratResponse* New() const final {
    return CreateMaybeMessage<DeleteStdStratResponse>(nullptr);
  }

  DeleteStdStratResponse* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<DeleteStdStratResponse>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const DeleteStdStratResponse& from);
  void MergeFrom(const DeleteStdStratResponse& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(DeleteStdStratResponse* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "smart3dmap.v1.DeleteStdStratResponse";
  }
  protected:
  explicit DeleteStdStratResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    return ::descriptor_table_data_5fengine_2fdata_5fengine_2eproto_metadata_getter(kIndexInFileMessages);
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kErrorFieldNumber = 2,
    kStatusFieldNumber = 1,
  };
  // string error = 2;
  void clear_error();
  const std::string& error() const;
  void set_error(const std::string& value);
  void set_error(std::string&& value);
  void set_error(const char* value);
  void set_error(const char* value, size_t size);
  std::string* mutable_error();
  std::string* release_error();
  void set_allocated_error(std::string* error);
  private:
  const std::string& _internal_error() const;
  void _internal_set_error(const std::string& value);
  std::string* _internal_mutable_error();
  public:

  // bool status = 1;
  void clear_status();
  bool status() const;
  void set_status(bool value);
  private:
  bool _internal_status() const;
  void _internal_set_status(bool value);
  public:

  // @@protoc_insertion_point(class_scope:smart3dmap.v1.DeleteStdStratResponse)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr error_;
  bool status_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_data_5fengine_2fdata_5fengine_2eproto;
};
// -------------------------------------------------------------------

class LIBS3DMGRPC_API ImportedStdStratItem PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:smart3dmap.v1.ImportedStdStratItem) */ {
 public:
  inline ImportedStdStratItem() : ImportedStdStratItem(nullptr) {}
  virtual ~ImportedStdStratItem();
  explicit constexpr ImportedStdStratItem(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  ImportedStdStratItem(const ImportedStdStratItem& from);
  ImportedStdStratItem(ImportedStdStratItem&& from) noexcept
    : ImportedStdStratItem() {
    *this = ::std::move(from);
  }

  inline ImportedStdStratItem& operator=(const ImportedStdStratItem& from) {
    CopyFrom(from);
    return *this;
  }
  inline ImportedStdStratItem& operator=(ImportedStdStratItem&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const ImportedStdStratItem& default_instance() {
    return *internal_default_instance();
  }
  static inline const ImportedStdStratItem* internal_default_instance() {
    return reinterpret_cast<const ImportedStdStratItem*>(
               &_ImportedStdStratItem_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    95;

  friend void swap(ImportedStdStratItem& a, ImportedStdStratItem& b) {
    a.Swap(&b);
  }
  inline void Swap(ImportedStdStratItem* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(ImportedStdStratItem* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline ImportedStdStratItem* New() const final {
    return CreateMaybeMessage<ImportedStdStratItem>(nullptr);
  }

  ImportedStdStratItem* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<ImportedStdStratItem>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const ImportedStdStratItem& from);
  void MergeFrom(const ImportedStdStratItem& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(ImportedStdStratItem* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "smart3dmap.v1.ImportedStdStratItem";
  }
  protected:
  explicit ImportedStdStratItem(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    return ::descriptor_table_data_5fengine_2fdata_5fengine_2eproto_metadata_getter(kIndexInFileMessages);
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kItemFieldNumber = 3,
    kDbIdFieldNumber = 1,
    kStratIdFieldNumber = 2,
  };
  // .smart3dmap.v1.StdStrat.Item item = 3;
  bool has_item() const;
  private:
  bool _internal_has_item() const;
  public:
  void clear_item();
  const ::smart3dmap::v1::StdStrat_Item& item() const;
  ::smart3dmap::v1::StdStrat_Item* release_item();
  ::smart3dmap::v1::StdStrat_Item* mutable_item();
  void set_allocated_item(::smart3dmap::v1::StdStrat_Item* item);
  private:
  const ::smart3dmap::v1::StdStrat_Item& _internal_item() const;
  ::smart3dmap::v1::StdStrat_Item* _internal_mutable_item();
  public:
  void unsafe_arena_set_allocated_item(
      ::smart3dmap::v1::StdStrat_Item* item);
  ::smart3dmap::v1::StdStrat_Item* unsafe_arena_release_item();

  // int32 db_id = 1;
  void clear_db_id();
  ::PROTOBUF_NAMESPACE_ID::int32 db_id() const;
  void set_db_id(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_db_id() const;
  void _internal_set_db_id(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // int32 strat_id = 2;
  void clear_strat_id();
  ::PROTOBUF_NAMESPACE_ID::int32 strat_id() const;
  void set_strat_id(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_strat_id() const;
  void _internal_set_strat_id(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // @@protoc_insertion_point(class_scope:smart3dmap.v1.ImportedStdStratItem)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::smart3dmap::v1::StdStrat_Item* item_;
  ::PROTOBUF_NAMESPACE_ID::int32 db_id_;
  ::PROTOBUF_NAMESPACE_ID::int32 strat_id_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_data_5fengine_2fdata_5fengine_2eproto;
};
// -------------------------------------------------------------------

class LIBS3DMGRPC_API ImportStdStratItemStatus PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:smart3dmap.v1.ImportStdStratItemStatus) */ {
 public:
  inline ImportStdStratItemStatus() : ImportStdStratItemStatus(nullptr) {}
  virtual ~ImportStdStratItemStatus();
  explicit constexpr ImportStdStratItemStatus(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  ImportStdStratItemStatus(const ImportStdStratItemStatus& from);
  ImportStdStratItemStatus(ImportStdStratItemStatus&& from) noexcept
    : ImportStdStratItemStatus() {
    *this = ::std::move(from);
  }

  inline ImportStdStratItemStatus& operator=(const ImportStdStratItemStatus& from) {
    CopyFrom(from);
    return *this;
  }
  inline ImportStdStratItemStatus& operator=(ImportStdStratItemStatus&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const ImportStdStratItemStatus& default_instance() {
    return *internal_default_instance();
  }
  static inline const ImportStdStratItemStatus* internal_default_instance() {
    return reinterpret_cast<const ImportStdStratItemStatus*>(
               &_ImportStdStratItemStatus_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    96;

  friend void swap(ImportStdStratItemStatus& a, ImportStdStratItemStatus& b) {
    a.Swap(&b);
  }
  inline void Swap(ImportStdStratItemStatus* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(ImportStdStratItemStatus* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline ImportStdStratItemStatus* New() const final {
    return CreateMaybeMessage<ImportStdStratItemStatus>(nullptr);
  }

  ImportStdStratItemStatus* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<ImportStdStratItemStatus>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const ImportStdStratItemStatus& from);
  void MergeFrom(const ImportStdStratItemStatus& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(ImportStdStratItemStatus* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "smart3dmap.v1.ImportStdStratItemStatus";
  }
  protected:
  explicit ImportStdStratItemStatus(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    return ::descriptor_table_data_5fengine_2fdata_5fengine_2eproto_metadata_getter(kIndexInFileMessages);
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kErrorFieldNumber = 2,
    kStatusFieldNumber = 1,
    kDbIdFieldNumber = 3,
    kItemIdFieldNumber = 4,
  };
  // string error = 2;
  void clear_error();
  const std::string& error() const;
  void set_error(const std::string& value);
  void set_error(std::string&& value);
  void set_error(const char* value);
  void set_error(const char* value, size_t size);
  std::string* mutable_error();
  std::string* release_error();
  void set_allocated_error(std::string* error);
  private:
  const std::string& _internal_error() const;
  void _internal_set_error(const std::string& value);
  std::string* _internal_mutable_error();
  public:

  // bool status = 1;
  void clear_status();
  bool status() const;
  void set_status(bool value);
  private:
  bool _internal_status() const;
  void _internal_set_status(bool value);
  public:

  // int32 db_id = 3;
  void clear_db_id();
  ::PROTOBUF_NAMESPACE_ID::int32 db_id() const;
  void set_db_id(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_db_id() const;
  void _internal_set_db_id(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // int32 item_id = 4;
  void clear_item_id();
  ::PROTOBUF_NAMESPACE_ID::int32 item_id() const;
  void set_item_id(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_item_id() const;
  void _internal_set_item_id(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // @@protoc_insertion_point(class_scope:smart3dmap.v1.ImportStdStratItemStatus)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr error_;
  bool status_;
  ::PROTOBUF_NAMESPACE_ID::int32 db_id_;
  ::PROTOBUF_NAMESPACE_ID::int32 item_id_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_data_5fengine_2fdata_5fengine_2eproto;
};
// -------------------------------------------------------------------

class LIBS3DMGRPC_API ImportStdStratItemsRequest PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:smart3dmap.v1.ImportStdStratItemsRequest) */ {
 public:
  inline ImportStdStratItemsRequest() : ImportStdStratItemsRequest(nullptr) {}
  virtual ~ImportStdStratItemsRequest();
  explicit constexpr ImportStdStratItemsRequest(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  ImportStdStratItemsRequest(const ImportStdStratItemsRequest& from);
  ImportStdStratItemsRequest(ImportStdStratItemsRequest&& from) noexcept
    : ImportStdStratItemsRequest() {
    *this = ::std::move(from);
  }

  inline ImportStdStratItemsRequest& operator=(const ImportStdStratItemsRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline ImportStdStratItemsRequest& operator=(ImportStdStratItemsRequest&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const ImportStdStratItemsRequest& default_instance() {
    return *internal_default_instance();
  }
  static inline const ImportStdStratItemsRequest* internal_default_instance() {
    return reinterpret_cast<const ImportStdStratItemsRequest*>(
               &_ImportStdStratItemsRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    97;

  friend void swap(ImportStdStratItemsRequest& a, ImportStdStratItemsRequest& b) {
    a.Swap(&b);
  }
  inline void Swap(ImportStdStratItemsRequest* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(ImportStdStratItemsRequest* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline ImportStdStratItemsRequest* New() const final {
    return CreateMaybeMessage<ImportStdStratItemsRequest>(nullptr);
  }

  ImportStdStratItemsRequest* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<ImportStdStratItemsRequest>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const ImportStdStratItemsRequest& from);
  void MergeFrom(const ImportStdStratItemsRequest& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(ImportStdStratItemsRequest* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "smart3dmap.v1.ImportStdStratItemsRequest";
  }
  protected:
  explicit ImportStdStratItemsRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    return ::descriptor_table_data_5fengine_2fdata_5fengine_2eproto_metadata_getter(kIndexInFileMessages);
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kItemsFieldNumber = 3,
    kDbIdFieldNumber = 1,
    kStratIdFieldNumber = 2,
  };
  // repeated .smart3dmap.v1.StdStrat.Item items = 3;
  int items_size() const;
  private:
  int _internal_items_size() const;
  public:
  void clear_items();
  ::smart3dmap::v1::StdStrat_Item* mutable_items(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::smart3dmap::v1::StdStrat_Item >*
      mutable_items();
  private:
  const ::smart3dmap::v1::StdStrat_Item& _internal_items(int index) const;
  ::smart3dmap::v1::StdStrat_Item* _internal_add_items();
  public:
  const ::smart3dmap::v1::StdStrat_Item& items(int index) const;
  ::smart3dmap::v1::StdStrat_Item* add_items();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::smart3dmap::v1::StdStrat_Item >&
      items() const;

  // int32 db_id = 1;
  void clear_db_id();
  ::PROTOBUF_NAMESPACE_ID::int32 db_id() const;
  void set_db_id(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_db_id() const;
  void _internal_set_db_id(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // int32 strat_id = 2;
  void clear_strat_id();
  ::PROTOBUF_NAMESPACE_ID::int32 strat_id() const;
  void set_strat_id(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_strat_id() const;
  void _internal_set_strat_id(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // @@protoc_insertion_point(class_scope:smart3dmap.v1.ImportStdStratItemsRequest)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::smart3dmap::v1::StdStrat_Item > items_;
  ::PROTOBUF_NAMESPACE_ID::int32 db_id_;
  ::PROTOBUF_NAMESPACE_ID::int32 strat_id_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_data_5fengine_2fdata_5fengine_2eproto;
};
// -------------------------------------------------------------------

class LIBS3DMGRPC_API ImportStdStratItemsResponse PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:smart3dmap.v1.ImportStdStratItemsResponse) */ {
 public:
  inline ImportStdStratItemsResponse() : ImportStdStratItemsResponse(nullptr) {}
  virtual ~ImportStdStratItemsResponse();
  explicit constexpr ImportStdStratItemsResponse(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  ImportStdStratItemsResponse(const ImportStdStratItemsResponse& from);
  ImportStdStratItemsResponse(ImportStdStratItemsResponse&& from) noexcept
    : ImportStdStratItemsResponse() {
    *this = ::std::move(from);
  }

  inline ImportStdStratItemsResponse& operator=(const ImportStdStratItemsResponse& from) {
    CopyFrom(from);
    return *this;
  }
  inline ImportStdStratItemsResponse& operator=(ImportStdStratItemsResponse&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const ImportStdStratItemsResponse& default_instance() {
    return *internal_default_instance();
  }
  static inline const ImportStdStratItemsResponse* internal_default_instance() {
    return reinterpret_cast<const ImportStdStratItemsResponse*>(
               &_ImportStdStratItemsResponse_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    98;

  friend void swap(ImportStdStratItemsResponse& a, ImportStdStratItemsResponse& b) {
    a.Swap(&b);
  }
  inline void Swap(ImportStdStratItemsResponse* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(ImportStdStratItemsResponse* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline ImportStdStratItemsResponse* New() const final {
    return CreateMaybeMessage<ImportStdStratItemsResponse>(nullptr);
  }

  ImportStdStratItemsResponse* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<ImportStdStratItemsResponse>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const ImportStdStratItemsResponse& from);
  void MergeFrom(const ImportStdStratItemsResponse& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(ImportStdStratItemsResponse* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "smart3dmap.v1.ImportStdStratItemsResponse";
  }
  protected:
  explicit ImportStdStratItemsResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    return ::descriptor_table_data_5fengine_2fdata_5fengine_2eproto_metadata_getter(kIndexInFileMessages);
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kErrorFieldNumber = 2,
    kStatusFieldNumber = 1,
  };
  // string error = 2;
  void clear_error();
  const std::string& error() const;
  void set_error(const std::string& value);
  void set_error(std::string&& value);
  void set_error(const char* value);
  void set_error(const char* value, size_t size);
  std::string* mutable_error();
  std::string* release_error();
  void set_allocated_error(std::string* error);
  private:
  const std::string& _internal_error() const;
  void _internal_set_error(const std::string& value);
  std::string* _internal_mutable_error();
  public:

  // bool status = 1;
  void clear_status();
  bool status() const;
  void set_status(bool value);
  private:
  bool _internal_status() const;
  void _internal_set_status(bool value);
  public:

  // @@protoc_insertion_point(class_scope:smart3dmap.v1.ImportStdStratItemsResponse)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr error_;
  bool status_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_data_5fengine_2fdata_5fengine_2eproto;
};
// -------------------------------------------------------------------

class LIBS3DMGRPC_API GeoSurveyProject PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:smart3dmap.v1.GeoSurveyProject) */ {
 public:
  inline GeoSurveyProject() : GeoSurveyProject(nullptr) {}
  virtual ~GeoSurveyProject();
  explicit constexpr GeoSurveyProject(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  GeoSurveyProject(const GeoSurveyProject& from);
  GeoSurveyProject(GeoSurveyProject&& from) noexcept
    : GeoSurveyProject() {
    *this = ::std::move(from);
  }

  inline GeoSurveyProject& operator=(const GeoSurveyProject& from) {
    CopyFrom(from);
    return *this;
  }
  inline GeoSurveyProject& operator=(GeoSurveyProject&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const GeoSurveyProject& default_instance() {
    return *internal_default_instance();
  }
  static inline const GeoSurveyProject* internal_default_instance() {
    return reinterpret_cast<const GeoSurveyProject*>(
               &_GeoSurveyProject_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    99;

  friend void swap(GeoSurveyProject& a, GeoSurveyProject& b) {
    a.Swap(&b);
  }
  inline void Swap(GeoSurveyProject* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(GeoSurveyProject* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline GeoSurveyProject* New() const final {
    return CreateMaybeMessage<GeoSurveyProject>(nullptr);
  }

  GeoSurveyProject* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<GeoSurveyProject>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const GeoSurveyProject& from);
  void MergeFrom(const GeoSurveyProject& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(GeoSurveyProject* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "smart3dmap.v1.GeoSurveyProject";
  }
  protected:
  explicit GeoSurveyProject(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    return ::descriptor_table_data_5fengine_2fdata_5fengine_2eproto_metadata_getter(kIndexInFileMessages);
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kNameFieldNumber = 3,
    kCategoryFieldNumber = 4,
    kConstructionOrganizationFieldNumber = 5,
    kStartDateFieldNumber = 6,
    kEndDateFieldNumber = 7,
    kDbIdFieldNumber = 1,
    kIdFieldNumber = 2,
  };
  // string name = 3;
  void clear_name();
  const std::string& name() const;
  void set_name(const std::string& value);
  void set_name(std::string&& value);
  void set_name(const char* value);
  void set_name(const char* value, size_t size);
  std::string* mutable_name();
  std::string* release_name();
  void set_allocated_name(std::string* name);
  private:
  const std::string& _internal_name() const;
  void _internal_set_name(const std::string& value);
  std::string* _internal_mutable_name();
  public:

  // string category = 4;
  void clear_category();
  const std::string& category() const;
  void set_category(const std::string& value);
  void set_category(std::string&& value);
  void set_category(const char* value);
  void set_category(const char* value, size_t size);
  std::string* mutable_category();
  std::string* release_category();
  void set_allocated_category(std::string* category);
  private:
  const std::string& _internal_category() const;
  void _internal_set_category(const std::string& value);
  std::string* _internal_mutable_category();
  public:

  // string construction_organization = 5;
  void clear_construction_organization();
  const std::string& construction_organization() const;
  void set_construction_organization(const std::string& value);
  void set_construction_organization(std::string&& value);
  void set_construction_organization(const char* value);
  void set_construction_organization(const char* value, size_t size);
  std::string* mutable_construction_organization();
  std::string* release_construction_organization();
  void set_allocated_construction_organization(std::string* construction_organization);
  private:
  const std::string& _internal_construction_organization() const;
  void _internal_set_construction_organization(const std::string& value);
  std::string* _internal_mutable_construction_organization();
  public:

  // .google.protobuf.Timestamp start_date = 6;
  bool has_start_date() const;
  private:
  bool _internal_has_start_date() const;
  public:
  void clear_start_date();
  const PROTOBUF_NAMESPACE_ID::Timestamp& start_date() const;
  PROTOBUF_NAMESPACE_ID::Timestamp* release_start_date();
  PROTOBUF_NAMESPACE_ID::Timestamp* mutable_start_date();
  void set_allocated_start_date(PROTOBUF_NAMESPACE_ID::Timestamp* start_date);
  private:
  const PROTOBUF_NAMESPACE_ID::Timestamp& _internal_start_date() const;
  PROTOBUF_NAMESPACE_ID::Timestamp* _internal_mutable_start_date();
  public:
  void unsafe_arena_set_allocated_start_date(
      PROTOBUF_NAMESPACE_ID::Timestamp* start_date);
  PROTOBUF_NAMESPACE_ID::Timestamp* unsafe_arena_release_start_date();

  // .google.protobuf.Timestamp end_date = 7;
  bool has_end_date() const;
  private:
  bool _internal_has_end_date() const;
  public:
  void clear_end_date();
  const PROTOBUF_NAMESPACE_ID::Timestamp& end_date() const;
  PROTOBUF_NAMESPACE_ID::Timestamp* release_end_date();
  PROTOBUF_NAMESPACE_ID::Timestamp* mutable_end_date();
  void set_allocated_end_date(PROTOBUF_NAMESPACE_ID::Timestamp* end_date);
  private:
  const PROTOBUF_NAMESPACE_ID::Timestamp& _internal_end_date() const;
  PROTOBUF_NAMESPACE_ID::Timestamp* _internal_mutable_end_date();
  public:
  void unsafe_arena_set_allocated_end_date(
      PROTOBUF_NAMESPACE_ID::Timestamp* end_date);
  PROTOBUF_NAMESPACE_ID::Timestamp* unsafe_arena_release_end_date();

  // int32 db_id = 1;
  void clear_db_id();
  ::PROTOBUF_NAMESPACE_ID::int32 db_id() const;
  void set_db_id(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_db_id() const;
  void _internal_set_db_id(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // int32 id = 2;
  void clear_id();
  ::PROTOBUF_NAMESPACE_ID::int32 id() const;
  void set_id(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_id() const;
  void _internal_set_id(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // @@protoc_insertion_point(class_scope:smart3dmap.v1.GeoSurveyProject)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr name_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr category_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr construction_organization_;
  PROTOBUF_NAMESPACE_ID::Timestamp* start_date_;
  PROTOBUF_NAMESPACE_ID::Timestamp* end_date_;
  ::PROTOBUF_NAMESPACE_ID::int32 db_id_;
  ::PROTOBUF_NAMESPACE_ID::int32 id_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_data_5fengine_2fdata_5fengine_2eproto;
};
// -------------------------------------------------------------------

class LIBS3DMGRPC_API GeographicPosition PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:smart3dmap.v1.GeographicPosition) */ {
 public:
  inline GeographicPosition() : GeographicPosition(nullptr) {}
  virtual ~GeographicPosition();
  explicit constexpr GeographicPosition(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  GeographicPosition(const GeographicPosition& from);
  GeographicPosition(GeographicPosition&& from) noexcept
    : GeographicPosition() {
    *this = ::std::move(from);
  }

  inline GeographicPosition& operator=(const GeographicPosition& from) {
    CopyFrom(from);
    return *this;
  }
  inline GeographicPosition& operator=(GeographicPosition&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const GeographicPosition& default_instance() {
    return *internal_default_instance();
  }
  static inline const GeographicPosition* internal_default_instance() {
    return reinterpret_cast<const GeographicPosition*>(
               &_GeographicPosition_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    100;

  friend void swap(GeographicPosition& a, GeographicPosition& b) {
    a.Swap(&b);
  }
  inline void Swap(GeographicPosition* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(GeographicPosition* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline GeographicPosition* New() const final {
    return CreateMaybeMessage<GeographicPosition>(nullptr);
  }

  GeographicPosition* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<GeographicPosition>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const GeographicPosition& from);
  void MergeFrom(const GeographicPosition& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(GeographicPosition* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "smart3dmap.v1.GeographicPosition";
  }
  protected:
  explicit GeographicPosition(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    return ::descriptor_table_data_5fengine_2fdata_5fengine_2eproto_metadata_getter(kIndexInFileMessages);
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kCrsFieldNumber = 1,
    kZrsFieldNumber = 4,
    kZFieldNumber = 5,
    kXFieldNumber = 2,
    kYFieldNumber = 3,
  };
  // string crs = 1;
  void clear_crs();
  const std::string& crs() const;
  void set_crs(const std::string& value);
  void set_crs(std::string&& value);
  void set_crs(const char* value);
  void set_crs(const char* value, size_t size);
  std::string* mutable_crs();
  std::string* release_crs();
  void set_allocated_crs(std::string* crs);
  private:
  const std::string& _internal_crs() const;
  void _internal_set_crs(const std::string& value);
  std::string* _internal_mutable_crs();
  public:

  // .google.protobuf.StringValue zrs = 4;
  bool has_zrs() const;
  private:
  bool _internal_has_zrs() const;
  public:
  void clear_zrs();
  const PROTOBUF_NAMESPACE_ID::StringValue& zrs() const;
  PROTOBUF_NAMESPACE_ID::StringValue* release_zrs();
  PROTOBUF_NAMESPACE_ID::StringValue* mutable_zrs();
  void set_allocated_zrs(PROTOBUF_NAMESPACE_ID::StringValue* zrs);
  private:
  const PROTOBUF_NAMESPACE_ID::StringValue& _internal_zrs() const;
  PROTOBUF_NAMESPACE_ID::StringValue* _internal_mutable_zrs();
  public:
  void unsafe_arena_set_allocated_zrs(
      PROTOBUF_NAMESPACE_ID::StringValue* zrs);
  PROTOBUF_NAMESPACE_ID::StringValue* unsafe_arena_release_zrs();

  // .google.protobuf.DoubleValue z = 5;
  bool has_z() const;
  private:
  bool _internal_has_z() const;
  public:
  void clear_z();
  const PROTOBUF_NAMESPACE_ID::DoubleValue& z() const;
  PROTOBUF_NAMESPACE_ID::DoubleValue* release_z();
  PROTOBUF_NAMESPACE_ID::DoubleValue* mutable_z();
  void set_allocated_z(PROTOBUF_NAMESPACE_ID::DoubleValue* z);
  private:
  const PROTOBUF_NAMESPACE_ID::DoubleValue& _internal_z() const;
  PROTOBUF_NAMESPACE_ID::DoubleValue* _internal_mutable_z();
  public:
  void unsafe_arena_set_allocated_z(
      PROTOBUF_NAMESPACE_ID::DoubleValue* z);
  PROTOBUF_NAMESPACE_ID::DoubleValue* unsafe_arena_release_z();

  // double x = 2;
  void clear_x();
  double x() const;
  void set_x(double value);
  private:
  double _internal_x() const;
  void _internal_set_x(double value);
  public:

  // double y = 3;
  void clear_y();
  double y() const;
  void set_y(double value);
  private:
  double _internal_y() const;
  void _internal_set_y(double value);
  public:

  // @@protoc_insertion_point(class_scope:smart3dmap.v1.GeographicPosition)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr crs_;
  PROTOBUF_NAMESPACE_ID::StringValue* zrs_;
  PROTOBUF_NAMESPACE_ID::DoubleValue* z_;
  double x_;
  double y_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_data_5fengine_2fdata_5fengine_2eproto;
};
// -------------------------------------------------------------------

class LIBS3DMGRPC_API Drill PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:smart3dmap.v1.Drill) */ {
 public:
  inline Drill() : Drill(nullptr) {}
  virtual ~Drill();
  explicit constexpr Drill(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  Drill(const Drill& from);
  Drill(Drill&& from) noexcept
    : Drill() {
    *this = ::std::move(from);
  }

  inline Drill& operator=(const Drill& from) {
    CopyFrom(from);
    return *this;
  }
  inline Drill& operator=(Drill&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const Drill& default_instance() {
    return *internal_default_instance();
  }
  static inline const Drill* internal_default_instance() {
    return reinterpret_cast<const Drill*>(
               &_Drill_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    101;

  friend void swap(Drill& a, Drill& b) {
    a.Swap(&b);
  }
  inline void Swap(Drill* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(Drill* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline Drill* New() const final {
    return CreateMaybeMessage<Drill>(nullptr);
  }

  Drill* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<Drill>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const Drill& from);
  void MergeFrom(const Drill& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Drill* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "smart3dmap.v1.Drill";
  }
  protected:
  explicit Drill(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    return ::descriptor_table_data_5fengine_2fdata_5fengine_2eproto_metadata_getter(kIndexInFileMessages);
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kCodeFieldNumber = 3,
    kOriginCodeFieldNumber = 4,
    kTypeFieldNumber = 5,
    kArchiveOrganizationFieldNumber = 7,
    kDistrictFieldNumber = 12,
    kPositionFieldNumber = 8,
    kOriginPositionFieldNumber = 9,
    kStartDateFieldNumber = 13,
    kEndDateFieldNumber = 14,
    kLongitudeFieldNumber = 16,
    kLatitudeFieldNumber = 17,
    kDbIdFieldNumber = 1,
    kIdFieldNumber = 2,
    kDepthFieldNumber = 10,
    kGeoSurveyProjectIdFieldNumber = 6,
    kIsVirtualDrillFieldNumber = 15,
    kStableWaterDepthFieldNumber = 11,
  };
  // string code = 3;
  void clear_code();
  const std::string& code() const;
  void set_code(const std::string& value);
  void set_code(std::string&& value);
  void set_code(const char* value);
  void set_code(const char* value, size_t size);
  std::string* mutable_code();
  std::string* release_code();
  void set_allocated_code(std::string* code);
  private:
  const std::string& _internal_code() const;
  void _internal_set_code(const std::string& value);
  std::string* _internal_mutable_code();
  public:

  // string origin_code = 4;
  void clear_origin_code();
  const std::string& origin_code() const;
  void set_origin_code(const std::string& value);
  void set_origin_code(std::string&& value);
  void set_origin_code(const char* value);
  void set_origin_code(const char* value, size_t size);
  std::string* mutable_origin_code();
  std::string* release_origin_code();
  void set_allocated_origin_code(std::string* origin_code);
  private:
  const std::string& _internal_origin_code() const;
  void _internal_set_origin_code(const std::string& value);
  std::string* _internal_mutable_origin_code();
  public:

  // string type = 5;
  void clear_type();
  const std::string& type() const;
  void set_type(const std::string& value);
  void set_type(std::string&& value);
  void set_type(const char* value);
  void set_type(const char* value, size_t size);
  std::string* mutable_type();
  std::string* release_type();
  void set_allocated_type(std::string* type);
  private:
  const std::string& _internal_type() const;
  void _internal_set_type(const std::string& value);
  std::string* _internal_mutable_type();
  public:

  // string archive_organization = 7;
  void clear_archive_organization();
  const std::string& archive_organization() const;
  void set_archive_organization(const std::string& value);
  void set_archive_organization(std::string&& value);
  void set_archive_organization(const char* value);
  void set_archive_organization(const char* value, size_t size);
  std::string* mutable_archive_organization();
  std::string* release_archive_organization();
  void set_allocated_archive_organization(std::string* archive_organization);
  private:
  const std::string& _internal_archive_organization() const;
  void _internal_set_archive_organization(const std::string& value);
  std::string* _internal_mutable_archive_organization();
  public:

  // string district = 12;
  void clear_district();
  const std::string& district() const;
  void set_district(const std::string& value);
  void set_district(std::string&& value);
  void set_district(const char* value);
  void set_district(const char* value, size_t size);
  std::string* mutable_district();
  std::string* release_district();
  void set_allocated_district(std::string* district);
  private:
  const std::string& _internal_district() const;
  void _internal_set_district(const std::string& value);
  std::string* _internal_mutable_district();
  public:

  // .smart3dmap.v1.GeographicPosition position = 8;
  bool has_position() const;
  private:
  bool _internal_has_position() const;
  public:
  void clear_position();
  const ::smart3dmap::v1::GeographicPosition& position() const;
  ::smart3dmap::v1::GeographicPosition* release_position();
  ::smart3dmap::v1::GeographicPosition* mutable_position();
  void set_allocated_position(::smart3dmap::v1::GeographicPosition* position);
  private:
  const ::smart3dmap::v1::GeographicPosition& _internal_position() const;
  ::smart3dmap::v1::GeographicPosition* _internal_mutable_position();
  public:
  void unsafe_arena_set_allocated_position(
      ::smart3dmap::v1::GeographicPosition* position);
  ::smart3dmap::v1::GeographicPosition* unsafe_arena_release_position();

  // .smart3dmap.v1.GeographicPosition origin_position = 9;
  bool has_origin_position() const;
  private:
  bool _internal_has_origin_position() const;
  public:
  void clear_origin_position();
  const ::smart3dmap::v1::GeographicPosition& origin_position() const;
  ::smart3dmap::v1::GeographicPosition* release_origin_position();
  ::smart3dmap::v1::GeographicPosition* mutable_origin_position();
  void set_allocated_origin_position(::smart3dmap::v1::GeographicPosition* origin_position);
  private:
  const ::smart3dmap::v1::GeographicPosition& _internal_origin_position() const;
  ::smart3dmap::v1::GeographicPosition* _internal_mutable_origin_position();
  public:
  void unsafe_arena_set_allocated_origin_position(
      ::smart3dmap::v1::GeographicPosition* origin_position);
  ::smart3dmap::v1::GeographicPosition* unsafe_arena_release_origin_position();

  // .google.protobuf.Timestamp start_date = 13;
  bool has_start_date() const;
  private:
  bool _internal_has_start_date() const;
  public:
  void clear_start_date();
  const PROTOBUF_NAMESPACE_ID::Timestamp& start_date() const;
  PROTOBUF_NAMESPACE_ID::Timestamp* release_start_date();
  PROTOBUF_NAMESPACE_ID::Timestamp* mutable_start_date();
  void set_allocated_start_date(PROTOBUF_NAMESPACE_ID::Timestamp* start_date);
  private:
  const PROTOBUF_NAMESPACE_ID::Timestamp& _internal_start_date() const;
  PROTOBUF_NAMESPACE_ID::Timestamp* _internal_mutable_start_date();
  public:
  void unsafe_arena_set_allocated_start_date(
      PROTOBUF_NAMESPACE_ID::Timestamp* start_date);
  PROTOBUF_NAMESPACE_ID::Timestamp* unsafe_arena_release_start_date();

  // .google.protobuf.Timestamp end_date = 14;
  bool has_end_date() const;
  private:
  bool _internal_has_end_date() const;
  public:
  void clear_end_date();
  const PROTOBUF_NAMESPACE_ID::Timestamp& end_date() const;
  PROTOBUF_NAMESPACE_ID::Timestamp* release_end_date();
  PROTOBUF_NAMESPACE_ID::Timestamp* mutable_end_date();
  void set_allocated_end_date(PROTOBUF_NAMESPACE_ID::Timestamp* end_date);
  private:
  const PROTOBUF_NAMESPACE_ID::Timestamp& _internal_end_date() const;
  PROTOBUF_NAMESPACE_ID::Timestamp* _internal_mutable_end_date();
  public:
  void unsafe_arena_set_allocated_end_date(
      PROTOBUF_NAMESPACE_ID::Timestamp* end_date);
  PROTOBUF_NAMESPACE_ID::Timestamp* unsafe_arena_release_end_date();

  // .google.protobuf.DoubleValue longitude = 16;
  bool has_longitude() const;
  private:
  bool _internal_has_longitude() const;
  public:
  void clear_longitude();
  const PROTOBUF_NAMESPACE_ID::DoubleValue& longitude() const;
  PROTOBUF_NAMESPACE_ID::DoubleValue* release_longitude();
  PROTOBUF_NAMESPACE_ID::DoubleValue* mutable_longitude();
  void set_allocated_longitude(PROTOBUF_NAMESPACE_ID::DoubleValue* longitude);
  private:
  const PROTOBUF_NAMESPACE_ID::DoubleValue& _internal_longitude() const;
  PROTOBUF_NAMESPACE_ID::DoubleValue* _internal_mutable_longitude();
  public:
  void unsafe_arena_set_allocated_longitude(
      PROTOBUF_NAMESPACE_ID::DoubleValue* longitude);
  PROTOBUF_NAMESPACE_ID::DoubleValue* unsafe_arena_release_longitude();

  // .google.protobuf.DoubleValue latitude = 17;
  bool has_latitude() const;
  private:
  bool _internal_has_latitude() const;
  public:
  void clear_latitude();
  const PROTOBUF_NAMESPACE_ID::DoubleValue& latitude() const;
  PROTOBUF_NAMESPACE_ID::DoubleValue* release_latitude();
  PROTOBUF_NAMESPACE_ID::DoubleValue* mutable_latitude();
  void set_allocated_latitude(PROTOBUF_NAMESPACE_ID::DoubleValue* latitude);
  private:
  const PROTOBUF_NAMESPACE_ID::DoubleValue& _internal_latitude() const;
  PROTOBUF_NAMESPACE_ID::DoubleValue* _internal_mutable_latitude();
  public:
  void unsafe_arena_set_allocated_latitude(
      PROTOBUF_NAMESPACE_ID::DoubleValue* latitude);
  PROTOBUF_NAMESPACE_ID::DoubleValue* unsafe_arena_release_latitude();

  // int32 db_id = 1;
  void clear_db_id();
  ::PROTOBUF_NAMESPACE_ID::int32 db_id() const;
  void set_db_id(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_db_id() const;
  void _internal_set_db_id(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // int32 id = 2;
  void clear_id();
  ::PROTOBUF_NAMESPACE_ID::int32 id() const;
  void set_id(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_id() const;
  void _internal_set_id(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // double depth = 10;
  void clear_depth();
  double depth() const;
  void set_depth(double value);
  private:
  double _internal_depth() const;
  void _internal_set_depth(double value);
  public:

  // int32 geo_survey_project_id = 6;
  void clear_geo_survey_project_id();
  ::PROTOBUF_NAMESPACE_ID::int32 geo_survey_project_id() const;
  void set_geo_survey_project_id(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_geo_survey_project_id() const;
  void _internal_set_geo_survey_project_id(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // bool is_virtual_drill = 15;
  void clear_is_virtual_drill();
  bool is_virtual_drill() const;
  void set_is_virtual_drill(bool value);
  private:
  bool _internal_is_virtual_drill() const;
  void _internal_set_is_virtual_drill(bool value);
  public:

  // double stable_water_depth = 11;
  void clear_stable_water_depth();
  double stable_water_depth() const;
  void set_stable_water_depth(double value);
  private:
  double _internal_stable_water_depth() const;
  void _internal_set_stable_water_depth(double value);
  public:

  // @@protoc_insertion_point(class_scope:smart3dmap.v1.Drill)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr code_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr origin_code_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr type_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr archive_organization_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr district_;
  ::smart3dmap::v1::GeographicPosition* position_;
  ::smart3dmap::v1::GeographicPosition* origin_position_;
  PROTOBUF_NAMESPACE_ID::Timestamp* start_date_;
  PROTOBUF_NAMESPACE_ID::Timestamp* end_date_;
  PROTOBUF_NAMESPACE_ID::DoubleValue* longitude_;
  PROTOBUF_NAMESPACE_ID::DoubleValue* latitude_;
  ::PROTOBUF_NAMESPACE_ID::int32 db_id_;
  ::PROTOBUF_NAMESPACE_ID::int32 id_;
  double depth_;
  ::PROTOBUF_NAMESPACE_ID::int32 geo_survey_project_id_;
  bool is_virtual_drill_;
  double stable_water_depth_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_data_5fengine_2fdata_5fengine_2eproto;
};
// -------------------------------------------------------------------

class LIBS3DMGRPC_API ImportDrillStatus PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:smart3dmap.v1.ImportDrillStatus) */ {
 public:
  inline ImportDrillStatus() : ImportDrillStatus(nullptr) {}
  virtual ~ImportDrillStatus();
  explicit constexpr ImportDrillStatus(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  ImportDrillStatus(const ImportDrillStatus& from);
  ImportDrillStatus(ImportDrillStatus&& from) noexcept
    : ImportDrillStatus() {
    *this = ::std::move(from);
  }

  inline ImportDrillStatus& operator=(const ImportDrillStatus& from) {
    CopyFrom(from);
    return *this;
  }
  inline ImportDrillStatus& operator=(ImportDrillStatus&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const ImportDrillStatus& default_instance() {
    return *internal_default_instance();
  }
  static inline const ImportDrillStatus* internal_default_instance() {
    return reinterpret_cast<const ImportDrillStatus*>(
               &_ImportDrillStatus_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    102;

  friend void swap(ImportDrillStatus& a, ImportDrillStatus& b) {
    a.Swap(&b);
  }
  inline void Swap(ImportDrillStatus* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(ImportDrillStatus* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline ImportDrillStatus* New() const final {
    return CreateMaybeMessage<ImportDrillStatus>(nullptr);
  }

  ImportDrillStatus* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<ImportDrillStatus>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const ImportDrillStatus& from);
  void MergeFrom(const ImportDrillStatus& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(ImportDrillStatus* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "smart3dmap.v1.ImportDrillStatus";
  }
  protected:
  explicit ImportDrillStatus(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    return ::descriptor_table_data_5fengine_2fdata_5fengine_2eproto_metadata_getter(kIndexInFileMessages);
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kErrorFieldNumber = 2,
    kDrillCodeFieldNumber = 5,
    kStatusFieldNumber = 1,
    kDbIdFieldNumber = 3,
    kDrillIdFieldNumber = 4,
  };
  // string error = 2;
  void clear_error();
  const std::string& error() const;
  void set_error(const std::string& value);
  void set_error(std::string&& value);
  void set_error(const char* value);
  void set_error(const char* value, size_t size);
  std::string* mutable_error();
  std::string* release_error();
  void set_allocated_error(std::string* error);
  private:
  const std::string& _internal_error() const;
  void _internal_set_error(const std::string& value);
  std::string* _internal_mutable_error();
  public:

  // string drill_code = 5;
  void clear_drill_code();
  const std::string& drill_code() const;
  void set_drill_code(const std::string& value);
  void set_drill_code(std::string&& value);
  void set_drill_code(const char* value);
  void set_drill_code(const char* value, size_t size);
  std::string* mutable_drill_code();
  std::string* release_drill_code();
  void set_allocated_drill_code(std::string* drill_code);
  private:
  const std::string& _internal_drill_code() const;
  void _internal_set_drill_code(const std::string& value);
  std::string* _internal_mutable_drill_code();
  public:

  // bool status = 1;
  void clear_status();
  bool status() const;
  void set_status(bool value);
  private:
  bool _internal_status() const;
  void _internal_set_status(bool value);
  public:

  // int32 db_id = 3;
  void clear_db_id();
  ::PROTOBUF_NAMESPACE_ID::int32 db_id() const;
  void set_db_id(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_db_id() const;
  void _internal_set_db_id(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // int32 drill_id = 4;
  void clear_drill_id();
  ::PROTOBUF_NAMESPACE_ID::int32 drill_id() const;
  void set_drill_id(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_drill_id() const;
  void _internal_set_drill_id(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // @@protoc_insertion_point(class_scope:smart3dmap.v1.ImportDrillStatus)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr error_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr drill_code_;
  bool status_;
  ::PROTOBUF_NAMESPACE_ID::int32 db_id_;
  ::PROTOBUF_NAMESPACE_ID::int32 drill_id_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_data_5fengine_2fdata_5fengine_2eproto;
};
// -------------------------------------------------------------------

class LIBS3DMGRPC_API ImportDrillsRequest PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:smart3dmap.v1.ImportDrillsRequest) */ {
 public:
  inline ImportDrillsRequest() : ImportDrillsRequest(nullptr) {}
  virtual ~ImportDrillsRequest();
  explicit constexpr ImportDrillsRequest(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  ImportDrillsRequest(const ImportDrillsRequest& from);
  ImportDrillsRequest(ImportDrillsRequest&& from) noexcept
    : ImportDrillsRequest() {
    *this = ::std::move(from);
  }

  inline ImportDrillsRequest& operator=(const ImportDrillsRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline ImportDrillsRequest& operator=(ImportDrillsRequest&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const ImportDrillsRequest& default_instance() {
    return *internal_default_instance();
  }
  static inline const ImportDrillsRequest* internal_default_instance() {
    return reinterpret_cast<const ImportDrillsRequest*>(
               &_ImportDrillsRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    103;

  friend void swap(ImportDrillsRequest& a, ImportDrillsRequest& b) {
    a.Swap(&b);
  }
  inline void Swap(ImportDrillsRequest* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(ImportDrillsRequest* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline ImportDrillsRequest* New() const final {
    return CreateMaybeMessage<ImportDrillsRequest>(nullptr);
  }

  ImportDrillsRequest* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<ImportDrillsRequest>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const ImportDrillsRequest& from);
  void MergeFrom(const ImportDrillsRequest& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(ImportDrillsRequest* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "smart3dmap.v1.ImportDrillsRequest";
  }
  protected:
  explicit ImportDrillsRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    return ::descriptor_table_data_5fengine_2fdata_5fengine_2eproto_metadata_getter(kIndexInFileMessages);
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kDrillsFieldNumber = 2,
    kDbIdFieldNumber = 1,
  };
  // repeated .smart3dmap.v1.Drill drills = 2;
  int drills_size() const;
  private:
  int _internal_drills_size() const;
  public:
  void clear_drills();
  ::smart3dmap::v1::Drill* mutable_drills(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::smart3dmap::v1::Drill >*
      mutable_drills();
  private:
  const ::smart3dmap::v1::Drill& _internal_drills(int index) const;
  ::smart3dmap::v1::Drill* _internal_add_drills();
  public:
  const ::smart3dmap::v1::Drill& drills(int index) const;
  ::smart3dmap::v1::Drill* add_drills();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::smart3dmap::v1::Drill >&
      drills() const;

  // int32 db_id = 1;
  void clear_db_id();
  ::PROTOBUF_NAMESPACE_ID::int32 db_id() const;
  void set_db_id(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_db_id() const;
  void _internal_set_db_id(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // @@protoc_insertion_point(class_scope:smart3dmap.v1.ImportDrillsRequest)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::smart3dmap::v1::Drill > drills_;
  ::PROTOBUF_NAMESPACE_ID::int32 db_id_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_data_5fengine_2fdata_5fengine_2eproto;
};
// -------------------------------------------------------------------

class LIBS3DMGRPC_API ImportDrillsResponse PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:smart3dmap.v1.ImportDrillsResponse) */ {
 public:
  inline ImportDrillsResponse() : ImportDrillsResponse(nullptr) {}
  virtual ~ImportDrillsResponse();
  explicit constexpr ImportDrillsResponse(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  ImportDrillsResponse(const ImportDrillsResponse& from);
  ImportDrillsResponse(ImportDrillsResponse&& from) noexcept
    : ImportDrillsResponse() {
    *this = ::std::move(from);
  }

  inline ImportDrillsResponse& operator=(const ImportDrillsResponse& from) {
    CopyFrom(from);
    return *this;
  }
  inline ImportDrillsResponse& operator=(ImportDrillsResponse&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const ImportDrillsResponse& default_instance() {
    return *internal_default_instance();
  }
  static inline const ImportDrillsResponse* internal_default_instance() {
    return reinterpret_cast<const ImportDrillsResponse*>(
               &_ImportDrillsResponse_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    104;

  friend void swap(ImportDrillsResponse& a, ImportDrillsResponse& b) {
    a.Swap(&b);
  }
  inline void Swap(ImportDrillsResponse* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(ImportDrillsResponse* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline ImportDrillsResponse* New() const final {
    return CreateMaybeMessage<ImportDrillsResponse>(nullptr);
  }

  ImportDrillsResponse* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<ImportDrillsResponse>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const ImportDrillsResponse& from);
  void MergeFrom(const ImportDrillsResponse& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(ImportDrillsResponse* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "smart3dmap.v1.ImportDrillsResponse";
  }
  protected:
  explicit ImportDrillsResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    return ::descriptor_table_data_5fengine_2fdata_5fengine_2eproto_metadata_getter(kIndexInFileMessages);
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kErrorFieldNumber = 2,
    kStatusFieldNumber = 1,
  };
  // string error = 2;
  void clear_error();
  const std::string& error() const;
  void set_error(const std::string& value);
  void set_error(std::string&& value);
  void set_error(const char* value);
  void set_error(const char* value, size_t size);
  std::string* mutable_error();
  std::string* release_error();
  void set_allocated_error(std::string* error);
  private:
  const std::string& _internal_error() const;
  void _internal_set_error(const std::string& value);
  std::string* _internal_mutable_error();
  public:

  // bool status = 1;
  void clear_status();
  bool status() const;
  void set_status(bool value);
  private:
  bool _internal_status() const;
  void _internal_set_status(bool value);
  public:

  // @@protoc_insertion_point(class_scope:smart3dmap.v1.ImportDrillsResponse)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr error_;
  bool status_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_data_5fengine_2fdata_5fengine_2eproto;
};
// -------------------------------------------------------------------

class LIBS3DMGRPC_API DrillOriginalLayers_Layer PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:smart3dmap.v1.DrillOriginalLayers.Layer) */ {
 public:
  inline DrillOriginalLayers_Layer() : DrillOriginalLayers_Layer(nullptr) {}
  virtual ~DrillOriginalLayers_Layer();
  explicit constexpr DrillOriginalLayers_Layer(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  DrillOriginalLayers_Layer(const DrillOriginalLayers_Layer& from);
  DrillOriginalLayers_Layer(DrillOriginalLayers_Layer&& from) noexcept
    : DrillOriginalLayers_Layer() {
    *this = ::std::move(from);
  }

  inline DrillOriginalLayers_Layer& operator=(const DrillOriginalLayers_Layer& from) {
    CopyFrom(from);
    return *this;
  }
  inline DrillOriginalLayers_Layer& operator=(DrillOriginalLayers_Layer&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const DrillOriginalLayers_Layer& default_instance() {
    return *internal_default_instance();
  }
  static inline const DrillOriginalLayers_Layer* internal_default_instance() {
    return reinterpret_cast<const DrillOriginalLayers_Layer*>(
               &_DrillOriginalLayers_Layer_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    105;

  friend void swap(DrillOriginalLayers_Layer& a, DrillOriginalLayers_Layer& b) {
    a.Swap(&b);
  }
  inline void Swap(DrillOriginalLayers_Layer* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(DrillOriginalLayers_Layer* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline DrillOriginalLayers_Layer* New() const final {
    return CreateMaybeMessage<DrillOriginalLayers_Layer>(nullptr);
  }

  DrillOriginalLayers_Layer* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<DrillOriginalLayers_Layer>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const DrillOriginalLayers_Layer& from);
  void MergeFrom(const DrillOriginalLayers_Layer& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(DrillOriginalLayers_Layer* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "smart3dmap.v1.DrillOriginalLayers.Layer";
  }
  protected:
  explicit DrillOriginalLayers_Layer(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    return ::descriptor_table_data_5fengine_2fdata_5fengine_2eproto_metadata_getter(kIndexInFileMessages);
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kGeologicaAgeFieldNumber = 1,
    kFormatingCauseFieldNumber = 2,
    kNameFieldNumber = 6,
    kColorFieldNumber = 7,
    kDescriptionFieldNumber = 8,
    kBottomZFieldNumber = 3,
    kBottomDepthFieldNumber = 4,
    kThicknessFieldNumber = 5,
  };
  // string geologica_age = 1;
  void clear_geologica_age();
  const std::string& geologica_age() const;
  void set_geologica_age(const std::string& value);
  void set_geologica_age(std::string&& value);
  void set_geologica_age(const char* value);
  void set_geologica_age(const char* value, size_t size);
  std::string* mutable_geologica_age();
  std::string* release_geologica_age();
  void set_allocated_geologica_age(std::string* geologica_age);
  private:
  const std::string& _internal_geologica_age() const;
  void _internal_set_geologica_age(const std::string& value);
  std::string* _internal_mutable_geologica_age();
  public:

  // string formating_cause = 2;
  void clear_formating_cause();
  const std::string& formating_cause() const;
  void set_formating_cause(const std::string& value);
  void set_formating_cause(std::string&& value);
  void set_formating_cause(const char* value);
  void set_formating_cause(const char* value, size_t size);
  std::string* mutable_formating_cause();
  std::string* release_formating_cause();
  void set_allocated_formating_cause(std::string* formating_cause);
  private:
  const std::string& _internal_formating_cause() const;
  void _internal_set_formating_cause(const std::string& value);
  std::string* _internal_mutable_formating_cause();
  public:

  // string name = 6;
  void clear_name();
  const std::string& name() const;
  void set_name(const std::string& value);
  void set_name(std::string&& value);
  void set_name(const char* value);
  void set_name(const char* value, size_t size);
  std::string* mutable_name();
  std::string* release_name();
  void set_allocated_name(std::string* name);
  private:
  const std::string& _internal_name() const;
  void _internal_set_name(const std::string& value);
  std::string* _internal_mutable_name();
  public:

  // string color = 7;
  void clear_color();
  const std::string& color() const;
  void set_color(const std::string& value);
  void set_color(std::string&& value);
  void set_color(const char* value);
  void set_color(const char* value, size_t size);
  std::string* mutable_color();
  std::string* release_color();
  void set_allocated_color(std::string* color);
  private:
  const std::string& _internal_color() const;
  void _internal_set_color(const std::string& value);
  std::string* _internal_mutable_color();
  public:

  // string description = 8;
  void clear_description();
  const std::string& description() const;
  void set_description(const std::string& value);
  void set_description(std::string&& value);
  void set_description(const char* value);
  void set_description(const char* value, size_t size);
  std::string* mutable_description();
  std::string* release_description();
  void set_allocated_description(std::string* description);
  private:
  const std::string& _internal_description() const;
  void _internal_set_description(const std::string& value);
  std::string* _internal_mutable_description();
  public:

  // double bottom_z = 3;
  void clear_bottom_z();
  double bottom_z() const;
  void set_bottom_z(double value);
  private:
  double _internal_bottom_z() const;
  void _internal_set_bottom_z(double value);
  public:

  // double bottom_depth = 4;
  void clear_bottom_depth();
  double bottom_depth() const;
  void set_bottom_depth(double value);
  private:
  double _internal_bottom_depth() const;
  void _internal_set_bottom_depth(double value);
  public:

  // double thickness = 5;
  void clear_thickness();
  double thickness() const;
  void set_thickness(double value);
  private:
  double _internal_thickness() const;
  void _internal_set_thickness(double value);
  public:

  // @@protoc_insertion_point(class_scope:smart3dmap.v1.DrillOriginalLayers.Layer)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr geologica_age_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr formating_cause_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr name_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr color_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr description_;
  double bottom_z_;
  double bottom_depth_;
  double thickness_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_data_5fengine_2fdata_5fengine_2eproto;
};
// -------------------------------------------------------------------

class LIBS3DMGRPC_API DrillOriginalLayers PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:smart3dmap.v1.DrillOriginalLayers) */ {
 public:
  inline DrillOriginalLayers() : DrillOriginalLayers(nullptr) {}
  virtual ~DrillOriginalLayers();
  explicit constexpr DrillOriginalLayers(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  DrillOriginalLayers(const DrillOriginalLayers& from);
  DrillOriginalLayers(DrillOriginalLayers&& from) noexcept
    : DrillOriginalLayers() {
    *this = ::std::move(from);
  }

  inline DrillOriginalLayers& operator=(const DrillOriginalLayers& from) {
    CopyFrom(from);
    return *this;
  }
  inline DrillOriginalLayers& operator=(DrillOriginalLayers&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const DrillOriginalLayers& default_instance() {
    return *internal_default_instance();
  }
  static inline const DrillOriginalLayers* internal_default_instance() {
    return reinterpret_cast<const DrillOriginalLayers*>(
               &_DrillOriginalLayers_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    106;

  friend void swap(DrillOriginalLayers& a, DrillOriginalLayers& b) {
    a.Swap(&b);
  }
  inline void Swap(DrillOriginalLayers* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(DrillOriginalLayers* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline DrillOriginalLayers* New() const final {
    return CreateMaybeMessage<DrillOriginalLayers>(nullptr);
  }

  DrillOriginalLayers* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<DrillOriginalLayers>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const DrillOriginalLayers& from);
  void MergeFrom(const DrillOriginalLayers& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(DrillOriginalLayers* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "smart3dmap.v1.DrillOriginalLayers";
  }
  protected:
  explicit DrillOriginalLayers(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    return ::descriptor_table_data_5fengine_2fdata_5fengine_2eproto_metadata_getter(kIndexInFileMessages);
  }

  public:

  // nested types ----------------------------------------------------

  typedef DrillOriginalLayers_Layer Layer;

  // accessors -------------------------------------------------------

  enum : int {
    kLayersFieldNumber = 3,
    kDbIdFieldNumber = 1,
    kDrillIdFieldNumber = 2,
  };
  // repeated .smart3dmap.v1.DrillOriginalLayers.Layer layers = 3;
  int layers_size() const;
  private:
  int _internal_layers_size() const;
  public:
  void clear_layers();
  ::smart3dmap::v1::DrillOriginalLayers_Layer* mutable_layers(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::smart3dmap::v1::DrillOriginalLayers_Layer >*
      mutable_layers();
  private:
  const ::smart3dmap::v1::DrillOriginalLayers_Layer& _internal_layers(int index) const;
  ::smart3dmap::v1::DrillOriginalLayers_Layer* _internal_add_layers();
  public:
  const ::smart3dmap::v1::DrillOriginalLayers_Layer& layers(int index) const;
  ::smart3dmap::v1::DrillOriginalLayers_Layer* add_layers();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::smart3dmap::v1::DrillOriginalLayers_Layer >&
      layers() const;

  // int32 db_id = 1;
  void clear_db_id();
  ::PROTOBUF_NAMESPACE_ID::int32 db_id() const;
  void set_db_id(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_db_id() const;
  void _internal_set_db_id(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // int32 drill_id = 2;
  void clear_drill_id();
  ::PROTOBUF_NAMESPACE_ID::int32 drill_id() const;
  void set_drill_id(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_drill_id() const;
  void _internal_set_drill_id(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // @@protoc_insertion_point(class_scope:smart3dmap.v1.DrillOriginalLayers)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::smart3dmap::v1::DrillOriginalLayers_Layer > layers_;
  ::PROTOBUF_NAMESPACE_ID::int32 db_id_;
  ::PROTOBUF_NAMESPACE_ID::int32 drill_id_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_data_5fengine_2fdata_5fengine_2eproto;
};
// -------------------------------------------------------------------

class LIBS3DMGRPC_API DrillStdLayers_Layer PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:smart3dmap.v1.DrillStdLayers.Layer) */ {
 public:
  inline DrillStdLayers_Layer() : DrillStdLayers_Layer(nullptr) {}
  virtual ~DrillStdLayers_Layer();
  explicit constexpr DrillStdLayers_Layer(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  DrillStdLayers_Layer(const DrillStdLayers_Layer& from);
  DrillStdLayers_Layer(DrillStdLayers_Layer&& from) noexcept
    : DrillStdLayers_Layer() {
    *this = ::std::move(from);
  }

  inline DrillStdLayers_Layer& operator=(const DrillStdLayers_Layer& from) {
    CopyFrom(from);
    return *this;
  }
  inline DrillStdLayers_Layer& operator=(DrillStdLayers_Layer&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const DrillStdLayers_Layer& default_instance() {
    return *internal_default_instance();
  }
  static inline const DrillStdLayers_Layer* internal_default_instance() {
    return reinterpret_cast<const DrillStdLayers_Layer*>(
               &_DrillStdLayers_Layer_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    107;

  friend void swap(DrillStdLayers_Layer& a, DrillStdLayers_Layer& b) {
    a.Swap(&b);
  }
  inline void Swap(DrillStdLayers_Layer* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(DrillStdLayers_Layer* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline DrillStdLayers_Layer* New() const final {
    return CreateMaybeMessage<DrillStdLayers_Layer>(nullptr);
  }

  DrillStdLayers_Layer* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<DrillStdLayers_Layer>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const DrillStdLayers_Layer& from);
  void MergeFrom(const DrillStdLayers_Layer& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(DrillStdLayers_Layer* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "smart3dmap.v1.DrillStdLayers.Layer";
  }
  protected:
  explicit DrillStdLayers_Layer(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    return ::descriptor_table_data_5fengine_2fdata_5fengine_2eproto_metadata_getter(kIndexInFileMessages);
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kStratCodeFieldNumber = 1,
    kStratItemLevelFieldNumber = 2,
    kTopDepthFieldNumber = 3,
    kBottomDepthFieldNumber = 4,
  };
  // string strat_code = 1;
  void clear_strat_code();
  const std::string& strat_code() const;
  void set_strat_code(const std::string& value);
  void set_strat_code(std::string&& value);
  void set_strat_code(const char* value);
  void set_strat_code(const char* value, size_t size);
  std::string* mutable_strat_code();
  std::string* release_strat_code();
  void set_allocated_strat_code(std::string* strat_code);
  private:
  const std::string& _internal_strat_code() const;
  void _internal_set_strat_code(const std::string& value);
  std::string* _internal_mutable_strat_code();
  public:

  // string strat_item_level = 2;
  void clear_strat_item_level();
  const std::string& strat_item_level() const;
  void set_strat_item_level(const std::string& value);
  void set_strat_item_level(std::string&& value);
  void set_strat_item_level(const char* value);
  void set_strat_item_level(const char* value, size_t size);
  std::string* mutable_strat_item_level();
  std::string* release_strat_item_level();
  void set_allocated_strat_item_level(std::string* strat_item_level);
  private:
  const std::string& _internal_strat_item_level() const;
  void _internal_set_strat_item_level(const std::string& value);
  std::string* _internal_mutable_strat_item_level();
  public:

  // double top_depth = 3;
  void clear_top_depth();
  double top_depth() const;
  void set_top_depth(double value);
  private:
  double _internal_top_depth() const;
  void _internal_set_top_depth(double value);
  public:

  // double bottom_depth = 4;
  void clear_bottom_depth();
  double bottom_depth() const;
  void set_bottom_depth(double value);
  private:
  double _internal_bottom_depth() const;
  void _internal_set_bottom_depth(double value);
  public:

  // @@protoc_insertion_point(class_scope:smart3dmap.v1.DrillStdLayers.Layer)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr strat_code_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr strat_item_level_;
  double top_depth_;
  double bottom_depth_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_data_5fengine_2fdata_5fengine_2eproto;
};
// -------------------------------------------------------------------

class LIBS3DMGRPC_API DrillStdLayers PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:smart3dmap.v1.DrillStdLayers) */ {
 public:
  inline DrillStdLayers() : DrillStdLayers(nullptr) {}
  virtual ~DrillStdLayers();
  explicit constexpr DrillStdLayers(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  DrillStdLayers(const DrillStdLayers& from);
  DrillStdLayers(DrillStdLayers&& from) noexcept
    : DrillStdLayers() {
    *this = ::std::move(from);
  }

  inline DrillStdLayers& operator=(const DrillStdLayers& from) {
    CopyFrom(from);
    return *this;
  }
  inline DrillStdLayers& operator=(DrillStdLayers&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const DrillStdLayers& default_instance() {
    return *internal_default_instance();
  }
  static inline const DrillStdLayers* internal_default_instance() {
    return reinterpret_cast<const DrillStdLayers*>(
               &_DrillStdLayers_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    108;

  friend void swap(DrillStdLayers& a, DrillStdLayers& b) {
    a.Swap(&b);
  }
  inline void Swap(DrillStdLayers* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(DrillStdLayers* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline DrillStdLayers* New() const final {
    return CreateMaybeMessage<DrillStdLayers>(nullptr);
  }

  DrillStdLayers* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<DrillStdLayers>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const DrillStdLayers& from);
  void MergeFrom(const DrillStdLayers& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(DrillStdLayers* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "smart3dmap.v1.DrillStdLayers";
  }
  protected:
  explicit DrillStdLayers(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    return ::descriptor_table_data_5fengine_2fdata_5fengine_2eproto_metadata_getter(kIndexInFileMessages);
  }

  public:

  // nested types ----------------------------------------------------

  typedef DrillStdLayers_Layer Layer;

  // accessors -------------------------------------------------------

  enum : int {
    kLayersFieldNumber = 4,
    kDbIdFieldNumber = 1,
    kDrillIdFieldNumber = 2,
    kStdStratIdFieldNumber = 3,
  };
  // repeated .smart3dmap.v1.DrillStdLayers.Layer layers = 4;
  int layers_size() const;
  private:
  int _internal_layers_size() const;
  public:
  void clear_layers();
  ::smart3dmap::v1::DrillStdLayers_Layer* mutable_layers(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::smart3dmap::v1::DrillStdLayers_Layer >*
      mutable_layers();
  private:
  const ::smart3dmap::v1::DrillStdLayers_Layer& _internal_layers(int index) const;
  ::smart3dmap::v1::DrillStdLayers_Layer* _internal_add_layers();
  public:
  const ::smart3dmap::v1::DrillStdLayers_Layer& layers(int index) const;
  ::smart3dmap::v1::DrillStdLayers_Layer* add_layers();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::smart3dmap::v1::DrillStdLayers_Layer >&
      layers() const;

  // int32 db_id = 1;
  void clear_db_id();
  ::PROTOBUF_NAMESPACE_ID::int32 db_id() const;
  void set_db_id(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_db_id() const;
  void _internal_set_db_id(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // int32 drill_id = 2;
  void clear_drill_id();
  ::PROTOBUF_NAMESPACE_ID::int32 drill_id() const;
  void set_drill_id(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_drill_id() const;
  void _internal_set_drill_id(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // int32 std_strat_id = 3;
  void clear_std_strat_id();
  ::PROTOBUF_NAMESPACE_ID::int32 std_strat_id() const;
  void set_std_strat_id(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_std_strat_id() const;
  void _internal_set_std_strat_id(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // @@protoc_insertion_point(class_scope:smart3dmap.v1.DrillStdLayers)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::smart3dmap::v1::DrillStdLayers_Layer > layers_;
  ::PROTOBUF_NAMESPACE_ID::int32 db_id_;
  ::PROTOBUF_NAMESPACE_ID::int32 drill_id_;
  ::PROTOBUF_NAMESPACE_ID::int32 std_strat_id_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_data_5fengine_2fdata_5fengine_2eproto;
};
// -------------------------------------------------------------------

class LIBS3DMGRPC_API ImportDrillDataStatus PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:smart3dmap.v1.ImportDrillDataStatus) */ {
 public:
  inline ImportDrillDataStatus() : ImportDrillDataStatus(nullptr) {}
  virtual ~ImportDrillDataStatus();
  explicit constexpr ImportDrillDataStatus(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  ImportDrillDataStatus(const ImportDrillDataStatus& from);
  ImportDrillDataStatus(ImportDrillDataStatus&& from) noexcept
    : ImportDrillDataStatus() {
    *this = ::std::move(from);
  }

  inline ImportDrillDataStatus& operator=(const ImportDrillDataStatus& from) {
    CopyFrom(from);
    return *this;
  }
  inline ImportDrillDataStatus& operator=(ImportDrillDataStatus&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const ImportDrillDataStatus& default_instance() {
    return *internal_default_instance();
  }
  static inline const ImportDrillDataStatus* internal_default_instance() {
    return reinterpret_cast<const ImportDrillDataStatus*>(
               &_ImportDrillDataStatus_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    109;

  friend void swap(ImportDrillDataStatus& a, ImportDrillDataStatus& b) {
    a.Swap(&b);
  }
  inline void Swap(ImportDrillDataStatus* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(ImportDrillDataStatus* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline ImportDrillDataStatus* New() const final {
    return CreateMaybeMessage<ImportDrillDataStatus>(nullptr);
  }

  ImportDrillDataStatus* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<ImportDrillDataStatus>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const ImportDrillDataStatus& from);
  void MergeFrom(const ImportDrillDataStatus& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(ImportDrillDataStatus* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "smart3dmap.v1.ImportDrillDataStatus";
  }
  protected:
  explicit ImportDrillDataStatus(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    return ::descriptor_table_data_5fengine_2fdata_5fengine_2eproto_metadata_getter(kIndexInFileMessages);
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kErrorFieldNumber = 2,
    kStatusFieldNumber = 1,
  };
  // string error = 2;
  void clear_error();
  const std::string& error() const;
  void set_error(const std::string& value);
  void set_error(std::string&& value);
  void set_error(const char* value);
  void set_error(const char* value, size_t size);
  std::string* mutable_error();
  std::string* release_error();
  void set_allocated_error(std::string* error);
  private:
  const std::string& _internal_error() const;
  void _internal_set_error(const std::string& value);
  std::string* _internal_mutable_error();
  public:

  // bool status = 1;
  void clear_status();
  bool status() const;
  void set_status(bool value);
  private:
  bool _internal_status() const;
  void _internal_set_status(bool value);
  public:

  // @@protoc_insertion_point(class_scope:smart3dmap.v1.ImportDrillDataStatus)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr error_;
  bool status_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_data_5fengine_2fdata_5fengine_2eproto;
};
// -------------------------------------------------------------------

class LIBS3DMGRPC_API DrillWaterCorrosivity PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:smart3dmap.v1.DrillWaterCorrosivity) */ {
 public:
  inline DrillWaterCorrosivity() : DrillWaterCorrosivity(nullptr) {}
  virtual ~DrillWaterCorrosivity();
  explicit constexpr DrillWaterCorrosivity(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  DrillWaterCorrosivity(const DrillWaterCorrosivity& from);
  DrillWaterCorrosivity(DrillWaterCorrosivity&& from) noexcept
    : DrillWaterCorrosivity() {
    *this = ::std::move(from);
  }

  inline DrillWaterCorrosivity& operator=(const DrillWaterCorrosivity& from) {
    CopyFrom(from);
    return *this;
  }
  inline DrillWaterCorrosivity& operator=(DrillWaterCorrosivity&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const DrillWaterCorrosivity& default_instance() {
    return *internal_default_instance();
  }
  static inline const DrillWaterCorrosivity* internal_default_instance() {
    return reinterpret_cast<const DrillWaterCorrosivity*>(
               &_DrillWaterCorrosivity_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    110;

  friend void swap(DrillWaterCorrosivity& a, DrillWaterCorrosivity& b) {
    a.Swap(&b);
  }
  inline void Swap(DrillWaterCorrosivity* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(DrillWaterCorrosivity* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline DrillWaterCorrosivity* New() const final {
    return CreateMaybeMessage<DrillWaterCorrosivity>(nullptr);
  }

  DrillWaterCorrosivity* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<DrillWaterCorrosivity>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const DrillWaterCorrosivity& from);
  void MergeFrom(const DrillWaterCorrosivity& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(DrillWaterCorrosivity* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "smart3dmap.v1.DrillWaterCorrosivity";
  }
  protected:
  explicit DrillWaterCorrosivity(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    return ::descriptor_table_data_5fengine_2fdata_5fengine_2eproto_metadata_getter(kIndexInFileMessages);
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kConcreteFieldNumber = 14,
    kSteelBarFieldNumber = 15,
    kDbIdFieldNumber = 1,
    kDrillIdFieldNumber = 2,
    kPhFieldNumber = 3,
    kCo2FieldNumber = 4,
    kSolubleSolidFieldNumber = 5,
    kHco3FieldNumber = 6,
    kClFieldNumber = 7,
    kSo4FieldNumber = 8,
    kMgFieldNumber = 9,
    kNh4FieldNumber = 10,
    kKNaFieldNumber = 11,
    kCaFieldNumber = 12,
    kCo3FieldNumber = 13,
  };
  // string concrete = 14;
  void clear_concrete();
  const std::string& concrete() const;
  void set_concrete(const std::string& value);
  void set_concrete(std::string&& value);
  void set_concrete(const char* value);
  void set_concrete(const char* value, size_t size);
  std::string* mutable_concrete();
  std::string* release_concrete();
  void set_allocated_concrete(std::string* concrete);
  private:
  const std::string& _internal_concrete() const;
  void _internal_set_concrete(const std::string& value);
  std::string* _internal_mutable_concrete();
  public:

  // string steel_bar = 15;
  void clear_steel_bar();
  const std::string& steel_bar() const;
  void set_steel_bar(const std::string& value);
  void set_steel_bar(std::string&& value);
  void set_steel_bar(const char* value);
  void set_steel_bar(const char* value, size_t size);
  std::string* mutable_steel_bar();
  std::string* release_steel_bar();
  void set_allocated_steel_bar(std::string* steel_bar);
  private:
  const std::string& _internal_steel_bar() const;
  void _internal_set_steel_bar(const std::string& value);
  std::string* _internal_mutable_steel_bar();
  public:

  // int32 db_id = 1;
  void clear_db_id();
  ::PROTOBUF_NAMESPACE_ID::int32 db_id() const;
  void set_db_id(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_db_id() const;
  void _internal_set_db_id(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // int32 drill_id = 2;
  void clear_drill_id();
  ::PROTOBUF_NAMESPACE_ID::int32 drill_id() const;
  void set_drill_id(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_drill_id() const;
  void _internal_set_drill_id(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // double ph = 3;
  void clear_ph();
  double ph() const;
  void set_ph(double value);
  private:
  double _internal_ph() const;
  void _internal_set_ph(double value);
  public:

  // double co2 = 4;
  void clear_co2();
  double co2() const;
  void set_co2(double value);
  private:
  double _internal_co2() const;
  void _internal_set_co2(double value);
  public:

  // double soluble_solid = 5;
  void clear_soluble_solid();
  double soluble_solid() const;
  void set_soluble_solid(double value);
  private:
  double _internal_soluble_solid() const;
  void _internal_set_soluble_solid(double value);
  public:

  // double hco3 = 6;
  void clear_hco3();
  double hco3() const;
  void set_hco3(double value);
  private:
  double _internal_hco3() const;
  void _internal_set_hco3(double value);
  public:

  // double cl = 7;
  void clear_cl();
  double cl() const;
  void set_cl(double value);
  private:
  double _internal_cl() const;
  void _internal_set_cl(double value);
  public:

  // double so4 = 8;
  void clear_so4();
  double so4() const;
  void set_so4(double value);
  private:
  double _internal_so4() const;
  void _internal_set_so4(double value);
  public:

  // double mg = 9;
  void clear_mg();
  double mg() const;
  void set_mg(double value);
  private:
  double _internal_mg() const;
  void _internal_set_mg(double value);
  public:

  // double nh4 = 10;
  void clear_nh4();
  double nh4() const;
  void set_nh4(double value);
  private:
  double _internal_nh4() const;
  void _internal_set_nh4(double value);
  public:

  // double k_na = 11;
  void clear_k_na();
  double k_na() const;
  void set_k_na(double value);
  private:
  double _internal_k_na() const;
  void _internal_set_k_na(double value);
  public:

  // double ca = 12;
  void clear_ca();
  double ca() const;
  void set_ca(double value);
  private:
  double _internal_ca() const;
  void _internal_set_ca(double value);
  public:

  // double co3 = 13;
  void clear_co3();
  double co3() const;
  void set_co3(double value);
  private:
  double _internal_co3() const;
  void _internal_set_co3(double value);
  public:

  // @@protoc_insertion_point(class_scope:smart3dmap.v1.DrillWaterCorrosivity)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr concrete_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr steel_bar_;
  ::PROTOBUF_NAMESPACE_ID::int32 db_id_;
  ::PROTOBUF_NAMESPACE_ID::int32 drill_id_;
  double ph_;
  double co2_;
  double soluble_solid_;
  double hco3_;
  double cl_;
  double so4_;
  double mg_;
  double nh4_;
  double k_na_;
  double ca_;
  double co3_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_data_5fengine_2fdata_5fengine_2eproto;
};
// -------------------------------------------------------------------

class LIBS3DMGRPC_API ImportDrillWaterCorrosivityRequest PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:smart3dmap.v1.ImportDrillWaterCorrosivityRequest) */ {
 public:
  inline ImportDrillWaterCorrosivityRequest() : ImportDrillWaterCorrosivityRequest(nullptr) {}
  virtual ~ImportDrillWaterCorrosivityRequest();
  explicit constexpr ImportDrillWaterCorrosivityRequest(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  ImportDrillWaterCorrosivityRequest(const ImportDrillWaterCorrosivityRequest& from);
  ImportDrillWaterCorrosivityRequest(ImportDrillWaterCorrosivityRequest&& from) noexcept
    : ImportDrillWaterCorrosivityRequest() {
    *this = ::std::move(from);
  }

  inline ImportDrillWaterCorrosivityRequest& operator=(const ImportDrillWaterCorrosivityRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline ImportDrillWaterCorrosivityRequest& operator=(ImportDrillWaterCorrosivityRequest&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const ImportDrillWaterCorrosivityRequest& default_instance() {
    return *internal_default_instance();
  }
  static inline const ImportDrillWaterCorrosivityRequest* internal_default_instance() {
    return reinterpret_cast<const ImportDrillWaterCorrosivityRequest*>(
               &_ImportDrillWaterCorrosivityRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    111;

  friend void swap(ImportDrillWaterCorrosivityRequest& a, ImportDrillWaterCorrosivityRequest& b) {
    a.Swap(&b);
  }
  inline void Swap(ImportDrillWaterCorrosivityRequest* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(ImportDrillWaterCorrosivityRequest* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline ImportDrillWaterCorrosivityRequest* New() const final {
    return CreateMaybeMessage<ImportDrillWaterCorrosivityRequest>(nullptr);
  }

  ImportDrillWaterCorrosivityRequest* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<ImportDrillWaterCorrosivityRequest>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const ImportDrillWaterCorrosivityRequest& from);
  void MergeFrom(const ImportDrillWaterCorrosivityRequest& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(ImportDrillWaterCorrosivityRequest* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "smart3dmap.v1.ImportDrillWaterCorrosivityRequest";
  }
  protected:
  explicit ImportDrillWaterCorrosivityRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    return ::descriptor_table_data_5fengine_2fdata_5fengine_2eproto_metadata_getter(kIndexInFileMessages);
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kRecordsFieldNumber = 3,
    kDbIdFieldNumber = 1,
    kDrillIdFieldNumber = 2,
  };
  // repeated .smart3dmap.v1.DrillWaterCorrosivity records = 3;
  int records_size() const;
  private:
  int _internal_records_size() const;
  public:
  void clear_records();
  ::smart3dmap::v1::DrillWaterCorrosivity* mutable_records(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::smart3dmap::v1::DrillWaterCorrosivity >*
      mutable_records();
  private:
  const ::smart3dmap::v1::DrillWaterCorrosivity& _internal_records(int index) const;
  ::smart3dmap::v1::DrillWaterCorrosivity* _internal_add_records();
  public:
  const ::smart3dmap::v1::DrillWaterCorrosivity& records(int index) const;
  ::smart3dmap::v1::DrillWaterCorrosivity* add_records();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::smart3dmap::v1::DrillWaterCorrosivity >&
      records() const;

  // int32 db_id = 1;
  void clear_db_id();
  ::PROTOBUF_NAMESPACE_ID::int32 db_id() const;
  void set_db_id(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_db_id() const;
  void _internal_set_db_id(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // int32 drill_id = 2;
  void clear_drill_id();
  ::PROTOBUF_NAMESPACE_ID::int32 drill_id() const;
  void set_drill_id(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_drill_id() const;
  void _internal_set_drill_id(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // @@protoc_insertion_point(class_scope:smart3dmap.v1.ImportDrillWaterCorrosivityRequest)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::smart3dmap::v1::DrillWaterCorrosivity > records_;
  ::PROTOBUF_NAMESPACE_ID::int32 db_id_;
  ::PROTOBUF_NAMESPACE_ID::int32 drill_id_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_data_5fengine_2fdata_5fengine_2eproto;
};
// -------------------------------------------------------------------

class LIBS3DMGRPC_API DrillSoilCorrosivity PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:smart3dmap.v1.DrillSoilCorrosivity) */ {
 public:
  inline DrillSoilCorrosivity() : DrillSoilCorrosivity(nullptr) {}
  virtual ~DrillSoilCorrosivity();
  explicit constexpr DrillSoilCorrosivity(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  DrillSoilCorrosivity(const DrillSoilCorrosivity& from);
  DrillSoilCorrosivity(DrillSoilCorrosivity&& from) noexcept
    : DrillSoilCorrosivity() {
    *this = ::std::move(from);
  }

  inline DrillSoilCorrosivity& operator=(const DrillSoilCorrosivity& from) {
    CopyFrom(from);
    return *this;
  }
  inline DrillSoilCorrosivity& operator=(DrillSoilCorrosivity&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const DrillSoilCorrosivity& default_instance() {
    return *internal_default_instance();
  }
  static inline const DrillSoilCorrosivity* internal_default_instance() {
    return reinterpret_cast<const DrillSoilCorrosivity*>(
               &_DrillSoilCorrosivity_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    112;

  friend void swap(DrillSoilCorrosivity& a, DrillSoilCorrosivity& b) {
    a.Swap(&b);
  }
  inline void Swap(DrillSoilCorrosivity* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(DrillSoilCorrosivity* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline DrillSoilCorrosivity* New() const final {
    return CreateMaybeMessage<DrillSoilCorrosivity>(nullptr);
  }

  DrillSoilCorrosivity* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<DrillSoilCorrosivity>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const DrillSoilCorrosivity& from);
  void MergeFrom(const DrillSoilCorrosivity& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(DrillSoilCorrosivity* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "smart3dmap.v1.DrillSoilCorrosivity";
  }
  protected:
  explicit DrillSoilCorrosivity(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    return ::descriptor_table_data_5fengine_2fdata_5fengine_2eproto_metadata_getter(kIndexInFileMessages);
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kConcreteFieldNumber = 10,
    kSteelBarFieldNumber = 11,
    kSteelConstructionFieldNumber = 12,
    kDbIdFieldNumber = 1,
    kDrillIdFieldNumber = 2,
    kPhFieldNumber = 3,
    kHco3FieldNumber = 4,
    kClFieldNumber = 5,
    kSo4FieldNumber = 6,
    kMgFieldNumber = 7,
    kNh4FieldNumber = 8,
    kCaFieldNumber = 9,
  };
  // string concrete = 10;
  void clear_concrete();
  const std::string& concrete() const;
  void set_concrete(const std::string& value);
  void set_concrete(std::string&& value);
  void set_concrete(const char* value);
  void set_concrete(const char* value, size_t size);
  std::string* mutable_concrete();
  std::string* release_concrete();
  void set_allocated_concrete(std::string* concrete);
  private:
  const std::string& _internal_concrete() const;
  void _internal_set_concrete(const std::string& value);
  std::string* _internal_mutable_concrete();
  public:

  // string steel_bar = 11;
  void clear_steel_bar();
  const std::string& steel_bar() const;
  void set_steel_bar(const std::string& value);
  void set_steel_bar(std::string&& value);
  void set_steel_bar(const char* value);
  void set_steel_bar(const char* value, size_t size);
  std::string* mutable_steel_bar();
  std::string* release_steel_bar();
  void set_allocated_steel_bar(std::string* steel_bar);
  private:
  const std::string& _internal_steel_bar() const;
  void _internal_set_steel_bar(const std::string& value);
  std::string* _internal_mutable_steel_bar();
  public:

  // string steel_construction = 12;
  void clear_steel_construction();
  const std::string& steel_construction() const;
  void set_steel_construction(const std::string& value);
  void set_steel_construction(std::string&& value);
  void set_steel_construction(const char* value);
  void set_steel_construction(const char* value, size_t size);
  std::string* mutable_steel_construction();
  std::string* release_steel_construction();
  void set_allocated_steel_construction(std::string* steel_construction);
  private:
  const std::string& _internal_steel_construction() const;
  void _internal_set_steel_construction(const std::string& value);
  std::string* _internal_mutable_steel_construction();
  public:

  // int32 db_id = 1;
  void clear_db_id();
  ::PROTOBUF_NAMESPACE_ID::int32 db_id() const;
  void set_db_id(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_db_id() const;
  void _internal_set_db_id(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // int32 drill_id = 2;
  void clear_drill_id();
  ::PROTOBUF_NAMESPACE_ID::int32 drill_id() const;
  void set_drill_id(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_drill_id() const;
  void _internal_set_drill_id(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // double ph = 3;
  void clear_ph();
  double ph() const;
  void set_ph(double value);
  private:
  double _internal_ph() const;
  void _internal_set_ph(double value);
  public:

  // double hco3 = 4;
  void clear_hco3();
  double hco3() const;
  void set_hco3(double value);
  private:
  double _internal_hco3() const;
  void _internal_set_hco3(double value);
  public:

  // double cl = 5;
  void clear_cl();
  double cl() const;
  void set_cl(double value);
  private:
  double _internal_cl() const;
  void _internal_set_cl(double value);
  public:

  // double so4 = 6;
  void clear_so4();
  double so4() const;
  void set_so4(double value);
  private:
  double _internal_so4() const;
  void _internal_set_so4(double value);
  public:

  // double mg = 7;
  void clear_mg();
  double mg() const;
  void set_mg(double value);
  private:
  double _internal_mg() const;
  void _internal_set_mg(double value);
  public:

  // double nh4 = 8;
  void clear_nh4();
  double nh4() const;
  void set_nh4(double value);
  private:
  double _internal_nh4() const;
  void _internal_set_nh4(double value);
  public:

  // double ca = 9;
  void clear_ca();
  double ca() const;
  void set_ca(double value);
  private:
  double _internal_ca() const;
  void _internal_set_ca(double value);
  public:

  // @@protoc_insertion_point(class_scope:smart3dmap.v1.DrillSoilCorrosivity)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr concrete_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr steel_bar_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr steel_construction_;
  ::PROTOBUF_NAMESPACE_ID::int32 db_id_;
  ::PROTOBUF_NAMESPACE_ID::int32 drill_id_;
  double ph_;
  double hco3_;
  double cl_;
  double so4_;
  double mg_;
  double nh4_;
  double ca_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_data_5fengine_2fdata_5fengine_2eproto;
};
// -------------------------------------------------------------------

class LIBS3DMGRPC_API ImportDrillSoilCorrosivityRequest PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:smart3dmap.v1.ImportDrillSoilCorrosivityRequest) */ {
 public:
  inline ImportDrillSoilCorrosivityRequest() : ImportDrillSoilCorrosivityRequest(nullptr) {}
  virtual ~ImportDrillSoilCorrosivityRequest();
  explicit constexpr ImportDrillSoilCorrosivityRequest(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  ImportDrillSoilCorrosivityRequest(const ImportDrillSoilCorrosivityRequest& from);
  ImportDrillSoilCorrosivityRequest(ImportDrillSoilCorrosivityRequest&& from) noexcept
    : ImportDrillSoilCorrosivityRequest() {
    *this = ::std::move(from);
  }

  inline ImportDrillSoilCorrosivityRequest& operator=(const ImportDrillSoilCorrosivityRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline ImportDrillSoilCorrosivityRequest& operator=(ImportDrillSoilCorrosivityRequest&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const ImportDrillSoilCorrosivityRequest& default_instance() {
    return *internal_default_instance();
  }
  static inline const ImportDrillSoilCorrosivityRequest* internal_default_instance() {
    return reinterpret_cast<const ImportDrillSoilCorrosivityRequest*>(
               &_ImportDrillSoilCorrosivityRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    113;

  friend void swap(ImportDrillSoilCorrosivityRequest& a, ImportDrillSoilCorrosivityRequest& b) {
    a.Swap(&b);
  }
  inline void Swap(ImportDrillSoilCorrosivityRequest* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(ImportDrillSoilCorrosivityRequest* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline ImportDrillSoilCorrosivityRequest* New() const final {
    return CreateMaybeMessage<ImportDrillSoilCorrosivityRequest>(nullptr);
  }

  ImportDrillSoilCorrosivityRequest* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<ImportDrillSoilCorrosivityRequest>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const ImportDrillSoilCorrosivityRequest& from);
  void MergeFrom(const ImportDrillSoilCorrosivityRequest& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(ImportDrillSoilCorrosivityRequest* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "smart3dmap.v1.ImportDrillSoilCorrosivityRequest";
  }
  protected:
  explicit ImportDrillSoilCorrosivityRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    return ::descriptor_table_data_5fengine_2fdata_5fengine_2eproto_metadata_getter(kIndexInFileMessages);
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kRecordsFieldNumber = 3,
    kDbIdFieldNumber = 1,
    kDrillIdFieldNumber = 2,
  };
  // repeated .smart3dmap.v1.DrillSoilCorrosivity records = 3;
  int records_size() const;
  private:
  int _internal_records_size() const;
  public:
  void clear_records();
  ::smart3dmap::v1::DrillSoilCorrosivity* mutable_records(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::smart3dmap::v1::DrillSoilCorrosivity >*
      mutable_records();
  private:
  const ::smart3dmap::v1::DrillSoilCorrosivity& _internal_records(int index) const;
  ::smart3dmap::v1::DrillSoilCorrosivity* _internal_add_records();
  public:
  const ::smart3dmap::v1::DrillSoilCorrosivity& records(int index) const;
  ::smart3dmap::v1::DrillSoilCorrosivity* add_records();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::smart3dmap::v1::DrillSoilCorrosivity >&
      records() const;

  // int32 db_id = 1;
  void clear_db_id();
  ::PROTOBUF_NAMESPACE_ID::int32 db_id() const;
  void set_db_id(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_db_id() const;
  void _internal_set_db_id(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // int32 drill_id = 2;
  void clear_drill_id();
  ::PROTOBUF_NAMESPACE_ID::int32 drill_id() const;
  void set_drill_id(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_drill_id() const;
  void _internal_set_drill_id(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // @@protoc_insertion_point(class_scope:smart3dmap.v1.ImportDrillSoilCorrosivityRequest)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::smart3dmap::v1::DrillSoilCorrosivity > records_;
  ::PROTOBUF_NAMESPACE_ID::int32 db_id_;
  ::PROTOBUF_NAMESPACE_ID::int32 drill_id_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_data_5fengine_2fdata_5fengine_2eproto;
};
// -------------------------------------------------------------------

class LIBS3DMGRPC_API GeotechnicalRecord PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:smart3dmap.v1.GeotechnicalRecord) */ {
 public:
  inline GeotechnicalRecord() : GeotechnicalRecord(nullptr) {}
  virtual ~GeotechnicalRecord();
  explicit constexpr GeotechnicalRecord(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  GeotechnicalRecord(const GeotechnicalRecord& from);
  GeotechnicalRecord(GeotechnicalRecord&& from) noexcept
    : GeotechnicalRecord() {
    *this = ::std::move(from);
  }

  inline GeotechnicalRecord& operator=(const GeotechnicalRecord& from) {
    CopyFrom(from);
    return *this;
  }
  inline GeotechnicalRecord& operator=(GeotechnicalRecord&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const GeotechnicalRecord& default_instance() {
    return *internal_default_instance();
  }
  static inline const GeotechnicalRecord* internal_default_instance() {
    return reinterpret_cast<const GeotechnicalRecord*>(
               &_GeotechnicalRecord_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    114;

  friend void swap(GeotechnicalRecord& a, GeotechnicalRecord& b) {
    a.Swap(&b);
  }
  inline void Swap(GeotechnicalRecord* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(GeotechnicalRecord* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline GeotechnicalRecord* New() const final {
    return CreateMaybeMessage<GeotechnicalRecord>(nullptr);
  }

  GeotechnicalRecord* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<GeotechnicalRecord>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const GeotechnicalRecord& from);
  void MergeFrom(const GeotechnicalRecord& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(GeotechnicalRecord* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "smart3dmap.v1.GeotechnicalRecord";
  }
  protected:
  explicit GeotechnicalRecord(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    return ::descriptor_table_data_5fengine_2fdata_5fengine_2eproto_metadata_getter(kIndexInFileMessages);
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kSampleNameFieldNumber = 5,
    kDbIdFieldNumber = 1,
    kDrillIdFieldNumber = 2,
    kTopDepthFieldNumber = 3,
    kBottomDepthFieldNumber = 4,
    kWaterContentFieldNumber = 6,
    kWetDensityFieldNumber = 7,
    kDryDensityFieldNumber = 8,
    kSpecificGravityFieldNumber = 9,
    kVoidRatioFieldNumber = 10,
    kSaturationFieldNumber = 11,
    kWlFieldNumber = 12,
    kWpFieldNumber = 13,
    kIpFieldNumber = 14,
    kIlFieldNumber = 15,
    kMpa1FieldNumber = 16,
    kMpaFieldNumber = 17,
    kKpaFieldNumber = 18,
    kFaiDegreeFieldNumber = 19,
  };
  // string sample_name = 5;
  void clear_sample_name();
  const std::string& sample_name() const;
  void set_sample_name(const std::string& value);
  void set_sample_name(std::string&& value);
  void set_sample_name(const char* value);
  void set_sample_name(const char* value, size_t size);
  std::string* mutable_sample_name();
  std::string* release_sample_name();
  void set_allocated_sample_name(std::string* sample_name);
  private:
  const std::string& _internal_sample_name() const;
  void _internal_set_sample_name(const std::string& value);
  std::string* _internal_mutable_sample_name();
  public:

  // int32 db_id = 1;
  void clear_db_id();
  ::PROTOBUF_NAMESPACE_ID::int32 db_id() const;
  void set_db_id(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_db_id() const;
  void _internal_set_db_id(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // int32 drill_id = 2;
  void clear_drill_id();
  ::PROTOBUF_NAMESPACE_ID::int32 drill_id() const;
  void set_drill_id(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_drill_id() const;
  void _internal_set_drill_id(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // double top_depth = 3;
  void clear_top_depth();
  double top_depth() const;
  void set_top_depth(double value);
  private:
  double _internal_top_depth() const;
  void _internal_set_top_depth(double value);
  public:

  // double bottom_depth = 4;
  void clear_bottom_depth();
  double bottom_depth() const;
  void set_bottom_depth(double value);
  private:
  double _internal_bottom_depth() const;
  void _internal_set_bottom_depth(double value);
  public:

  // double water_content = 6;
  void clear_water_content();
  double water_content() const;
  void set_water_content(double value);
  private:
  double _internal_water_content() const;
  void _internal_set_water_content(double value);
  public:

  // double wet_density = 7;
  void clear_wet_density();
  double wet_density() const;
  void set_wet_density(double value);
  private:
  double _internal_wet_density() const;
  void _internal_set_wet_density(double value);
  public:

  // double dry_density = 8;
  void clear_dry_density();
  double dry_density() const;
  void set_dry_density(double value);
  private:
  double _internal_dry_density() const;
  void _internal_set_dry_density(double value);
  public:

  // double specific_gravity = 9;
  void clear_specific_gravity();
  double specific_gravity() const;
  void set_specific_gravity(double value);
  private:
  double _internal_specific_gravity() const;
  void _internal_set_specific_gravity(double value);
  public:

  // double void_ratio = 10;
  void clear_void_ratio();
  double void_ratio() const;
  void set_void_ratio(double value);
  private:
  double _internal_void_ratio() const;
  void _internal_set_void_ratio(double value);
  public:

  // double saturation = 11;
  void clear_saturation();
  double saturation() const;
  void set_saturation(double value);
  private:
  double _internal_saturation() const;
  void _internal_set_saturation(double value);
  public:

  // double wl = 12;
  void clear_wl();
  double wl() const;
  void set_wl(double value);
  private:
  double _internal_wl() const;
  void _internal_set_wl(double value);
  public:

  // double wp = 13;
  void clear_wp();
  double wp() const;
  void set_wp(double value);
  private:
  double _internal_wp() const;
  void _internal_set_wp(double value);
  public:

  // double ip = 14;
  void clear_ip();
  double ip() const;
  void set_ip(double value);
  private:
  double _internal_ip() const;
  void _internal_set_ip(double value);
  public:

  // double il = 15;
  void clear_il();
  double il() const;
  void set_il(double value);
  private:
  double _internal_il() const;
  void _internal_set_il(double value);
  public:

  // double mpa_1 = 16;
  void clear_mpa_1();
  double mpa_1() const;
  void set_mpa_1(double value);
  private:
  double _internal_mpa_1() const;
  void _internal_set_mpa_1(double value);
  public:

  // double mpa = 17;
  void clear_mpa();
  double mpa() const;
  void set_mpa(double value);
  private:
  double _internal_mpa() const;
  void _internal_set_mpa(double value);
  public:

  // double kpa = 18;
  void clear_kpa();
  double kpa() const;
  void set_kpa(double value);
  private:
  double _internal_kpa() const;
  void _internal_set_kpa(double value);
  public:

  // double fai_degree = 19;
  void clear_fai_degree();
  double fai_degree() const;
  void set_fai_degree(double value);
  private:
  double _internal_fai_degree() const;
  void _internal_set_fai_degree(double value);
  public:

  // @@protoc_insertion_point(class_scope:smart3dmap.v1.GeotechnicalRecord)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr sample_name_;
  ::PROTOBUF_NAMESPACE_ID::int32 db_id_;
  ::PROTOBUF_NAMESPACE_ID::int32 drill_id_;
  double top_depth_;
  double bottom_depth_;
  double water_content_;
  double wet_density_;
  double dry_density_;
  double specific_gravity_;
  double void_ratio_;
  double saturation_;
  double wl_;
  double wp_;
  double ip_;
  double il_;
  double mpa_1_;
  double mpa_;
  double kpa_;
  double fai_degree_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_data_5fengine_2fdata_5fengine_2eproto;
};
// -------------------------------------------------------------------

class LIBS3DMGRPC_API ImportGeotechnicalRecordsRequest PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:smart3dmap.v1.ImportGeotechnicalRecordsRequest) */ {
 public:
  inline ImportGeotechnicalRecordsRequest() : ImportGeotechnicalRecordsRequest(nullptr) {}
  virtual ~ImportGeotechnicalRecordsRequest();
  explicit constexpr ImportGeotechnicalRecordsRequest(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  ImportGeotechnicalRecordsRequest(const ImportGeotechnicalRecordsRequest& from);
  ImportGeotechnicalRecordsRequest(ImportGeotechnicalRecordsRequest&& from) noexcept
    : ImportGeotechnicalRecordsRequest() {
    *this = ::std::move(from);
  }

  inline ImportGeotechnicalRecordsRequest& operator=(const ImportGeotechnicalRecordsRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline ImportGeotechnicalRecordsRequest& operator=(ImportGeotechnicalRecordsRequest&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const ImportGeotechnicalRecordsRequest& default_instance() {
    return *internal_default_instance();
  }
  static inline const ImportGeotechnicalRecordsRequest* internal_default_instance() {
    return reinterpret_cast<const ImportGeotechnicalRecordsRequest*>(
               &_ImportGeotechnicalRecordsRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    115;

  friend void swap(ImportGeotechnicalRecordsRequest& a, ImportGeotechnicalRecordsRequest& b) {
    a.Swap(&b);
  }
  inline void Swap(ImportGeotechnicalRecordsRequest* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(ImportGeotechnicalRecordsRequest* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline ImportGeotechnicalRecordsRequest* New() const final {
    return CreateMaybeMessage<ImportGeotechnicalRecordsRequest>(nullptr);
  }

  ImportGeotechnicalRecordsRequest* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<ImportGeotechnicalRecordsRequest>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const ImportGeotechnicalRecordsRequest& from);
  void MergeFrom(const ImportGeotechnicalRecordsRequest& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(ImportGeotechnicalRecordsRequest* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "smart3dmap.v1.ImportGeotechnicalRecordsRequest";
  }
  protected:
  explicit ImportGeotechnicalRecordsRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    return ::descriptor_table_data_5fengine_2fdata_5fengine_2eproto_metadata_getter(kIndexInFileMessages);
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kRecordsFieldNumber = 3,
    kDbIdFieldNumber = 1,
    kDrillIdFieldNumber = 2,
  };
  // repeated .smart3dmap.v1.GeotechnicalRecord records = 3;
  int records_size() const;
  private:
  int _internal_records_size() const;
  public:
  void clear_records();
  ::smart3dmap::v1::GeotechnicalRecord* mutable_records(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::smart3dmap::v1::GeotechnicalRecord >*
      mutable_records();
  private:
  const ::smart3dmap::v1::GeotechnicalRecord& _internal_records(int index) const;
  ::smart3dmap::v1::GeotechnicalRecord* _internal_add_records();
  public:
  const ::smart3dmap::v1::GeotechnicalRecord& records(int index) const;
  ::smart3dmap::v1::GeotechnicalRecord* add_records();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::smart3dmap::v1::GeotechnicalRecord >&
      records() const;

  // int32 db_id = 1;
  void clear_db_id();
  ::PROTOBUF_NAMESPACE_ID::int32 db_id() const;
  void set_db_id(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_db_id() const;
  void _internal_set_db_id(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // int32 drill_id = 2;
  void clear_drill_id();
  ::PROTOBUF_NAMESPACE_ID::int32 drill_id() const;
  void set_drill_id(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_drill_id() const;
  void _internal_set_drill_id(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // @@protoc_insertion_point(class_scope:smart3dmap.v1.ImportGeotechnicalRecordsRequest)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::smart3dmap::v1::GeotechnicalRecord > records_;
  ::PROTOBUF_NAMESPACE_ID::int32 db_id_;
  ::PROTOBUF_NAMESPACE_ID::int32 drill_id_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_data_5fengine_2fdata_5fengine_2eproto;
};
// -------------------------------------------------------------------

class LIBS3DMGRPC_API StdPenetrationRecord PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:smart3dmap.v1.StdPenetrationRecord) */ {
 public:
  inline StdPenetrationRecord() : StdPenetrationRecord(nullptr) {}
  virtual ~StdPenetrationRecord();
  explicit constexpr StdPenetrationRecord(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  StdPenetrationRecord(const StdPenetrationRecord& from);
  StdPenetrationRecord(StdPenetrationRecord&& from) noexcept
    : StdPenetrationRecord() {
    *this = ::std::move(from);
  }

  inline StdPenetrationRecord& operator=(const StdPenetrationRecord& from) {
    CopyFrom(from);
    return *this;
  }
  inline StdPenetrationRecord& operator=(StdPenetrationRecord&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const StdPenetrationRecord& default_instance() {
    return *internal_default_instance();
  }
  static inline const StdPenetrationRecord* internal_default_instance() {
    return reinterpret_cast<const StdPenetrationRecord*>(
               &_StdPenetrationRecord_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    116;

  friend void swap(StdPenetrationRecord& a, StdPenetrationRecord& b) {
    a.Swap(&b);
  }
  inline void Swap(StdPenetrationRecord* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(StdPenetrationRecord* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline StdPenetrationRecord* New() const final {
    return CreateMaybeMessage<StdPenetrationRecord>(nullptr);
  }

  StdPenetrationRecord* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<StdPenetrationRecord>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const StdPenetrationRecord& from);
  void MergeFrom(const StdPenetrationRecord& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(StdPenetrationRecord* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "smart3dmap.v1.StdPenetrationRecord";
  }
  protected:
  explicit StdPenetrationRecord(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    return ::descriptor_table_data_5fengine_2fdata_5fengine_2eproto_metadata_getter(kIndexInFileMessages);
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kLayerCodeFieldNumber = 9,
    kLayerNameFieldNumber = 10,
    kDbIdFieldNumber = 1,
    kDrillIdFieldNumber = 2,
    kStartDepthFieldNumber = 3,
    kEndDepthFieldNumber = 4,
    kCorrectedHitNumberFieldNumber = 6,
    kPoleLengthFieldNumber = 7,
    kPoleLengthCorrectionFactorFieldNumber = 8,
    kHitNumberFieldNumber = 5,
  };
  // string layer_code = 9;
  void clear_layer_code();
  const std::string& layer_code() const;
  void set_layer_code(const std::string& value);
  void set_layer_code(std::string&& value);
  void set_layer_code(const char* value);
  void set_layer_code(const char* value, size_t size);
  std::string* mutable_layer_code();
  std::string* release_layer_code();
  void set_allocated_layer_code(std::string* layer_code);
  private:
  const std::string& _internal_layer_code() const;
  void _internal_set_layer_code(const std::string& value);
  std::string* _internal_mutable_layer_code();
  public:

  // string layer_name = 10;
  void clear_layer_name();
  const std::string& layer_name() const;
  void set_layer_name(const std::string& value);
  void set_layer_name(std::string&& value);
  void set_layer_name(const char* value);
  void set_layer_name(const char* value, size_t size);
  std::string* mutable_layer_name();
  std::string* release_layer_name();
  void set_allocated_layer_name(std::string* layer_name);
  private:
  const std::string& _internal_layer_name() const;
  void _internal_set_layer_name(const std::string& value);
  std::string* _internal_mutable_layer_name();
  public:

  // int32 db_id = 1;
  void clear_db_id();
  ::PROTOBUF_NAMESPACE_ID::int32 db_id() const;
  void set_db_id(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_db_id() const;
  void _internal_set_db_id(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // int32 drill_id = 2;
  void clear_drill_id();
  ::PROTOBUF_NAMESPACE_ID::int32 drill_id() const;
  void set_drill_id(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_drill_id() const;
  void _internal_set_drill_id(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // double start_depth = 3;
  void clear_start_depth();
  double start_depth() const;
  void set_start_depth(double value);
  private:
  double _internal_start_depth() const;
  void _internal_set_start_depth(double value);
  public:

  // double end_depth = 4;
  void clear_end_depth();
  double end_depth() const;
  void set_end_depth(double value);
  private:
  double _internal_end_depth() const;
  void _internal_set_end_depth(double value);
  public:

  // double corrected_hit_number = 6;
  void clear_corrected_hit_number();
  double corrected_hit_number() const;
  void set_corrected_hit_number(double value);
  private:
  double _internal_corrected_hit_number() const;
  void _internal_set_corrected_hit_number(double value);
  public:

  // double pole_length = 7;
  void clear_pole_length();
  double pole_length() const;
  void set_pole_length(double value);
  private:
  double _internal_pole_length() const;
  void _internal_set_pole_length(double value);
  public:

  // double pole_length_correction_factor = 8;
  void clear_pole_length_correction_factor();
  double pole_length_correction_factor() const;
  void set_pole_length_correction_factor(double value);
  private:
  double _internal_pole_length_correction_factor() const;
  void _internal_set_pole_length_correction_factor(double value);
  public:

  // int32 hit_number = 5;
  void clear_hit_number();
  ::PROTOBUF_NAMESPACE_ID::int32 hit_number() const;
  void set_hit_number(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_hit_number() const;
  void _internal_set_hit_number(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // @@protoc_insertion_point(class_scope:smart3dmap.v1.StdPenetrationRecord)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr layer_code_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr layer_name_;
  ::PROTOBUF_NAMESPACE_ID::int32 db_id_;
  ::PROTOBUF_NAMESPACE_ID::int32 drill_id_;
  double start_depth_;
  double end_depth_;
  double corrected_hit_number_;
  double pole_length_;
  double pole_length_correction_factor_;
  ::PROTOBUF_NAMESPACE_ID::int32 hit_number_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_data_5fengine_2fdata_5fengine_2eproto;
};
// -------------------------------------------------------------------

class LIBS3DMGRPC_API ImportStdPenetrationRecordRequest PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:smart3dmap.v1.ImportStdPenetrationRecordRequest) */ {
 public:
  inline ImportStdPenetrationRecordRequest() : ImportStdPenetrationRecordRequest(nullptr) {}
  virtual ~ImportStdPenetrationRecordRequest();
  explicit constexpr ImportStdPenetrationRecordRequest(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  ImportStdPenetrationRecordRequest(const ImportStdPenetrationRecordRequest& from);
  ImportStdPenetrationRecordRequest(ImportStdPenetrationRecordRequest&& from) noexcept
    : ImportStdPenetrationRecordRequest() {
    *this = ::std::move(from);
  }

  inline ImportStdPenetrationRecordRequest& operator=(const ImportStdPenetrationRecordRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline ImportStdPenetrationRecordRequest& operator=(ImportStdPenetrationRecordRequest&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const ImportStdPenetrationRecordRequest& default_instance() {
    return *internal_default_instance();
  }
  static inline const ImportStdPenetrationRecordRequest* internal_default_instance() {
    return reinterpret_cast<const ImportStdPenetrationRecordRequest*>(
               &_ImportStdPenetrationRecordRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    117;

  friend void swap(ImportStdPenetrationRecordRequest& a, ImportStdPenetrationRecordRequest& b) {
    a.Swap(&b);
  }
  inline void Swap(ImportStdPenetrationRecordRequest* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(ImportStdPenetrationRecordRequest* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline ImportStdPenetrationRecordRequest* New() const final {
    return CreateMaybeMessage<ImportStdPenetrationRecordRequest>(nullptr);
  }

  ImportStdPenetrationRecordRequest* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<ImportStdPenetrationRecordRequest>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const ImportStdPenetrationRecordRequest& from);
  void MergeFrom(const ImportStdPenetrationRecordRequest& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(ImportStdPenetrationRecordRequest* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "smart3dmap.v1.ImportStdPenetrationRecordRequest";
  }
  protected:
  explicit ImportStdPenetrationRecordRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    return ::descriptor_table_data_5fengine_2fdata_5fengine_2eproto_metadata_getter(kIndexInFileMessages);
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kRecordsFieldNumber = 3,
    kDbIdFieldNumber = 1,
    kDrillIdFieldNumber = 2,
  };
  // repeated .smart3dmap.v1.StdPenetrationRecord records = 3;
  int records_size() const;
  private:
  int _internal_records_size() const;
  public:
  void clear_records();
  ::smart3dmap::v1::StdPenetrationRecord* mutable_records(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::smart3dmap::v1::StdPenetrationRecord >*
      mutable_records();
  private:
  const ::smart3dmap::v1::StdPenetrationRecord& _internal_records(int index) const;
  ::smart3dmap::v1::StdPenetrationRecord* _internal_add_records();
  public:
  const ::smart3dmap::v1::StdPenetrationRecord& records(int index) const;
  ::smart3dmap::v1::StdPenetrationRecord* add_records();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::smart3dmap::v1::StdPenetrationRecord >&
      records() const;

  // int32 db_id = 1;
  void clear_db_id();
  ::PROTOBUF_NAMESPACE_ID::int32 db_id() const;
  void set_db_id(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_db_id() const;
  void _internal_set_db_id(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // int32 drill_id = 2;
  void clear_drill_id();
  ::PROTOBUF_NAMESPACE_ID::int32 drill_id() const;
  void set_drill_id(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_drill_id() const;
  void _internal_set_drill_id(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // @@protoc_insertion_point(class_scope:smart3dmap.v1.ImportStdPenetrationRecordRequest)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::smart3dmap::v1::StdPenetrationRecord > records_;
  ::PROTOBUF_NAMESPACE_ID::int32 db_id_;
  ::PROTOBUF_NAMESPACE_ID::int32 drill_id_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_data_5fengine_2fdata_5fengine_2eproto;
};
// -------------------------------------------------------------------

class LIBS3DMGRPC_API CompressiveResistanceRecord PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:smart3dmap.v1.CompressiveResistanceRecord) */ {
 public:
  inline CompressiveResistanceRecord() : CompressiveResistanceRecord(nullptr) {}
  virtual ~CompressiveResistanceRecord();
  explicit constexpr CompressiveResistanceRecord(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  CompressiveResistanceRecord(const CompressiveResistanceRecord& from);
  CompressiveResistanceRecord(CompressiveResistanceRecord&& from) noexcept
    : CompressiveResistanceRecord() {
    *this = ::std::move(from);
  }

  inline CompressiveResistanceRecord& operator=(const CompressiveResistanceRecord& from) {
    CopyFrom(from);
    return *this;
  }
  inline CompressiveResistanceRecord& operator=(CompressiveResistanceRecord&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const CompressiveResistanceRecord& default_instance() {
    return *internal_default_instance();
  }
  static inline const CompressiveResistanceRecord* internal_default_instance() {
    return reinterpret_cast<const CompressiveResistanceRecord*>(
               &_CompressiveResistanceRecord_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    118;

  friend void swap(CompressiveResistanceRecord& a, CompressiveResistanceRecord& b) {
    a.Swap(&b);
  }
  inline void Swap(CompressiveResistanceRecord* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(CompressiveResistanceRecord* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline CompressiveResistanceRecord* New() const final {
    return CreateMaybeMessage<CompressiveResistanceRecord>(nullptr);
  }

  CompressiveResistanceRecord* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<CompressiveResistanceRecord>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const CompressiveResistanceRecord& from);
  void MergeFrom(const CompressiveResistanceRecord& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(CompressiveResistanceRecord* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "smart3dmap.v1.CompressiveResistanceRecord";
  }
  protected:
  explicit CompressiveResistanceRecord(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    return ::descriptor_table_data_5fengine_2fdata_5fengine_2eproto_metadata_getter(kIndexInFileMessages);
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kSampleStatusFieldNumber = 5,
    kSampleDimensionFieldNumber = 6,
    kNoteFieldNumber = 12,
    kDbIdFieldNumber = 1,
    kDrillIdFieldNumber = 2,
    kTopDepthFieldNumber = 3,
    kBottomDepthFieldNumber = 4,
    kSampleAreaFieldNumber = 7,
    kBrokenForceFieldNumber = 8,
    kCompressiveResistanceFieldNumber = 9,
    kCorrectedCompressiveResistanceFieldNumber = 10,
    kHdRationFieldNumber = 11,
  };
  // string sample_status = 5;
  void clear_sample_status();
  const std::string& sample_status() const;
  void set_sample_status(const std::string& value);
  void set_sample_status(std::string&& value);
  void set_sample_status(const char* value);
  void set_sample_status(const char* value, size_t size);
  std::string* mutable_sample_status();
  std::string* release_sample_status();
  void set_allocated_sample_status(std::string* sample_status);
  private:
  const std::string& _internal_sample_status() const;
  void _internal_set_sample_status(const std::string& value);
  std::string* _internal_mutable_sample_status();
  public:

  // string sample_dimension = 6;
  void clear_sample_dimension();
  const std::string& sample_dimension() const;
  void set_sample_dimension(const std::string& value);
  void set_sample_dimension(std::string&& value);
  void set_sample_dimension(const char* value);
  void set_sample_dimension(const char* value, size_t size);
  std::string* mutable_sample_dimension();
  std::string* release_sample_dimension();
  void set_allocated_sample_dimension(std::string* sample_dimension);
  private:
  const std::string& _internal_sample_dimension() const;
  void _internal_set_sample_dimension(const std::string& value);
  std::string* _internal_mutable_sample_dimension();
  public:

  // string note = 12;
  void clear_note();
  const std::string& note() const;
  void set_note(const std::string& value);
  void set_note(std::string&& value);
  void set_note(const char* value);
  void set_note(const char* value, size_t size);
  std::string* mutable_note();
  std::string* release_note();
  void set_allocated_note(std::string* note);
  private:
  const std::string& _internal_note() const;
  void _internal_set_note(const std::string& value);
  std::string* _internal_mutable_note();
  public:

  // int32 db_id = 1;
  void clear_db_id();
  ::PROTOBUF_NAMESPACE_ID::int32 db_id() const;
  void set_db_id(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_db_id() const;
  void _internal_set_db_id(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // int32 drill_id = 2;
  void clear_drill_id();
  ::PROTOBUF_NAMESPACE_ID::int32 drill_id() const;
  void set_drill_id(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_drill_id() const;
  void _internal_set_drill_id(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // double top_depth = 3;
  void clear_top_depth();
  double top_depth() const;
  void set_top_depth(double value);
  private:
  double _internal_top_depth() const;
  void _internal_set_top_depth(double value);
  public:

  // double bottom_depth = 4;
  void clear_bottom_depth();
  double bottom_depth() const;
  void set_bottom_depth(double value);
  private:
  double _internal_bottom_depth() const;
  void _internal_set_bottom_depth(double value);
  public:

  // double sample_area = 7;
  void clear_sample_area();
  double sample_area() const;
  void set_sample_area(double value);
  private:
  double _internal_sample_area() const;
  void _internal_set_sample_area(double value);
  public:

  // double broken_force = 8;
  void clear_broken_force();
  double broken_force() const;
  void set_broken_force(double value);
  private:
  double _internal_broken_force() const;
  void _internal_set_broken_force(double value);
  public:

  // double compressive_resistance = 9;
  void clear_compressive_resistance();
  double compressive_resistance() const;
  void set_compressive_resistance(double value);
  private:
  double _internal_compressive_resistance() const;
  void _internal_set_compressive_resistance(double value);
  public:

  // double corrected_compressive_resistance = 10;
  void clear_corrected_compressive_resistance();
  double corrected_compressive_resistance() const;
  void set_corrected_compressive_resistance(double value);
  private:
  double _internal_corrected_compressive_resistance() const;
  void _internal_set_corrected_compressive_resistance(double value);
  public:

  // double hd_ration = 11;
  void clear_hd_ration();
  double hd_ration() const;
  void set_hd_ration(double value);
  private:
  double _internal_hd_ration() const;
  void _internal_set_hd_ration(double value);
  public:

  // @@protoc_insertion_point(class_scope:smart3dmap.v1.CompressiveResistanceRecord)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr sample_status_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr sample_dimension_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr note_;
  ::PROTOBUF_NAMESPACE_ID::int32 db_id_;
  ::PROTOBUF_NAMESPACE_ID::int32 drill_id_;
  double top_depth_;
  double bottom_depth_;
  double sample_area_;
  double broken_force_;
  double compressive_resistance_;
  double corrected_compressive_resistance_;
  double hd_ration_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_data_5fengine_2fdata_5fengine_2eproto;
};
// -------------------------------------------------------------------

class LIBS3DMGRPC_API ImportCompressiveResistanceRecordRequest PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:smart3dmap.v1.ImportCompressiveResistanceRecordRequest) */ {
 public:
  inline ImportCompressiveResistanceRecordRequest() : ImportCompressiveResistanceRecordRequest(nullptr) {}
  virtual ~ImportCompressiveResistanceRecordRequest();
  explicit constexpr ImportCompressiveResistanceRecordRequest(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  ImportCompressiveResistanceRecordRequest(const ImportCompressiveResistanceRecordRequest& from);
  ImportCompressiveResistanceRecordRequest(ImportCompressiveResistanceRecordRequest&& from) noexcept
    : ImportCompressiveResistanceRecordRequest() {
    *this = ::std::move(from);
  }

  inline ImportCompressiveResistanceRecordRequest& operator=(const ImportCompressiveResistanceRecordRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline ImportCompressiveResistanceRecordRequest& operator=(ImportCompressiveResistanceRecordRequest&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const ImportCompressiveResistanceRecordRequest& default_instance() {
    return *internal_default_instance();
  }
  static inline const ImportCompressiveResistanceRecordRequest* internal_default_instance() {
    return reinterpret_cast<const ImportCompressiveResistanceRecordRequest*>(
               &_ImportCompressiveResistanceRecordRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    119;

  friend void swap(ImportCompressiveResistanceRecordRequest& a, ImportCompressiveResistanceRecordRequest& b) {
    a.Swap(&b);
  }
  inline void Swap(ImportCompressiveResistanceRecordRequest* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(ImportCompressiveResistanceRecordRequest* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline ImportCompressiveResistanceRecordRequest* New() const final {
    return CreateMaybeMessage<ImportCompressiveResistanceRecordRequest>(nullptr);
  }

  ImportCompressiveResistanceRecordRequest* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<ImportCompressiveResistanceRecordRequest>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const ImportCompressiveResistanceRecordRequest& from);
  void MergeFrom(const ImportCompressiveResistanceRecordRequest& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(ImportCompressiveResistanceRecordRequest* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "smart3dmap.v1.ImportCompressiveResistanceRecordRequest";
  }
  protected:
  explicit ImportCompressiveResistanceRecordRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    return ::descriptor_table_data_5fengine_2fdata_5fengine_2eproto_metadata_getter(kIndexInFileMessages);
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kRecordsFieldNumber = 3,
    kDbIdFieldNumber = 1,
    kDrillIdFieldNumber = 2,
  };
  // repeated .smart3dmap.v1.CompressiveResistanceRecord records = 3;
  int records_size() const;
  private:
  int _internal_records_size() const;
  public:
  void clear_records();
  ::smart3dmap::v1::CompressiveResistanceRecord* mutable_records(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::smart3dmap::v1::CompressiveResistanceRecord >*
      mutable_records();
  private:
  const ::smart3dmap::v1::CompressiveResistanceRecord& _internal_records(int index) const;
  ::smart3dmap::v1::CompressiveResistanceRecord* _internal_add_records();
  public:
  const ::smart3dmap::v1::CompressiveResistanceRecord& records(int index) const;
  ::smart3dmap::v1::CompressiveResistanceRecord* add_records();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::smart3dmap::v1::CompressiveResistanceRecord >&
      records() const;

  // int32 db_id = 1;
  void clear_db_id();
  ::PROTOBUF_NAMESPACE_ID::int32 db_id() const;
  void set_db_id(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_db_id() const;
  void _internal_set_db_id(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // int32 drill_id = 2;
  void clear_drill_id();
  ::PROTOBUF_NAMESPACE_ID::int32 drill_id() const;
  void set_drill_id(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_drill_id() const;
  void _internal_set_drill_id(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // @@protoc_insertion_point(class_scope:smart3dmap.v1.ImportCompressiveResistanceRecordRequest)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::smart3dmap::v1::CompressiveResistanceRecord > records_;
  ::PROTOBUF_NAMESPACE_ID::int32 db_id_;
  ::PROTOBUF_NAMESPACE_ID::int32 drill_id_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_data_5fengine_2fdata_5fengine_2eproto;
};
// -------------------------------------------------------------------

class LIBS3DMGRPC_API ListGeoSurveyProjectsRequest PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:smart3dmap.v1.ListGeoSurveyProjectsRequest) */ {
 public:
  inline ListGeoSurveyProjectsRequest() : ListGeoSurveyProjectsRequest(nullptr) {}
  virtual ~ListGeoSurveyProjectsRequest();
  explicit constexpr ListGeoSurveyProjectsRequest(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  ListGeoSurveyProjectsRequest(const ListGeoSurveyProjectsRequest& from);
  ListGeoSurveyProjectsRequest(ListGeoSurveyProjectsRequest&& from) noexcept
    : ListGeoSurveyProjectsRequest() {
    *this = ::std::move(from);
  }

  inline ListGeoSurveyProjectsRequest& operator=(const ListGeoSurveyProjectsRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline ListGeoSurveyProjectsRequest& operator=(ListGeoSurveyProjectsRequest&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const ListGeoSurveyProjectsRequest& default_instance() {
    return *internal_default_instance();
  }
  static inline const ListGeoSurveyProjectsRequest* internal_default_instance() {
    return reinterpret_cast<const ListGeoSurveyProjectsRequest*>(
               &_ListGeoSurveyProjectsRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    120;

  friend void swap(ListGeoSurveyProjectsRequest& a, ListGeoSurveyProjectsRequest& b) {
    a.Swap(&b);
  }
  inline void Swap(ListGeoSurveyProjectsRequest* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(ListGeoSurveyProjectsRequest* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline ListGeoSurveyProjectsRequest* New() const final {
    return CreateMaybeMessage<ListGeoSurveyProjectsRequest>(nullptr);
  }

  ListGeoSurveyProjectsRequest* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<ListGeoSurveyProjectsRequest>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const ListGeoSurveyProjectsRequest& from);
  void MergeFrom(const ListGeoSurveyProjectsRequest& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(ListGeoSurveyProjectsRequest* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "smart3dmap.v1.ListGeoSurveyProjectsRequest";
  }
  protected:
  explicit ListGeoSurveyProjectsRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    return ::descriptor_table_data_5fengine_2fdata_5fengine_2eproto_metadata_getter(kIndexInFileMessages);
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kNameFieldNumber = 3,
    kPaginationFieldNumber = 1,
    kDbIdFieldNumber = 2,
  };
  // string name = 3;
  void clear_name();
  const std::string& name() const;
  void set_name(const std::string& value);
  void set_name(std::string&& value);
  void set_name(const char* value);
  void set_name(const char* value, size_t size);
  std::string* mutable_name();
  std::string* release_name();
  void set_allocated_name(std::string* name);
  private:
  const std::string& _internal_name() const;
  void _internal_set_name(const std::string& value);
  std::string* _internal_mutable_name();
  public:

  // .smart3dmap.v1.Pagination pagination = 1;
  bool has_pagination() const;
  private:
  bool _internal_has_pagination() const;
  public:
  void clear_pagination();
  const ::smart3dmap::v1::Pagination& pagination() const;
  ::smart3dmap::v1::Pagination* release_pagination();
  ::smart3dmap::v1::Pagination* mutable_pagination();
  void set_allocated_pagination(::smart3dmap::v1::Pagination* pagination);
  private:
  const ::smart3dmap::v1::Pagination& _internal_pagination() const;
  ::smart3dmap::v1::Pagination* _internal_mutable_pagination();
  public:
  void unsafe_arena_set_allocated_pagination(
      ::smart3dmap::v1::Pagination* pagination);
  ::smart3dmap::v1::Pagination* unsafe_arena_release_pagination();

  // int32 db_id = 2;
  void clear_db_id();
  ::PROTOBUF_NAMESPACE_ID::int32 db_id() const;
  void set_db_id(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_db_id() const;
  void _internal_set_db_id(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // @@protoc_insertion_point(class_scope:smart3dmap.v1.ListGeoSurveyProjectsRequest)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr name_;
  ::smart3dmap::v1::Pagination* pagination_;
  ::PROTOBUF_NAMESPACE_ID::int32 db_id_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_data_5fengine_2fdata_5fengine_2eproto;
};
// -------------------------------------------------------------------

class LIBS3DMGRPC_API ListGeoSurveyProjectsResponse PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:smart3dmap.v1.ListGeoSurveyProjectsResponse) */ {
 public:
  inline ListGeoSurveyProjectsResponse() : ListGeoSurveyProjectsResponse(nullptr) {}
  virtual ~ListGeoSurveyProjectsResponse();
  explicit constexpr ListGeoSurveyProjectsResponse(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  ListGeoSurveyProjectsResponse(const ListGeoSurveyProjectsResponse& from);
  ListGeoSurveyProjectsResponse(ListGeoSurveyProjectsResponse&& from) noexcept
    : ListGeoSurveyProjectsResponse() {
    *this = ::std::move(from);
  }

  inline ListGeoSurveyProjectsResponse& operator=(const ListGeoSurveyProjectsResponse& from) {
    CopyFrom(from);
    return *this;
  }
  inline ListGeoSurveyProjectsResponse& operator=(ListGeoSurveyProjectsResponse&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const ListGeoSurveyProjectsResponse& default_instance() {
    return *internal_default_instance();
  }
  static inline const ListGeoSurveyProjectsResponse* internal_default_instance() {
    return reinterpret_cast<const ListGeoSurveyProjectsResponse*>(
               &_ListGeoSurveyProjectsResponse_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    121;

  friend void swap(ListGeoSurveyProjectsResponse& a, ListGeoSurveyProjectsResponse& b) {
    a.Swap(&b);
  }
  inline void Swap(ListGeoSurveyProjectsResponse* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(ListGeoSurveyProjectsResponse* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline ListGeoSurveyProjectsResponse* New() const final {
    return CreateMaybeMessage<ListGeoSurveyProjectsResponse>(nullptr);
  }

  ListGeoSurveyProjectsResponse* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<ListGeoSurveyProjectsResponse>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const ListGeoSurveyProjectsResponse& from);
  void MergeFrom(const ListGeoSurveyProjectsResponse& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(ListGeoSurveyProjectsResponse* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "smart3dmap.v1.ListGeoSurveyProjectsResponse";
  }
  protected:
  explicit ListGeoSurveyProjectsResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    return ::descriptor_table_data_5fengine_2fdata_5fengine_2eproto_metadata_getter(kIndexInFileMessages);
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kProjectsFieldNumber = 2,
    kTotalCountFieldNumber = 1,
  };
  // repeated .smart3dmap.v1.GeoSurveyProject projects = 2;
  int projects_size() const;
  private:
  int _internal_projects_size() const;
  public:
  void clear_projects();
  ::smart3dmap::v1::GeoSurveyProject* mutable_projects(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::smart3dmap::v1::GeoSurveyProject >*
      mutable_projects();
  private:
  const ::smart3dmap::v1::GeoSurveyProject& _internal_projects(int index) const;
  ::smart3dmap::v1::GeoSurveyProject* _internal_add_projects();
  public:
  const ::smart3dmap::v1::GeoSurveyProject& projects(int index) const;
  ::smart3dmap::v1::GeoSurveyProject* add_projects();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::smart3dmap::v1::GeoSurveyProject >&
      projects() const;

  // int32 total_count = 1;
  void clear_total_count();
  ::PROTOBUF_NAMESPACE_ID::int32 total_count() const;
  void set_total_count(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_total_count() const;
  void _internal_set_total_count(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // @@protoc_insertion_point(class_scope:smart3dmap.v1.ListGeoSurveyProjectsResponse)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::smart3dmap::v1::GeoSurveyProject > projects_;
  ::PROTOBUF_NAMESPACE_ID::int32 total_count_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_data_5fengine_2fdata_5fengine_2eproto;
};
// -------------------------------------------------------------------

class LIBS3DMGRPC_API GetGeoSurveyProjectRequest PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:smart3dmap.v1.GetGeoSurveyProjectRequest) */ {
 public:
  inline GetGeoSurveyProjectRequest() : GetGeoSurveyProjectRequest(nullptr) {}
  virtual ~GetGeoSurveyProjectRequest();
  explicit constexpr GetGeoSurveyProjectRequest(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  GetGeoSurveyProjectRequest(const GetGeoSurveyProjectRequest& from);
  GetGeoSurveyProjectRequest(GetGeoSurveyProjectRequest&& from) noexcept
    : GetGeoSurveyProjectRequest() {
    *this = ::std::move(from);
  }

  inline GetGeoSurveyProjectRequest& operator=(const GetGeoSurveyProjectRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline GetGeoSurveyProjectRequest& operator=(GetGeoSurveyProjectRequest&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const GetGeoSurveyProjectRequest& default_instance() {
    return *internal_default_instance();
  }
  static inline const GetGeoSurveyProjectRequest* internal_default_instance() {
    return reinterpret_cast<const GetGeoSurveyProjectRequest*>(
               &_GetGeoSurveyProjectRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    122;

  friend void swap(GetGeoSurveyProjectRequest& a, GetGeoSurveyProjectRequest& b) {
    a.Swap(&b);
  }
  inline void Swap(GetGeoSurveyProjectRequest* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(GetGeoSurveyProjectRequest* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline GetGeoSurveyProjectRequest* New() const final {
    return CreateMaybeMessage<GetGeoSurveyProjectRequest>(nullptr);
  }

  GetGeoSurveyProjectRequest* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<GetGeoSurveyProjectRequest>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const GetGeoSurveyProjectRequest& from);
  void MergeFrom(const GetGeoSurveyProjectRequest& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(GetGeoSurveyProjectRequest* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "smart3dmap.v1.GetGeoSurveyProjectRequest";
  }
  protected:
  explicit GetGeoSurveyProjectRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    return ::descriptor_table_data_5fengine_2fdata_5fengine_2eproto_metadata_getter(kIndexInFileMessages);
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kDbIdFieldNumber = 1,
    kProjectIdFieldNumber = 2,
  };
  // int32 db_id = 1;
  void clear_db_id();
  ::PROTOBUF_NAMESPACE_ID::int32 db_id() const;
  void set_db_id(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_db_id() const;
  void _internal_set_db_id(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // int32 project_id = 2;
  void clear_project_id();
  ::PROTOBUF_NAMESPACE_ID::int32 project_id() const;
  void set_project_id(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_project_id() const;
  void _internal_set_project_id(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // @@protoc_insertion_point(class_scope:smart3dmap.v1.GetGeoSurveyProjectRequest)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::int32 db_id_;
  ::PROTOBUF_NAMESPACE_ID::int32 project_id_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_data_5fengine_2fdata_5fengine_2eproto;
};
// -------------------------------------------------------------------

class LIBS3DMGRPC_API GetDrillDataRequest PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:smart3dmap.v1.GetDrillDataRequest) */ {
 public:
  inline GetDrillDataRequest() : GetDrillDataRequest(nullptr) {}
  virtual ~GetDrillDataRequest();
  explicit constexpr GetDrillDataRequest(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  GetDrillDataRequest(const GetDrillDataRequest& from);
  GetDrillDataRequest(GetDrillDataRequest&& from) noexcept
    : GetDrillDataRequest() {
    *this = ::std::move(from);
  }

  inline GetDrillDataRequest& operator=(const GetDrillDataRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline GetDrillDataRequest& operator=(GetDrillDataRequest&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const GetDrillDataRequest& default_instance() {
    return *internal_default_instance();
  }
  static inline const GetDrillDataRequest* internal_default_instance() {
    return reinterpret_cast<const GetDrillDataRequest*>(
               &_GetDrillDataRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    123;

  friend void swap(GetDrillDataRequest& a, GetDrillDataRequest& b) {
    a.Swap(&b);
  }
  inline void Swap(GetDrillDataRequest* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(GetDrillDataRequest* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline GetDrillDataRequest* New() const final {
    return CreateMaybeMessage<GetDrillDataRequest>(nullptr);
  }

  GetDrillDataRequest* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<GetDrillDataRequest>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const GetDrillDataRequest& from);
  void MergeFrom(const GetDrillDataRequest& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(GetDrillDataRequest* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "smart3dmap.v1.GetDrillDataRequest";
  }
  protected:
  explicit GetDrillDataRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    return ::descriptor_table_data_5fengine_2fdata_5fengine_2eproto_metadata_getter(kIndexInFileMessages);
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kDbIdFieldNumber = 1,
    kDrillIdFieldNumber = 2,
  };
  // int32 db_id = 1;
  void clear_db_id();
  ::PROTOBUF_NAMESPACE_ID::int32 db_id() const;
  void set_db_id(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_db_id() const;
  void _internal_set_db_id(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // int32 drill_id = 2;
  void clear_drill_id();
  ::PROTOBUF_NAMESPACE_ID::int32 drill_id() const;
  void set_drill_id(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_drill_id() const;
  void _internal_set_drill_id(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // @@protoc_insertion_point(class_scope:smart3dmap.v1.GetDrillDataRequest)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::int32 db_id_;
  ::PROTOBUF_NAMESPACE_ID::int32 drill_id_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_data_5fengine_2fdata_5fengine_2eproto;
};
// -------------------------------------------------------------------

class LIBS3DMGRPC_API DeleteDrillDataRequest PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:smart3dmap.v1.DeleteDrillDataRequest) */ {
 public:
  inline DeleteDrillDataRequest() : DeleteDrillDataRequest(nullptr) {}
  virtual ~DeleteDrillDataRequest();
  explicit constexpr DeleteDrillDataRequest(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  DeleteDrillDataRequest(const DeleteDrillDataRequest& from);
  DeleteDrillDataRequest(DeleteDrillDataRequest&& from) noexcept
    : DeleteDrillDataRequest() {
    *this = ::std::move(from);
  }

  inline DeleteDrillDataRequest& operator=(const DeleteDrillDataRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline DeleteDrillDataRequest& operator=(DeleteDrillDataRequest&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const DeleteDrillDataRequest& default_instance() {
    return *internal_default_instance();
  }
  static inline const DeleteDrillDataRequest* internal_default_instance() {
    return reinterpret_cast<const DeleteDrillDataRequest*>(
               &_DeleteDrillDataRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    124;

  friend void swap(DeleteDrillDataRequest& a, DeleteDrillDataRequest& b) {
    a.Swap(&b);
  }
  inline void Swap(DeleteDrillDataRequest* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(DeleteDrillDataRequest* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline DeleteDrillDataRequest* New() const final {
    return CreateMaybeMessage<DeleteDrillDataRequest>(nullptr);
  }

  DeleteDrillDataRequest* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<DeleteDrillDataRequest>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const DeleteDrillDataRequest& from);
  void MergeFrom(const DeleteDrillDataRequest& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(DeleteDrillDataRequest* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "smart3dmap.v1.DeleteDrillDataRequest";
  }
  protected:
  explicit DeleteDrillDataRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    return ::descriptor_table_data_5fengine_2fdata_5fengine_2eproto_metadata_getter(kIndexInFileMessages);
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kDbIdFieldNumber = 1,
    kDrillIdFieldNumber = 2,
  };
  // int32 db_id = 1;
  void clear_db_id();
  ::PROTOBUF_NAMESPACE_ID::int32 db_id() const;
  void set_db_id(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_db_id() const;
  void _internal_set_db_id(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // int32 drill_id = 2;
  void clear_drill_id();
  ::PROTOBUF_NAMESPACE_ID::int32 drill_id() const;
  void set_drill_id(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_drill_id() const;
  void _internal_set_drill_id(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // @@protoc_insertion_point(class_scope:smart3dmap.v1.DeleteDrillDataRequest)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::int32 db_id_;
  ::PROTOBUF_NAMESPACE_ID::int32 drill_id_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_data_5fengine_2fdata_5fengine_2eproto;
};
// -------------------------------------------------------------------

class LIBS3DMGRPC_API DeleteDrillDataResponse PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:smart3dmap.v1.DeleteDrillDataResponse) */ {
 public:
  inline DeleteDrillDataResponse() : DeleteDrillDataResponse(nullptr) {}
  virtual ~DeleteDrillDataResponse();
  explicit constexpr DeleteDrillDataResponse(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  DeleteDrillDataResponse(const DeleteDrillDataResponse& from);
  DeleteDrillDataResponse(DeleteDrillDataResponse&& from) noexcept
    : DeleteDrillDataResponse() {
    *this = ::std::move(from);
  }

  inline DeleteDrillDataResponse& operator=(const DeleteDrillDataResponse& from) {
    CopyFrom(from);
    return *this;
  }
  inline DeleteDrillDataResponse& operator=(DeleteDrillDataResponse&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const DeleteDrillDataResponse& default_instance() {
    return *internal_default_instance();
  }
  static inline const DeleteDrillDataResponse* internal_default_instance() {
    return reinterpret_cast<const DeleteDrillDataResponse*>(
               &_DeleteDrillDataResponse_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    125;

  friend void swap(DeleteDrillDataResponse& a, DeleteDrillDataResponse& b) {
    a.Swap(&b);
  }
  inline void Swap(DeleteDrillDataResponse* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(DeleteDrillDataResponse* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline DeleteDrillDataResponse* New() const final {
    return CreateMaybeMessage<DeleteDrillDataResponse>(nullptr);
  }

  DeleteDrillDataResponse* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<DeleteDrillDataResponse>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const DeleteDrillDataResponse& from);
  void MergeFrom(const DeleteDrillDataResponse& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(DeleteDrillDataResponse* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "smart3dmap.v1.DeleteDrillDataResponse";
  }
  protected:
  explicit DeleteDrillDataResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    return ::descriptor_table_data_5fengine_2fdata_5fengine_2eproto_metadata_getter(kIndexInFileMessages);
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kErrorFieldNumber = 2,
    kStatusFieldNumber = 1,
  };
  // string error = 2;
  void clear_error();
  const std::string& error() const;
  void set_error(const std::string& value);
  void set_error(std::string&& value);
  void set_error(const char* value);
  void set_error(const char* value, size_t size);
  std::string* mutable_error();
  std::string* release_error();
  void set_allocated_error(std::string* error);
  private:
  const std::string& _internal_error() const;
  void _internal_set_error(const std::string& value);
  std::string* _internal_mutable_error();
  public:

  // bool status = 1;
  void clear_status();
  bool status() const;
  void set_status(bool value);
  private:
  bool _internal_status() const;
  void _internal_set_status(bool value);
  public:

  // @@protoc_insertion_point(class_scope:smart3dmap.v1.DeleteDrillDataResponse)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr error_;
  bool status_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_data_5fengine_2fdata_5fengine_2eproto;
};
// -------------------------------------------------------------------

class LIBS3DMGRPC_API GetDrillRequest PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:smart3dmap.v1.GetDrillRequest) */ {
 public:
  inline GetDrillRequest() : GetDrillRequest(nullptr) {}
  virtual ~GetDrillRequest();
  explicit constexpr GetDrillRequest(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  GetDrillRequest(const GetDrillRequest& from);
  GetDrillRequest(GetDrillRequest&& from) noexcept
    : GetDrillRequest() {
    *this = ::std::move(from);
  }

  inline GetDrillRequest& operator=(const GetDrillRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline GetDrillRequest& operator=(GetDrillRequest&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const GetDrillRequest& default_instance() {
    return *internal_default_instance();
  }
  enum DrillIdentityCase {
    kDrillId = 2,
    kDrillCode = 3,
    DRILL_IDENTITY_NOT_SET = 0,
  };

  static inline const GetDrillRequest* internal_default_instance() {
    return reinterpret_cast<const GetDrillRequest*>(
               &_GetDrillRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    126;

  friend void swap(GetDrillRequest& a, GetDrillRequest& b) {
    a.Swap(&b);
  }
  inline void Swap(GetDrillRequest* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(GetDrillRequest* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline GetDrillRequest* New() const final {
    return CreateMaybeMessage<GetDrillRequest>(nullptr);
  }

  GetDrillRequest* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<GetDrillRequest>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const GetDrillRequest& from);
  void MergeFrom(const GetDrillRequest& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(GetDrillRequest* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "smart3dmap.v1.GetDrillRequest";
  }
  protected:
  explicit GetDrillRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    return ::descriptor_table_data_5fengine_2fdata_5fengine_2eproto_metadata_getter(kIndexInFileMessages);
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kDbIdFieldNumber = 1,
    kDrillIdFieldNumber = 2,
    kDrillCodeFieldNumber = 3,
  };
  // int32 db_id = 1;
  void clear_db_id();
  ::PROTOBUF_NAMESPACE_ID::int32 db_id() const;
  void set_db_id(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_db_id() const;
  void _internal_set_db_id(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // int32 drill_id = 2;
  bool has_drill_id() const;
  private:
  bool _internal_has_drill_id() const;
  public:
  void clear_drill_id();
  ::PROTOBUF_NAMESPACE_ID::int32 drill_id() const;
  void set_drill_id(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_drill_id() const;
  void _internal_set_drill_id(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // string drill_code = 3;
  bool has_drill_code() const;
  private:
  bool _internal_has_drill_code() const;
  public:
  void clear_drill_code();
  const std::string& drill_code() const;
  void set_drill_code(const std::string& value);
  void set_drill_code(std::string&& value);
  void set_drill_code(const char* value);
  void set_drill_code(const char* value, size_t size);
  std::string* mutable_drill_code();
  std::string* release_drill_code();
  void set_allocated_drill_code(std::string* drill_code);
  private:
  const std::string& _internal_drill_code() const;
  void _internal_set_drill_code(const std::string& value);
  std::string* _internal_mutable_drill_code();
  public:

  void clear_drill_identity();
  DrillIdentityCase drill_identity_case() const;
  // @@protoc_insertion_point(class_scope:smart3dmap.v1.GetDrillRequest)
 private:
  class _Internal;
  void set_has_drill_id();
  void set_has_drill_code();

  inline bool has_drill_identity() const;
  inline void clear_has_drill_identity();

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::int32 db_id_;
  union DrillIdentityUnion {
    constexpr DrillIdentityUnion() : _constinit_{} {}
      ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized _constinit_;
    ::PROTOBUF_NAMESPACE_ID::int32 drill_id_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr drill_code_;
  } drill_identity_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::uint32 _oneof_case_[1];

  friend struct ::TableStruct_data_5fengine_2fdata_5fengine_2eproto;
};
// -------------------------------------------------------------------

class LIBS3DMGRPC_API GetDrillStdLayersRequest PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:smart3dmap.v1.GetDrillStdLayersRequest) */ {
 public:
  inline GetDrillStdLayersRequest() : GetDrillStdLayersRequest(nullptr) {}
  virtual ~GetDrillStdLayersRequest();
  explicit constexpr GetDrillStdLayersRequest(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  GetDrillStdLayersRequest(const GetDrillStdLayersRequest& from);
  GetDrillStdLayersRequest(GetDrillStdLayersRequest&& from) noexcept
    : GetDrillStdLayersRequest() {
    *this = ::std::move(from);
  }

  inline GetDrillStdLayersRequest& operator=(const GetDrillStdLayersRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline GetDrillStdLayersRequest& operator=(GetDrillStdLayersRequest&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const GetDrillStdLayersRequest& default_instance() {
    return *internal_default_instance();
  }
  static inline const GetDrillStdLayersRequest* internal_default_instance() {
    return reinterpret_cast<const GetDrillStdLayersRequest*>(
               &_GetDrillStdLayersRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    127;

  friend void swap(GetDrillStdLayersRequest& a, GetDrillStdLayersRequest& b) {
    a.Swap(&b);
  }
  inline void Swap(GetDrillStdLayersRequest* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(GetDrillStdLayersRequest* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline GetDrillStdLayersRequest* New() const final {
    return CreateMaybeMessage<GetDrillStdLayersRequest>(nullptr);
  }

  GetDrillStdLayersRequest* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<GetDrillStdLayersRequest>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const GetDrillStdLayersRequest& from);
  void MergeFrom(const GetDrillStdLayersRequest& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(GetDrillStdLayersRequest* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "smart3dmap.v1.GetDrillStdLayersRequest";
  }
  protected:
  explicit GetDrillStdLayersRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    return ::descriptor_table_data_5fengine_2fdata_5fengine_2eproto_metadata_getter(kIndexInFileMessages);
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kDbIdFieldNumber = 1,
    kDrillIdFieldNumber = 2,
    kStdStratIdFieldNumber = 3,
  };
  // int32 db_id = 1;
  void clear_db_id();
  ::PROTOBUF_NAMESPACE_ID::int32 db_id() const;
  void set_db_id(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_db_id() const;
  void _internal_set_db_id(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // int32 drill_id = 2;
  void clear_drill_id();
  ::PROTOBUF_NAMESPACE_ID::int32 drill_id() const;
  void set_drill_id(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_drill_id() const;
  void _internal_set_drill_id(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // int32 std_strat_id = 3;
  void clear_std_strat_id();
  ::PROTOBUF_NAMESPACE_ID::int32 std_strat_id() const;
  void set_std_strat_id(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_std_strat_id() const;
  void _internal_set_std_strat_id(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // @@protoc_insertion_point(class_scope:smart3dmap.v1.GetDrillStdLayersRequest)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::int32 db_id_;
  ::PROTOBUF_NAMESPACE_ID::int32 drill_id_;
  ::PROTOBUF_NAMESPACE_ID::int32 std_strat_id_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_data_5fengine_2fdata_5fengine_2eproto;
};
// -------------------------------------------------------------------

class LIBS3DMGRPC_API DeleteModelRequest PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:smart3dmap.v1.DeleteModelRequest) */ {
 public:
  inline DeleteModelRequest() : DeleteModelRequest(nullptr) {}
  virtual ~DeleteModelRequest();
  explicit constexpr DeleteModelRequest(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  DeleteModelRequest(const DeleteModelRequest& from);
  DeleteModelRequest(DeleteModelRequest&& from) noexcept
    : DeleteModelRequest() {
    *this = ::std::move(from);
  }

  inline DeleteModelRequest& operator=(const DeleteModelRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline DeleteModelRequest& operator=(DeleteModelRequest&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const DeleteModelRequest& default_instance() {
    return *internal_default_instance();
  }
  static inline const DeleteModelRequest* internal_default_instance() {
    return reinterpret_cast<const DeleteModelRequest*>(
               &_DeleteModelRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    128;

  friend void swap(DeleteModelRequest& a, DeleteModelRequest& b) {
    a.Swap(&b);
  }
  inline void Swap(DeleteModelRequest* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(DeleteModelRequest* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline DeleteModelRequest* New() const final {
    return CreateMaybeMessage<DeleteModelRequest>(nullptr);
  }

  DeleteModelRequest* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<DeleteModelRequest>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const DeleteModelRequest& from);
  void MergeFrom(const DeleteModelRequest& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(DeleteModelRequest* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "smart3dmap.v1.DeleteModelRequest";
  }
  protected:
  explicit DeleteModelRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    return ::descriptor_table_data_5fengine_2fdata_5fengine_2eproto_metadata_getter(kIndexInFileMessages);
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kDbIdFieldNumber = 1,
    kModelIdFieldNumber = 2,
  };
  // int32 db_id = 1;
  void clear_db_id();
  ::PROTOBUF_NAMESPACE_ID::int32 db_id() const;
  void set_db_id(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_db_id() const;
  void _internal_set_db_id(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // int32 model_id = 2;
  void clear_model_id();
  ::PROTOBUF_NAMESPACE_ID::int32 model_id() const;
  void set_model_id(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_model_id() const;
  void _internal_set_model_id(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // @@protoc_insertion_point(class_scope:smart3dmap.v1.DeleteModelRequest)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::int32 db_id_;
  ::PROTOBUF_NAMESPACE_ID::int32 model_id_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_data_5fengine_2fdata_5fengine_2eproto;
};
// -------------------------------------------------------------------

class LIBS3DMGRPC_API DeleteModelResponse PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:smart3dmap.v1.DeleteModelResponse) */ {
 public:
  inline DeleteModelResponse() : DeleteModelResponse(nullptr) {}
  virtual ~DeleteModelResponse();
  explicit constexpr DeleteModelResponse(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  DeleteModelResponse(const DeleteModelResponse& from);
  DeleteModelResponse(DeleteModelResponse&& from) noexcept
    : DeleteModelResponse() {
    *this = ::std::move(from);
  }

  inline DeleteModelResponse& operator=(const DeleteModelResponse& from) {
    CopyFrom(from);
    return *this;
  }
  inline DeleteModelResponse& operator=(DeleteModelResponse&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const DeleteModelResponse& default_instance() {
    return *internal_default_instance();
  }
  static inline const DeleteModelResponse* internal_default_instance() {
    return reinterpret_cast<const DeleteModelResponse*>(
               &_DeleteModelResponse_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    129;

  friend void swap(DeleteModelResponse& a, DeleteModelResponse& b) {
    a.Swap(&b);
  }
  inline void Swap(DeleteModelResponse* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(DeleteModelResponse* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline DeleteModelResponse* New() const final {
    return CreateMaybeMessage<DeleteModelResponse>(nullptr);
  }

  DeleteModelResponse* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<DeleteModelResponse>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const DeleteModelResponse& from);
  void MergeFrom(const DeleteModelResponse& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(DeleteModelResponse* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "smart3dmap.v1.DeleteModelResponse";
  }
  protected:
  explicit DeleteModelResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    return ::descriptor_table_data_5fengine_2fdata_5fengine_2eproto_metadata_getter(kIndexInFileMessages);
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kErrorFieldNumber = 2,
    kStatusFieldNumber = 1,
  };
  // string error = 2;
  void clear_error();
  const std::string& error() const;
  void set_error(const std::string& value);
  void set_error(std::string&& value);
  void set_error(const char* value);
  void set_error(const char* value, size_t size);
  std::string* mutable_error();
  std::string* release_error();
  void set_allocated_error(std::string* error);
  private:
  const std::string& _internal_error() const;
  void _internal_set_error(const std::string& value);
  std::string* _internal_mutable_error();
  public:

  // bool status = 1;
  void clear_status();
  bool status() const;
  void set_status(bool value);
  private:
  bool _internal_status() const;
  void _internal_set_status(bool value);
  public:

  // @@protoc_insertion_point(class_scope:smart3dmap.v1.DeleteModelResponse)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr error_;
  bool status_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_data_5fengine_2fdata_5fengine_2eproto;
};
// -------------------------------------------------------------------

class LIBS3DMGRPC_API ExportModelMetadataRequest PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:smart3dmap.v1.ExportModelMetadataRequest) */ {
 public:
  inline ExportModelMetadataRequest() : ExportModelMetadataRequest(nullptr) {}
  virtual ~ExportModelMetadataRequest();
  explicit constexpr ExportModelMetadataRequest(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  ExportModelMetadataRequest(const ExportModelMetadataRequest& from);
  ExportModelMetadataRequest(ExportModelMetadataRequest&& from) noexcept
    : ExportModelMetadataRequest() {
    *this = ::std::move(from);
  }

  inline ExportModelMetadataRequest& operator=(const ExportModelMetadataRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline ExportModelMetadataRequest& operator=(ExportModelMetadataRequest&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const ExportModelMetadataRequest& default_instance() {
    return *internal_default_instance();
  }
  static inline const ExportModelMetadataRequest* internal_default_instance() {
    return reinterpret_cast<const ExportModelMetadataRequest*>(
               &_ExportModelMetadataRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    130;

  friend void swap(ExportModelMetadataRequest& a, ExportModelMetadataRequest& b) {
    a.Swap(&b);
  }
  inline void Swap(ExportModelMetadataRequest* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(ExportModelMetadataRequest* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline ExportModelMetadataRequest* New() const final {
    return CreateMaybeMessage<ExportModelMetadataRequest>(nullptr);
  }

  ExportModelMetadataRequest* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<ExportModelMetadataRequest>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const ExportModelMetadataRequest& from);
  void MergeFrom(const ExportModelMetadataRequest& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(ExportModelMetadataRequest* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "smart3dmap.v1.ExportModelMetadataRequest";
  }
  protected:
  explicit ExportModelMetadataRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    return ::descriptor_table_data_5fengine_2fdata_5fengine_2eproto_metadata_getter(kIndexInFileMessages);
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kDbIdFieldNumber = 1,
    kModelIdFieldNumber = 2,
  };
  // int32 db_id = 1;
  void clear_db_id();
  ::PROTOBUF_NAMESPACE_ID::int32 db_id() const;
  void set_db_id(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_db_id() const;
  void _internal_set_db_id(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // int32 model_id = 2;
  void clear_model_id();
  ::PROTOBUF_NAMESPACE_ID::int32 model_id() const;
  void set_model_id(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_model_id() const;
  void _internal_set_model_id(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // @@protoc_insertion_point(class_scope:smart3dmap.v1.ExportModelMetadataRequest)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::int32 db_id_;
  ::PROTOBUF_NAMESPACE_ID::int32 model_id_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_data_5fengine_2fdata_5fengine_2eproto;
};
// -------------------------------------------------------------------

class LIBS3DMGRPC_API ExportModelMetadataResponse PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:smart3dmap.v1.ExportModelMetadataResponse) */ {
 public:
  inline ExportModelMetadataResponse() : ExportModelMetadataResponse(nullptr) {}
  virtual ~ExportModelMetadataResponse();
  explicit constexpr ExportModelMetadataResponse(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  ExportModelMetadataResponse(const ExportModelMetadataResponse& from);
  ExportModelMetadataResponse(ExportModelMetadataResponse&& from) noexcept
    : ExportModelMetadataResponse() {
    *this = ::std::move(from);
  }

  inline ExportModelMetadataResponse& operator=(const ExportModelMetadataResponse& from) {
    CopyFrom(from);
    return *this;
  }
  inline ExportModelMetadataResponse& operator=(ExportModelMetadataResponse&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const ExportModelMetadataResponse& default_instance() {
    return *internal_default_instance();
  }
  static inline const ExportModelMetadataResponse* internal_default_instance() {
    return reinterpret_cast<const ExportModelMetadataResponse*>(
               &_ExportModelMetadataResponse_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    131;

  friend void swap(ExportModelMetadataResponse& a, ExportModelMetadataResponse& b) {
    a.Swap(&b);
  }
  inline void Swap(ExportModelMetadataResponse* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(ExportModelMetadataResponse* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline ExportModelMetadataResponse* New() const final {
    return CreateMaybeMessage<ExportModelMetadataResponse>(nullptr);
  }

  ExportModelMetadataResponse* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<ExportModelMetadataResponse>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const ExportModelMetadataResponse& from);
  void MergeFrom(const ExportModelMetadataResponse& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(ExportModelMetadataResponse* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "smart3dmap.v1.ExportModelMetadataResponse";
  }
  protected:
  explicit ExportModelMetadataResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    return ::descriptor_table_data_5fengine_2fdata_5fengine_2eproto_metadata_getter(kIndexInFileMessages);
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kMetadataXmlFieldNumber = 4,
    kDbIdFieldNumber = 1,
    kModelIdFieldNumber = 2,
  };
  // bytes metadata_xml = 4;
  void clear_metadata_xml();
  const std::string& metadata_xml() const;
  void set_metadata_xml(const std::string& value);
  void set_metadata_xml(std::string&& value);
  void set_metadata_xml(const char* value);
  void set_metadata_xml(const void* value, size_t size);
  std::string* mutable_metadata_xml();
  std::string* release_metadata_xml();
  void set_allocated_metadata_xml(std::string* metadata_xml);
  private:
  const std::string& _internal_metadata_xml() const;
  void _internal_set_metadata_xml(const std::string& value);
  std::string* _internal_mutable_metadata_xml();
  public:

  // int32 db_id = 1;
  void clear_db_id();
  ::PROTOBUF_NAMESPACE_ID::int32 db_id() const;
  void set_db_id(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_db_id() const;
  void _internal_set_db_id(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // int32 model_id = 2;
  void clear_model_id();
  ::PROTOBUF_NAMESPACE_ID::int32 model_id() const;
  void set_model_id(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_model_id() const;
  void _internal_set_model_id(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // @@protoc_insertion_point(class_scope:smart3dmap.v1.ExportModelMetadataResponse)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr metadata_xml_;
  ::PROTOBUF_NAMESPACE_ID::int32 db_id_;
  ::PROTOBUF_NAMESPACE_ID::int32 model_id_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_data_5fengine_2fdata_5fengine_2eproto;
};
// -------------------------------------------------------------------

class LIBS3DMGRPC_API ImportModelMetadataRequest PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:smart3dmap.v1.ImportModelMetadataRequest) */ {
 public:
  inline ImportModelMetadataRequest() : ImportModelMetadataRequest(nullptr) {}
  virtual ~ImportModelMetadataRequest();
  explicit constexpr ImportModelMetadataRequest(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  ImportModelMetadataRequest(const ImportModelMetadataRequest& from);
  ImportModelMetadataRequest(ImportModelMetadataRequest&& from) noexcept
    : ImportModelMetadataRequest() {
    *this = ::std::move(from);
  }

  inline ImportModelMetadataRequest& operator=(const ImportModelMetadataRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline ImportModelMetadataRequest& operator=(ImportModelMetadataRequest&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const ImportModelMetadataRequest& default_instance() {
    return *internal_default_instance();
  }
  static inline const ImportModelMetadataRequest* internal_default_instance() {
    return reinterpret_cast<const ImportModelMetadataRequest*>(
               &_ImportModelMetadataRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    132;

  friend void swap(ImportModelMetadataRequest& a, ImportModelMetadataRequest& b) {
    a.Swap(&b);
  }
  inline void Swap(ImportModelMetadataRequest* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(ImportModelMetadataRequest* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline ImportModelMetadataRequest* New() const final {
    return CreateMaybeMessage<ImportModelMetadataRequest>(nullptr);
  }

  ImportModelMetadataRequest* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<ImportModelMetadataRequest>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const ImportModelMetadataRequest& from);
  void MergeFrom(const ImportModelMetadataRequest& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(ImportModelMetadataRequest* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "smart3dmap.v1.ImportModelMetadataRequest";
  }
  protected:
  explicit ImportModelMetadataRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    return ::descriptor_table_data_5fengine_2fdata_5fengine_2eproto_metadata_getter(kIndexInFileMessages);
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kMetadataXmlFieldNumber = 3,
    kDbIdFieldNumber = 1,
    kModelIdFieldNumber = 2,
  };
  // bytes metadata_xml = 3;
  void clear_metadata_xml();
  const std::string& metadata_xml() const;
  void set_metadata_xml(const std::string& value);
  void set_metadata_xml(std::string&& value);
  void set_metadata_xml(const char* value);
  void set_metadata_xml(const void* value, size_t size);
  std::string* mutable_metadata_xml();
  std::string* release_metadata_xml();
  void set_allocated_metadata_xml(std::string* metadata_xml);
  private:
  const std::string& _internal_metadata_xml() const;
  void _internal_set_metadata_xml(const std::string& value);
  std::string* _internal_mutable_metadata_xml();
  public:

  // int32 db_id = 1;
  void clear_db_id();
  ::PROTOBUF_NAMESPACE_ID::int32 db_id() const;
  void set_db_id(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_db_id() const;
  void _internal_set_db_id(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // int32 model_id = 2;
  void clear_model_id();
  ::PROTOBUF_NAMESPACE_ID::int32 model_id() const;
  void set_model_id(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_model_id() const;
  void _internal_set_model_id(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // @@protoc_insertion_point(class_scope:smart3dmap.v1.ImportModelMetadataRequest)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr metadata_xml_;
  ::PROTOBUF_NAMESPACE_ID::int32 db_id_;
  ::PROTOBUF_NAMESPACE_ID::int32 model_id_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_data_5fengine_2fdata_5fengine_2eproto;
};
// -------------------------------------------------------------------

class LIBS3DMGRPC_API ImportModelMetadataResponse PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:smart3dmap.v1.ImportModelMetadataResponse) */ {
 public:
  inline ImportModelMetadataResponse() : ImportModelMetadataResponse(nullptr) {}
  virtual ~ImportModelMetadataResponse();
  explicit constexpr ImportModelMetadataResponse(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  ImportModelMetadataResponse(const ImportModelMetadataResponse& from);
  ImportModelMetadataResponse(ImportModelMetadataResponse&& from) noexcept
    : ImportModelMetadataResponse() {
    *this = ::std::move(from);
  }

  inline ImportModelMetadataResponse& operator=(const ImportModelMetadataResponse& from) {
    CopyFrom(from);
    return *this;
  }
  inline ImportModelMetadataResponse& operator=(ImportModelMetadataResponse&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const ImportModelMetadataResponse& default_instance() {
    return *internal_default_instance();
  }
  static inline const ImportModelMetadataResponse* internal_default_instance() {
    return reinterpret_cast<const ImportModelMetadataResponse*>(
               &_ImportModelMetadataResponse_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    133;

  friend void swap(ImportModelMetadataResponse& a, ImportModelMetadataResponse& b) {
    a.Swap(&b);
  }
  inline void Swap(ImportModelMetadataResponse* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(ImportModelMetadataResponse* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline ImportModelMetadataResponse* New() const final {
    return CreateMaybeMessage<ImportModelMetadataResponse>(nullptr);
  }

  ImportModelMetadataResponse* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<ImportModelMetadataResponse>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const ImportModelMetadataResponse& from);
  void MergeFrom(const ImportModelMetadataResponse& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(ImportModelMetadataResponse* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "smart3dmap.v1.ImportModelMetadataResponse";
  }
  protected:
  explicit ImportModelMetadataResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    return ::descriptor_table_data_5fengine_2fdata_5fengine_2eproto_metadata_getter(kIndexInFileMessages);
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kErrorFieldNumber = 2,
    kStatusFieldNumber = 1,
  };
  // string error = 2;
  void clear_error();
  const std::string& error() const;
  void set_error(const std::string& value);
  void set_error(std::string&& value);
  void set_error(const char* value);
  void set_error(const char* value, size_t size);
  std::string* mutable_error();
  std::string* release_error();
  void set_allocated_error(std::string* error);
  private:
  const std::string& _internal_error() const;
  void _internal_set_error(const std::string& value);
  std::string* _internal_mutable_error();
  public:

  // bool status = 1;
  void clear_status();
  bool status() const;
  void set_status(bool value);
  private:
  bool _internal_status() const;
  void _internal_set_status(bool value);
  public:

  // @@protoc_insertion_point(class_scope:smart3dmap.v1.ImportModelMetadataResponse)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr error_;
  bool status_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_data_5fengine_2fdata_5fengine_2eproto;
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// DBServer

// int32 id = 1;
inline void DBServer::clear_id() {
  id_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 DBServer::_internal_id() const {
  return id_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 DBServer::id() const {
  // @@protoc_insertion_point(field_get:smart3dmap.v1.DBServer.id)
  return _internal_id();
}
inline void DBServer::_internal_set_id(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  id_ = value;
}
inline void DBServer::set_id(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_id(value);
  // @@protoc_insertion_point(field_set:smart3dmap.v1.DBServer.id)
}

// string name = 2;
inline void DBServer::clear_name() {
  name_.ClearToEmpty();
}
inline const std::string& DBServer::name() const {
  // @@protoc_insertion_point(field_get:smart3dmap.v1.DBServer.name)
  return _internal_name();
}
inline void DBServer::set_name(const std::string& value) {
  _internal_set_name(value);
  // @@protoc_insertion_point(field_set:smart3dmap.v1.DBServer.name)
}
inline std::string* DBServer::mutable_name() {
  // @@protoc_insertion_point(field_mutable:smart3dmap.v1.DBServer.name)
  return _internal_mutable_name();
}
inline const std::string& DBServer::_internal_name() const {
  return name_.Get();
}
inline void DBServer::_internal_set_name(const std::string& value) {
  
  name_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArena());
}
inline void DBServer::set_name(std::string&& value) {
  
  name_.Set(
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:smart3dmap.v1.DBServer.name)
}
inline void DBServer::set_name(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  name_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(value), GetArena());
  // @@protoc_insertion_point(field_set_char:smart3dmap.v1.DBServer.name)
}
inline void DBServer::set_name(const char* value,
    size_t size) {
  
  name_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:smart3dmap.v1.DBServer.name)
}
inline std::string* DBServer::_internal_mutable_name() {
  
  return name_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArena());
}
inline std::string* DBServer::release_name() {
  // @@protoc_insertion_point(field_release:smart3dmap.v1.DBServer.name)
  return name_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void DBServer::set_allocated_name(std::string* name) {
  if (name != nullptr) {
    
  } else {
    
  }
  name_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), name,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:smart3dmap.v1.DBServer.name)
}

// .smart3dmap.v1.DBServerType type = 3;
inline void DBServer::clear_type() {
  type_ = 0;
}
inline ::smart3dmap::v1::DBServerType DBServer::_internal_type() const {
  return static_cast< ::smart3dmap::v1::DBServerType >(type_);
}
inline ::smart3dmap::v1::DBServerType DBServer::type() const {
  // @@protoc_insertion_point(field_get:smart3dmap.v1.DBServer.type)
  return _internal_type();
}
inline void DBServer::_internal_set_type(::smart3dmap::v1::DBServerType value) {
  
  type_ = value;
}
inline void DBServer::set_type(::smart3dmap::v1::DBServerType value) {
  _internal_set_type(value);
  // @@protoc_insertion_point(field_set:smart3dmap.v1.DBServer.type)
}

// string host = 4;
inline void DBServer::clear_host() {
  host_.ClearToEmpty();
}
inline const std::string& DBServer::host() const {
  // @@protoc_insertion_point(field_get:smart3dmap.v1.DBServer.host)
  return _internal_host();
}
inline void DBServer::set_host(const std::string& value) {
  _internal_set_host(value);
  // @@protoc_insertion_point(field_set:smart3dmap.v1.DBServer.host)
}
inline std::string* DBServer::mutable_host() {
  // @@protoc_insertion_point(field_mutable:smart3dmap.v1.DBServer.host)
  return _internal_mutable_host();
}
inline const std::string& DBServer::_internal_host() const {
  return host_.Get();
}
inline void DBServer::_internal_set_host(const std::string& value) {
  
  host_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArena());
}
inline void DBServer::set_host(std::string&& value) {
  
  host_.Set(
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:smart3dmap.v1.DBServer.host)
}
inline void DBServer::set_host(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  host_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(value), GetArena());
  // @@protoc_insertion_point(field_set_char:smart3dmap.v1.DBServer.host)
}
inline void DBServer::set_host(const char* value,
    size_t size) {
  
  host_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:smart3dmap.v1.DBServer.host)
}
inline std::string* DBServer::_internal_mutable_host() {
  
  return host_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArena());
}
inline std::string* DBServer::release_host() {
  // @@protoc_insertion_point(field_release:smart3dmap.v1.DBServer.host)
  return host_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void DBServer::set_allocated_host(std::string* host) {
  if (host != nullptr) {
    
  } else {
    
  }
  host_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), host,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:smart3dmap.v1.DBServer.host)
}

// int32 port = 5;
inline void DBServer::clear_port() {
  port_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 DBServer::_internal_port() const {
  return port_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 DBServer::port() const {
  // @@protoc_insertion_point(field_get:smart3dmap.v1.DBServer.port)
  return _internal_port();
}
inline void DBServer::_internal_set_port(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  port_ = value;
}
inline void DBServer::set_port(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_port(value);
  // @@protoc_insertion_point(field_set:smart3dmap.v1.DBServer.port)
}

// .smart3dmap.v1.DBUser admin = 6;
inline bool DBServer::_internal_has_admin() const {
  return this != internal_default_instance() && admin_ != nullptr;
}
inline bool DBServer::has_admin() const {
  return _internal_has_admin();
}
inline void DBServer::clear_admin() {
  if (GetArena() == nullptr && admin_ != nullptr) {
    delete admin_;
  }
  admin_ = nullptr;
}
inline const ::smart3dmap::v1::DBUser& DBServer::_internal_admin() const {
  const ::smart3dmap::v1::DBUser* p = admin_;
  return p != nullptr ? *p : reinterpret_cast<const ::smart3dmap::v1::DBUser&>(
      ::smart3dmap::v1::_DBUser_default_instance_);
}
inline const ::smart3dmap::v1::DBUser& DBServer::admin() const {
  // @@protoc_insertion_point(field_get:smart3dmap.v1.DBServer.admin)
  return _internal_admin();
}
inline void DBServer::unsafe_arena_set_allocated_admin(
    ::smart3dmap::v1::DBUser* admin) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(admin_);
  }
  admin_ = admin;
  if (admin) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:smart3dmap.v1.DBServer.admin)
}
inline ::smart3dmap::v1::DBUser* DBServer::release_admin() {
  
  ::smart3dmap::v1::DBUser* temp = admin_;
  admin_ = nullptr;
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::smart3dmap::v1::DBUser* DBServer::unsafe_arena_release_admin() {
  // @@protoc_insertion_point(field_release:smart3dmap.v1.DBServer.admin)
  
  ::smart3dmap::v1::DBUser* temp = admin_;
  admin_ = nullptr;
  return temp;
}
inline ::smart3dmap::v1::DBUser* DBServer::_internal_mutable_admin() {
  
  if (admin_ == nullptr) {
    auto* p = CreateMaybeMessage<::smart3dmap::v1::DBUser>(GetArena());
    admin_ = p;
  }
  return admin_;
}
inline ::smart3dmap::v1::DBUser* DBServer::mutable_admin() {
  // @@protoc_insertion_point(field_mutable:smart3dmap.v1.DBServer.admin)
  return _internal_mutable_admin();
}
inline void DBServer::set_allocated_admin(::smart3dmap::v1::DBUser* admin) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete admin_;
  }
  if (admin) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(admin);
    if (message_arena != submessage_arena) {
      admin = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, admin, submessage_arena);
    }
    
  } else {
    
  }
  admin_ = admin;
  // @@protoc_insertion_point(field_set_allocated:smart3dmap.v1.DBServer.admin)
}

// .smart3dmap.v1.DBUser user = 7;
inline bool DBServer::_internal_has_user() const {
  return this != internal_default_instance() && user_ != nullptr;
}
inline bool DBServer::has_user() const {
  return _internal_has_user();
}
inline void DBServer::clear_user() {
  if (GetArena() == nullptr && user_ != nullptr) {
    delete user_;
  }
  user_ = nullptr;
}
inline const ::smart3dmap::v1::DBUser& DBServer::_internal_user() const {
  const ::smart3dmap::v1::DBUser* p = user_;
  return p != nullptr ? *p : reinterpret_cast<const ::smart3dmap::v1::DBUser&>(
      ::smart3dmap::v1::_DBUser_default_instance_);
}
inline const ::smart3dmap::v1::DBUser& DBServer::user() const {
  // @@protoc_insertion_point(field_get:smart3dmap.v1.DBServer.user)
  return _internal_user();
}
inline void DBServer::unsafe_arena_set_allocated_user(
    ::smart3dmap::v1::DBUser* user) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(user_);
  }
  user_ = user;
  if (user) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:smart3dmap.v1.DBServer.user)
}
inline ::smart3dmap::v1::DBUser* DBServer::release_user() {
  
  ::smart3dmap::v1::DBUser* temp = user_;
  user_ = nullptr;
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::smart3dmap::v1::DBUser* DBServer::unsafe_arena_release_user() {
  // @@protoc_insertion_point(field_release:smart3dmap.v1.DBServer.user)
  
  ::smart3dmap::v1::DBUser* temp = user_;
  user_ = nullptr;
  return temp;
}
inline ::smart3dmap::v1::DBUser* DBServer::_internal_mutable_user() {
  
  if (user_ == nullptr) {
    auto* p = CreateMaybeMessage<::smart3dmap::v1::DBUser>(GetArena());
    user_ = p;
  }
  return user_;
}
inline ::smart3dmap::v1::DBUser* DBServer::mutable_user() {
  // @@protoc_insertion_point(field_mutable:smart3dmap.v1.DBServer.user)
  return _internal_mutable_user();
}
inline void DBServer::set_allocated_user(::smart3dmap::v1::DBUser* user) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete user_;
  }
  if (user) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(user);
    if (message_arena != submessage_arena) {
      user = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, user, submessage_arena);
    }
    
  } else {
    
  }
  user_ = user;
  // @@protoc_insertion_point(field_set_allocated:smart3dmap.v1.DBServer.user)
}

// .google.protobuf.Timestamp created_at = 8;
inline bool DBServer::_internal_has_created_at() const {
  return this != internal_default_instance() && created_at_ != nullptr;
}
inline bool DBServer::has_created_at() const {
  return _internal_has_created_at();
}
inline const PROTOBUF_NAMESPACE_ID::Timestamp& DBServer::_internal_created_at() const {
  const PROTOBUF_NAMESPACE_ID::Timestamp* p = created_at_;
  return p != nullptr ? *p : reinterpret_cast<const PROTOBUF_NAMESPACE_ID::Timestamp&>(
      PROTOBUF_NAMESPACE_ID::_Timestamp_default_instance_);
}
inline const PROTOBUF_NAMESPACE_ID::Timestamp& DBServer::created_at() const {
  // @@protoc_insertion_point(field_get:smart3dmap.v1.DBServer.created_at)
  return _internal_created_at();
}
inline void DBServer::unsafe_arena_set_allocated_created_at(
    PROTOBUF_NAMESPACE_ID::Timestamp* created_at) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(created_at_);
  }
  created_at_ = created_at;
  if (created_at) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:smart3dmap.v1.DBServer.created_at)
}
inline PROTOBUF_NAMESPACE_ID::Timestamp* DBServer::release_created_at() {
  
  PROTOBUF_NAMESPACE_ID::Timestamp* temp = created_at_;
  created_at_ = nullptr;
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline PROTOBUF_NAMESPACE_ID::Timestamp* DBServer::unsafe_arena_release_created_at() {
  // @@protoc_insertion_point(field_release:smart3dmap.v1.DBServer.created_at)
  
  PROTOBUF_NAMESPACE_ID::Timestamp* temp = created_at_;
  created_at_ = nullptr;
  return temp;
}
inline PROTOBUF_NAMESPACE_ID::Timestamp* DBServer::_internal_mutable_created_at() {
  
  if (created_at_ == nullptr) {
    auto* p = CreateMaybeMessage<PROTOBUF_NAMESPACE_ID::Timestamp>(GetArena());
    created_at_ = p;
  }
  return created_at_;
}
inline PROTOBUF_NAMESPACE_ID::Timestamp* DBServer::mutable_created_at() {
  // @@protoc_insertion_point(field_mutable:smart3dmap.v1.DBServer.created_at)
  return _internal_mutable_created_at();
}
inline void DBServer::set_allocated_created_at(PROTOBUF_NAMESPACE_ID::Timestamp* created_at) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(created_at_);
  }
  if (created_at) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(created_at)->GetArena();
    if (message_arena != submessage_arena) {
      created_at = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, created_at, submessage_arena);
    }
    
  } else {
    
  }
  created_at_ = created_at;
  // @@protoc_insertion_point(field_set_allocated:smart3dmap.v1.DBServer.created_at)
}

// .google.protobuf.Timestamp updated_at = 9;
inline bool DBServer::_internal_has_updated_at() const {
  return this != internal_default_instance() && updated_at_ != nullptr;
}
inline bool DBServer::has_updated_at() const {
  return _internal_has_updated_at();
}
inline const PROTOBUF_NAMESPACE_ID::Timestamp& DBServer::_internal_updated_at() const {
  const PROTOBUF_NAMESPACE_ID::Timestamp* p = updated_at_;
  return p != nullptr ? *p : reinterpret_cast<const PROTOBUF_NAMESPACE_ID::Timestamp&>(
      PROTOBUF_NAMESPACE_ID::_Timestamp_default_instance_);
}
inline const PROTOBUF_NAMESPACE_ID::Timestamp& DBServer::updated_at() const {
  // @@protoc_insertion_point(field_get:smart3dmap.v1.DBServer.updated_at)
  return _internal_updated_at();
}
inline void DBServer::unsafe_arena_set_allocated_updated_at(
    PROTOBUF_NAMESPACE_ID::Timestamp* updated_at) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(updated_at_);
  }
  updated_at_ = updated_at;
  if (updated_at) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:smart3dmap.v1.DBServer.updated_at)
}
inline PROTOBUF_NAMESPACE_ID::Timestamp* DBServer::release_updated_at() {
  
  PROTOBUF_NAMESPACE_ID::Timestamp* temp = updated_at_;
  updated_at_ = nullptr;
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline PROTOBUF_NAMESPACE_ID::Timestamp* DBServer::unsafe_arena_release_updated_at() {
  // @@protoc_insertion_point(field_release:smart3dmap.v1.DBServer.updated_at)
  
  PROTOBUF_NAMESPACE_ID::Timestamp* temp = updated_at_;
  updated_at_ = nullptr;
  return temp;
}
inline PROTOBUF_NAMESPACE_ID::Timestamp* DBServer::_internal_mutable_updated_at() {
  
  if (updated_at_ == nullptr) {
    auto* p = CreateMaybeMessage<PROTOBUF_NAMESPACE_ID::Timestamp>(GetArena());
    updated_at_ = p;
  }
  return updated_at_;
}
inline PROTOBUF_NAMESPACE_ID::Timestamp* DBServer::mutable_updated_at() {
  // @@protoc_insertion_point(field_mutable:smart3dmap.v1.DBServer.updated_at)
  return _internal_mutable_updated_at();
}
inline void DBServer::set_allocated_updated_at(PROTOBUF_NAMESPACE_ID::Timestamp* updated_at) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(updated_at_);
  }
  if (updated_at) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(updated_at)->GetArena();
    if (message_arena != submessage_arena) {
      updated_at = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, updated_at, submessage_arena);
    }
    
  } else {
    
  }
  updated_at_ = updated_at;
  // @@protoc_insertion_point(field_set_allocated:smart3dmap.v1.DBServer.updated_at)
}

// string inner_host = 10;
inline void DBServer::clear_inner_host() {
  inner_host_.ClearToEmpty();
}
inline const std::string& DBServer::inner_host() const {
  // @@protoc_insertion_point(field_get:smart3dmap.v1.DBServer.inner_host)
  return _internal_inner_host();
}
inline void DBServer::set_inner_host(const std::string& value) {
  _internal_set_inner_host(value);
  // @@protoc_insertion_point(field_set:smart3dmap.v1.DBServer.inner_host)
}
inline std::string* DBServer::mutable_inner_host() {
  // @@protoc_insertion_point(field_mutable:smart3dmap.v1.DBServer.inner_host)
  return _internal_mutable_inner_host();
}
inline const std::string& DBServer::_internal_inner_host() const {
  return inner_host_.Get();
}
inline void DBServer::_internal_set_inner_host(const std::string& value) {
  
  inner_host_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArena());
}
inline void DBServer::set_inner_host(std::string&& value) {
  
  inner_host_.Set(
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:smart3dmap.v1.DBServer.inner_host)
}
inline void DBServer::set_inner_host(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  inner_host_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(value), GetArena());
  // @@protoc_insertion_point(field_set_char:smart3dmap.v1.DBServer.inner_host)
}
inline void DBServer::set_inner_host(const char* value,
    size_t size) {
  
  inner_host_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:smart3dmap.v1.DBServer.inner_host)
}
inline std::string* DBServer::_internal_mutable_inner_host() {
  
  return inner_host_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArena());
}
inline std::string* DBServer::release_inner_host() {
  // @@protoc_insertion_point(field_release:smart3dmap.v1.DBServer.inner_host)
  return inner_host_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void DBServer::set_allocated_inner_host(std::string* inner_host) {
  if (inner_host != nullptr) {
    
  } else {
    
  }
  inner_host_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), inner_host,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:smart3dmap.v1.DBServer.inner_host)
}

// -------------------------------------------------------------------

// DBUser

// string name = 1;
inline void DBUser::clear_name() {
  name_.ClearToEmpty();
}
inline const std::string& DBUser::name() const {
  // @@protoc_insertion_point(field_get:smart3dmap.v1.DBUser.name)
  return _internal_name();
}
inline void DBUser::set_name(const std::string& value) {
  _internal_set_name(value);
  // @@protoc_insertion_point(field_set:smart3dmap.v1.DBUser.name)
}
inline std::string* DBUser::mutable_name() {
  // @@protoc_insertion_point(field_mutable:smart3dmap.v1.DBUser.name)
  return _internal_mutable_name();
}
inline const std::string& DBUser::_internal_name() const {
  return name_.Get();
}
inline void DBUser::_internal_set_name(const std::string& value) {
  
  name_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArena());
}
inline void DBUser::set_name(std::string&& value) {
  
  name_.Set(
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:smart3dmap.v1.DBUser.name)
}
inline void DBUser::set_name(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  name_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(value), GetArena());
  // @@protoc_insertion_point(field_set_char:smart3dmap.v1.DBUser.name)
}
inline void DBUser::set_name(const char* value,
    size_t size) {
  
  name_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:smart3dmap.v1.DBUser.name)
}
inline std::string* DBUser::_internal_mutable_name() {
  
  return name_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArena());
}
inline std::string* DBUser::release_name() {
  // @@protoc_insertion_point(field_release:smart3dmap.v1.DBUser.name)
  return name_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void DBUser::set_allocated_name(std::string* name) {
  if (name != nullptr) {
    
  } else {
    
  }
  name_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), name,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:smart3dmap.v1.DBUser.name)
}

// string password = 2;
inline void DBUser::clear_password() {
  password_.ClearToEmpty();
}
inline const std::string& DBUser::password() const {
  // @@protoc_insertion_point(field_get:smart3dmap.v1.DBUser.password)
  return _internal_password();
}
inline void DBUser::set_password(const std::string& value) {
  _internal_set_password(value);
  // @@protoc_insertion_point(field_set:smart3dmap.v1.DBUser.password)
}
inline std::string* DBUser::mutable_password() {
  // @@protoc_insertion_point(field_mutable:smart3dmap.v1.DBUser.password)
  return _internal_mutable_password();
}
inline const std::string& DBUser::_internal_password() const {
  return password_.Get();
}
inline void DBUser::_internal_set_password(const std::string& value) {
  
  password_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArena());
}
inline void DBUser::set_password(std::string&& value) {
  
  password_.Set(
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:smart3dmap.v1.DBUser.password)
}
inline void DBUser::set_password(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  password_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(value), GetArena());
  // @@protoc_insertion_point(field_set_char:smart3dmap.v1.DBUser.password)
}
inline void DBUser::set_password(const char* value,
    size_t size) {
  
  password_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:smart3dmap.v1.DBUser.password)
}
inline std::string* DBUser::_internal_mutable_password() {
  
  return password_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArena());
}
inline std::string* DBUser::release_password() {
  // @@protoc_insertion_point(field_release:smart3dmap.v1.DBUser.password)
  return password_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void DBUser::set_allocated_password(std::string* password) {
  if (password != nullptr) {
    
  } else {
    
  }
  password_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), password,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:smart3dmap.v1.DBUser.password)
}

// -------------------------------------------------------------------

// ListDBServerTypesRequest

// -------------------------------------------------------------------

// ListDBServerTypesResponse_TypeItem

// string name = 1;
inline void ListDBServerTypesResponse_TypeItem::clear_name() {
  name_.ClearToEmpty();
}
inline const std::string& ListDBServerTypesResponse_TypeItem::name() const {
  // @@protoc_insertion_point(field_get:smart3dmap.v1.ListDBServerTypesResponse.TypeItem.name)
  return _internal_name();
}
inline void ListDBServerTypesResponse_TypeItem::set_name(const std::string& value) {
  _internal_set_name(value);
  // @@protoc_insertion_point(field_set:smart3dmap.v1.ListDBServerTypesResponse.TypeItem.name)
}
inline std::string* ListDBServerTypesResponse_TypeItem::mutable_name() {
  // @@protoc_insertion_point(field_mutable:smart3dmap.v1.ListDBServerTypesResponse.TypeItem.name)
  return _internal_mutable_name();
}
inline const std::string& ListDBServerTypesResponse_TypeItem::_internal_name() const {
  return name_.Get();
}
inline void ListDBServerTypesResponse_TypeItem::_internal_set_name(const std::string& value) {
  
  name_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArena());
}
inline void ListDBServerTypesResponse_TypeItem::set_name(std::string&& value) {
  
  name_.Set(
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:smart3dmap.v1.ListDBServerTypesResponse.TypeItem.name)
}
inline void ListDBServerTypesResponse_TypeItem::set_name(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  name_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(value), GetArena());
  // @@protoc_insertion_point(field_set_char:smart3dmap.v1.ListDBServerTypesResponse.TypeItem.name)
}
inline void ListDBServerTypesResponse_TypeItem::set_name(const char* value,
    size_t size) {
  
  name_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:smart3dmap.v1.ListDBServerTypesResponse.TypeItem.name)
}
inline std::string* ListDBServerTypesResponse_TypeItem::_internal_mutable_name() {
  
  return name_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArena());
}
inline std::string* ListDBServerTypesResponse_TypeItem::release_name() {
  // @@protoc_insertion_point(field_release:smart3dmap.v1.ListDBServerTypesResponse.TypeItem.name)
  return name_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void ListDBServerTypesResponse_TypeItem::set_allocated_name(std::string* name) {
  if (name != nullptr) {
    
  } else {
    
  }
  name_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), name,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:smart3dmap.v1.ListDBServerTypesResponse.TypeItem.name)
}

// .smart3dmap.v1.DBServerType type = 2;
inline void ListDBServerTypesResponse_TypeItem::clear_type() {
  type_ = 0;
}
inline ::smart3dmap::v1::DBServerType ListDBServerTypesResponse_TypeItem::_internal_type() const {
  return static_cast< ::smart3dmap::v1::DBServerType >(type_);
}
inline ::smart3dmap::v1::DBServerType ListDBServerTypesResponse_TypeItem::type() const {
  // @@protoc_insertion_point(field_get:smart3dmap.v1.ListDBServerTypesResponse.TypeItem.type)
  return _internal_type();
}
inline void ListDBServerTypesResponse_TypeItem::_internal_set_type(::smart3dmap::v1::DBServerType value) {
  
  type_ = value;
}
inline void ListDBServerTypesResponse_TypeItem::set_type(::smart3dmap::v1::DBServerType value) {
  _internal_set_type(value);
  // @@protoc_insertion_point(field_set:smart3dmap.v1.ListDBServerTypesResponse.TypeItem.type)
}

// -------------------------------------------------------------------

// ListDBServerTypesResponse

// repeated .smart3dmap.v1.ListDBServerTypesResponse.TypeItem items = 1;
inline int ListDBServerTypesResponse::_internal_items_size() const {
  return items_.size();
}
inline int ListDBServerTypesResponse::items_size() const {
  return _internal_items_size();
}
inline void ListDBServerTypesResponse::clear_items() {
  items_.Clear();
}
inline ::smart3dmap::v1::ListDBServerTypesResponse_TypeItem* ListDBServerTypesResponse::mutable_items(int index) {
  // @@protoc_insertion_point(field_mutable:smart3dmap.v1.ListDBServerTypesResponse.items)
  return items_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::smart3dmap::v1::ListDBServerTypesResponse_TypeItem >*
ListDBServerTypesResponse::mutable_items() {
  // @@protoc_insertion_point(field_mutable_list:smart3dmap.v1.ListDBServerTypesResponse.items)
  return &items_;
}
inline const ::smart3dmap::v1::ListDBServerTypesResponse_TypeItem& ListDBServerTypesResponse::_internal_items(int index) const {
  return items_.Get(index);
}
inline const ::smart3dmap::v1::ListDBServerTypesResponse_TypeItem& ListDBServerTypesResponse::items(int index) const {
  // @@protoc_insertion_point(field_get:smart3dmap.v1.ListDBServerTypesResponse.items)
  return _internal_items(index);
}
inline ::smart3dmap::v1::ListDBServerTypesResponse_TypeItem* ListDBServerTypesResponse::_internal_add_items() {
  return items_.Add();
}
inline ::smart3dmap::v1::ListDBServerTypesResponse_TypeItem* ListDBServerTypesResponse::add_items() {
  // @@protoc_insertion_point(field_add:smart3dmap.v1.ListDBServerTypesResponse.items)
  return _internal_add_items();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::smart3dmap::v1::ListDBServerTypesResponse_TypeItem >&
ListDBServerTypesResponse::items() const {
  // @@protoc_insertion_point(field_list:smart3dmap.v1.ListDBServerTypesResponse.items)
  return items_;
}

// -------------------------------------------------------------------

// CreateDatabaseServerRequest

// string name = 1;
inline void CreateDatabaseServerRequest::clear_name() {
  name_.ClearToEmpty();
}
inline const std::string& CreateDatabaseServerRequest::name() const {
  // @@protoc_insertion_point(field_get:smart3dmap.v1.CreateDatabaseServerRequest.name)
  return _internal_name();
}
inline void CreateDatabaseServerRequest::set_name(const std::string& value) {
  _internal_set_name(value);
  // @@protoc_insertion_point(field_set:smart3dmap.v1.CreateDatabaseServerRequest.name)
}
inline std::string* CreateDatabaseServerRequest::mutable_name() {
  // @@protoc_insertion_point(field_mutable:smart3dmap.v1.CreateDatabaseServerRequest.name)
  return _internal_mutable_name();
}
inline const std::string& CreateDatabaseServerRequest::_internal_name() const {
  return name_.Get();
}
inline void CreateDatabaseServerRequest::_internal_set_name(const std::string& value) {
  
  name_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArena());
}
inline void CreateDatabaseServerRequest::set_name(std::string&& value) {
  
  name_.Set(
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:smart3dmap.v1.CreateDatabaseServerRequest.name)
}
inline void CreateDatabaseServerRequest::set_name(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  name_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(value), GetArena());
  // @@protoc_insertion_point(field_set_char:smart3dmap.v1.CreateDatabaseServerRequest.name)
}
inline void CreateDatabaseServerRequest::set_name(const char* value,
    size_t size) {
  
  name_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:smart3dmap.v1.CreateDatabaseServerRequest.name)
}
inline std::string* CreateDatabaseServerRequest::_internal_mutable_name() {
  
  return name_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArena());
}
inline std::string* CreateDatabaseServerRequest::release_name() {
  // @@protoc_insertion_point(field_release:smart3dmap.v1.CreateDatabaseServerRequest.name)
  return name_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void CreateDatabaseServerRequest::set_allocated_name(std::string* name) {
  if (name != nullptr) {
    
  } else {
    
  }
  name_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), name,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:smart3dmap.v1.CreateDatabaseServerRequest.name)
}

// .smart3dmap.v1.DBServerType type = 2;
inline void CreateDatabaseServerRequest::clear_type() {
  type_ = 0;
}
inline ::smart3dmap::v1::DBServerType CreateDatabaseServerRequest::_internal_type() const {
  return static_cast< ::smart3dmap::v1::DBServerType >(type_);
}
inline ::smart3dmap::v1::DBServerType CreateDatabaseServerRequest::type() const {
  // @@protoc_insertion_point(field_get:smart3dmap.v1.CreateDatabaseServerRequest.type)
  return _internal_type();
}
inline void CreateDatabaseServerRequest::_internal_set_type(::smart3dmap::v1::DBServerType value) {
  
  type_ = value;
}
inline void CreateDatabaseServerRequest::set_type(::smart3dmap::v1::DBServerType value) {
  _internal_set_type(value);
  // @@protoc_insertion_point(field_set:smart3dmap.v1.CreateDatabaseServerRequest.type)
}

// string host = 3;
inline void CreateDatabaseServerRequest::clear_host() {
  host_.ClearToEmpty();
}
inline const std::string& CreateDatabaseServerRequest::host() const {
  // @@protoc_insertion_point(field_get:smart3dmap.v1.CreateDatabaseServerRequest.host)
  return _internal_host();
}
inline void CreateDatabaseServerRequest::set_host(const std::string& value) {
  _internal_set_host(value);
  // @@protoc_insertion_point(field_set:smart3dmap.v1.CreateDatabaseServerRequest.host)
}
inline std::string* CreateDatabaseServerRequest::mutable_host() {
  // @@protoc_insertion_point(field_mutable:smart3dmap.v1.CreateDatabaseServerRequest.host)
  return _internal_mutable_host();
}
inline const std::string& CreateDatabaseServerRequest::_internal_host() const {
  return host_.Get();
}
inline void CreateDatabaseServerRequest::_internal_set_host(const std::string& value) {
  
  host_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArena());
}
inline void CreateDatabaseServerRequest::set_host(std::string&& value) {
  
  host_.Set(
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:smart3dmap.v1.CreateDatabaseServerRequest.host)
}
inline void CreateDatabaseServerRequest::set_host(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  host_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(value), GetArena());
  // @@protoc_insertion_point(field_set_char:smart3dmap.v1.CreateDatabaseServerRequest.host)
}
inline void CreateDatabaseServerRequest::set_host(const char* value,
    size_t size) {
  
  host_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:smart3dmap.v1.CreateDatabaseServerRequest.host)
}
inline std::string* CreateDatabaseServerRequest::_internal_mutable_host() {
  
  return host_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArena());
}
inline std::string* CreateDatabaseServerRequest::release_host() {
  // @@protoc_insertion_point(field_release:smart3dmap.v1.CreateDatabaseServerRequest.host)
  return host_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void CreateDatabaseServerRequest::set_allocated_host(std::string* host) {
  if (host != nullptr) {
    
  } else {
    
  }
  host_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), host,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:smart3dmap.v1.CreateDatabaseServerRequest.host)
}

// int32 port = 4;
inline void CreateDatabaseServerRequest::clear_port() {
  port_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 CreateDatabaseServerRequest::_internal_port() const {
  return port_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 CreateDatabaseServerRequest::port() const {
  // @@protoc_insertion_point(field_get:smart3dmap.v1.CreateDatabaseServerRequest.port)
  return _internal_port();
}
inline void CreateDatabaseServerRequest::_internal_set_port(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  port_ = value;
}
inline void CreateDatabaseServerRequest::set_port(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_port(value);
  // @@protoc_insertion_point(field_set:smart3dmap.v1.CreateDatabaseServerRequest.port)
}

// .smart3dmap.v1.DBUser admin = 5;
inline bool CreateDatabaseServerRequest::_internal_has_admin() const {
  return this != internal_default_instance() && admin_ != nullptr;
}
inline bool CreateDatabaseServerRequest::has_admin() const {
  return _internal_has_admin();
}
inline void CreateDatabaseServerRequest::clear_admin() {
  if (GetArena() == nullptr && admin_ != nullptr) {
    delete admin_;
  }
  admin_ = nullptr;
}
inline const ::smart3dmap::v1::DBUser& CreateDatabaseServerRequest::_internal_admin() const {
  const ::smart3dmap::v1::DBUser* p = admin_;
  return p != nullptr ? *p : reinterpret_cast<const ::smart3dmap::v1::DBUser&>(
      ::smart3dmap::v1::_DBUser_default_instance_);
}
inline const ::smart3dmap::v1::DBUser& CreateDatabaseServerRequest::admin() const {
  // @@protoc_insertion_point(field_get:smart3dmap.v1.CreateDatabaseServerRequest.admin)
  return _internal_admin();
}
inline void CreateDatabaseServerRequest::unsafe_arena_set_allocated_admin(
    ::smart3dmap::v1::DBUser* admin) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(admin_);
  }
  admin_ = admin;
  if (admin) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:smart3dmap.v1.CreateDatabaseServerRequest.admin)
}
inline ::smart3dmap::v1::DBUser* CreateDatabaseServerRequest::release_admin() {
  
  ::smart3dmap::v1::DBUser* temp = admin_;
  admin_ = nullptr;
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::smart3dmap::v1::DBUser* CreateDatabaseServerRequest::unsafe_arena_release_admin() {
  // @@protoc_insertion_point(field_release:smart3dmap.v1.CreateDatabaseServerRequest.admin)
  
  ::smart3dmap::v1::DBUser* temp = admin_;
  admin_ = nullptr;
  return temp;
}
inline ::smart3dmap::v1::DBUser* CreateDatabaseServerRequest::_internal_mutable_admin() {
  
  if (admin_ == nullptr) {
    auto* p = CreateMaybeMessage<::smart3dmap::v1::DBUser>(GetArena());
    admin_ = p;
  }
  return admin_;
}
inline ::smart3dmap::v1::DBUser* CreateDatabaseServerRequest::mutable_admin() {
  // @@protoc_insertion_point(field_mutable:smart3dmap.v1.CreateDatabaseServerRequest.admin)
  return _internal_mutable_admin();
}
inline void CreateDatabaseServerRequest::set_allocated_admin(::smart3dmap::v1::DBUser* admin) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete admin_;
  }
  if (admin) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(admin);
    if (message_arena != submessage_arena) {
      admin = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, admin, submessage_arena);
    }
    
  } else {
    
  }
  admin_ = admin;
  // @@protoc_insertion_point(field_set_allocated:smart3dmap.v1.CreateDatabaseServerRequest.admin)
}

// .smart3dmap.v1.DBUser user = 6;
inline bool CreateDatabaseServerRequest::_internal_has_user() const {
  return this != internal_default_instance() && user_ != nullptr;
}
inline bool CreateDatabaseServerRequest::has_user() const {
  return _internal_has_user();
}
inline void CreateDatabaseServerRequest::clear_user() {
  if (GetArena() == nullptr && user_ != nullptr) {
    delete user_;
  }
  user_ = nullptr;
}
inline const ::smart3dmap::v1::DBUser& CreateDatabaseServerRequest::_internal_user() const {
  const ::smart3dmap::v1::DBUser* p = user_;
  return p != nullptr ? *p : reinterpret_cast<const ::smart3dmap::v1::DBUser&>(
      ::smart3dmap::v1::_DBUser_default_instance_);
}
inline const ::smart3dmap::v1::DBUser& CreateDatabaseServerRequest::user() const {
  // @@protoc_insertion_point(field_get:smart3dmap.v1.CreateDatabaseServerRequest.user)
  return _internal_user();
}
inline void CreateDatabaseServerRequest::unsafe_arena_set_allocated_user(
    ::smart3dmap::v1::DBUser* user) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(user_);
  }
  user_ = user;
  if (user) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:smart3dmap.v1.CreateDatabaseServerRequest.user)
}
inline ::smart3dmap::v1::DBUser* CreateDatabaseServerRequest::release_user() {
  
  ::smart3dmap::v1::DBUser* temp = user_;
  user_ = nullptr;
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::smart3dmap::v1::DBUser* CreateDatabaseServerRequest::unsafe_arena_release_user() {
  // @@protoc_insertion_point(field_release:smart3dmap.v1.CreateDatabaseServerRequest.user)
  
  ::smart3dmap::v1::DBUser* temp = user_;
  user_ = nullptr;
  return temp;
}
inline ::smart3dmap::v1::DBUser* CreateDatabaseServerRequest::_internal_mutable_user() {
  
  if (user_ == nullptr) {
    auto* p = CreateMaybeMessage<::smart3dmap::v1::DBUser>(GetArena());
    user_ = p;
  }
  return user_;
}
inline ::smart3dmap::v1::DBUser* CreateDatabaseServerRequest::mutable_user() {
  // @@protoc_insertion_point(field_mutable:smart3dmap.v1.CreateDatabaseServerRequest.user)
  return _internal_mutable_user();
}
inline void CreateDatabaseServerRequest::set_allocated_user(::smart3dmap::v1::DBUser* user) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete user_;
  }
  if (user) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(user);
    if (message_arena != submessage_arena) {
      user = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, user, submessage_arena);
    }
    
  } else {
    
  }
  user_ = user;
  // @@protoc_insertion_point(field_set_allocated:smart3dmap.v1.CreateDatabaseServerRequest.user)
}

// string inner_host = 7;
inline void CreateDatabaseServerRequest::clear_inner_host() {
  inner_host_.ClearToEmpty();
}
inline const std::string& CreateDatabaseServerRequest::inner_host() const {
  // @@protoc_insertion_point(field_get:smart3dmap.v1.CreateDatabaseServerRequest.inner_host)
  return _internal_inner_host();
}
inline void CreateDatabaseServerRequest::set_inner_host(const std::string& value) {
  _internal_set_inner_host(value);
  // @@protoc_insertion_point(field_set:smart3dmap.v1.CreateDatabaseServerRequest.inner_host)
}
inline std::string* CreateDatabaseServerRequest::mutable_inner_host() {
  // @@protoc_insertion_point(field_mutable:smart3dmap.v1.CreateDatabaseServerRequest.inner_host)
  return _internal_mutable_inner_host();
}
inline const std::string& CreateDatabaseServerRequest::_internal_inner_host() const {
  return inner_host_.Get();
}
inline void CreateDatabaseServerRequest::_internal_set_inner_host(const std::string& value) {
  
  inner_host_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArena());
}
inline void CreateDatabaseServerRequest::set_inner_host(std::string&& value) {
  
  inner_host_.Set(
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:smart3dmap.v1.CreateDatabaseServerRequest.inner_host)
}
inline void CreateDatabaseServerRequest::set_inner_host(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  inner_host_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(value), GetArena());
  // @@protoc_insertion_point(field_set_char:smart3dmap.v1.CreateDatabaseServerRequest.inner_host)
}
inline void CreateDatabaseServerRequest::set_inner_host(const char* value,
    size_t size) {
  
  inner_host_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:smart3dmap.v1.CreateDatabaseServerRequest.inner_host)
}
inline std::string* CreateDatabaseServerRequest::_internal_mutable_inner_host() {
  
  return inner_host_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArena());
}
inline std::string* CreateDatabaseServerRequest::release_inner_host() {
  // @@protoc_insertion_point(field_release:smart3dmap.v1.CreateDatabaseServerRequest.inner_host)
  return inner_host_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void CreateDatabaseServerRequest::set_allocated_inner_host(std::string* inner_host) {
  if (inner_host != nullptr) {
    
  } else {
    
  }
  inner_host_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), inner_host,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:smart3dmap.v1.CreateDatabaseServerRequest.inner_host)
}

// -------------------------------------------------------------------

// GetDatabaseServerRequest

// int32 id = 1;
inline bool GetDatabaseServerRequest::_internal_has_id() const {
  return server_label_case() == kId;
}
inline bool GetDatabaseServerRequest::has_id() const {
  return _internal_has_id();
}
inline void GetDatabaseServerRequest::set_has_id() {
  _oneof_case_[0] = kId;
}
inline void GetDatabaseServerRequest::clear_id() {
  if (_internal_has_id()) {
    server_label_.id_ = 0;
    clear_has_server_label();
  }
}
inline ::PROTOBUF_NAMESPACE_ID::int32 GetDatabaseServerRequest::_internal_id() const {
  if (_internal_has_id()) {
    return server_label_.id_;
  }
  return 0;
}
inline void GetDatabaseServerRequest::_internal_set_id(::PROTOBUF_NAMESPACE_ID::int32 value) {
  if (!_internal_has_id()) {
    clear_server_label();
    set_has_id();
  }
  server_label_.id_ = value;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 GetDatabaseServerRequest::id() const {
  // @@protoc_insertion_point(field_get:smart3dmap.v1.GetDatabaseServerRequest.id)
  return _internal_id();
}
inline void GetDatabaseServerRequest::set_id(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_id(value);
  // @@protoc_insertion_point(field_set:smart3dmap.v1.GetDatabaseServerRequest.id)
}

// string name = 2;
inline bool GetDatabaseServerRequest::_internal_has_name() const {
  return server_label_case() == kName;
}
inline bool GetDatabaseServerRequest::has_name() const {
  return _internal_has_name();
}
inline void GetDatabaseServerRequest::set_has_name() {
  _oneof_case_[0] = kName;
}
inline void GetDatabaseServerRequest::clear_name() {
  if (_internal_has_name()) {
    server_label_.name_.Destroy(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArena());
    clear_has_server_label();
  }
}
inline const std::string& GetDatabaseServerRequest::name() const {
  // @@protoc_insertion_point(field_get:smart3dmap.v1.GetDatabaseServerRequest.name)
  return _internal_name();
}
inline void GetDatabaseServerRequest::set_name(const std::string& value) {
  _internal_set_name(value);
  // @@protoc_insertion_point(field_set:smart3dmap.v1.GetDatabaseServerRequest.name)
}
inline std::string* GetDatabaseServerRequest::mutable_name() {
  // @@protoc_insertion_point(field_mutable:smart3dmap.v1.GetDatabaseServerRequest.name)
  return _internal_mutable_name();
}
inline const std::string& GetDatabaseServerRequest::_internal_name() const {
  if (_internal_has_name()) {
    return server_label_.name_.Get();
  }
  return ::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited();
}
inline void GetDatabaseServerRequest::_internal_set_name(const std::string& value) {
  if (!_internal_has_name()) {
    clear_server_label();
    set_has_name();
    server_label_.name_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  }
  server_label_.name_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArena());
}
inline void GetDatabaseServerRequest::set_name(std::string&& value) {
  // @@protoc_insertion_point(field_set:smart3dmap.v1.GetDatabaseServerRequest.name)
  if (!_internal_has_name()) {
    clear_server_label();
    set_has_name();
    server_label_.name_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  }
  server_label_.name_.Set(
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:smart3dmap.v1.GetDatabaseServerRequest.name)
}
inline void GetDatabaseServerRequest::set_name(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  if (!_internal_has_name()) {
    clear_server_label();
    set_has_name();
    server_label_.name_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  }
  server_label_.name_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{},
      ::std::string(value), GetArena());
  // @@protoc_insertion_point(field_set_char:smart3dmap.v1.GetDatabaseServerRequest.name)
}
inline void GetDatabaseServerRequest::set_name(const char* value,
                             size_t size) {
  if (!_internal_has_name()) {
    clear_server_label();
    set_has_name();
    server_label_.name_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  }
  server_label_.name_.Set(
      ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(
      reinterpret_cast<const char*>(value), size),
      GetArena());
  // @@protoc_insertion_point(field_set_pointer:smart3dmap.v1.GetDatabaseServerRequest.name)
}
inline std::string* GetDatabaseServerRequest::_internal_mutable_name() {
  if (!_internal_has_name()) {
    clear_server_label();
    set_has_name();
    server_label_.name_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  }
  return server_label_.name_.Mutable(
      ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArena());
}
inline std::string* GetDatabaseServerRequest::release_name() {
  // @@protoc_insertion_point(field_release:smart3dmap.v1.GetDatabaseServerRequest.name)
  if (_internal_has_name()) {
    clear_has_server_label();
    return server_label_.name_.ReleaseNonDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  } else {
    return nullptr;
  }
}
inline void GetDatabaseServerRequest::set_allocated_name(std::string* name) {
  if (has_server_label()) {
    clear_server_label();
  }
  if (name != nullptr) {
    set_has_name();
    server_label_.name_.UnsafeSetDefault(name);
    ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena();
    if (arena != nullptr) {
      arena->Own(name);
    }
  }
  // @@protoc_insertion_point(field_set_allocated:smart3dmap.v1.GetDatabaseServerRequest.name)
}

inline bool GetDatabaseServerRequest::has_server_label() const {
  return server_label_case() != SERVER_LABEL_NOT_SET;
}
inline void GetDatabaseServerRequest::clear_has_server_label() {
  _oneof_case_[0] = SERVER_LABEL_NOT_SET;
}
inline GetDatabaseServerRequest::ServerLabelCase GetDatabaseServerRequest::server_label_case() const {
  return GetDatabaseServerRequest::ServerLabelCase(_oneof_case_[0]);
}
// -------------------------------------------------------------------

// ListDatabaseServersRequest

// .smart3dmap.v1.Pagination pagination = 1;
inline bool ListDatabaseServersRequest::_internal_has_pagination() const {
  return this != internal_default_instance() && pagination_ != nullptr;
}
inline bool ListDatabaseServersRequest::has_pagination() const {
  return _internal_has_pagination();
}
inline const ::smart3dmap::v1::Pagination& ListDatabaseServersRequest::_internal_pagination() const {
  const ::smart3dmap::v1::Pagination* p = pagination_;
  return p != nullptr ? *p : reinterpret_cast<const ::smart3dmap::v1::Pagination&>(
      ::smart3dmap::v1::_Pagination_default_instance_);
}
inline const ::smart3dmap::v1::Pagination& ListDatabaseServersRequest::pagination() const {
  // @@protoc_insertion_point(field_get:smart3dmap.v1.ListDatabaseServersRequest.pagination)
  return _internal_pagination();
}
inline void ListDatabaseServersRequest::unsafe_arena_set_allocated_pagination(
    ::smart3dmap::v1::Pagination* pagination) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(pagination_);
  }
  pagination_ = pagination;
  if (pagination) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:smart3dmap.v1.ListDatabaseServersRequest.pagination)
}
inline ::smart3dmap::v1::Pagination* ListDatabaseServersRequest::release_pagination() {
  
  ::smart3dmap::v1::Pagination* temp = pagination_;
  pagination_ = nullptr;
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::smart3dmap::v1::Pagination* ListDatabaseServersRequest::unsafe_arena_release_pagination() {
  // @@protoc_insertion_point(field_release:smart3dmap.v1.ListDatabaseServersRequest.pagination)
  
  ::smart3dmap::v1::Pagination* temp = pagination_;
  pagination_ = nullptr;
  return temp;
}
inline ::smart3dmap::v1::Pagination* ListDatabaseServersRequest::_internal_mutable_pagination() {
  
  if (pagination_ == nullptr) {
    auto* p = CreateMaybeMessage<::smart3dmap::v1::Pagination>(GetArena());
    pagination_ = p;
  }
  return pagination_;
}
inline ::smart3dmap::v1::Pagination* ListDatabaseServersRequest::mutable_pagination() {
  // @@protoc_insertion_point(field_mutable:smart3dmap.v1.ListDatabaseServersRequest.pagination)
  return _internal_mutable_pagination();
}
inline void ListDatabaseServersRequest::set_allocated_pagination(::smart3dmap::v1::Pagination* pagination) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(pagination_);
  }
  if (pagination) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(pagination)->GetArena();
    if (message_arena != submessage_arena) {
      pagination = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, pagination, submessage_arena);
    }
    
  } else {
    
  }
  pagination_ = pagination;
  // @@protoc_insertion_point(field_set_allocated:smart3dmap.v1.ListDatabaseServersRequest.pagination)
}

// -------------------------------------------------------------------

// ListDatabaseServersResponse

// repeated .smart3dmap.v1.DBServer servers = 1;
inline int ListDatabaseServersResponse::_internal_servers_size() const {
  return servers_.size();
}
inline int ListDatabaseServersResponse::servers_size() const {
  return _internal_servers_size();
}
inline void ListDatabaseServersResponse::clear_servers() {
  servers_.Clear();
}
inline ::smart3dmap::v1::DBServer* ListDatabaseServersResponse::mutable_servers(int index) {
  // @@protoc_insertion_point(field_mutable:smart3dmap.v1.ListDatabaseServersResponse.servers)
  return servers_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::smart3dmap::v1::DBServer >*
ListDatabaseServersResponse::mutable_servers() {
  // @@protoc_insertion_point(field_mutable_list:smart3dmap.v1.ListDatabaseServersResponse.servers)
  return &servers_;
}
inline const ::smart3dmap::v1::DBServer& ListDatabaseServersResponse::_internal_servers(int index) const {
  return servers_.Get(index);
}
inline const ::smart3dmap::v1::DBServer& ListDatabaseServersResponse::servers(int index) const {
  // @@protoc_insertion_point(field_get:smart3dmap.v1.ListDatabaseServersResponse.servers)
  return _internal_servers(index);
}
inline ::smart3dmap::v1::DBServer* ListDatabaseServersResponse::_internal_add_servers() {
  return servers_.Add();
}
inline ::smart3dmap::v1::DBServer* ListDatabaseServersResponse::add_servers() {
  // @@protoc_insertion_point(field_add:smart3dmap.v1.ListDatabaseServersResponse.servers)
  return _internal_add_servers();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::smart3dmap::v1::DBServer >&
ListDatabaseServersResponse::servers() const {
  // @@protoc_insertion_point(field_list:smart3dmap.v1.ListDatabaseServersResponse.servers)
  return servers_;
}

// int32 total_count = 2;
inline void ListDatabaseServersResponse::clear_total_count() {
  total_count_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 ListDatabaseServersResponse::_internal_total_count() const {
  return total_count_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 ListDatabaseServersResponse::total_count() const {
  // @@protoc_insertion_point(field_get:smart3dmap.v1.ListDatabaseServersResponse.total_count)
  return _internal_total_count();
}
inline void ListDatabaseServersResponse::_internal_set_total_count(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  total_count_ = value;
}
inline void ListDatabaseServersResponse::set_total_count(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_total_count(value);
  // @@protoc_insertion_point(field_set:smart3dmap.v1.ListDatabaseServersResponse.total_count)
}

// -------------------------------------------------------------------

// UpdateDatabaseServerRequest

// int32 id = 1;
inline void UpdateDatabaseServerRequest::clear_id() {
  id_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 UpdateDatabaseServerRequest::_internal_id() const {
  return id_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 UpdateDatabaseServerRequest::id() const {
  // @@protoc_insertion_point(field_get:smart3dmap.v1.UpdateDatabaseServerRequest.id)
  return _internal_id();
}
inline void UpdateDatabaseServerRequest::_internal_set_id(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  id_ = value;
}
inline void UpdateDatabaseServerRequest::set_id(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_id(value);
  // @@protoc_insertion_point(field_set:smart3dmap.v1.UpdateDatabaseServerRequest.id)
}

// .google.protobuf.StringValue name = 2;
inline bool UpdateDatabaseServerRequest::_internal_has_name() const {
  return this != internal_default_instance() && name_ != nullptr;
}
inline bool UpdateDatabaseServerRequest::has_name() const {
  return _internal_has_name();
}
inline const PROTOBUF_NAMESPACE_ID::StringValue& UpdateDatabaseServerRequest::_internal_name() const {
  const PROTOBUF_NAMESPACE_ID::StringValue* p = name_;
  return p != nullptr ? *p : reinterpret_cast<const PROTOBUF_NAMESPACE_ID::StringValue&>(
      PROTOBUF_NAMESPACE_ID::_StringValue_default_instance_);
}
inline const PROTOBUF_NAMESPACE_ID::StringValue& UpdateDatabaseServerRequest::name() const {
  // @@protoc_insertion_point(field_get:smart3dmap.v1.UpdateDatabaseServerRequest.name)
  return _internal_name();
}
inline void UpdateDatabaseServerRequest::unsafe_arena_set_allocated_name(
    PROTOBUF_NAMESPACE_ID::StringValue* name) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(name_);
  }
  name_ = name;
  if (name) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:smart3dmap.v1.UpdateDatabaseServerRequest.name)
}
inline PROTOBUF_NAMESPACE_ID::StringValue* UpdateDatabaseServerRequest::release_name() {
  
  PROTOBUF_NAMESPACE_ID::StringValue* temp = name_;
  name_ = nullptr;
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline PROTOBUF_NAMESPACE_ID::StringValue* UpdateDatabaseServerRequest::unsafe_arena_release_name() {
  // @@protoc_insertion_point(field_release:smart3dmap.v1.UpdateDatabaseServerRequest.name)
  
  PROTOBUF_NAMESPACE_ID::StringValue* temp = name_;
  name_ = nullptr;
  return temp;
}
inline PROTOBUF_NAMESPACE_ID::StringValue* UpdateDatabaseServerRequest::_internal_mutable_name() {
  
  if (name_ == nullptr) {
    auto* p = CreateMaybeMessage<PROTOBUF_NAMESPACE_ID::StringValue>(GetArena());
    name_ = p;
  }
  return name_;
}
inline PROTOBUF_NAMESPACE_ID::StringValue* UpdateDatabaseServerRequest::mutable_name() {
  // @@protoc_insertion_point(field_mutable:smart3dmap.v1.UpdateDatabaseServerRequest.name)
  return _internal_mutable_name();
}
inline void UpdateDatabaseServerRequest::set_allocated_name(PROTOBUF_NAMESPACE_ID::StringValue* name) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(name_);
  }
  if (name) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(name)->GetArena();
    if (message_arena != submessage_arena) {
      name = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, name, submessage_arena);
    }
    
  } else {
    
  }
  name_ = name;
  // @@protoc_insertion_point(field_set_allocated:smart3dmap.v1.UpdateDatabaseServerRequest.name)
}

// .smart3dmap.v1.DBServerType type = 3;
inline void UpdateDatabaseServerRequest::clear_type() {
  type_ = 0;
}
inline ::smart3dmap::v1::DBServerType UpdateDatabaseServerRequest::_internal_type() const {
  return static_cast< ::smart3dmap::v1::DBServerType >(type_);
}
inline ::smart3dmap::v1::DBServerType UpdateDatabaseServerRequest::type() const {
  // @@protoc_insertion_point(field_get:smart3dmap.v1.UpdateDatabaseServerRequest.type)
  return _internal_type();
}
inline void UpdateDatabaseServerRequest::_internal_set_type(::smart3dmap::v1::DBServerType value) {
  
  type_ = value;
}
inline void UpdateDatabaseServerRequest::set_type(::smart3dmap::v1::DBServerType value) {
  _internal_set_type(value);
  // @@protoc_insertion_point(field_set:smart3dmap.v1.UpdateDatabaseServerRequest.type)
}

// .google.protobuf.StringValue host = 4;
inline bool UpdateDatabaseServerRequest::_internal_has_host() const {
  return this != internal_default_instance() && host_ != nullptr;
}
inline bool UpdateDatabaseServerRequest::has_host() const {
  return _internal_has_host();
}
inline const PROTOBUF_NAMESPACE_ID::StringValue& UpdateDatabaseServerRequest::_internal_host() const {
  const PROTOBUF_NAMESPACE_ID::StringValue* p = host_;
  return p != nullptr ? *p : reinterpret_cast<const PROTOBUF_NAMESPACE_ID::StringValue&>(
      PROTOBUF_NAMESPACE_ID::_StringValue_default_instance_);
}
inline const PROTOBUF_NAMESPACE_ID::StringValue& UpdateDatabaseServerRequest::host() const {
  // @@protoc_insertion_point(field_get:smart3dmap.v1.UpdateDatabaseServerRequest.host)
  return _internal_host();
}
inline void UpdateDatabaseServerRequest::unsafe_arena_set_allocated_host(
    PROTOBUF_NAMESPACE_ID::StringValue* host) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(host_);
  }
  host_ = host;
  if (host) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:smart3dmap.v1.UpdateDatabaseServerRequest.host)
}
inline PROTOBUF_NAMESPACE_ID::StringValue* UpdateDatabaseServerRequest::release_host() {
  
  PROTOBUF_NAMESPACE_ID::StringValue* temp = host_;
  host_ = nullptr;
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline PROTOBUF_NAMESPACE_ID::StringValue* UpdateDatabaseServerRequest::unsafe_arena_release_host() {
  // @@protoc_insertion_point(field_release:smart3dmap.v1.UpdateDatabaseServerRequest.host)
  
  PROTOBUF_NAMESPACE_ID::StringValue* temp = host_;
  host_ = nullptr;
  return temp;
}
inline PROTOBUF_NAMESPACE_ID::StringValue* UpdateDatabaseServerRequest::_internal_mutable_host() {
  
  if (host_ == nullptr) {
    auto* p = CreateMaybeMessage<PROTOBUF_NAMESPACE_ID::StringValue>(GetArena());
    host_ = p;
  }
  return host_;
}
inline PROTOBUF_NAMESPACE_ID::StringValue* UpdateDatabaseServerRequest::mutable_host() {
  // @@protoc_insertion_point(field_mutable:smart3dmap.v1.UpdateDatabaseServerRequest.host)
  return _internal_mutable_host();
}
inline void UpdateDatabaseServerRequest::set_allocated_host(PROTOBUF_NAMESPACE_ID::StringValue* host) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(host_);
  }
  if (host) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(host)->GetArena();
    if (message_arena != submessage_arena) {
      host = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, host, submessage_arena);
    }
    
  } else {
    
  }
  host_ = host;
  // @@protoc_insertion_point(field_set_allocated:smart3dmap.v1.UpdateDatabaseServerRequest.host)
}

// .google.protobuf.Int32Value port = 5;
inline bool UpdateDatabaseServerRequest::_internal_has_port() const {
  return this != internal_default_instance() && port_ != nullptr;
}
inline bool UpdateDatabaseServerRequest::has_port() const {
  return _internal_has_port();
}
inline const PROTOBUF_NAMESPACE_ID::Int32Value& UpdateDatabaseServerRequest::_internal_port() const {
  const PROTOBUF_NAMESPACE_ID::Int32Value* p = port_;
  return p != nullptr ? *p : reinterpret_cast<const PROTOBUF_NAMESPACE_ID::Int32Value&>(
      PROTOBUF_NAMESPACE_ID::_Int32Value_default_instance_);
}
inline const PROTOBUF_NAMESPACE_ID::Int32Value& UpdateDatabaseServerRequest::port() const {
  // @@protoc_insertion_point(field_get:smart3dmap.v1.UpdateDatabaseServerRequest.port)
  return _internal_port();
}
inline void UpdateDatabaseServerRequest::unsafe_arena_set_allocated_port(
    PROTOBUF_NAMESPACE_ID::Int32Value* port) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(port_);
  }
  port_ = port;
  if (port) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:smart3dmap.v1.UpdateDatabaseServerRequest.port)
}
inline PROTOBUF_NAMESPACE_ID::Int32Value* UpdateDatabaseServerRequest::release_port() {
  
  PROTOBUF_NAMESPACE_ID::Int32Value* temp = port_;
  port_ = nullptr;
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline PROTOBUF_NAMESPACE_ID::Int32Value* UpdateDatabaseServerRequest::unsafe_arena_release_port() {
  // @@protoc_insertion_point(field_release:smart3dmap.v1.UpdateDatabaseServerRequest.port)
  
  PROTOBUF_NAMESPACE_ID::Int32Value* temp = port_;
  port_ = nullptr;
  return temp;
}
inline PROTOBUF_NAMESPACE_ID::Int32Value* UpdateDatabaseServerRequest::_internal_mutable_port() {
  
  if (port_ == nullptr) {
    auto* p = CreateMaybeMessage<PROTOBUF_NAMESPACE_ID::Int32Value>(GetArena());
    port_ = p;
  }
  return port_;
}
inline PROTOBUF_NAMESPACE_ID::Int32Value* UpdateDatabaseServerRequest::mutable_port() {
  // @@protoc_insertion_point(field_mutable:smart3dmap.v1.UpdateDatabaseServerRequest.port)
  return _internal_mutable_port();
}
inline void UpdateDatabaseServerRequest::set_allocated_port(PROTOBUF_NAMESPACE_ID::Int32Value* port) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(port_);
  }
  if (port) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(port)->GetArena();
    if (message_arena != submessage_arena) {
      port = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, port, submessage_arena);
    }
    
  } else {
    
  }
  port_ = port;
  // @@protoc_insertion_point(field_set_allocated:smart3dmap.v1.UpdateDatabaseServerRequest.port)
}

// .smart3dmap.v1.DBUser admin = 6;
inline bool UpdateDatabaseServerRequest::_internal_has_admin() const {
  return this != internal_default_instance() && admin_ != nullptr;
}
inline bool UpdateDatabaseServerRequest::has_admin() const {
  return _internal_has_admin();
}
inline void UpdateDatabaseServerRequest::clear_admin() {
  if (GetArena() == nullptr && admin_ != nullptr) {
    delete admin_;
  }
  admin_ = nullptr;
}
inline const ::smart3dmap::v1::DBUser& UpdateDatabaseServerRequest::_internal_admin() const {
  const ::smart3dmap::v1::DBUser* p = admin_;
  return p != nullptr ? *p : reinterpret_cast<const ::smart3dmap::v1::DBUser&>(
      ::smart3dmap::v1::_DBUser_default_instance_);
}
inline const ::smart3dmap::v1::DBUser& UpdateDatabaseServerRequest::admin() const {
  // @@protoc_insertion_point(field_get:smart3dmap.v1.UpdateDatabaseServerRequest.admin)
  return _internal_admin();
}
inline void UpdateDatabaseServerRequest::unsafe_arena_set_allocated_admin(
    ::smart3dmap::v1::DBUser* admin) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(admin_);
  }
  admin_ = admin;
  if (admin) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:smart3dmap.v1.UpdateDatabaseServerRequest.admin)
}
inline ::smart3dmap::v1::DBUser* UpdateDatabaseServerRequest::release_admin() {
  
  ::smart3dmap::v1::DBUser* temp = admin_;
  admin_ = nullptr;
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::smart3dmap::v1::DBUser* UpdateDatabaseServerRequest::unsafe_arena_release_admin() {
  // @@protoc_insertion_point(field_release:smart3dmap.v1.UpdateDatabaseServerRequest.admin)
  
  ::smart3dmap::v1::DBUser* temp = admin_;
  admin_ = nullptr;
  return temp;
}
inline ::smart3dmap::v1::DBUser* UpdateDatabaseServerRequest::_internal_mutable_admin() {
  
  if (admin_ == nullptr) {
    auto* p = CreateMaybeMessage<::smart3dmap::v1::DBUser>(GetArena());
    admin_ = p;
  }
  return admin_;
}
inline ::smart3dmap::v1::DBUser* UpdateDatabaseServerRequest::mutable_admin() {
  // @@protoc_insertion_point(field_mutable:smart3dmap.v1.UpdateDatabaseServerRequest.admin)
  return _internal_mutable_admin();
}
inline void UpdateDatabaseServerRequest::set_allocated_admin(::smart3dmap::v1::DBUser* admin) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete admin_;
  }
  if (admin) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(admin);
    if (message_arena != submessage_arena) {
      admin = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, admin, submessage_arena);
    }
    
  } else {
    
  }
  admin_ = admin;
  // @@protoc_insertion_point(field_set_allocated:smart3dmap.v1.UpdateDatabaseServerRequest.admin)
}

// .smart3dmap.v1.DBUser user = 7;
inline bool UpdateDatabaseServerRequest::_internal_has_user() const {
  return this != internal_default_instance() && user_ != nullptr;
}
inline bool UpdateDatabaseServerRequest::has_user() const {
  return _internal_has_user();
}
inline void UpdateDatabaseServerRequest::clear_user() {
  if (GetArena() == nullptr && user_ != nullptr) {
    delete user_;
  }
  user_ = nullptr;
}
inline const ::smart3dmap::v1::DBUser& UpdateDatabaseServerRequest::_internal_user() const {
  const ::smart3dmap::v1::DBUser* p = user_;
  return p != nullptr ? *p : reinterpret_cast<const ::smart3dmap::v1::DBUser&>(
      ::smart3dmap::v1::_DBUser_default_instance_);
}
inline const ::smart3dmap::v1::DBUser& UpdateDatabaseServerRequest::user() const {
  // @@protoc_insertion_point(field_get:smart3dmap.v1.UpdateDatabaseServerRequest.user)
  return _internal_user();
}
inline void UpdateDatabaseServerRequest::unsafe_arena_set_allocated_user(
    ::smart3dmap::v1::DBUser* user) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(user_);
  }
  user_ = user;
  if (user) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:smart3dmap.v1.UpdateDatabaseServerRequest.user)
}
inline ::smart3dmap::v1::DBUser* UpdateDatabaseServerRequest::release_user() {
  
  ::smart3dmap::v1::DBUser* temp = user_;
  user_ = nullptr;
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::smart3dmap::v1::DBUser* UpdateDatabaseServerRequest::unsafe_arena_release_user() {
  // @@protoc_insertion_point(field_release:smart3dmap.v1.UpdateDatabaseServerRequest.user)
  
  ::smart3dmap::v1::DBUser* temp = user_;
  user_ = nullptr;
  return temp;
}
inline ::smart3dmap::v1::DBUser* UpdateDatabaseServerRequest::_internal_mutable_user() {
  
  if (user_ == nullptr) {
    auto* p = CreateMaybeMessage<::smart3dmap::v1::DBUser>(GetArena());
    user_ = p;
  }
  return user_;
}
inline ::smart3dmap::v1::DBUser* UpdateDatabaseServerRequest::mutable_user() {
  // @@protoc_insertion_point(field_mutable:smart3dmap.v1.UpdateDatabaseServerRequest.user)
  return _internal_mutable_user();
}
inline void UpdateDatabaseServerRequest::set_allocated_user(::smart3dmap::v1::DBUser* user) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete user_;
  }
  if (user) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(user);
    if (message_arena != submessage_arena) {
      user = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, user, submessage_arena);
    }
    
  } else {
    
  }
  user_ = user;
  // @@protoc_insertion_point(field_set_allocated:smart3dmap.v1.UpdateDatabaseServerRequest.user)
}

// .google.protobuf.StringValue inner_host = 8;
inline bool UpdateDatabaseServerRequest::_internal_has_inner_host() const {
  return this != internal_default_instance() && inner_host_ != nullptr;
}
inline bool UpdateDatabaseServerRequest::has_inner_host() const {
  return _internal_has_inner_host();
}
inline const PROTOBUF_NAMESPACE_ID::StringValue& UpdateDatabaseServerRequest::_internal_inner_host() const {
  const PROTOBUF_NAMESPACE_ID::StringValue* p = inner_host_;
  return p != nullptr ? *p : reinterpret_cast<const PROTOBUF_NAMESPACE_ID::StringValue&>(
      PROTOBUF_NAMESPACE_ID::_StringValue_default_instance_);
}
inline const PROTOBUF_NAMESPACE_ID::StringValue& UpdateDatabaseServerRequest::inner_host() const {
  // @@protoc_insertion_point(field_get:smart3dmap.v1.UpdateDatabaseServerRequest.inner_host)
  return _internal_inner_host();
}
inline void UpdateDatabaseServerRequest::unsafe_arena_set_allocated_inner_host(
    PROTOBUF_NAMESPACE_ID::StringValue* inner_host) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(inner_host_);
  }
  inner_host_ = inner_host;
  if (inner_host) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:smart3dmap.v1.UpdateDatabaseServerRequest.inner_host)
}
inline PROTOBUF_NAMESPACE_ID::StringValue* UpdateDatabaseServerRequest::release_inner_host() {
  
  PROTOBUF_NAMESPACE_ID::StringValue* temp = inner_host_;
  inner_host_ = nullptr;
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline PROTOBUF_NAMESPACE_ID::StringValue* UpdateDatabaseServerRequest::unsafe_arena_release_inner_host() {
  // @@protoc_insertion_point(field_release:smart3dmap.v1.UpdateDatabaseServerRequest.inner_host)
  
  PROTOBUF_NAMESPACE_ID::StringValue* temp = inner_host_;
  inner_host_ = nullptr;
  return temp;
}
inline PROTOBUF_NAMESPACE_ID::StringValue* UpdateDatabaseServerRequest::_internal_mutable_inner_host() {
  
  if (inner_host_ == nullptr) {
    auto* p = CreateMaybeMessage<PROTOBUF_NAMESPACE_ID::StringValue>(GetArena());
    inner_host_ = p;
  }
  return inner_host_;
}
inline PROTOBUF_NAMESPACE_ID::StringValue* UpdateDatabaseServerRequest::mutable_inner_host() {
  // @@protoc_insertion_point(field_mutable:smart3dmap.v1.UpdateDatabaseServerRequest.inner_host)
  return _internal_mutable_inner_host();
}
inline void UpdateDatabaseServerRequest::set_allocated_inner_host(PROTOBUF_NAMESPACE_ID::StringValue* inner_host) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(inner_host_);
  }
  if (inner_host) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(inner_host)->GetArena();
    if (message_arena != submessage_arena) {
      inner_host = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, inner_host, submessage_arena);
    }
    
  } else {
    
  }
  inner_host_ = inner_host;
  // @@protoc_insertion_point(field_set_allocated:smart3dmap.v1.UpdateDatabaseServerRequest.inner_host)
}

// -------------------------------------------------------------------

// UpdateDatabaseServerResponse

// bool status = 1;
inline void UpdateDatabaseServerResponse::clear_status() {
  status_ = false;
}
inline bool UpdateDatabaseServerResponse::_internal_status() const {
  return status_;
}
inline bool UpdateDatabaseServerResponse::status() const {
  // @@protoc_insertion_point(field_get:smart3dmap.v1.UpdateDatabaseServerResponse.status)
  return _internal_status();
}
inline void UpdateDatabaseServerResponse::_internal_set_status(bool value) {
  
  status_ = value;
}
inline void UpdateDatabaseServerResponse::set_status(bool value) {
  _internal_set_status(value);
  // @@protoc_insertion_point(field_set:smart3dmap.v1.UpdateDatabaseServerResponse.status)
}

// string error = 2;
inline void UpdateDatabaseServerResponse::clear_error() {
  error_.ClearToEmpty();
}
inline const std::string& UpdateDatabaseServerResponse::error() const {
  // @@protoc_insertion_point(field_get:smart3dmap.v1.UpdateDatabaseServerResponse.error)
  return _internal_error();
}
inline void UpdateDatabaseServerResponse::set_error(const std::string& value) {
  _internal_set_error(value);
  // @@protoc_insertion_point(field_set:smart3dmap.v1.UpdateDatabaseServerResponse.error)
}
inline std::string* UpdateDatabaseServerResponse::mutable_error() {
  // @@protoc_insertion_point(field_mutable:smart3dmap.v1.UpdateDatabaseServerResponse.error)
  return _internal_mutable_error();
}
inline const std::string& UpdateDatabaseServerResponse::_internal_error() const {
  return error_.Get();
}
inline void UpdateDatabaseServerResponse::_internal_set_error(const std::string& value) {
  
  error_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArena());
}
inline void UpdateDatabaseServerResponse::set_error(std::string&& value) {
  
  error_.Set(
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:smart3dmap.v1.UpdateDatabaseServerResponse.error)
}
inline void UpdateDatabaseServerResponse::set_error(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  error_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(value), GetArena());
  // @@protoc_insertion_point(field_set_char:smart3dmap.v1.UpdateDatabaseServerResponse.error)
}
inline void UpdateDatabaseServerResponse::set_error(const char* value,
    size_t size) {
  
  error_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:smart3dmap.v1.UpdateDatabaseServerResponse.error)
}
inline std::string* UpdateDatabaseServerResponse::_internal_mutable_error() {
  
  return error_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArena());
}
inline std::string* UpdateDatabaseServerResponse::release_error() {
  // @@protoc_insertion_point(field_release:smart3dmap.v1.UpdateDatabaseServerResponse.error)
  return error_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void UpdateDatabaseServerResponse::set_allocated_error(std::string* error) {
  if (error != nullptr) {
    
  } else {
    
  }
  error_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), error,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:smart3dmap.v1.UpdateDatabaseServerResponse.error)
}

// -------------------------------------------------------------------

// DeleteDatabaseServerRequest

// int32 id = 1;
inline void DeleteDatabaseServerRequest::clear_id() {
  id_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 DeleteDatabaseServerRequest::_internal_id() const {
  return id_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 DeleteDatabaseServerRequest::id() const {
  // @@protoc_insertion_point(field_get:smart3dmap.v1.DeleteDatabaseServerRequest.id)
  return _internal_id();
}
inline void DeleteDatabaseServerRequest::_internal_set_id(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  id_ = value;
}
inline void DeleteDatabaseServerRequest::set_id(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_id(value);
  // @@protoc_insertion_point(field_set:smart3dmap.v1.DeleteDatabaseServerRequest.id)
}

// -------------------------------------------------------------------

// DeleteDatabaseServerResponse

// bool status = 1;
inline void DeleteDatabaseServerResponse::clear_status() {
  status_ = false;
}
inline bool DeleteDatabaseServerResponse::_internal_status() const {
  return status_;
}
inline bool DeleteDatabaseServerResponse::status() const {
  // @@protoc_insertion_point(field_get:smart3dmap.v1.DeleteDatabaseServerResponse.status)
  return _internal_status();
}
inline void DeleteDatabaseServerResponse::_internal_set_status(bool value) {
  
  status_ = value;
}
inline void DeleteDatabaseServerResponse::set_status(bool value) {
  _internal_set_status(value);
  // @@protoc_insertion_point(field_set:smart3dmap.v1.DeleteDatabaseServerResponse.status)
}

// string error = 2;
inline void DeleteDatabaseServerResponse::clear_error() {
  error_.ClearToEmpty();
}
inline const std::string& DeleteDatabaseServerResponse::error() const {
  // @@protoc_insertion_point(field_get:smart3dmap.v1.DeleteDatabaseServerResponse.error)
  return _internal_error();
}
inline void DeleteDatabaseServerResponse::set_error(const std::string& value) {
  _internal_set_error(value);
  // @@protoc_insertion_point(field_set:smart3dmap.v1.DeleteDatabaseServerResponse.error)
}
inline std::string* DeleteDatabaseServerResponse::mutable_error() {
  // @@protoc_insertion_point(field_mutable:smart3dmap.v1.DeleteDatabaseServerResponse.error)
  return _internal_mutable_error();
}
inline const std::string& DeleteDatabaseServerResponse::_internal_error() const {
  return error_.Get();
}
inline void DeleteDatabaseServerResponse::_internal_set_error(const std::string& value) {
  
  error_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArena());
}
inline void DeleteDatabaseServerResponse::set_error(std::string&& value) {
  
  error_.Set(
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:smart3dmap.v1.DeleteDatabaseServerResponse.error)
}
inline void DeleteDatabaseServerResponse::set_error(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  error_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(value), GetArena());
  // @@protoc_insertion_point(field_set_char:smart3dmap.v1.DeleteDatabaseServerResponse.error)
}
inline void DeleteDatabaseServerResponse::set_error(const char* value,
    size_t size) {
  
  error_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:smart3dmap.v1.DeleteDatabaseServerResponse.error)
}
inline std::string* DeleteDatabaseServerResponse::_internal_mutable_error() {
  
  return error_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArena());
}
inline std::string* DeleteDatabaseServerResponse::release_error() {
  // @@protoc_insertion_point(field_release:smart3dmap.v1.DeleteDatabaseServerResponse.error)
  return error_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void DeleteDatabaseServerResponse::set_allocated_error(std::string* error) {
  if (error != nullptr) {
    
  } else {
    
  }
  error_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), error,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:smart3dmap.v1.DeleteDatabaseServerResponse.error)
}

// -------------------------------------------------------------------

// ListDatabaseAppTypesRequest

// -------------------------------------------------------------------

// ListDatabaseAppTypesResponse_TypeItem

// string name = 1;
inline void ListDatabaseAppTypesResponse_TypeItem::clear_name() {
  name_.ClearToEmpty();
}
inline const std::string& ListDatabaseAppTypesResponse_TypeItem::name() const {
  // @@protoc_insertion_point(field_get:smart3dmap.v1.ListDatabaseAppTypesResponse.TypeItem.name)
  return _internal_name();
}
inline void ListDatabaseAppTypesResponse_TypeItem::set_name(const std::string& value) {
  _internal_set_name(value);
  // @@protoc_insertion_point(field_set:smart3dmap.v1.ListDatabaseAppTypesResponse.TypeItem.name)
}
inline std::string* ListDatabaseAppTypesResponse_TypeItem::mutable_name() {
  // @@protoc_insertion_point(field_mutable:smart3dmap.v1.ListDatabaseAppTypesResponse.TypeItem.name)
  return _internal_mutable_name();
}
inline const std::string& ListDatabaseAppTypesResponse_TypeItem::_internal_name() const {
  return name_.Get();
}
inline void ListDatabaseAppTypesResponse_TypeItem::_internal_set_name(const std::string& value) {
  
  name_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArena());
}
inline void ListDatabaseAppTypesResponse_TypeItem::set_name(std::string&& value) {
  
  name_.Set(
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:smart3dmap.v1.ListDatabaseAppTypesResponse.TypeItem.name)
}
inline void ListDatabaseAppTypesResponse_TypeItem::set_name(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  name_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(value), GetArena());
  // @@protoc_insertion_point(field_set_char:smart3dmap.v1.ListDatabaseAppTypesResponse.TypeItem.name)
}
inline void ListDatabaseAppTypesResponse_TypeItem::set_name(const char* value,
    size_t size) {
  
  name_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:smart3dmap.v1.ListDatabaseAppTypesResponse.TypeItem.name)
}
inline std::string* ListDatabaseAppTypesResponse_TypeItem::_internal_mutable_name() {
  
  return name_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArena());
}
inline std::string* ListDatabaseAppTypesResponse_TypeItem::release_name() {
  // @@protoc_insertion_point(field_release:smart3dmap.v1.ListDatabaseAppTypesResponse.TypeItem.name)
  return name_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void ListDatabaseAppTypesResponse_TypeItem::set_allocated_name(std::string* name) {
  if (name != nullptr) {
    
  } else {
    
  }
  name_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), name,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:smart3dmap.v1.ListDatabaseAppTypesResponse.TypeItem.name)
}

// .smart3dmap.v1.DBAppType type = 2;
inline void ListDatabaseAppTypesResponse_TypeItem::clear_type() {
  type_ = 0;
}
inline ::smart3dmap::v1::DBAppType ListDatabaseAppTypesResponse_TypeItem::_internal_type() const {
  return static_cast< ::smart3dmap::v1::DBAppType >(type_);
}
inline ::smart3dmap::v1::DBAppType ListDatabaseAppTypesResponse_TypeItem::type() const {
  // @@protoc_insertion_point(field_get:smart3dmap.v1.ListDatabaseAppTypesResponse.TypeItem.type)
  return _internal_type();
}
inline void ListDatabaseAppTypesResponse_TypeItem::_internal_set_type(::smart3dmap::v1::DBAppType value) {
  
  type_ = value;
}
inline void ListDatabaseAppTypesResponse_TypeItem::set_type(::smart3dmap::v1::DBAppType value) {
  _internal_set_type(value);
  // @@protoc_insertion_point(field_set:smart3dmap.v1.ListDatabaseAppTypesResponse.TypeItem.type)
}

// -------------------------------------------------------------------

// ListDatabaseAppTypesResponse

// repeated .smart3dmap.v1.ListDatabaseAppTypesResponse.TypeItem items = 1;
inline int ListDatabaseAppTypesResponse::_internal_items_size() const {
  return items_.size();
}
inline int ListDatabaseAppTypesResponse::items_size() const {
  return _internal_items_size();
}
inline void ListDatabaseAppTypesResponse::clear_items() {
  items_.Clear();
}
inline ::smart3dmap::v1::ListDatabaseAppTypesResponse_TypeItem* ListDatabaseAppTypesResponse::mutable_items(int index) {
  // @@protoc_insertion_point(field_mutable:smart3dmap.v1.ListDatabaseAppTypesResponse.items)
  return items_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::smart3dmap::v1::ListDatabaseAppTypesResponse_TypeItem >*
ListDatabaseAppTypesResponse::mutable_items() {
  // @@protoc_insertion_point(field_mutable_list:smart3dmap.v1.ListDatabaseAppTypesResponse.items)
  return &items_;
}
inline const ::smart3dmap::v1::ListDatabaseAppTypesResponse_TypeItem& ListDatabaseAppTypesResponse::_internal_items(int index) const {
  return items_.Get(index);
}
inline const ::smart3dmap::v1::ListDatabaseAppTypesResponse_TypeItem& ListDatabaseAppTypesResponse::items(int index) const {
  // @@protoc_insertion_point(field_get:smart3dmap.v1.ListDatabaseAppTypesResponse.items)
  return _internal_items(index);
}
inline ::smart3dmap::v1::ListDatabaseAppTypesResponse_TypeItem* ListDatabaseAppTypesResponse::_internal_add_items() {
  return items_.Add();
}
inline ::smart3dmap::v1::ListDatabaseAppTypesResponse_TypeItem* ListDatabaseAppTypesResponse::add_items() {
  // @@protoc_insertion_point(field_add:smart3dmap.v1.ListDatabaseAppTypesResponse.items)
  return _internal_add_items();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::smart3dmap::v1::ListDatabaseAppTypesResponse_TypeItem >&
ListDatabaseAppTypesResponse::items() const {
  // @@protoc_insertion_point(field_list:smart3dmap.v1.ListDatabaseAppTypesResponse.items)
  return items_;
}

// -------------------------------------------------------------------

// CreateDatabaseRequest

// string name = 1;
inline void CreateDatabaseRequest::clear_name() {
  name_.ClearToEmpty();
}
inline const std::string& CreateDatabaseRequest::name() const {
  // @@protoc_insertion_point(field_get:smart3dmap.v1.CreateDatabaseRequest.name)
  return _internal_name();
}
inline void CreateDatabaseRequest::set_name(const std::string& value) {
  _internal_set_name(value);
  // @@protoc_insertion_point(field_set:smart3dmap.v1.CreateDatabaseRequest.name)
}
inline std::string* CreateDatabaseRequest::mutable_name() {
  // @@protoc_insertion_point(field_mutable:smart3dmap.v1.CreateDatabaseRequest.name)
  return _internal_mutable_name();
}
inline const std::string& CreateDatabaseRequest::_internal_name() const {
  return name_.Get();
}
inline void CreateDatabaseRequest::_internal_set_name(const std::string& value) {
  
  name_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArena());
}
inline void CreateDatabaseRequest::set_name(std::string&& value) {
  
  name_.Set(
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:smart3dmap.v1.CreateDatabaseRequest.name)
}
inline void CreateDatabaseRequest::set_name(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  name_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(value), GetArena());
  // @@protoc_insertion_point(field_set_char:smart3dmap.v1.CreateDatabaseRequest.name)
}
inline void CreateDatabaseRequest::set_name(const char* value,
    size_t size) {
  
  name_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:smart3dmap.v1.CreateDatabaseRequest.name)
}
inline std::string* CreateDatabaseRequest::_internal_mutable_name() {
  
  return name_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArena());
}
inline std::string* CreateDatabaseRequest::release_name() {
  // @@protoc_insertion_point(field_release:smart3dmap.v1.CreateDatabaseRequest.name)
  return name_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void CreateDatabaseRequest::set_allocated_name(std::string* name) {
  if (name != nullptr) {
    
  } else {
    
  }
  name_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), name,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:smart3dmap.v1.CreateDatabaseRequest.name)
}

// string db_name = 2;
inline void CreateDatabaseRequest::clear_db_name() {
  db_name_.ClearToEmpty();
}
inline const std::string& CreateDatabaseRequest::db_name() const {
  // @@protoc_insertion_point(field_get:smart3dmap.v1.CreateDatabaseRequest.db_name)
  return _internal_db_name();
}
inline void CreateDatabaseRequest::set_db_name(const std::string& value) {
  _internal_set_db_name(value);
  // @@protoc_insertion_point(field_set:smart3dmap.v1.CreateDatabaseRequest.db_name)
}
inline std::string* CreateDatabaseRequest::mutable_db_name() {
  // @@protoc_insertion_point(field_mutable:smart3dmap.v1.CreateDatabaseRequest.db_name)
  return _internal_mutable_db_name();
}
inline const std::string& CreateDatabaseRequest::_internal_db_name() const {
  return db_name_.Get();
}
inline void CreateDatabaseRequest::_internal_set_db_name(const std::string& value) {
  
  db_name_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArena());
}
inline void CreateDatabaseRequest::set_db_name(std::string&& value) {
  
  db_name_.Set(
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:smart3dmap.v1.CreateDatabaseRequest.db_name)
}
inline void CreateDatabaseRequest::set_db_name(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  db_name_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(value), GetArena());
  // @@protoc_insertion_point(field_set_char:smart3dmap.v1.CreateDatabaseRequest.db_name)
}
inline void CreateDatabaseRequest::set_db_name(const char* value,
    size_t size) {
  
  db_name_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:smart3dmap.v1.CreateDatabaseRequest.db_name)
}
inline std::string* CreateDatabaseRequest::_internal_mutable_db_name() {
  
  return db_name_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArena());
}
inline std::string* CreateDatabaseRequest::release_db_name() {
  // @@protoc_insertion_point(field_release:smart3dmap.v1.CreateDatabaseRequest.db_name)
  return db_name_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void CreateDatabaseRequest::set_allocated_db_name(std::string* db_name) {
  if (db_name != nullptr) {
    
  } else {
    
  }
  db_name_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), db_name,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:smart3dmap.v1.CreateDatabaseRequest.db_name)
}

// int32 db_server_id = 3;
inline void CreateDatabaseRequest::clear_db_server_id() {
  db_server_id_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 CreateDatabaseRequest::_internal_db_server_id() const {
  return db_server_id_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 CreateDatabaseRequest::db_server_id() const {
  // @@protoc_insertion_point(field_get:smart3dmap.v1.CreateDatabaseRequest.db_server_id)
  return _internal_db_server_id();
}
inline void CreateDatabaseRequest::_internal_set_db_server_id(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  db_server_id_ = value;
}
inline void CreateDatabaseRequest::set_db_server_id(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_db_server_id(value);
  // @@protoc_insertion_point(field_set:smart3dmap.v1.CreateDatabaseRequest.db_server_id)
}

// .smart3dmap.v1.DBAppType app_type = 4;
inline void CreateDatabaseRequest::clear_app_type() {
  app_type_ = 0;
}
inline ::smart3dmap::v1::DBAppType CreateDatabaseRequest::_internal_app_type() const {
  return static_cast< ::smart3dmap::v1::DBAppType >(app_type_);
}
inline ::smart3dmap::v1::DBAppType CreateDatabaseRequest::app_type() const {
  // @@protoc_insertion_point(field_get:smart3dmap.v1.CreateDatabaseRequest.app_type)
  return _internal_app_type();
}
inline void CreateDatabaseRequest::_internal_set_app_type(::smart3dmap::v1::DBAppType value) {
  
  app_type_ = value;
}
inline void CreateDatabaseRequest::set_app_type(::smart3dmap::v1::DBAppType value) {
  _internal_set_app_type(value);
  // @@protoc_insertion_point(field_set:smart3dmap.v1.CreateDatabaseRequest.app_type)
}

// -------------------------------------------------------------------

// AddExistingDatabaseRequest

// string name = 1;
inline void AddExistingDatabaseRequest::clear_name() {
  name_.ClearToEmpty();
}
inline const std::string& AddExistingDatabaseRequest::name() const {
  // @@protoc_insertion_point(field_get:smart3dmap.v1.AddExistingDatabaseRequest.name)
  return _internal_name();
}
inline void AddExistingDatabaseRequest::set_name(const std::string& value) {
  _internal_set_name(value);
  // @@protoc_insertion_point(field_set:smart3dmap.v1.AddExistingDatabaseRequest.name)
}
inline std::string* AddExistingDatabaseRequest::mutable_name() {
  // @@protoc_insertion_point(field_mutable:smart3dmap.v1.AddExistingDatabaseRequest.name)
  return _internal_mutable_name();
}
inline const std::string& AddExistingDatabaseRequest::_internal_name() const {
  return name_.Get();
}
inline void AddExistingDatabaseRequest::_internal_set_name(const std::string& value) {
  
  name_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArena());
}
inline void AddExistingDatabaseRequest::set_name(std::string&& value) {
  
  name_.Set(
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:smart3dmap.v1.AddExistingDatabaseRequest.name)
}
inline void AddExistingDatabaseRequest::set_name(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  name_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(value), GetArena());
  // @@protoc_insertion_point(field_set_char:smart3dmap.v1.AddExistingDatabaseRequest.name)
}
inline void AddExistingDatabaseRequest::set_name(const char* value,
    size_t size) {
  
  name_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:smart3dmap.v1.AddExistingDatabaseRequest.name)
}
inline std::string* AddExistingDatabaseRequest::_internal_mutable_name() {
  
  return name_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArena());
}
inline std::string* AddExistingDatabaseRequest::release_name() {
  // @@protoc_insertion_point(field_release:smart3dmap.v1.AddExistingDatabaseRequest.name)
  return name_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void AddExistingDatabaseRequest::set_allocated_name(std::string* name) {
  if (name != nullptr) {
    
  } else {
    
  }
  name_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), name,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:smart3dmap.v1.AddExistingDatabaseRequest.name)
}

// string db_host = 2;
inline void AddExistingDatabaseRequest::clear_db_host() {
  db_host_.ClearToEmpty();
}
inline const std::string& AddExistingDatabaseRequest::db_host() const {
  // @@protoc_insertion_point(field_get:smart3dmap.v1.AddExistingDatabaseRequest.db_host)
  return _internal_db_host();
}
inline void AddExistingDatabaseRequest::set_db_host(const std::string& value) {
  _internal_set_db_host(value);
  // @@protoc_insertion_point(field_set:smart3dmap.v1.AddExistingDatabaseRequest.db_host)
}
inline std::string* AddExistingDatabaseRequest::mutable_db_host() {
  // @@protoc_insertion_point(field_mutable:smart3dmap.v1.AddExistingDatabaseRequest.db_host)
  return _internal_mutable_db_host();
}
inline const std::string& AddExistingDatabaseRequest::_internal_db_host() const {
  return db_host_.Get();
}
inline void AddExistingDatabaseRequest::_internal_set_db_host(const std::string& value) {
  
  db_host_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArena());
}
inline void AddExistingDatabaseRequest::set_db_host(std::string&& value) {
  
  db_host_.Set(
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:smart3dmap.v1.AddExistingDatabaseRequest.db_host)
}
inline void AddExistingDatabaseRequest::set_db_host(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  db_host_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(value), GetArena());
  // @@protoc_insertion_point(field_set_char:smart3dmap.v1.AddExistingDatabaseRequest.db_host)
}
inline void AddExistingDatabaseRequest::set_db_host(const char* value,
    size_t size) {
  
  db_host_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:smart3dmap.v1.AddExistingDatabaseRequest.db_host)
}
inline std::string* AddExistingDatabaseRequest::_internal_mutable_db_host() {
  
  return db_host_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArena());
}
inline std::string* AddExistingDatabaseRequest::release_db_host() {
  // @@protoc_insertion_point(field_release:smart3dmap.v1.AddExistingDatabaseRequest.db_host)
  return db_host_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void AddExistingDatabaseRequest::set_allocated_db_host(std::string* db_host) {
  if (db_host != nullptr) {
    
  } else {
    
  }
  db_host_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), db_host,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:smart3dmap.v1.AddExistingDatabaseRequest.db_host)
}

// int32 db_port = 3;
inline void AddExistingDatabaseRequest::clear_db_port() {
  db_port_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 AddExistingDatabaseRequest::_internal_db_port() const {
  return db_port_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 AddExistingDatabaseRequest::db_port() const {
  // @@protoc_insertion_point(field_get:smart3dmap.v1.AddExistingDatabaseRequest.db_port)
  return _internal_db_port();
}
inline void AddExistingDatabaseRequest::_internal_set_db_port(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  db_port_ = value;
}
inline void AddExistingDatabaseRequest::set_db_port(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_db_port(value);
  // @@protoc_insertion_point(field_set:smart3dmap.v1.AddExistingDatabaseRequest.db_port)
}

// string db_name = 4;
inline void AddExistingDatabaseRequest::clear_db_name() {
  db_name_.ClearToEmpty();
}
inline const std::string& AddExistingDatabaseRequest::db_name() const {
  // @@protoc_insertion_point(field_get:smart3dmap.v1.AddExistingDatabaseRequest.db_name)
  return _internal_db_name();
}
inline void AddExistingDatabaseRequest::set_db_name(const std::string& value) {
  _internal_set_db_name(value);
  // @@protoc_insertion_point(field_set:smart3dmap.v1.AddExistingDatabaseRequest.db_name)
}
inline std::string* AddExistingDatabaseRequest::mutable_db_name() {
  // @@protoc_insertion_point(field_mutable:smart3dmap.v1.AddExistingDatabaseRequest.db_name)
  return _internal_mutable_db_name();
}
inline const std::string& AddExistingDatabaseRequest::_internal_db_name() const {
  return db_name_.Get();
}
inline void AddExistingDatabaseRequest::_internal_set_db_name(const std::string& value) {
  
  db_name_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArena());
}
inline void AddExistingDatabaseRequest::set_db_name(std::string&& value) {
  
  db_name_.Set(
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:smart3dmap.v1.AddExistingDatabaseRequest.db_name)
}
inline void AddExistingDatabaseRequest::set_db_name(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  db_name_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(value), GetArena());
  // @@protoc_insertion_point(field_set_char:smart3dmap.v1.AddExistingDatabaseRequest.db_name)
}
inline void AddExistingDatabaseRequest::set_db_name(const char* value,
    size_t size) {
  
  db_name_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:smart3dmap.v1.AddExistingDatabaseRequest.db_name)
}
inline std::string* AddExistingDatabaseRequest::_internal_mutable_db_name() {
  
  return db_name_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArena());
}
inline std::string* AddExistingDatabaseRequest::release_db_name() {
  // @@protoc_insertion_point(field_release:smart3dmap.v1.AddExistingDatabaseRequest.db_name)
  return db_name_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void AddExistingDatabaseRequest::set_allocated_db_name(std::string* db_name) {
  if (db_name != nullptr) {
    
  } else {
    
  }
  db_name_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), db_name,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:smart3dmap.v1.AddExistingDatabaseRequest.db_name)
}

// .smart3dmap.v1.DBUser db_user = 5;
inline bool AddExistingDatabaseRequest::_internal_has_db_user() const {
  return this != internal_default_instance() && db_user_ != nullptr;
}
inline bool AddExistingDatabaseRequest::has_db_user() const {
  return _internal_has_db_user();
}
inline void AddExistingDatabaseRequest::clear_db_user() {
  if (GetArena() == nullptr && db_user_ != nullptr) {
    delete db_user_;
  }
  db_user_ = nullptr;
}
inline const ::smart3dmap::v1::DBUser& AddExistingDatabaseRequest::_internal_db_user() const {
  const ::smart3dmap::v1::DBUser* p = db_user_;
  return p != nullptr ? *p : reinterpret_cast<const ::smart3dmap::v1::DBUser&>(
      ::smart3dmap::v1::_DBUser_default_instance_);
}
inline const ::smart3dmap::v1::DBUser& AddExistingDatabaseRequest::db_user() const {
  // @@protoc_insertion_point(field_get:smart3dmap.v1.AddExistingDatabaseRequest.db_user)
  return _internal_db_user();
}
inline void AddExistingDatabaseRequest::unsafe_arena_set_allocated_db_user(
    ::smart3dmap::v1::DBUser* db_user) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(db_user_);
  }
  db_user_ = db_user;
  if (db_user) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:smart3dmap.v1.AddExistingDatabaseRequest.db_user)
}
inline ::smart3dmap::v1::DBUser* AddExistingDatabaseRequest::release_db_user() {
  
  ::smart3dmap::v1::DBUser* temp = db_user_;
  db_user_ = nullptr;
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::smart3dmap::v1::DBUser* AddExistingDatabaseRequest::unsafe_arena_release_db_user() {
  // @@protoc_insertion_point(field_release:smart3dmap.v1.AddExistingDatabaseRequest.db_user)
  
  ::smart3dmap::v1::DBUser* temp = db_user_;
  db_user_ = nullptr;
  return temp;
}
inline ::smart3dmap::v1::DBUser* AddExistingDatabaseRequest::_internal_mutable_db_user() {
  
  if (db_user_ == nullptr) {
    auto* p = CreateMaybeMessage<::smart3dmap::v1::DBUser>(GetArena());
    db_user_ = p;
  }
  return db_user_;
}
inline ::smart3dmap::v1::DBUser* AddExistingDatabaseRequest::mutable_db_user() {
  // @@protoc_insertion_point(field_mutable:smart3dmap.v1.AddExistingDatabaseRequest.db_user)
  return _internal_mutable_db_user();
}
inline void AddExistingDatabaseRequest::set_allocated_db_user(::smart3dmap::v1::DBUser* db_user) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete db_user_;
  }
  if (db_user) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(db_user);
    if (message_arena != submessage_arena) {
      db_user = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, db_user, submessage_arena);
    }
    
  } else {
    
  }
  db_user_ = db_user;
  // @@protoc_insertion_point(field_set_allocated:smart3dmap.v1.AddExistingDatabaseRequest.db_user)
}

// .smart3dmap.v1.DBServerType server_type = 6;
inline void AddExistingDatabaseRequest::clear_server_type() {
  server_type_ = 0;
}
inline ::smart3dmap::v1::DBServerType AddExistingDatabaseRequest::_internal_server_type() const {
  return static_cast< ::smart3dmap::v1::DBServerType >(server_type_);
}
inline ::smart3dmap::v1::DBServerType AddExistingDatabaseRequest::server_type() const {
  // @@protoc_insertion_point(field_get:smart3dmap.v1.AddExistingDatabaseRequest.server_type)
  return _internal_server_type();
}
inline void AddExistingDatabaseRequest::_internal_set_server_type(::smart3dmap::v1::DBServerType value) {
  
  server_type_ = value;
}
inline void AddExistingDatabaseRequest::set_server_type(::smart3dmap::v1::DBServerType value) {
  _internal_set_server_type(value);
  // @@protoc_insertion_point(field_set:smart3dmap.v1.AddExistingDatabaseRequest.server_type)
}

// .smart3dmap.v1.DBAppType app_type = 7;
inline void AddExistingDatabaseRequest::clear_app_type() {
  app_type_ = 0;
}
inline ::smart3dmap::v1::DBAppType AddExistingDatabaseRequest::_internal_app_type() const {
  return static_cast< ::smart3dmap::v1::DBAppType >(app_type_);
}
inline ::smart3dmap::v1::DBAppType AddExistingDatabaseRequest::app_type() const {
  // @@protoc_insertion_point(field_get:smart3dmap.v1.AddExistingDatabaseRequest.app_type)
  return _internal_app_type();
}
inline void AddExistingDatabaseRequest::_internal_set_app_type(::smart3dmap::v1::DBAppType value) {
  
  app_type_ = value;
}
inline void AddExistingDatabaseRequest::set_app_type(::smart3dmap::v1::DBAppType value) {
  _internal_set_app_type(value);
  // @@protoc_insertion_point(field_set:smart3dmap.v1.AddExistingDatabaseRequest.app_type)
}

// string db_inner_host = 8;
inline void AddExistingDatabaseRequest::clear_db_inner_host() {
  db_inner_host_.ClearToEmpty();
}
inline const std::string& AddExistingDatabaseRequest::db_inner_host() const {
  // @@protoc_insertion_point(field_get:smart3dmap.v1.AddExistingDatabaseRequest.db_inner_host)
  return _internal_db_inner_host();
}
inline void AddExistingDatabaseRequest::set_db_inner_host(const std::string& value) {
  _internal_set_db_inner_host(value);
  // @@protoc_insertion_point(field_set:smart3dmap.v1.AddExistingDatabaseRequest.db_inner_host)
}
inline std::string* AddExistingDatabaseRequest::mutable_db_inner_host() {
  // @@protoc_insertion_point(field_mutable:smart3dmap.v1.AddExistingDatabaseRequest.db_inner_host)
  return _internal_mutable_db_inner_host();
}
inline const std::string& AddExistingDatabaseRequest::_internal_db_inner_host() const {
  return db_inner_host_.Get();
}
inline void AddExistingDatabaseRequest::_internal_set_db_inner_host(const std::string& value) {
  
  db_inner_host_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArena());
}
inline void AddExistingDatabaseRequest::set_db_inner_host(std::string&& value) {
  
  db_inner_host_.Set(
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:smart3dmap.v1.AddExistingDatabaseRequest.db_inner_host)
}
inline void AddExistingDatabaseRequest::set_db_inner_host(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  db_inner_host_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(value), GetArena());
  // @@protoc_insertion_point(field_set_char:smart3dmap.v1.AddExistingDatabaseRequest.db_inner_host)
}
inline void AddExistingDatabaseRequest::set_db_inner_host(const char* value,
    size_t size) {
  
  db_inner_host_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:smart3dmap.v1.AddExistingDatabaseRequest.db_inner_host)
}
inline std::string* AddExistingDatabaseRequest::_internal_mutable_db_inner_host() {
  
  return db_inner_host_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArena());
}
inline std::string* AddExistingDatabaseRequest::release_db_inner_host() {
  // @@protoc_insertion_point(field_release:smart3dmap.v1.AddExistingDatabaseRequest.db_inner_host)
  return db_inner_host_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void AddExistingDatabaseRequest::set_allocated_db_inner_host(std::string* db_inner_host) {
  if (db_inner_host != nullptr) {
    
  } else {
    
  }
  db_inner_host_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), db_inner_host,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:smart3dmap.v1.AddExistingDatabaseRequest.db_inner_host)
}

// -------------------------------------------------------------------

// ListDatabasesRequest

// .smart3dmap.v1.Pagination pagination = 1;
inline bool ListDatabasesRequest::_internal_has_pagination() const {
  return this != internal_default_instance() && pagination_ != nullptr;
}
inline bool ListDatabasesRequest::has_pagination() const {
  return _internal_has_pagination();
}
inline const ::smart3dmap::v1::Pagination& ListDatabasesRequest::_internal_pagination() const {
  const ::smart3dmap::v1::Pagination* p = pagination_;
  return p != nullptr ? *p : reinterpret_cast<const ::smart3dmap::v1::Pagination&>(
      ::smart3dmap::v1::_Pagination_default_instance_);
}
inline const ::smart3dmap::v1::Pagination& ListDatabasesRequest::pagination() const {
  // @@protoc_insertion_point(field_get:smart3dmap.v1.ListDatabasesRequest.pagination)
  return _internal_pagination();
}
inline void ListDatabasesRequest::unsafe_arena_set_allocated_pagination(
    ::smart3dmap::v1::Pagination* pagination) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(pagination_);
  }
  pagination_ = pagination;
  if (pagination) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:smart3dmap.v1.ListDatabasesRequest.pagination)
}
inline ::smart3dmap::v1::Pagination* ListDatabasesRequest::release_pagination() {
  
  ::smart3dmap::v1::Pagination* temp = pagination_;
  pagination_ = nullptr;
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::smart3dmap::v1::Pagination* ListDatabasesRequest::unsafe_arena_release_pagination() {
  // @@protoc_insertion_point(field_release:smart3dmap.v1.ListDatabasesRequest.pagination)
  
  ::smart3dmap::v1::Pagination* temp = pagination_;
  pagination_ = nullptr;
  return temp;
}
inline ::smart3dmap::v1::Pagination* ListDatabasesRequest::_internal_mutable_pagination() {
  
  if (pagination_ == nullptr) {
    auto* p = CreateMaybeMessage<::smart3dmap::v1::Pagination>(GetArena());
    pagination_ = p;
  }
  return pagination_;
}
inline ::smart3dmap::v1::Pagination* ListDatabasesRequest::mutable_pagination() {
  // @@protoc_insertion_point(field_mutable:smart3dmap.v1.ListDatabasesRequest.pagination)
  return _internal_mutable_pagination();
}
inline void ListDatabasesRequest::set_allocated_pagination(::smart3dmap::v1::Pagination* pagination) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(pagination_);
  }
  if (pagination) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(pagination)->GetArena();
    if (message_arena != submessage_arena) {
      pagination = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, pagination, submessage_arena);
    }
    
  } else {
    
  }
  pagination_ = pagination;
  // @@protoc_insertion_point(field_set_allocated:smart3dmap.v1.ListDatabasesRequest.pagination)
}

// .smart3dmap.v1.DBAppType app_type = 2;
inline void ListDatabasesRequest::clear_app_type() {
  app_type_ = 0;
}
inline ::smart3dmap::v1::DBAppType ListDatabasesRequest::_internal_app_type() const {
  return static_cast< ::smart3dmap::v1::DBAppType >(app_type_);
}
inline ::smart3dmap::v1::DBAppType ListDatabasesRequest::app_type() const {
  // @@protoc_insertion_point(field_get:smart3dmap.v1.ListDatabasesRequest.app_type)
  return _internal_app_type();
}
inline void ListDatabasesRequest::_internal_set_app_type(::smart3dmap::v1::DBAppType value) {
  
  app_type_ = value;
}
inline void ListDatabasesRequest::set_app_type(::smart3dmap::v1::DBAppType value) {
  _internal_set_app_type(value);
  // @@protoc_insertion_point(field_set:smart3dmap.v1.ListDatabasesRequest.app_type)
}

// -------------------------------------------------------------------

// ListDatabasesResponse

// repeated .smart3dmap.v1.Database databases = 1;
inline int ListDatabasesResponse::_internal_databases_size() const {
  return databases_.size();
}
inline int ListDatabasesResponse::databases_size() const {
  return _internal_databases_size();
}
inline void ListDatabasesResponse::clear_databases() {
  databases_.Clear();
}
inline ::smart3dmap::v1::Database* ListDatabasesResponse::mutable_databases(int index) {
  // @@protoc_insertion_point(field_mutable:smart3dmap.v1.ListDatabasesResponse.databases)
  return databases_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::smart3dmap::v1::Database >*
ListDatabasesResponse::mutable_databases() {
  // @@protoc_insertion_point(field_mutable_list:smart3dmap.v1.ListDatabasesResponse.databases)
  return &databases_;
}
inline const ::smart3dmap::v1::Database& ListDatabasesResponse::_internal_databases(int index) const {
  return databases_.Get(index);
}
inline const ::smart3dmap::v1::Database& ListDatabasesResponse::databases(int index) const {
  // @@protoc_insertion_point(field_get:smart3dmap.v1.ListDatabasesResponse.databases)
  return _internal_databases(index);
}
inline ::smart3dmap::v1::Database* ListDatabasesResponse::_internal_add_databases() {
  return databases_.Add();
}
inline ::smart3dmap::v1::Database* ListDatabasesResponse::add_databases() {
  // @@protoc_insertion_point(field_add:smart3dmap.v1.ListDatabasesResponse.databases)
  return _internal_add_databases();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::smart3dmap::v1::Database >&
ListDatabasesResponse::databases() const {
  // @@protoc_insertion_point(field_list:smart3dmap.v1.ListDatabasesResponse.databases)
  return databases_;
}

// int32 total_count = 2;
inline void ListDatabasesResponse::clear_total_count() {
  total_count_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 ListDatabasesResponse::_internal_total_count() const {
  return total_count_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 ListDatabasesResponse::total_count() const {
  // @@protoc_insertion_point(field_get:smart3dmap.v1.ListDatabasesResponse.total_count)
  return _internal_total_count();
}
inline void ListDatabasesResponse::_internal_set_total_count(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  total_count_ = value;
}
inline void ListDatabasesResponse::set_total_count(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_total_count(value);
  // @@protoc_insertion_point(field_set:smart3dmap.v1.ListDatabasesResponse.total_count)
}

// -------------------------------------------------------------------

// GetDatabaseRequest

// int32 id = 1;
inline bool GetDatabaseRequest::_internal_has_id() const {
  return db_label_case() == kId;
}
inline bool GetDatabaseRequest::has_id() const {
  return _internal_has_id();
}
inline void GetDatabaseRequest::set_has_id() {
  _oneof_case_[0] = kId;
}
inline void GetDatabaseRequest::clear_id() {
  if (_internal_has_id()) {
    db_label_.id_ = 0;
    clear_has_db_label();
  }
}
inline ::PROTOBUF_NAMESPACE_ID::int32 GetDatabaseRequest::_internal_id() const {
  if (_internal_has_id()) {
    return db_label_.id_;
  }
  return 0;
}
inline void GetDatabaseRequest::_internal_set_id(::PROTOBUF_NAMESPACE_ID::int32 value) {
  if (!_internal_has_id()) {
    clear_db_label();
    set_has_id();
  }
  db_label_.id_ = value;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 GetDatabaseRequest::id() const {
  // @@protoc_insertion_point(field_get:smart3dmap.v1.GetDatabaseRequest.id)
  return _internal_id();
}
inline void GetDatabaseRequest::set_id(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_id(value);
  // @@protoc_insertion_point(field_set:smart3dmap.v1.GetDatabaseRequest.id)
}

// string name = 2;
inline bool GetDatabaseRequest::_internal_has_name() const {
  return db_label_case() == kName;
}
inline bool GetDatabaseRequest::has_name() const {
  return _internal_has_name();
}
inline void GetDatabaseRequest::set_has_name() {
  _oneof_case_[0] = kName;
}
inline void GetDatabaseRequest::clear_name() {
  if (_internal_has_name()) {
    db_label_.name_.Destroy(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArena());
    clear_has_db_label();
  }
}
inline const std::string& GetDatabaseRequest::name() const {
  // @@protoc_insertion_point(field_get:smart3dmap.v1.GetDatabaseRequest.name)
  return _internal_name();
}
inline void GetDatabaseRequest::set_name(const std::string& value) {
  _internal_set_name(value);
  // @@protoc_insertion_point(field_set:smart3dmap.v1.GetDatabaseRequest.name)
}
inline std::string* GetDatabaseRequest::mutable_name() {
  // @@protoc_insertion_point(field_mutable:smart3dmap.v1.GetDatabaseRequest.name)
  return _internal_mutable_name();
}
inline const std::string& GetDatabaseRequest::_internal_name() const {
  if (_internal_has_name()) {
    return db_label_.name_.Get();
  }
  return ::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited();
}
inline void GetDatabaseRequest::_internal_set_name(const std::string& value) {
  if (!_internal_has_name()) {
    clear_db_label();
    set_has_name();
    db_label_.name_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  }
  db_label_.name_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArena());
}
inline void GetDatabaseRequest::set_name(std::string&& value) {
  // @@protoc_insertion_point(field_set:smart3dmap.v1.GetDatabaseRequest.name)
  if (!_internal_has_name()) {
    clear_db_label();
    set_has_name();
    db_label_.name_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  }
  db_label_.name_.Set(
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:smart3dmap.v1.GetDatabaseRequest.name)
}
inline void GetDatabaseRequest::set_name(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  if (!_internal_has_name()) {
    clear_db_label();
    set_has_name();
    db_label_.name_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  }
  db_label_.name_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{},
      ::std::string(value), GetArena());
  // @@protoc_insertion_point(field_set_char:smart3dmap.v1.GetDatabaseRequest.name)
}
inline void GetDatabaseRequest::set_name(const char* value,
                             size_t size) {
  if (!_internal_has_name()) {
    clear_db_label();
    set_has_name();
    db_label_.name_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  }
  db_label_.name_.Set(
      ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(
      reinterpret_cast<const char*>(value), size),
      GetArena());
  // @@protoc_insertion_point(field_set_pointer:smart3dmap.v1.GetDatabaseRequest.name)
}
inline std::string* GetDatabaseRequest::_internal_mutable_name() {
  if (!_internal_has_name()) {
    clear_db_label();
    set_has_name();
    db_label_.name_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  }
  return db_label_.name_.Mutable(
      ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArena());
}
inline std::string* GetDatabaseRequest::release_name() {
  // @@protoc_insertion_point(field_release:smart3dmap.v1.GetDatabaseRequest.name)
  if (_internal_has_name()) {
    clear_has_db_label();
    return db_label_.name_.ReleaseNonDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  } else {
    return nullptr;
  }
}
inline void GetDatabaseRequest::set_allocated_name(std::string* name) {
  if (has_db_label()) {
    clear_db_label();
  }
  if (name != nullptr) {
    set_has_name();
    db_label_.name_.UnsafeSetDefault(name);
    ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena();
    if (arena != nullptr) {
      arena->Own(name);
    }
  }
  // @@protoc_insertion_point(field_set_allocated:smart3dmap.v1.GetDatabaseRequest.name)
}

inline bool GetDatabaseRequest::has_db_label() const {
  return db_label_case() != DB_LABEL_NOT_SET;
}
inline void GetDatabaseRequest::clear_has_db_label() {
  _oneof_case_[0] = DB_LABEL_NOT_SET;
}
inline GetDatabaseRequest::DbLabelCase GetDatabaseRequest::db_label_case() const {
  return GetDatabaseRequest::DbLabelCase(_oneof_case_[0]);
}
// -------------------------------------------------------------------

// DeleteDatabaseRequest

// int32 id = 1;
inline void DeleteDatabaseRequest::clear_id() {
  id_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 DeleteDatabaseRequest::_internal_id() const {
  return id_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 DeleteDatabaseRequest::id() const {
  // @@protoc_insertion_point(field_get:smart3dmap.v1.DeleteDatabaseRequest.id)
  return _internal_id();
}
inline void DeleteDatabaseRequest::_internal_set_id(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  id_ = value;
}
inline void DeleteDatabaseRequest::set_id(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_id(value);
  // @@protoc_insertion_point(field_set:smart3dmap.v1.DeleteDatabaseRequest.id)
}

// -------------------------------------------------------------------

// DeleteDatabaseResponse

// bool status = 1;
inline void DeleteDatabaseResponse::clear_status() {
  status_ = false;
}
inline bool DeleteDatabaseResponse::_internal_status() const {
  return status_;
}
inline bool DeleteDatabaseResponse::status() const {
  // @@protoc_insertion_point(field_get:smart3dmap.v1.DeleteDatabaseResponse.status)
  return _internal_status();
}
inline void DeleteDatabaseResponse::_internal_set_status(bool value) {
  
  status_ = value;
}
inline void DeleteDatabaseResponse::set_status(bool value) {
  _internal_set_status(value);
  // @@protoc_insertion_point(field_set:smart3dmap.v1.DeleteDatabaseResponse.status)
}

// string error = 2;
inline void DeleteDatabaseResponse::clear_error() {
  error_.ClearToEmpty();
}
inline const std::string& DeleteDatabaseResponse::error() const {
  // @@protoc_insertion_point(field_get:smart3dmap.v1.DeleteDatabaseResponse.error)
  return _internal_error();
}
inline void DeleteDatabaseResponse::set_error(const std::string& value) {
  _internal_set_error(value);
  // @@protoc_insertion_point(field_set:smart3dmap.v1.DeleteDatabaseResponse.error)
}
inline std::string* DeleteDatabaseResponse::mutable_error() {
  // @@protoc_insertion_point(field_mutable:smart3dmap.v1.DeleteDatabaseResponse.error)
  return _internal_mutable_error();
}
inline const std::string& DeleteDatabaseResponse::_internal_error() const {
  return error_.Get();
}
inline void DeleteDatabaseResponse::_internal_set_error(const std::string& value) {
  
  error_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArena());
}
inline void DeleteDatabaseResponse::set_error(std::string&& value) {
  
  error_.Set(
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:smart3dmap.v1.DeleteDatabaseResponse.error)
}
inline void DeleteDatabaseResponse::set_error(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  error_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(value), GetArena());
  // @@protoc_insertion_point(field_set_char:smart3dmap.v1.DeleteDatabaseResponse.error)
}
inline void DeleteDatabaseResponse::set_error(const char* value,
    size_t size) {
  
  error_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:smart3dmap.v1.DeleteDatabaseResponse.error)
}
inline std::string* DeleteDatabaseResponse::_internal_mutable_error() {
  
  return error_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArena());
}
inline std::string* DeleteDatabaseResponse::release_error() {
  // @@protoc_insertion_point(field_release:smart3dmap.v1.DeleteDatabaseResponse.error)
  return error_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void DeleteDatabaseResponse::set_allocated_error(std::string* error) {
  if (error != nullptr) {
    
  } else {
    
  }
  error_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), error,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:smart3dmap.v1.DeleteDatabaseResponse.error)
}

// -------------------------------------------------------------------

// Database

// int32 id = 1;
inline void Database::clear_id() {
  id_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 Database::_internal_id() const {
  return id_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 Database::id() const {
  // @@protoc_insertion_point(field_get:smart3dmap.v1.Database.id)
  return _internal_id();
}
inline void Database::_internal_set_id(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  id_ = value;
}
inline void Database::set_id(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_id(value);
  // @@protoc_insertion_point(field_set:smart3dmap.v1.Database.id)
}

// string name = 2;
inline void Database::clear_name() {
  name_.ClearToEmpty();
}
inline const std::string& Database::name() const {
  // @@protoc_insertion_point(field_get:smart3dmap.v1.Database.name)
  return _internal_name();
}
inline void Database::set_name(const std::string& value) {
  _internal_set_name(value);
  // @@protoc_insertion_point(field_set:smart3dmap.v1.Database.name)
}
inline std::string* Database::mutable_name() {
  // @@protoc_insertion_point(field_mutable:smart3dmap.v1.Database.name)
  return _internal_mutable_name();
}
inline const std::string& Database::_internal_name() const {
  return name_.Get();
}
inline void Database::_internal_set_name(const std::string& value) {
  
  name_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArena());
}
inline void Database::set_name(std::string&& value) {
  
  name_.Set(
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:smart3dmap.v1.Database.name)
}
inline void Database::set_name(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  name_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(value), GetArena());
  // @@protoc_insertion_point(field_set_char:smart3dmap.v1.Database.name)
}
inline void Database::set_name(const char* value,
    size_t size) {
  
  name_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:smart3dmap.v1.Database.name)
}
inline std::string* Database::_internal_mutable_name() {
  
  return name_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArena());
}
inline std::string* Database::release_name() {
  // @@protoc_insertion_point(field_release:smart3dmap.v1.Database.name)
  return name_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void Database::set_allocated_name(std::string* name) {
  if (name != nullptr) {
    
  } else {
    
  }
  name_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), name,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:smart3dmap.v1.Database.name)
}

// int32 db_server_id = 3;
inline void Database::clear_db_server_id() {
  db_server_id_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 Database::_internal_db_server_id() const {
  return db_server_id_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 Database::db_server_id() const {
  // @@protoc_insertion_point(field_get:smart3dmap.v1.Database.db_server_id)
  return _internal_db_server_id();
}
inline void Database::_internal_set_db_server_id(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  db_server_id_ = value;
}
inline void Database::set_db_server_id(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_db_server_id(value);
  // @@protoc_insertion_point(field_set:smart3dmap.v1.Database.db_server_id)
}

// .smart3dmap.v1.DBServerType db_server_type = 4;
inline void Database::clear_db_server_type() {
  db_server_type_ = 0;
}
inline ::smart3dmap::v1::DBServerType Database::_internal_db_server_type() const {
  return static_cast< ::smart3dmap::v1::DBServerType >(db_server_type_);
}
inline ::smart3dmap::v1::DBServerType Database::db_server_type() const {
  // @@protoc_insertion_point(field_get:smart3dmap.v1.Database.db_server_type)
  return _internal_db_server_type();
}
inline void Database::_internal_set_db_server_type(::smart3dmap::v1::DBServerType value) {
  
  db_server_type_ = value;
}
inline void Database::set_db_server_type(::smart3dmap::v1::DBServerType value) {
  _internal_set_db_server_type(value);
  // @@protoc_insertion_point(field_set:smart3dmap.v1.Database.db_server_type)
}

// string db_host = 5;
inline void Database::clear_db_host() {
  db_host_.ClearToEmpty();
}
inline const std::string& Database::db_host() const {
  // @@protoc_insertion_point(field_get:smart3dmap.v1.Database.db_host)
  return _internal_db_host();
}
inline void Database::set_db_host(const std::string& value) {
  _internal_set_db_host(value);
  // @@protoc_insertion_point(field_set:smart3dmap.v1.Database.db_host)
}
inline std::string* Database::mutable_db_host() {
  // @@protoc_insertion_point(field_mutable:smart3dmap.v1.Database.db_host)
  return _internal_mutable_db_host();
}
inline const std::string& Database::_internal_db_host() const {
  return db_host_.Get();
}
inline void Database::_internal_set_db_host(const std::string& value) {
  
  db_host_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArena());
}
inline void Database::set_db_host(std::string&& value) {
  
  db_host_.Set(
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:smart3dmap.v1.Database.db_host)
}
inline void Database::set_db_host(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  db_host_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(value), GetArena());
  // @@protoc_insertion_point(field_set_char:smart3dmap.v1.Database.db_host)
}
inline void Database::set_db_host(const char* value,
    size_t size) {
  
  db_host_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:smart3dmap.v1.Database.db_host)
}
inline std::string* Database::_internal_mutable_db_host() {
  
  return db_host_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArena());
}
inline std::string* Database::release_db_host() {
  // @@protoc_insertion_point(field_release:smart3dmap.v1.Database.db_host)
  return db_host_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void Database::set_allocated_db_host(std::string* db_host) {
  if (db_host != nullptr) {
    
  } else {
    
  }
  db_host_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), db_host,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:smart3dmap.v1.Database.db_host)
}

// int32 db_port = 6;
inline void Database::clear_db_port() {
  db_port_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 Database::_internal_db_port() const {
  return db_port_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 Database::db_port() const {
  // @@protoc_insertion_point(field_get:smart3dmap.v1.Database.db_port)
  return _internal_db_port();
}
inline void Database::_internal_set_db_port(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  db_port_ = value;
}
inline void Database::set_db_port(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_db_port(value);
  // @@protoc_insertion_point(field_set:smart3dmap.v1.Database.db_port)
}

// string db_name = 7;
inline void Database::clear_db_name() {
  db_name_.ClearToEmpty();
}
inline const std::string& Database::db_name() const {
  // @@protoc_insertion_point(field_get:smart3dmap.v1.Database.db_name)
  return _internal_db_name();
}
inline void Database::set_db_name(const std::string& value) {
  _internal_set_db_name(value);
  // @@protoc_insertion_point(field_set:smart3dmap.v1.Database.db_name)
}
inline std::string* Database::mutable_db_name() {
  // @@protoc_insertion_point(field_mutable:smart3dmap.v1.Database.db_name)
  return _internal_mutable_db_name();
}
inline const std::string& Database::_internal_db_name() const {
  return db_name_.Get();
}
inline void Database::_internal_set_db_name(const std::string& value) {
  
  db_name_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArena());
}
inline void Database::set_db_name(std::string&& value) {
  
  db_name_.Set(
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:smart3dmap.v1.Database.db_name)
}
inline void Database::set_db_name(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  db_name_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(value), GetArena());
  // @@protoc_insertion_point(field_set_char:smart3dmap.v1.Database.db_name)
}
inline void Database::set_db_name(const char* value,
    size_t size) {
  
  db_name_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:smart3dmap.v1.Database.db_name)
}
inline std::string* Database::_internal_mutable_db_name() {
  
  return db_name_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArena());
}
inline std::string* Database::release_db_name() {
  // @@protoc_insertion_point(field_release:smart3dmap.v1.Database.db_name)
  return db_name_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void Database::set_allocated_db_name(std::string* db_name) {
  if (db_name != nullptr) {
    
  } else {
    
  }
  db_name_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), db_name,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:smart3dmap.v1.Database.db_name)
}

// .smart3dmap.v1.DBUser db_user = 8;
inline bool Database::_internal_has_db_user() const {
  return this != internal_default_instance() && db_user_ != nullptr;
}
inline bool Database::has_db_user() const {
  return _internal_has_db_user();
}
inline void Database::clear_db_user() {
  if (GetArena() == nullptr && db_user_ != nullptr) {
    delete db_user_;
  }
  db_user_ = nullptr;
}
inline const ::smart3dmap::v1::DBUser& Database::_internal_db_user() const {
  const ::smart3dmap::v1::DBUser* p = db_user_;
  return p != nullptr ? *p : reinterpret_cast<const ::smart3dmap::v1::DBUser&>(
      ::smart3dmap::v1::_DBUser_default_instance_);
}
inline const ::smart3dmap::v1::DBUser& Database::db_user() const {
  // @@protoc_insertion_point(field_get:smart3dmap.v1.Database.db_user)
  return _internal_db_user();
}
inline void Database::unsafe_arena_set_allocated_db_user(
    ::smart3dmap::v1::DBUser* db_user) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(db_user_);
  }
  db_user_ = db_user;
  if (db_user) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:smart3dmap.v1.Database.db_user)
}
inline ::smart3dmap::v1::DBUser* Database::release_db_user() {
  
  ::smart3dmap::v1::DBUser* temp = db_user_;
  db_user_ = nullptr;
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::smart3dmap::v1::DBUser* Database::unsafe_arena_release_db_user() {
  // @@protoc_insertion_point(field_release:smart3dmap.v1.Database.db_user)
  
  ::smart3dmap::v1::DBUser* temp = db_user_;
  db_user_ = nullptr;
  return temp;
}
inline ::smart3dmap::v1::DBUser* Database::_internal_mutable_db_user() {
  
  if (db_user_ == nullptr) {
    auto* p = CreateMaybeMessage<::smart3dmap::v1::DBUser>(GetArena());
    db_user_ = p;
  }
  return db_user_;
}
inline ::smart3dmap::v1::DBUser* Database::mutable_db_user() {
  // @@protoc_insertion_point(field_mutable:smart3dmap.v1.Database.db_user)
  return _internal_mutable_db_user();
}
inline void Database::set_allocated_db_user(::smart3dmap::v1::DBUser* db_user) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete db_user_;
  }
  if (db_user) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(db_user);
    if (message_arena != submessage_arena) {
      db_user = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, db_user, submessage_arena);
    }
    
  } else {
    
  }
  db_user_ = db_user;
  // @@protoc_insertion_point(field_set_allocated:smart3dmap.v1.Database.db_user)
}

// string version = 9;
inline void Database::clear_version() {
  version_.ClearToEmpty();
}
inline const std::string& Database::version() const {
  // @@protoc_insertion_point(field_get:smart3dmap.v1.Database.version)
  return _internal_version();
}
inline void Database::set_version(const std::string& value) {
  _internal_set_version(value);
  // @@protoc_insertion_point(field_set:smart3dmap.v1.Database.version)
}
inline std::string* Database::mutable_version() {
  // @@protoc_insertion_point(field_mutable:smart3dmap.v1.Database.version)
  return _internal_mutable_version();
}
inline const std::string& Database::_internal_version() const {
  return version_.Get();
}
inline void Database::_internal_set_version(const std::string& value) {
  
  version_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArena());
}
inline void Database::set_version(std::string&& value) {
  
  version_.Set(
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:smart3dmap.v1.Database.version)
}
inline void Database::set_version(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  version_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(value), GetArena());
  // @@protoc_insertion_point(field_set_char:smart3dmap.v1.Database.version)
}
inline void Database::set_version(const char* value,
    size_t size) {
  
  version_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:smart3dmap.v1.Database.version)
}
inline std::string* Database::_internal_mutable_version() {
  
  return version_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArena());
}
inline std::string* Database::release_version() {
  // @@protoc_insertion_point(field_release:smart3dmap.v1.Database.version)
  return version_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void Database::set_allocated_version(std::string* version) {
  if (version != nullptr) {
    
  } else {
    
  }
  version_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), version,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:smart3dmap.v1.Database.version)
}

// .google.protobuf.Timestamp created_at = 10;
inline bool Database::_internal_has_created_at() const {
  return this != internal_default_instance() && created_at_ != nullptr;
}
inline bool Database::has_created_at() const {
  return _internal_has_created_at();
}
inline const PROTOBUF_NAMESPACE_ID::Timestamp& Database::_internal_created_at() const {
  const PROTOBUF_NAMESPACE_ID::Timestamp* p = created_at_;
  return p != nullptr ? *p : reinterpret_cast<const PROTOBUF_NAMESPACE_ID::Timestamp&>(
      PROTOBUF_NAMESPACE_ID::_Timestamp_default_instance_);
}
inline const PROTOBUF_NAMESPACE_ID::Timestamp& Database::created_at() const {
  // @@protoc_insertion_point(field_get:smart3dmap.v1.Database.created_at)
  return _internal_created_at();
}
inline void Database::unsafe_arena_set_allocated_created_at(
    PROTOBUF_NAMESPACE_ID::Timestamp* created_at) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(created_at_);
  }
  created_at_ = created_at;
  if (created_at) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:smart3dmap.v1.Database.created_at)
}
inline PROTOBUF_NAMESPACE_ID::Timestamp* Database::release_created_at() {
  
  PROTOBUF_NAMESPACE_ID::Timestamp* temp = created_at_;
  created_at_ = nullptr;
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline PROTOBUF_NAMESPACE_ID::Timestamp* Database::unsafe_arena_release_created_at() {
  // @@protoc_insertion_point(field_release:smart3dmap.v1.Database.created_at)
  
  PROTOBUF_NAMESPACE_ID::Timestamp* temp = created_at_;
  created_at_ = nullptr;
  return temp;
}
inline PROTOBUF_NAMESPACE_ID::Timestamp* Database::_internal_mutable_created_at() {
  
  if (created_at_ == nullptr) {
    auto* p = CreateMaybeMessage<PROTOBUF_NAMESPACE_ID::Timestamp>(GetArena());
    created_at_ = p;
  }
  return created_at_;
}
inline PROTOBUF_NAMESPACE_ID::Timestamp* Database::mutable_created_at() {
  // @@protoc_insertion_point(field_mutable:smart3dmap.v1.Database.created_at)
  return _internal_mutable_created_at();
}
inline void Database::set_allocated_created_at(PROTOBUF_NAMESPACE_ID::Timestamp* created_at) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(created_at_);
  }
  if (created_at) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(created_at)->GetArena();
    if (message_arena != submessage_arena) {
      created_at = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, created_at, submessage_arena);
    }
    
  } else {
    
  }
  created_at_ = created_at;
  // @@protoc_insertion_point(field_set_allocated:smart3dmap.v1.Database.created_at)
}

// .google.protobuf.Timestamp updated_at = 11;
inline bool Database::_internal_has_updated_at() const {
  return this != internal_default_instance() && updated_at_ != nullptr;
}
inline bool Database::has_updated_at() const {
  return _internal_has_updated_at();
}
inline const PROTOBUF_NAMESPACE_ID::Timestamp& Database::_internal_updated_at() const {
  const PROTOBUF_NAMESPACE_ID::Timestamp* p = updated_at_;
  return p != nullptr ? *p : reinterpret_cast<const PROTOBUF_NAMESPACE_ID::Timestamp&>(
      PROTOBUF_NAMESPACE_ID::_Timestamp_default_instance_);
}
inline const PROTOBUF_NAMESPACE_ID::Timestamp& Database::updated_at() const {
  // @@protoc_insertion_point(field_get:smart3dmap.v1.Database.updated_at)
  return _internal_updated_at();
}
inline void Database::unsafe_arena_set_allocated_updated_at(
    PROTOBUF_NAMESPACE_ID::Timestamp* updated_at) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(updated_at_);
  }
  updated_at_ = updated_at;
  if (updated_at) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:smart3dmap.v1.Database.updated_at)
}
inline PROTOBUF_NAMESPACE_ID::Timestamp* Database::release_updated_at() {
  
  PROTOBUF_NAMESPACE_ID::Timestamp* temp = updated_at_;
  updated_at_ = nullptr;
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline PROTOBUF_NAMESPACE_ID::Timestamp* Database::unsafe_arena_release_updated_at() {
  // @@protoc_insertion_point(field_release:smart3dmap.v1.Database.updated_at)
  
  PROTOBUF_NAMESPACE_ID::Timestamp* temp = updated_at_;
  updated_at_ = nullptr;
  return temp;
}
inline PROTOBUF_NAMESPACE_ID::Timestamp* Database::_internal_mutable_updated_at() {
  
  if (updated_at_ == nullptr) {
    auto* p = CreateMaybeMessage<PROTOBUF_NAMESPACE_ID::Timestamp>(GetArena());
    updated_at_ = p;
  }
  return updated_at_;
}
inline PROTOBUF_NAMESPACE_ID::Timestamp* Database::mutable_updated_at() {
  // @@protoc_insertion_point(field_mutable:smart3dmap.v1.Database.updated_at)
  return _internal_mutable_updated_at();
}
inline void Database::set_allocated_updated_at(PROTOBUF_NAMESPACE_ID::Timestamp* updated_at) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(updated_at_);
  }
  if (updated_at) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(updated_at)->GetArena();
    if (message_arena != submessage_arena) {
      updated_at = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, updated_at, submessage_arena);
    }
    
  } else {
    
  }
  updated_at_ = updated_at;
  // @@protoc_insertion_point(field_set_allocated:smart3dmap.v1.Database.updated_at)
}

// .smart3dmap.v1.DBAppType app_type = 12;
inline void Database::clear_app_type() {
  app_type_ = 0;
}
inline ::smart3dmap::v1::DBAppType Database::_internal_app_type() const {
  return static_cast< ::smart3dmap::v1::DBAppType >(app_type_);
}
inline ::smart3dmap::v1::DBAppType Database::app_type() const {
  // @@protoc_insertion_point(field_get:smart3dmap.v1.Database.app_type)
  return _internal_app_type();
}
inline void Database::_internal_set_app_type(::smart3dmap::v1::DBAppType value) {
  
  app_type_ = value;
}
inline void Database::set_app_type(::smart3dmap::v1::DBAppType value) {
  _internal_set_app_type(value);
  // @@protoc_insertion_point(field_set:smart3dmap.v1.Database.app_type)
}

// string db_inner_host = 13;
inline void Database::clear_db_inner_host() {
  db_inner_host_.ClearToEmpty();
}
inline const std::string& Database::db_inner_host() const {
  // @@protoc_insertion_point(field_get:smart3dmap.v1.Database.db_inner_host)
  return _internal_db_inner_host();
}
inline void Database::set_db_inner_host(const std::string& value) {
  _internal_set_db_inner_host(value);
  // @@protoc_insertion_point(field_set:smart3dmap.v1.Database.db_inner_host)
}
inline std::string* Database::mutable_db_inner_host() {
  // @@protoc_insertion_point(field_mutable:smart3dmap.v1.Database.db_inner_host)
  return _internal_mutable_db_inner_host();
}
inline const std::string& Database::_internal_db_inner_host() const {
  return db_inner_host_.Get();
}
inline void Database::_internal_set_db_inner_host(const std::string& value) {
  
  db_inner_host_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArena());
}
inline void Database::set_db_inner_host(std::string&& value) {
  
  db_inner_host_.Set(
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:smart3dmap.v1.Database.db_inner_host)
}
inline void Database::set_db_inner_host(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  db_inner_host_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(value), GetArena());
  // @@protoc_insertion_point(field_set_char:smart3dmap.v1.Database.db_inner_host)
}
inline void Database::set_db_inner_host(const char* value,
    size_t size) {
  
  db_inner_host_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:smart3dmap.v1.Database.db_inner_host)
}
inline std::string* Database::_internal_mutable_db_inner_host() {
  
  return db_inner_host_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArena());
}
inline std::string* Database::release_db_inner_host() {
  // @@protoc_insertion_point(field_release:smart3dmap.v1.Database.db_inner_host)
  return db_inner_host_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void Database::set_allocated_db_inner_host(std::string* db_inner_host) {
  if (db_inner_host != nullptr) {
    
  } else {
    
  }
  db_inner_host_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), db_inner_host,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:smart3dmap.v1.Database.db_inner_host)
}

// -------------------------------------------------------------------

// ListProjectsRequest

// .smart3dmap.v1.Pagination pagination = 1;
inline bool ListProjectsRequest::_internal_has_pagination() const {
  return this != internal_default_instance() && pagination_ != nullptr;
}
inline bool ListProjectsRequest::has_pagination() const {
  return _internal_has_pagination();
}
inline const ::smart3dmap::v1::Pagination& ListProjectsRequest::_internal_pagination() const {
  const ::smart3dmap::v1::Pagination* p = pagination_;
  return p != nullptr ? *p : reinterpret_cast<const ::smart3dmap::v1::Pagination&>(
      ::smart3dmap::v1::_Pagination_default_instance_);
}
inline const ::smart3dmap::v1::Pagination& ListProjectsRequest::pagination() const {
  // @@protoc_insertion_point(field_get:smart3dmap.v1.ListProjectsRequest.pagination)
  return _internal_pagination();
}
inline void ListProjectsRequest::unsafe_arena_set_allocated_pagination(
    ::smart3dmap::v1::Pagination* pagination) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(pagination_);
  }
  pagination_ = pagination;
  if (pagination) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:smart3dmap.v1.ListProjectsRequest.pagination)
}
inline ::smart3dmap::v1::Pagination* ListProjectsRequest::release_pagination() {
  
  ::smart3dmap::v1::Pagination* temp = pagination_;
  pagination_ = nullptr;
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::smart3dmap::v1::Pagination* ListProjectsRequest::unsafe_arena_release_pagination() {
  // @@protoc_insertion_point(field_release:smart3dmap.v1.ListProjectsRequest.pagination)
  
  ::smart3dmap::v1::Pagination* temp = pagination_;
  pagination_ = nullptr;
  return temp;
}
inline ::smart3dmap::v1::Pagination* ListProjectsRequest::_internal_mutable_pagination() {
  
  if (pagination_ == nullptr) {
    auto* p = CreateMaybeMessage<::smart3dmap::v1::Pagination>(GetArena());
    pagination_ = p;
  }
  return pagination_;
}
inline ::smart3dmap::v1::Pagination* ListProjectsRequest::mutable_pagination() {
  // @@protoc_insertion_point(field_mutable:smart3dmap.v1.ListProjectsRequest.pagination)
  return _internal_mutable_pagination();
}
inline void ListProjectsRequest::set_allocated_pagination(::smart3dmap::v1::Pagination* pagination) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(pagination_);
  }
  if (pagination) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(pagination)->GetArena();
    if (message_arena != submessage_arena) {
      pagination = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, pagination, submessage_arena);
    }
    
  } else {
    
  }
  pagination_ = pagination;
  // @@protoc_insertion_point(field_set_allocated:smart3dmap.v1.ListProjectsRequest.pagination)
}

// string name = 2;
inline void ListProjectsRequest::clear_name() {
  name_.ClearToEmpty();
}
inline const std::string& ListProjectsRequest::name() const {
  // @@protoc_insertion_point(field_get:smart3dmap.v1.ListProjectsRequest.name)
  return _internal_name();
}
inline void ListProjectsRequest::set_name(const std::string& value) {
  _internal_set_name(value);
  // @@protoc_insertion_point(field_set:smart3dmap.v1.ListProjectsRequest.name)
}
inline std::string* ListProjectsRequest::mutable_name() {
  // @@protoc_insertion_point(field_mutable:smart3dmap.v1.ListProjectsRequest.name)
  return _internal_mutable_name();
}
inline const std::string& ListProjectsRequest::_internal_name() const {
  return name_.Get();
}
inline void ListProjectsRequest::_internal_set_name(const std::string& value) {
  
  name_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArena());
}
inline void ListProjectsRequest::set_name(std::string&& value) {
  
  name_.Set(
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:smart3dmap.v1.ListProjectsRequest.name)
}
inline void ListProjectsRequest::set_name(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  name_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(value), GetArena());
  // @@protoc_insertion_point(field_set_char:smart3dmap.v1.ListProjectsRequest.name)
}
inline void ListProjectsRequest::set_name(const char* value,
    size_t size) {
  
  name_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:smart3dmap.v1.ListProjectsRequest.name)
}
inline std::string* ListProjectsRequest::_internal_mutable_name() {
  
  return name_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArena());
}
inline std::string* ListProjectsRequest::release_name() {
  // @@protoc_insertion_point(field_release:smart3dmap.v1.ListProjectsRequest.name)
  return name_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void ListProjectsRequest::set_allocated_name(std::string* name) {
  if (name != nullptr) {
    
  } else {
    
  }
  name_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), name,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:smart3dmap.v1.ListProjectsRequest.name)
}

// -------------------------------------------------------------------

// ListProjectsResponse

// repeated .smart3dmap.v1.BasicProject projects = 1;
inline int ListProjectsResponse::_internal_projects_size() const {
  return projects_.size();
}
inline int ListProjectsResponse::projects_size() const {
  return _internal_projects_size();
}
inline void ListProjectsResponse::clear_projects() {
  projects_.Clear();
}
inline ::smart3dmap::v1::BasicProject* ListProjectsResponse::mutable_projects(int index) {
  // @@protoc_insertion_point(field_mutable:smart3dmap.v1.ListProjectsResponse.projects)
  return projects_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::smart3dmap::v1::BasicProject >*
ListProjectsResponse::mutable_projects() {
  // @@protoc_insertion_point(field_mutable_list:smart3dmap.v1.ListProjectsResponse.projects)
  return &projects_;
}
inline const ::smart3dmap::v1::BasicProject& ListProjectsResponse::_internal_projects(int index) const {
  return projects_.Get(index);
}
inline const ::smart3dmap::v1::BasicProject& ListProjectsResponse::projects(int index) const {
  // @@protoc_insertion_point(field_get:smart3dmap.v1.ListProjectsResponse.projects)
  return _internal_projects(index);
}
inline ::smart3dmap::v1::BasicProject* ListProjectsResponse::_internal_add_projects() {
  return projects_.Add();
}
inline ::smart3dmap::v1::BasicProject* ListProjectsResponse::add_projects() {
  // @@protoc_insertion_point(field_add:smart3dmap.v1.ListProjectsResponse.projects)
  return _internal_add_projects();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::smart3dmap::v1::BasicProject >&
ListProjectsResponse::projects() const {
  // @@protoc_insertion_point(field_list:smart3dmap.v1.ListProjectsResponse.projects)
  return projects_;
}

// int32 total_count = 2;
inline void ListProjectsResponse::clear_total_count() {
  total_count_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 ListProjectsResponse::_internal_total_count() const {
  return total_count_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 ListProjectsResponse::total_count() const {
  // @@protoc_insertion_point(field_get:smart3dmap.v1.ListProjectsResponse.total_count)
  return _internal_total_count();
}
inline void ListProjectsResponse::_internal_set_total_count(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  total_count_ = value;
}
inline void ListProjectsResponse::set_total_count(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_total_count(value);
  // @@protoc_insertion_point(field_set:smart3dmap.v1.ListProjectsResponse.total_count)
}

// -------------------------------------------------------------------

// CreateProjectRequest

// string name = 1;
inline void CreateProjectRequest::clear_name() {
  name_.ClearToEmpty();
}
inline const std::string& CreateProjectRequest::name() const {
  // @@protoc_insertion_point(field_get:smart3dmap.v1.CreateProjectRequest.name)
  return _internal_name();
}
inline void CreateProjectRequest::set_name(const std::string& value) {
  _internal_set_name(value);
  // @@protoc_insertion_point(field_set:smart3dmap.v1.CreateProjectRequest.name)
}
inline std::string* CreateProjectRequest::mutable_name() {
  // @@protoc_insertion_point(field_mutable:smart3dmap.v1.CreateProjectRequest.name)
  return _internal_mutable_name();
}
inline const std::string& CreateProjectRequest::_internal_name() const {
  return name_.Get();
}
inline void CreateProjectRequest::_internal_set_name(const std::string& value) {
  
  name_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArena());
}
inline void CreateProjectRequest::set_name(std::string&& value) {
  
  name_.Set(
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:smart3dmap.v1.CreateProjectRequest.name)
}
inline void CreateProjectRequest::set_name(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  name_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(value), GetArena());
  // @@protoc_insertion_point(field_set_char:smart3dmap.v1.CreateProjectRequest.name)
}
inline void CreateProjectRequest::set_name(const char* value,
    size_t size) {
  
  name_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:smart3dmap.v1.CreateProjectRequest.name)
}
inline std::string* CreateProjectRequest::_internal_mutable_name() {
  
  return name_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArena());
}
inline std::string* CreateProjectRequest::release_name() {
  // @@protoc_insertion_point(field_release:smart3dmap.v1.CreateProjectRequest.name)
  return name_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void CreateProjectRequest::set_allocated_name(std::string* name) {
  if (name != nullptr) {
    
  } else {
    
  }
  name_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), name,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:smart3dmap.v1.CreateProjectRequest.name)
}

// .google.protobuf.StringValue authors = 2;
inline bool CreateProjectRequest::_internal_has_authors() const {
  return this != internal_default_instance() && authors_ != nullptr;
}
inline bool CreateProjectRequest::has_authors() const {
  return _internal_has_authors();
}
inline const PROTOBUF_NAMESPACE_ID::StringValue& CreateProjectRequest::_internal_authors() const {
  const PROTOBUF_NAMESPACE_ID::StringValue* p = authors_;
  return p != nullptr ? *p : reinterpret_cast<const PROTOBUF_NAMESPACE_ID::StringValue&>(
      PROTOBUF_NAMESPACE_ID::_StringValue_default_instance_);
}
inline const PROTOBUF_NAMESPACE_ID::StringValue& CreateProjectRequest::authors() const {
  // @@protoc_insertion_point(field_get:smart3dmap.v1.CreateProjectRequest.authors)
  return _internal_authors();
}
inline void CreateProjectRequest::unsafe_arena_set_allocated_authors(
    PROTOBUF_NAMESPACE_ID::StringValue* authors) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(authors_);
  }
  authors_ = authors;
  if (authors) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:smart3dmap.v1.CreateProjectRequest.authors)
}
inline PROTOBUF_NAMESPACE_ID::StringValue* CreateProjectRequest::release_authors() {
  
  PROTOBUF_NAMESPACE_ID::StringValue* temp = authors_;
  authors_ = nullptr;
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline PROTOBUF_NAMESPACE_ID::StringValue* CreateProjectRequest::unsafe_arena_release_authors() {
  // @@protoc_insertion_point(field_release:smart3dmap.v1.CreateProjectRequest.authors)
  
  PROTOBUF_NAMESPACE_ID::StringValue* temp = authors_;
  authors_ = nullptr;
  return temp;
}
inline PROTOBUF_NAMESPACE_ID::StringValue* CreateProjectRequest::_internal_mutable_authors() {
  
  if (authors_ == nullptr) {
    auto* p = CreateMaybeMessage<PROTOBUF_NAMESPACE_ID::StringValue>(GetArena());
    authors_ = p;
  }
  return authors_;
}
inline PROTOBUF_NAMESPACE_ID::StringValue* CreateProjectRequest::mutable_authors() {
  // @@protoc_insertion_point(field_mutable:smart3dmap.v1.CreateProjectRequest.authors)
  return _internal_mutable_authors();
}
inline void CreateProjectRequest::set_allocated_authors(PROTOBUF_NAMESPACE_ID::StringValue* authors) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(authors_);
  }
  if (authors) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(authors)->GetArena();
    if (message_arena != submessage_arena) {
      authors = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, authors, submessage_arena);
    }
    
  } else {
    
  }
  authors_ = authors;
  // @@protoc_insertion_point(field_set_allocated:smart3dmap.v1.CreateProjectRequest.authors)
}

// .google.protobuf.StringValue description = 3;
inline bool CreateProjectRequest::_internal_has_description() const {
  return this != internal_default_instance() && description_ != nullptr;
}
inline bool CreateProjectRequest::has_description() const {
  return _internal_has_description();
}
inline const PROTOBUF_NAMESPACE_ID::StringValue& CreateProjectRequest::_internal_description() const {
  const PROTOBUF_NAMESPACE_ID::StringValue* p = description_;
  return p != nullptr ? *p : reinterpret_cast<const PROTOBUF_NAMESPACE_ID::StringValue&>(
      PROTOBUF_NAMESPACE_ID::_StringValue_default_instance_);
}
inline const PROTOBUF_NAMESPACE_ID::StringValue& CreateProjectRequest::description() const {
  // @@protoc_insertion_point(field_get:smart3dmap.v1.CreateProjectRequest.description)
  return _internal_description();
}
inline void CreateProjectRequest::unsafe_arena_set_allocated_description(
    PROTOBUF_NAMESPACE_ID::StringValue* description) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(description_);
  }
  description_ = description;
  if (description) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:smart3dmap.v1.CreateProjectRequest.description)
}
inline PROTOBUF_NAMESPACE_ID::StringValue* CreateProjectRequest::release_description() {
  
  PROTOBUF_NAMESPACE_ID::StringValue* temp = description_;
  description_ = nullptr;
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline PROTOBUF_NAMESPACE_ID::StringValue* CreateProjectRequest::unsafe_arena_release_description() {
  // @@protoc_insertion_point(field_release:smart3dmap.v1.CreateProjectRequest.description)
  
  PROTOBUF_NAMESPACE_ID::StringValue* temp = description_;
  description_ = nullptr;
  return temp;
}
inline PROTOBUF_NAMESPACE_ID::StringValue* CreateProjectRequest::_internal_mutable_description() {
  
  if (description_ == nullptr) {
    auto* p = CreateMaybeMessage<PROTOBUF_NAMESPACE_ID::StringValue>(GetArena());
    description_ = p;
  }
  return description_;
}
inline PROTOBUF_NAMESPACE_ID::StringValue* CreateProjectRequest::mutable_description() {
  // @@protoc_insertion_point(field_mutable:smart3dmap.v1.CreateProjectRequest.description)
  return _internal_mutable_description();
}
inline void CreateProjectRequest::set_allocated_description(PROTOBUF_NAMESPACE_ID::StringValue* description) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(description_);
  }
  if (description) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(description)->GetArena();
    if (message_arena != submessage_arena) {
      description = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, description, submessage_arena);
    }
    
  } else {
    
  }
  description_ = description;
  // @@protoc_insertion_point(field_set_allocated:smart3dmap.v1.CreateProjectRequest.description)
}

// .google.protobuf.StringValue crs = 4;
inline bool CreateProjectRequest::_internal_has_crs() const {
  return this != internal_default_instance() && crs_ != nullptr;
}
inline bool CreateProjectRequest::has_crs() const {
  return _internal_has_crs();
}
inline const PROTOBUF_NAMESPACE_ID::StringValue& CreateProjectRequest::_internal_crs() const {
  const PROTOBUF_NAMESPACE_ID::StringValue* p = crs_;
  return p != nullptr ? *p : reinterpret_cast<const PROTOBUF_NAMESPACE_ID::StringValue&>(
      PROTOBUF_NAMESPACE_ID::_StringValue_default_instance_);
}
inline const PROTOBUF_NAMESPACE_ID::StringValue& CreateProjectRequest::crs() const {
  // @@protoc_insertion_point(field_get:smart3dmap.v1.CreateProjectRequest.crs)
  return _internal_crs();
}
inline void CreateProjectRequest::unsafe_arena_set_allocated_crs(
    PROTOBUF_NAMESPACE_ID::StringValue* crs) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(crs_);
  }
  crs_ = crs;
  if (crs) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:smart3dmap.v1.CreateProjectRequest.crs)
}
inline PROTOBUF_NAMESPACE_ID::StringValue* CreateProjectRequest::release_crs() {
  
  PROTOBUF_NAMESPACE_ID::StringValue* temp = crs_;
  crs_ = nullptr;
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline PROTOBUF_NAMESPACE_ID::StringValue* CreateProjectRequest::unsafe_arena_release_crs() {
  // @@protoc_insertion_point(field_release:smart3dmap.v1.CreateProjectRequest.crs)
  
  PROTOBUF_NAMESPACE_ID::StringValue* temp = crs_;
  crs_ = nullptr;
  return temp;
}
inline PROTOBUF_NAMESPACE_ID::StringValue* CreateProjectRequest::_internal_mutable_crs() {
  
  if (crs_ == nullptr) {
    auto* p = CreateMaybeMessage<PROTOBUF_NAMESPACE_ID::StringValue>(GetArena());
    crs_ = p;
  }
  return crs_;
}
inline PROTOBUF_NAMESPACE_ID::StringValue* CreateProjectRequest::mutable_crs() {
  // @@protoc_insertion_point(field_mutable:smart3dmap.v1.CreateProjectRequest.crs)
  return _internal_mutable_crs();
}
inline void CreateProjectRequest::set_allocated_crs(PROTOBUF_NAMESPACE_ID::StringValue* crs) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(crs_);
  }
  if (crs) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(crs)->GetArena();
    if (message_arena != submessage_arena) {
      crs = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, crs, submessage_arena);
    }
    
  } else {
    
  }
  crs_ = crs;
  // @@protoc_insertion_point(field_set_allocated:smart3dmap.v1.CreateProjectRequest.crs)
}

// .google.protobuf.StringValue unit = 5;
inline bool CreateProjectRequest::_internal_has_unit() const {
  return this != internal_default_instance() && unit_ != nullptr;
}
inline bool CreateProjectRequest::has_unit() const {
  return _internal_has_unit();
}
inline const PROTOBUF_NAMESPACE_ID::StringValue& CreateProjectRequest::_internal_unit() const {
  const PROTOBUF_NAMESPACE_ID::StringValue* p = unit_;
  return p != nullptr ? *p : reinterpret_cast<const PROTOBUF_NAMESPACE_ID::StringValue&>(
      PROTOBUF_NAMESPACE_ID::_StringValue_default_instance_);
}
inline const PROTOBUF_NAMESPACE_ID::StringValue& CreateProjectRequest::unit() const {
  // @@protoc_insertion_point(field_get:smart3dmap.v1.CreateProjectRequest.unit)
  return _internal_unit();
}
inline void CreateProjectRequest::unsafe_arena_set_allocated_unit(
    PROTOBUF_NAMESPACE_ID::StringValue* unit) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(unit_);
  }
  unit_ = unit;
  if (unit) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:smart3dmap.v1.CreateProjectRequest.unit)
}
inline PROTOBUF_NAMESPACE_ID::StringValue* CreateProjectRequest::release_unit() {
  
  PROTOBUF_NAMESPACE_ID::StringValue* temp = unit_;
  unit_ = nullptr;
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline PROTOBUF_NAMESPACE_ID::StringValue* CreateProjectRequest::unsafe_arena_release_unit() {
  // @@protoc_insertion_point(field_release:smart3dmap.v1.CreateProjectRequest.unit)
  
  PROTOBUF_NAMESPACE_ID::StringValue* temp = unit_;
  unit_ = nullptr;
  return temp;
}
inline PROTOBUF_NAMESPACE_ID::StringValue* CreateProjectRequest::_internal_mutable_unit() {
  
  if (unit_ == nullptr) {
    auto* p = CreateMaybeMessage<PROTOBUF_NAMESPACE_ID::StringValue>(GetArena());
    unit_ = p;
  }
  return unit_;
}
inline PROTOBUF_NAMESPACE_ID::StringValue* CreateProjectRequest::mutable_unit() {
  // @@protoc_insertion_point(field_mutable:smart3dmap.v1.CreateProjectRequest.unit)
  return _internal_mutable_unit();
}
inline void CreateProjectRequest::set_allocated_unit(PROTOBUF_NAMESPACE_ID::StringValue* unit) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(unit_);
  }
  if (unit) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(unit)->GetArena();
    if (message_arena != submessage_arena) {
      unit = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, unit, submessage_arena);
    }
    
  } else {
    
  }
  unit_ = unit;
  // @@protoc_insertion_point(field_set_allocated:smart3dmap.v1.CreateProjectRequest.unit)
}

// .google.protobuf.DoubleValue min_x = 6;
inline bool CreateProjectRequest::_internal_has_min_x() const {
  return this != internal_default_instance() && min_x_ != nullptr;
}
inline bool CreateProjectRequest::has_min_x() const {
  return _internal_has_min_x();
}
inline const PROTOBUF_NAMESPACE_ID::DoubleValue& CreateProjectRequest::_internal_min_x() const {
  const PROTOBUF_NAMESPACE_ID::DoubleValue* p = min_x_;
  return p != nullptr ? *p : reinterpret_cast<const PROTOBUF_NAMESPACE_ID::DoubleValue&>(
      PROTOBUF_NAMESPACE_ID::_DoubleValue_default_instance_);
}
inline const PROTOBUF_NAMESPACE_ID::DoubleValue& CreateProjectRequest::min_x() const {
  // @@protoc_insertion_point(field_get:smart3dmap.v1.CreateProjectRequest.min_x)
  return _internal_min_x();
}
inline void CreateProjectRequest::unsafe_arena_set_allocated_min_x(
    PROTOBUF_NAMESPACE_ID::DoubleValue* min_x) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(min_x_);
  }
  min_x_ = min_x;
  if (min_x) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:smart3dmap.v1.CreateProjectRequest.min_x)
}
inline PROTOBUF_NAMESPACE_ID::DoubleValue* CreateProjectRequest::release_min_x() {
  
  PROTOBUF_NAMESPACE_ID::DoubleValue* temp = min_x_;
  min_x_ = nullptr;
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline PROTOBUF_NAMESPACE_ID::DoubleValue* CreateProjectRequest::unsafe_arena_release_min_x() {
  // @@protoc_insertion_point(field_release:smart3dmap.v1.CreateProjectRequest.min_x)
  
  PROTOBUF_NAMESPACE_ID::DoubleValue* temp = min_x_;
  min_x_ = nullptr;
  return temp;
}
inline PROTOBUF_NAMESPACE_ID::DoubleValue* CreateProjectRequest::_internal_mutable_min_x() {
  
  if (min_x_ == nullptr) {
    auto* p = CreateMaybeMessage<PROTOBUF_NAMESPACE_ID::DoubleValue>(GetArena());
    min_x_ = p;
  }
  return min_x_;
}
inline PROTOBUF_NAMESPACE_ID::DoubleValue* CreateProjectRequest::mutable_min_x() {
  // @@protoc_insertion_point(field_mutable:smart3dmap.v1.CreateProjectRequest.min_x)
  return _internal_mutable_min_x();
}
inline void CreateProjectRequest::set_allocated_min_x(PROTOBUF_NAMESPACE_ID::DoubleValue* min_x) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(min_x_);
  }
  if (min_x) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(min_x)->GetArena();
    if (message_arena != submessage_arena) {
      min_x = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, min_x, submessage_arena);
    }
    
  } else {
    
  }
  min_x_ = min_x;
  // @@protoc_insertion_point(field_set_allocated:smart3dmap.v1.CreateProjectRequest.min_x)
}

// .google.protobuf.DoubleValue min_y = 7;
inline bool CreateProjectRequest::_internal_has_min_y() const {
  return this != internal_default_instance() && min_y_ != nullptr;
}
inline bool CreateProjectRequest::has_min_y() const {
  return _internal_has_min_y();
}
inline const PROTOBUF_NAMESPACE_ID::DoubleValue& CreateProjectRequest::_internal_min_y() const {
  const PROTOBUF_NAMESPACE_ID::DoubleValue* p = min_y_;
  return p != nullptr ? *p : reinterpret_cast<const PROTOBUF_NAMESPACE_ID::DoubleValue&>(
      PROTOBUF_NAMESPACE_ID::_DoubleValue_default_instance_);
}
inline const PROTOBUF_NAMESPACE_ID::DoubleValue& CreateProjectRequest::min_y() const {
  // @@protoc_insertion_point(field_get:smart3dmap.v1.CreateProjectRequest.min_y)
  return _internal_min_y();
}
inline void CreateProjectRequest::unsafe_arena_set_allocated_min_y(
    PROTOBUF_NAMESPACE_ID::DoubleValue* min_y) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(min_y_);
  }
  min_y_ = min_y;
  if (min_y) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:smart3dmap.v1.CreateProjectRequest.min_y)
}
inline PROTOBUF_NAMESPACE_ID::DoubleValue* CreateProjectRequest::release_min_y() {
  
  PROTOBUF_NAMESPACE_ID::DoubleValue* temp = min_y_;
  min_y_ = nullptr;
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline PROTOBUF_NAMESPACE_ID::DoubleValue* CreateProjectRequest::unsafe_arena_release_min_y() {
  // @@protoc_insertion_point(field_release:smart3dmap.v1.CreateProjectRequest.min_y)
  
  PROTOBUF_NAMESPACE_ID::DoubleValue* temp = min_y_;
  min_y_ = nullptr;
  return temp;
}
inline PROTOBUF_NAMESPACE_ID::DoubleValue* CreateProjectRequest::_internal_mutable_min_y() {
  
  if (min_y_ == nullptr) {
    auto* p = CreateMaybeMessage<PROTOBUF_NAMESPACE_ID::DoubleValue>(GetArena());
    min_y_ = p;
  }
  return min_y_;
}
inline PROTOBUF_NAMESPACE_ID::DoubleValue* CreateProjectRequest::mutable_min_y() {
  // @@protoc_insertion_point(field_mutable:smart3dmap.v1.CreateProjectRequest.min_y)
  return _internal_mutable_min_y();
}
inline void CreateProjectRequest::set_allocated_min_y(PROTOBUF_NAMESPACE_ID::DoubleValue* min_y) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(min_y_);
  }
  if (min_y) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(min_y)->GetArena();
    if (message_arena != submessage_arena) {
      min_y = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, min_y, submessage_arena);
    }
    
  } else {
    
  }
  min_y_ = min_y;
  // @@protoc_insertion_point(field_set_allocated:smart3dmap.v1.CreateProjectRequest.min_y)
}

// .google.protobuf.DoubleValue min_z = 8;
inline bool CreateProjectRequest::_internal_has_min_z() const {
  return this != internal_default_instance() && min_z_ != nullptr;
}
inline bool CreateProjectRequest::has_min_z() const {
  return _internal_has_min_z();
}
inline const PROTOBUF_NAMESPACE_ID::DoubleValue& CreateProjectRequest::_internal_min_z() const {
  const PROTOBUF_NAMESPACE_ID::DoubleValue* p = min_z_;
  return p != nullptr ? *p : reinterpret_cast<const PROTOBUF_NAMESPACE_ID::DoubleValue&>(
      PROTOBUF_NAMESPACE_ID::_DoubleValue_default_instance_);
}
inline const PROTOBUF_NAMESPACE_ID::DoubleValue& CreateProjectRequest::min_z() const {
  // @@protoc_insertion_point(field_get:smart3dmap.v1.CreateProjectRequest.min_z)
  return _internal_min_z();
}
inline void CreateProjectRequest::unsafe_arena_set_allocated_min_z(
    PROTOBUF_NAMESPACE_ID::DoubleValue* min_z) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(min_z_);
  }
  min_z_ = min_z;
  if (min_z) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:smart3dmap.v1.CreateProjectRequest.min_z)
}
inline PROTOBUF_NAMESPACE_ID::DoubleValue* CreateProjectRequest::release_min_z() {
  
  PROTOBUF_NAMESPACE_ID::DoubleValue* temp = min_z_;
  min_z_ = nullptr;
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline PROTOBUF_NAMESPACE_ID::DoubleValue* CreateProjectRequest::unsafe_arena_release_min_z() {
  // @@protoc_insertion_point(field_release:smart3dmap.v1.CreateProjectRequest.min_z)
  
  PROTOBUF_NAMESPACE_ID::DoubleValue* temp = min_z_;
  min_z_ = nullptr;
  return temp;
}
inline PROTOBUF_NAMESPACE_ID::DoubleValue* CreateProjectRequest::_internal_mutable_min_z() {
  
  if (min_z_ == nullptr) {
    auto* p = CreateMaybeMessage<PROTOBUF_NAMESPACE_ID::DoubleValue>(GetArena());
    min_z_ = p;
  }
  return min_z_;
}
inline PROTOBUF_NAMESPACE_ID::DoubleValue* CreateProjectRequest::mutable_min_z() {
  // @@protoc_insertion_point(field_mutable:smart3dmap.v1.CreateProjectRequest.min_z)
  return _internal_mutable_min_z();
}
inline void CreateProjectRequest::set_allocated_min_z(PROTOBUF_NAMESPACE_ID::DoubleValue* min_z) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(min_z_);
  }
  if (min_z) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(min_z)->GetArena();
    if (message_arena != submessage_arena) {
      min_z = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, min_z, submessage_arena);
    }
    
  } else {
    
  }
  min_z_ = min_z;
  // @@protoc_insertion_point(field_set_allocated:smart3dmap.v1.CreateProjectRequest.min_z)
}

// .google.protobuf.DoubleValue max_x = 9;
inline bool CreateProjectRequest::_internal_has_max_x() const {
  return this != internal_default_instance() && max_x_ != nullptr;
}
inline bool CreateProjectRequest::has_max_x() const {
  return _internal_has_max_x();
}
inline const PROTOBUF_NAMESPACE_ID::DoubleValue& CreateProjectRequest::_internal_max_x() const {
  const PROTOBUF_NAMESPACE_ID::DoubleValue* p = max_x_;
  return p != nullptr ? *p : reinterpret_cast<const PROTOBUF_NAMESPACE_ID::DoubleValue&>(
      PROTOBUF_NAMESPACE_ID::_DoubleValue_default_instance_);
}
inline const PROTOBUF_NAMESPACE_ID::DoubleValue& CreateProjectRequest::max_x() const {
  // @@protoc_insertion_point(field_get:smart3dmap.v1.CreateProjectRequest.max_x)
  return _internal_max_x();
}
inline void CreateProjectRequest::unsafe_arena_set_allocated_max_x(
    PROTOBUF_NAMESPACE_ID::DoubleValue* max_x) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(max_x_);
  }
  max_x_ = max_x;
  if (max_x) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:smart3dmap.v1.CreateProjectRequest.max_x)
}
inline PROTOBUF_NAMESPACE_ID::DoubleValue* CreateProjectRequest::release_max_x() {
  
  PROTOBUF_NAMESPACE_ID::DoubleValue* temp = max_x_;
  max_x_ = nullptr;
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline PROTOBUF_NAMESPACE_ID::DoubleValue* CreateProjectRequest::unsafe_arena_release_max_x() {
  // @@protoc_insertion_point(field_release:smart3dmap.v1.CreateProjectRequest.max_x)
  
  PROTOBUF_NAMESPACE_ID::DoubleValue* temp = max_x_;
  max_x_ = nullptr;
  return temp;
}
inline PROTOBUF_NAMESPACE_ID::DoubleValue* CreateProjectRequest::_internal_mutable_max_x() {
  
  if (max_x_ == nullptr) {
    auto* p = CreateMaybeMessage<PROTOBUF_NAMESPACE_ID::DoubleValue>(GetArena());
    max_x_ = p;
  }
  return max_x_;
}
inline PROTOBUF_NAMESPACE_ID::DoubleValue* CreateProjectRequest::mutable_max_x() {
  // @@protoc_insertion_point(field_mutable:smart3dmap.v1.CreateProjectRequest.max_x)
  return _internal_mutable_max_x();
}
inline void CreateProjectRequest::set_allocated_max_x(PROTOBUF_NAMESPACE_ID::DoubleValue* max_x) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(max_x_);
  }
  if (max_x) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(max_x)->GetArena();
    if (message_arena != submessage_arena) {
      max_x = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, max_x, submessage_arena);
    }
    
  } else {
    
  }
  max_x_ = max_x;
  // @@protoc_insertion_point(field_set_allocated:smart3dmap.v1.CreateProjectRequest.max_x)
}

// .google.protobuf.DoubleValue max_y = 10;
inline bool CreateProjectRequest::_internal_has_max_y() const {
  return this != internal_default_instance() && max_y_ != nullptr;
}
inline bool CreateProjectRequest::has_max_y() const {
  return _internal_has_max_y();
}
inline const PROTOBUF_NAMESPACE_ID::DoubleValue& CreateProjectRequest::_internal_max_y() const {
  const PROTOBUF_NAMESPACE_ID::DoubleValue* p = max_y_;
  return p != nullptr ? *p : reinterpret_cast<const PROTOBUF_NAMESPACE_ID::DoubleValue&>(
      PROTOBUF_NAMESPACE_ID::_DoubleValue_default_instance_);
}
inline const PROTOBUF_NAMESPACE_ID::DoubleValue& CreateProjectRequest::max_y() const {
  // @@protoc_insertion_point(field_get:smart3dmap.v1.CreateProjectRequest.max_y)
  return _internal_max_y();
}
inline void CreateProjectRequest::unsafe_arena_set_allocated_max_y(
    PROTOBUF_NAMESPACE_ID::DoubleValue* max_y) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(max_y_);
  }
  max_y_ = max_y;
  if (max_y) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:smart3dmap.v1.CreateProjectRequest.max_y)
}
inline PROTOBUF_NAMESPACE_ID::DoubleValue* CreateProjectRequest::release_max_y() {
  
  PROTOBUF_NAMESPACE_ID::DoubleValue* temp = max_y_;
  max_y_ = nullptr;
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline PROTOBUF_NAMESPACE_ID::DoubleValue* CreateProjectRequest::unsafe_arena_release_max_y() {
  // @@protoc_insertion_point(field_release:smart3dmap.v1.CreateProjectRequest.max_y)
  
  PROTOBUF_NAMESPACE_ID::DoubleValue* temp = max_y_;
  max_y_ = nullptr;
  return temp;
}
inline PROTOBUF_NAMESPACE_ID::DoubleValue* CreateProjectRequest::_internal_mutable_max_y() {
  
  if (max_y_ == nullptr) {
    auto* p = CreateMaybeMessage<PROTOBUF_NAMESPACE_ID::DoubleValue>(GetArena());
    max_y_ = p;
  }
  return max_y_;
}
inline PROTOBUF_NAMESPACE_ID::DoubleValue* CreateProjectRequest::mutable_max_y() {
  // @@protoc_insertion_point(field_mutable:smart3dmap.v1.CreateProjectRequest.max_y)
  return _internal_mutable_max_y();
}
inline void CreateProjectRequest::set_allocated_max_y(PROTOBUF_NAMESPACE_ID::DoubleValue* max_y) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(max_y_);
  }
  if (max_y) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(max_y)->GetArena();
    if (message_arena != submessage_arena) {
      max_y = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, max_y, submessage_arena);
    }
    
  } else {
    
  }
  max_y_ = max_y;
  // @@protoc_insertion_point(field_set_allocated:smart3dmap.v1.CreateProjectRequest.max_y)
}

// .google.protobuf.DoubleValue max_z = 11;
inline bool CreateProjectRequest::_internal_has_max_z() const {
  return this != internal_default_instance() && max_z_ != nullptr;
}
inline bool CreateProjectRequest::has_max_z() const {
  return _internal_has_max_z();
}
inline const PROTOBUF_NAMESPACE_ID::DoubleValue& CreateProjectRequest::_internal_max_z() const {
  const PROTOBUF_NAMESPACE_ID::DoubleValue* p = max_z_;
  return p != nullptr ? *p : reinterpret_cast<const PROTOBUF_NAMESPACE_ID::DoubleValue&>(
      PROTOBUF_NAMESPACE_ID::_DoubleValue_default_instance_);
}
inline const PROTOBUF_NAMESPACE_ID::DoubleValue& CreateProjectRequest::max_z() const {
  // @@protoc_insertion_point(field_get:smart3dmap.v1.CreateProjectRequest.max_z)
  return _internal_max_z();
}
inline void CreateProjectRequest::unsafe_arena_set_allocated_max_z(
    PROTOBUF_NAMESPACE_ID::DoubleValue* max_z) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(max_z_);
  }
  max_z_ = max_z;
  if (max_z) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:smart3dmap.v1.CreateProjectRequest.max_z)
}
inline PROTOBUF_NAMESPACE_ID::DoubleValue* CreateProjectRequest::release_max_z() {
  
  PROTOBUF_NAMESPACE_ID::DoubleValue* temp = max_z_;
  max_z_ = nullptr;
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline PROTOBUF_NAMESPACE_ID::DoubleValue* CreateProjectRequest::unsafe_arena_release_max_z() {
  // @@protoc_insertion_point(field_release:smart3dmap.v1.CreateProjectRequest.max_z)
  
  PROTOBUF_NAMESPACE_ID::DoubleValue* temp = max_z_;
  max_z_ = nullptr;
  return temp;
}
inline PROTOBUF_NAMESPACE_ID::DoubleValue* CreateProjectRequest::_internal_mutable_max_z() {
  
  if (max_z_ == nullptr) {
    auto* p = CreateMaybeMessage<PROTOBUF_NAMESPACE_ID::DoubleValue>(GetArena());
    max_z_ = p;
  }
  return max_z_;
}
inline PROTOBUF_NAMESPACE_ID::DoubleValue* CreateProjectRequest::mutable_max_z() {
  // @@protoc_insertion_point(field_mutable:smart3dmap.v1.CreateProjectRequest.max_z)
  return _internal_mutable_max_z();
}
inline void CreateProjectRequest::set_allocated_max_z(PROTOBUF_NAMESPACE_ID::DoubleValue* max_z) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(max_z_);
  }
  if (max_z) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(max_z)->GetArena();
    if (message_arena != submessage_arena) {
      max_z = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, max_z, submessage_arena);
    }
    
  } else {
    
  }
  max_z_ = max_z;
  // @@protoc_insertion_point(field_set_allocated:smart3dmap.v1.CreateProjectRequest.max_z)
}

// .google.protobuf.Int32Value std_strat_version = 12;
inline bool CreateProjectRequest::_internal_has_std_strat_version() const {
  return this != internal_default_instance() && std_strat_version_ != nullptr;
}
inline bool CreateProjectRequest::has_std_strat_version() const {
  return _internal_has_std_strat_version();
}
inline const PROTOBUF_NAMESPACE_ID::Int32Value& CreateProjectRequest::_internal_std_strat_version() const {
  const PROTOBUF_NAMESPACE_ID::Int32Value* p = std_strat_version_;
  return p != nullptr ? *p : reinterpret_cast<const PROTOBUF_NAMESPACE_ID::Int32Value&>(
      PROTOBUF_NAMESPACE_ID::_Int32Value_default_instance_);
}
inline const PROTOBUF_NAMESPACE_ID::Int32Value& CreateProjectRequest::std_strat_version() const {
  // @@protoc_insertion_point(field_get:smart3dmap.v1.CreateProjectRequest.std_strat_version)
  return _internal_std_strat_version();
}
inline void CreateProjectRequest::unsafe_arena_set_allocated_std_strat_version(
    PROTOBUF_NAMESPACE_ID::Int32Value* std_strat_version) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(std_strat_version_);
  }
  std_strat_version_ = std_strat_version;
  if (std_strat_version) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:smart3dmap.v1.CreateProjectRequest.std_strat_version)
}
inline PROTOBUF_NAMESPACE_ID::Int32Value* CreateProjectRequest::release_std_strat_version() {
  
  PROTOBUF_NAMESPACE_ID::Int32Value* temp = std_strat_version_;
  std_strat_version_ = nullptr;
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline PROTOBUF_NAMESPACE_ID::Int32Value* CreateProjectRequest::unsafe_arena_release_std_strat_version() {
  // @@protoc_insertion_point(field_release:smart3dmap.v1.CreateProjectRequest.std_strat_version)
  
  PROTOBUF_NAMESPACE_ID::Int32Value* temp = std_strat_version_;
  std_strat_version_ = nullptr;
  return temp;
}
inline PROTOBUF_NAMESPACE_ID::Int32Value* CreateProjectRequest::_internal_mutable_std_strat_version() {
  
  if (std_strat_version_ == nullptr) {
    auto* p = CreateMaybeMessage<PROTOBUF_NAMESPACE_ID::Int32Value>(GetArena());
    std_strat_version_ = p;
  }
  return std_strat_version_;
}
inline PROTOBUF_NAMESPACE_ID::Int32Value* CreateProjectRequest::mutable_std_strat_version() {
  // @@protoc_insertion_point(field_mutable:smart3dmap.v1.CreateProjectRequest.std_strat_version)
  return _internal_mutable_std_strat_version();
}
inline void CreateProjectRequest::set_allocated_std_strat_version(PROTOBUF_NAMESPACE_ID::Int32Value* std_strat_version) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(std_strat_version_);
  }
  if (std_strat_version) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(std_strat_version)->GetArena();
    if (message_arena != submessage_arena) {
      std_strat_version = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, std_strat_version, submessage_arena);
    }
    
  } else {
    
  }
  std_strat_version_ = std_strat_version;
  // @@protoc_insertion_point(field_set_allocated:smart3dmap.v1.CreateProjectRequest.std_strat_version)
}

// .google.protobuf.StringValue db_info = 13;
inline bool CreateProjectRequest::_internal_has_db_info() const {
  return this != internal_default_instance() && db_info_ != nullptr;
}
inline bool CreateProjectRequest::has_db_info() const {
  return _internal_has_db_info();
}
inline const PROTOBUF_NAMESPACE_ID::StringValue& CreateProjectRequest::_internal_db_info() const {
  const PROTOBUF_NAMESPACE_ID::StringValue* p = db_info_;
  return p != nullptr ? *p : reinterpret_cast<const PROTOBUF_NAMESPACE_ID::StringValue&>(
      PROTOBUF_NAMESPACE_ID::_StringValue_default_instance_);
}
inline const PROTOBUF_NAMESPACE_ID::StringValue& CreateProjectRequest::db_info() const {
  // @@protoc_insertion_point(field_get:smart3dmap.v1.CreateProjectRequest.db_info)
  return _internal_db_info();
}
inline void CreateProjectRequest::unsafe_arena_set_allocated_db_info(
    PROTOBUF_NAMESPACE_ID::StringValue* db_info) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(db_info_);
  }
  db_info_ = db_info;
  if (db_info) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:smart3dmap.v1.CreateProjectRequest.db_info)
}
inline PROTOBUF_NAMESPACE_ID::StringValue* CreateProjectRequest::release_db_info() {
  
  PROTOBUF_NAMESPACE_ID::StringValue* temp = db_info_;
  db_info_ = nullptr;
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline PROTOBUF_NAMESPACE_ID::StringValue* CreateProjectRequest::unsafe_arena_release_db_info() {
  // @@protoc_insertion_point(field_release:smart3dmap.v1.CreateProjectRequest.db_info)
  
  PROTOBUF_NAMESPACE_ID::StringValue* temp = db_info_;
  db_info_ = nullptr;
  return temp;
}
inline PROTOBUF_NAMESPACE_ID::StringValue* CreateProjectRequest::_internal_mutable_db_info() {
  
  if (db_info_ == nullptr) {
    auto* p = CreateMaybeMessage<PROTOBUF_NAMESPACE_ID::StringValue>(GetArena());
    db_info_ = p;
  }
  return db_info_;
}
inline PROTOBUF_NAMESPACE_ID::StringValue* CreateProjectRequest::mutable_db_info() {
  // @@protoc_insertion_point(field_mutable:smart3dmap.v1.CreateProjectRequest.db_info)
  return _internal_mutable_db_info();
}
inline void CreateProjectRequest::set_allocated_db_info(PROTOBUF_NAMESPACE_ID::StringValue* db_info) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(db_info_);
  }
  if (db_info) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(db_info)->GetArena();
    if (message_arena != submessage_arena) {
      db_info = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, db_info, submessage_arena);
    }
    
  } else {
    
  }
  db_info_ = db_info;
  // @@protoc_insertion_point(field_set_allocated:smart3dmap.v1.CreateProjectRequest.db_info)
}

// .google.protobuf.StringValue data_tree_2d = 14;
inline bool CreateProjectRequest::_internal_has_data_tree_2d() const {
  return this != internal_default_instance() && data_tree_2d_ != nullptr;
}
inline bool CreateProjectRequest::has_data_tree_2d() const {
  return _internal_has_data_tree_2d();
}
inline const PROTOBUF_NAMESPACE_ID::StringValue& CreateProjectRequest::_internal_data_tree_2d() const {
  const PROTOBUF_NAMESPACE_ID::StringValue* p = data_tree_2d_;
  return p != nullptr ? *p : reinterpret_cast<const PROTOBUF_NAMESPACE_ID::StringValue&>(
      PROTOBUF_NAMESPACE_ID::_StringValue_default_instance_);
}
inline const PROTOBUF_NAMESPACE_ID::StringValue& CreateProjectRequest::data_tree_2d() const {
  // @@protoc_insertion_point(field_get:smart3dmap.v1.CreateProjectRequest.data_tree_2d)
  return _internal_data_tree_2d();
}
inline void CreateProjectRequest::unsafe_arena_set_allocated_data_tree_2d(
    PROTOBUF_NAMESPACE_ID::StringValue* data_tree_2d) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(data_tree_2d_);
  }
  data_tree_2d_ = data_tree_2d;
  if (data_tree_2d) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:smart3dmap.v1.CreateProjectRequest.data_tree_2d)
}
inline PROTOBUF_NAMESPACE_ID::StringValue* CreateProjectRequest::release_data_tree_2d() {
  
  PROTOBUF_NAMESPACE_ID::StringValue* temp = data_tree_2d_;
  data_tree_2d_ = nullptr;
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline PROTOBUF_NAMESPACE_ID::StringValue* CreateProjectRequest::unsafe_arena_release_data_tree_2d() {
  // @@protoc_insertion_point(field_release:smart3dmap.v1.CreateProjectRequest.data_tree_2d)
  
  PROTOBUF_NAMESPACE_ID::StringValue* temp = data_tree_2d_;
  data_tree_2d_ = nullptr;
  return temp;
}
inline PROTOBUF_NAMESPACE_ID::StringValue* CreateProjectRequest::_internal_mutable_data_tree_2d() {
  
  if (data_tree_2d_ == nullptr) {
    auto* p = CreateMaybeMessage<PROTOBUF_NAMESPACE_ID::StringValue>(GetArena());
    data_tree_2d_ = p;
  }
  return data_tree_2d_;
}
inline PROTOBUF_NAMESPACE_ID::StringValue* CreateProjectRequest::mutable_data_tree_2d() {
  // @@protoc_insertion_point(field_mutable:smart3dmap.v1.CreateProjectRequest.data_tree_2d)
  return _internal_mutable_data_tree_2d();
}
inline void CreateProjectRequest::set_allocated_data_tree_2d(PROTOBUF_NAMESPACE_ID::StringValue* data_tree_2d) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(data_tree_2d_);
  }
  if (data_tree_2d) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(data_tree_2d)->GetArena();
    if (message_arena != submessage_arena) {
      data_tree_2d = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, data_tree_2d, submessage_arena);
    }
    
  } else {
    
  }
  data_tree_2d_ = data_tree_2d;
  // @@protoc_insertion_point(field_set_allocated:smart3dmap.v1.CreateProjectRequest.data_tree_2d)
}

// .google.protobuf.StringValue data_tree_3d = 15;
inline bool CreateProjectRequest::_internal_has_data_tree_3d() const {
  return this != internal_default_instance() && data_tree_3d_ != nullptr;
}
inline bool CreateProjectRequest::has_data_tree_3d() const {
  return _internal_has_data_tree_3d();
}
inline const PROTOBUF_NAMESPACE_ID::StringValue& CreateProjectRequest::_internal_data_tree_3d() const {
  const PROTOBUF_NAMESPACE_ID::StringValue* p = data_tree_3d_;
  return p != nullptr ? *p : reinterpret_cast<const PROTOBUF_NAMESPACE_ID::StringValue&>(
      PROTOBUF_NAMESPACE_ID::_StringValue_default_instance_);
}
inline const PROTOBUF_NAMESPACE_ID::StringValue& CreateProjectRequest::data_tree_3d() const {
  // @@protoc_insertion_point(field_get:smart3dmap.v1.CreateProjectRequest.data_tree_3d)
  return _internal_data_tree_3d();
}
inline void CreateProjectRequest::unsafe_arena_set_allocated_data_tree_3d(
    PROTOBUF_NAMESPACE_ID::StringValue* data_tree_3d) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(data_tree_3d_);
  }
  data_tree_3d_ = data_tree_3d;
  if (data_tree_3d) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:smart3dmap.v1.CreateProjectRequest.data_tree_3d)
}
inline PROTOBUF_NAMESPACE_ID::StringValue* CreateProjectRequest::release_data_tree_3d() {
  
  PROTOBUF_NAMESPACE_ID::StringValue* temp = data_tree_3d_;
  data_tree_3d_ = nullptr;
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline PROTOBUF_NAMESPACE_ID::StringValue* CreateProjectRequest::unsafe_arena_release_data_tree_3d() {
  // @@protoc_insertion_point(field_release:smart3dmap.v1.CreateProjectRequest.data_tree_3d)
  
  PROTOBUF_NAMESPACE_ID::StringValue* temp = data_tree_3d_;
  data_tree_3d_ = nullptr;
  return temp;
}
inline PROTOBUF_NAMESPACE_ID::StringValue* CreateProjectRequest::_internal_mutable_data_tree_3d() {
  
  if (data_tree_3d_ == nullptr) {
    auto* p = CreateMaybeMessage<PROTOBUF_NAMESPACE_ID::StringValue>(GetArena());
    data_tree_3d_ = p;
  }
  return data_tree_3d_;
}
inline PROTOBUF_NAMESPACE_ID::StringValue* CreateProjectRequest::mutable_data_tree_3d() {
  // @@protoc_insertion_point(field_mutable:smart3dmap.v1.CreateProjectRequest.data_tree_3d)
  return _internal_mutable_data_tree_3d();
}
inline void CreateProjectRequest::set_allocated_data_tree_3d(PROTOBUF_NAMESPACE_ID::StringValue* data_tree_3d) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(data_tree_3d_);
  }
  if (data_tree_3d) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(data_tree_3d)->GetArena();
    if (message_arena != submessage_arena) {
      data_tree_3d = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, data_tree_3d, submessage_arena);
    }
    
  } else {
    
  }
  data_tree_3d_ = data_tree_3d;
  // @@protoc_insertion_point(field_set_allocated:smart3dmap.v1.CreateProjectRequest.data_tree_3d)
}

// .google.protobuf.StringValue data_tree_db = 16;
inline bool CreateProjectRequest::_internal_has_data_tree_db() const {
  return this != internal_default_instance() && data_tree_db_ != nullptr;
}
inline bool CreateProjectRequest::has_data_tree_db() const {
  return _internal_has_data_tree_db();
}
inline const PROTOBUF_NAMESPACE_ID::StringValue& CreateProjectRequest::_internal_data_tree_db() const {
  const PROTOBUF_NAMESPACE_ID::StringValue* p = data_tree_db_;
  return p != nullptr ? *p : reinterpret_cast<const PROTOBUF_NAMESPACE_ID::StringValue&>(
      PROTOBUF_NAMESPACE_ID::_StringValue_default_instance_);
}
inline const PROTOBUF_NAMESPACE_ID::StringValue& CreateProjectRequest::data_tree_db() const {
  // @@protoc_insertion_point(field_get:smart3dmap.v1.CreateProjectRequest.data_tree_db)
  return _internal_data_tree_db();
}
inline void CreateProjectRequest::unsafe_arena_set_allocated_data_tree_db(
    PROTOBUF_NAMESPACE_ID::StringValue* data_tree_db) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(data_tree_db_);
  }
  data_tree_db_ = data_tree_db;
  if (data_tree_db) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:smart3dmap.v1.CreateProjectRequest.data_tree_db)
}
inline PROTOBUF_NAMESPACE_ID::StringValue* CreateProjectRequest::release_data_tree_db() {
  
  PROTOBUF_NAMESPACE_ID::StringValue* temp = data_tree_db_;
  data_tree_db_ = nullptr;
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline PROTOBUF_NAMESPACE_ID::StringValue* CreateProjectRequest::unsafe_arena_release_data_tree_db() {
  // @@protoc_insertion_point(field_release:smart3dmap.v1.CreateProjectRequest.data_tree_db)
  
  PROTOBUF_NAMESPACE_ID::StringValue* temp = data_tree_db_;
  data_tree_db_ = nullptr;
  return temp;
}
inline PROTOBUF_NAMESPACE_ID::StringValue* CreateProjectRequest::_internal_mutable_data_tree_db() {
  
  if (data_tree_db_ == nullptr) {
    auto* p = CreateMaybeMessage<PROTOBUF_NAMESPACE_ID::StringValue>(GetArena());
    data_tree_db_ = p;
  }
  return data_tree_db_;
}
inline PROTOBUF_NAMESPACE_ID::StringValue* CreateProjectRequest::mutable_data_tree_db() {
  // @@protoc_insertion_point(field_mutable:smart3dmap.v1.CreateProjectRequest.data_tree_db)
  return _internal_mutable_data_tree_db();
}
inline void CreateProjectRequest::set_allocated_data_tree_db(PROTOBUF_NAMESPACE_ID::StringValue* data_tree_db) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(data_tree_db_);
  }
  if (data_tree_db) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(data_tree_db)->GetArena();
    if (message_arena != submessage_arena) {
      data_tree_db = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, data_tree_db, submessage_arena);
    }
    
  } else {
    
  }
  data_tree_db_ = data_tree_db;
  // @@protoc_insertion_point(field_set_allocated:smart3dmap.v1.CreateProjectRequest.data_tree_db)
}

// -------------------------------------------------------------------

// GetProjectRequest

// int32 id = 1;
inline void GetProjectRequest::clear_id() {
  id_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 GetProjectRequest::_internal_id() const {
  return id_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 GetProjectRequest::id() const {
  // @@protoc_insertion_point(field_get:smart3dmap.v1.GetProjectRequest.id)
  return _internal_id();
}
inline void GetProjectRequest::_internal_set_id(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  id_ = value;
}
inline void GetProjectRequest::set_id(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_id(value);
  // @@protoc_insertion_point(field_set:smart3dmap.v1.GetProjectRequest.id)
}

// -------------------------------------------------------------------

// UpdateProjectRequest

// int32 id = 1;
inline void UpdateProjectRequest::clear_id() {
  id_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 UpdateProjectRequest::_internal_id() const {
  return id_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 UpdateProjectRequest::id() const {
  // @@protoc_insertion_point(field_get:smart3dmap.v1.UpdateProjectRequest.id)
  return _internal_id();
}
inline void UpdateProjectRequest::_internal_set_id(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  id_ = value;
}
inline void UpdateProjectRequest::set_id(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_id(value);
  // @@protoc_insertion_point(field_set:smart3dmap.v1.UpdateProjectRequest.id)
}

// .google.protobuf.StringValue name = 2;
inline bool UpdateProjectRequest::_internal_has_name() const {
  return this != internal_default_instance() && name_ != nullptr;
}
inline bool UpdateProjectRequest::has_name() const {
  return _internal_has_name();
}
inline const PROTOBUF_NAMESPACE_ID::StringValue& UpdateProjectRequest::_internal_name() const {
  const PROTOBUF_NAMESPACE_ID::StringValue* p = name_;
  return p != nullptr ? *p : reinterpret_cast<const PROTOBUF_NAMESPACE_ID::StringValue&>(
      PROTOBUF_NAMESPACE_ID::_StringValue_default_instance_);
}
inline const PROTOBUF_NAMESPACE_ID::StringValue& UpdateProjectRequest::name() const {
  // @@protoc_insertion_point(field_get:smart3dmap.v1.UpdateProjectRequest.name)
  return _internal_name();
}
inline void UpdateProjectRequest::unsafe_arena_set_allocated_name(
    PROTOBUF_NAMESPACE_ID::StringValue* name) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(name_);
  }
  name_ = name;
  if (name) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:smart3dmap.v1.UpdateProjectRequest.name)
}
inline PROTOBUF_NAMESPACE_ID::StringValue* UpdateProjectRequest::release_name() {
  
  PROTOBUF_NAMESPACE_ID::StringValue* temp = name_;
  name_ = nullptr;
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline PROTOBUF_NAMESPACE_ID::StringValue* UpdateProjectRequest::unsafe_arena_release_name() {
  // @@protoc_insertion_point(field_release:smart3dmap.v1.UpdateProjectRequest.name)
  
  PROTOBUF_NAMESPACE_ID::StringValue* temp = name_;
  name_ = nullptr;
  return temp;
}
inline PROTOBUF_NAMESPACE_ID::StringValue* UpdateProjectRequest::_internal_mutable_name() {
  
  if (name_ == nullptr) {
    auto* p = CreateMaybeMessage<PROTOBUF_NAMESPACE_ID::StringValue>(GetArena());
    name_ = p;
  }
  return name_;
}
inline PROTOBUF_NAMESPACE_ID::StringValue* UpdateProjectRequest::mutable_name() {
  // @@protoc_insertion_point(field_mutable:smart3dmap.v1.UpdateProjectRequest.name)
  return _internal_mutable_name();
}
inline void UpdateProjectRequest::set_allocated_name(PROTOBUF_NAMESPACE_ID::StringValue* name) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(name_);
  }
  if (name) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(name)->GetArena();
    if (message_arena != submessage_arena) {
      name = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, name, submessage_arena);
    }
    
  } else {
    
  }
  name_ = name;
  // @@protoc_insertion_point(field_set_allocated:smart3dmap.v1.UpdateProjectRequest.name)
}

// .google.protobuf.StringValue authors = 3;
inline bool UpdateProjectRequest::_internal_has_authors() const {
  return this != internal_default_instance() && authors_ != nullptr;
}
inline bool UpdateProjectRequest::has_authors() const {
  return _internal_has_authors();
}
inline const PROTOBUF_NAMESPACE_ID::StringValue& UpdateProjectRequest::_internal_authors() const {
  const PROTOBUF_NAMESPACE_ID::StringValue* p = authors_;
  return p != nullptr ? *p : reinterpret_cast<const PROTOBUF_NAMESPACE_ID::StringValue&>(
      PROTOBUF_NAMESPACE_ID::_StringValue_default_instance_);
}
inline const PROTOBUF_NAMESPACE_ID::StringValue& UpdateProjectRequest::authors() const {
  // @@protoc_insertion_point(field_get:smart3dmap.v1.UpdateProjectRequest.authors)
  return _internal_authors();
}
inline void UpdateProjectRequest::unsafe_arena_set_allocated_authors(
    PROTOBUF_NAMESPACE_ID::StringValue* authors) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(authors_);
  }
  authors_ = authors;
  if (authors) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:smart3dmap.v1.UpdateProjectRequest.authors)
}
inline PROTOBUF_NAMESPACE_ID::StringValue* UpdateProjectRequest::release_authors() {
  
  PROTOBUF_NAMESPACE_ID::StringValue* temp = authors_;
  authors_ = nullptr;
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline PROTOBUF_NAMESPACE_ID::StringValue* UpdateProjectRequest::unsafe_arena_release_authors() {
  // @@protoc_insertion_point(field_release:smart3dmap.v1.UpdateProjectRequest.authors)
  
  PROTOBUF_NAMESPACE_ID::StringValue* temp = authors_;
  authors_ = nullptr;
  return temp;
}
inline PROTOBUF_NAMESPACE_ID::StringValue* UpdateProjectRequest::_internal_mutable_authors() {
  
  if (authors_ == nullptr) {
    auto* p = CreateMaybeMessage<PROTOBUF_NAMESPACE_ID::StringValue>(GetArena());
    authors_ = p;
  }
  return authors_;
}
inline PROTOBUF_NAMESPACE_ID::StringValue* UpdateProjectRequest::mutable_authors() {
  // @@protoc_insertion_point(field_mutable:smart3dmap.v1.UpdateProjectRequest.authors)
  return _internal_mutable_authors();
}
inline void UpdateProjectRequest::set_allocated_authors(PROTOBUF_NAMESPACE_ID::StringValue* authors) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(authors_);
  }
  if (authors) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(authors)->GetArena();
    if (message_arena != submessage_arena) {
      authors = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, authors, submessage_arena);
    }
    
  } else {
    
  }
  authors_ = authors;
  // @@protoc_insertion_point(field_set_allocated:smart3dmap.v1.UpdateProjectRequest.authors)
}

// .google.protobuf.StringValue description = 4;
inline bool UpdateProjectRequest::_internal_has_description() const {
  return this != internal_default_instance() && description_ != nullptr;
}
inline bool UpdateProjectRequest::has_description() const {
  return _internal_has_description();
}
inline const PROTOBUF_NAMESPACE_ID::StringValue& UpdateProjectRequest::_internal_description() const {
  const PROTOBUF_NAMESPACE_ID::StringValue* p = description_;
  return p != nullptr ? *p : reinterpret_cast<const PROTOBUF_NAMESPACE_ID::StringValue&>(
      PROTOBUF_NAMESPACE_ID::_StringValue_default_instance_);
}
inline const PROTOBUF_NAMESPACE_ID::StringValue& UpdateProjectRequest::description() const {
  // @@protoc_insertion_point(field_get:smart3dmap.v1.UpdateProjectRequest.description)
  return _internal_description();
}
inline void UpdateProjectRequest::unsafe_arena_set_allocated_description(
    PROTOBUF_NAMESPACE_ID::StringValue* description) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(description_);
  }
  description_ = description;
  if (description) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:smart3dmap.v1.UpdateProjectRequest.description)
}
inline PROTOBUF_NAMESPACE_ID::StringValue* UpdateProjectRequest::release_description() {
  
  PROTOBUF_NAMESPACE_ID::StringValue* temp = description_;
  description_ = nullptr;
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline PROTOBUF_NAMESPACE_ID::StringValue* UpdateProjectRequest::unsafe_arena_release_description() {
  // @@protoc_insertion_point(field_release:smart3dmap.v1.UpdateProjectRequest.description)
  
  PROTOBUF_NAMESPACE_ID::StringValue* temp = description_;
  description_ = nullptr;
  return temp;
}
inline PROTOBUF_NAMESPACE_ID::StringValue* UpdateProjectRequest::_internal_mutable_description() {
  
  if (description_ == nullptr) {
    auto* p = CreateMaybeMessage<PROTOBUF_NAMESPACE_ID::StringValue>(GetArena());
    description_ = p;
  }
  return description_;
}
inline PROTOBUF_NAMESPACE_ID::StringValue* UpdateProjectRequest::mutable_description() {
  // @@protoc_insertion_point(field_mutable:smart3dmap.v1.UpdateProjectRequest.description)
  return _internal_mutable_description();
}
inline void UpdateProjectRequest::set_allocated_description(PROTOBUF_NAMESPACE_ID::StringValue* description) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(description_);
  }
  if (description) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(description)->GetArena();
    if (message_arena != submessage_arena) {
      description = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, description, submessage_arena);
    }
    
  } else {
    
  }
  description_ = description;
  // @@protoc_insertion_point(field_set_allocated:smart3dmap.v1.UpdateProjectRequest.description)
}

// .google.protobuf.StringValue crs = 5;
inline bool UpdateProjectRequest::_internal_has_crs() const {
  return this != internal_default_instance() && crs_ != nullptr;
}
inline bool UpdateProjectRequest::has_crs() const {
  return _internal_has_crs();
}
inline const PROTOBUF_NAMESPACE_ID::StringValue& UpdateProjectRequest::_internal_crs() const {
  const PROTOBUF_NAMESPACE_ID::StringValue* p = crs_;
  return p != nullptr ? *p : reinterpret_cast<const PROTOBUF_NAMESPACE_ID::StringValue&>(
      PROTOBUF_NAMESPACE_ID::_StringValue_default_instance_);
}
inline const PROTOBUF_NAMESPACE_ID::StringValue& UpdateProjectRequest::crs() const {
  // @@protoc_insertion_point(field_get:smart3dmap.v1.UpdateProjectRequest.crs)
  return _internal_crs();
}
inline void UpdateProjectRequest::unsafe_arena_set_allocated_crs(
    PROTOBUF_NAMESPACE_ID::StringValue* crs) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(crs_);
  }
  crs_ = crs;
  if (crs) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:smart3dmap.v1.UpdateProjectRequest.crs)
}
inline PROTOBUF_NAMESPACE_ID::StringValue* UpdateProjectRequest::release_crs() {
  
  PROTOBUF_NAMESPACE_ID::StringValue* temp = crs_;
  crs_ = nullptr;
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline PROTOBUF_NAMESPACE_ID::StringValue* UpdateProjectRequest::unsafe_arena_release_crs() {
  // @@protoc_insertion_point(field_release:smart3dmap.v1.UpdateProjectRequest.crs)
  
  PROTOBUF_NAMESPACE_ID::StringValue* temp = crs_;
  crs_ = nullptr;
  return temp;
}
inline PROTOBUF_NAMESPACE_ID::StringValue* UpdateProjectRequest::_internal_mutable_crs() {
  
  if (crs_ == nullptr) {
    auto* p = CreateMaybeMessage<PROTOBUF_NAMESPACE_ID::StringValue>(GetArena());
    crs_ = p;
  }
  return crs_;
}
inline PROTOBUF_NAMESPACE_ID::StringValue* UpdateProjectRequest::mutable_crs() {
  // @@protoc_insertion_point(field_mutable:smart3dmap.v1.UpdateProjectRequest.crs)
  return _internal_mutable_crs();
}
inline void UpdateProjectRequest::set_allocated_crs(PROTOBUF_NAMESPACE_ID::StringValue* crs) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(crs_);
  }
  if (crs) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(crs)->GetArena();
    if (message_arena != submessage_arena) {
      crs = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, crs, submessage_arena);
    }
    
  } else {
    
  }
  crs_ = crs;
  // @@protoc_insertion_point(field_set_allocated:smart3dmap.v1.UpdateProjectRequest.crs)
}

// .google.protobuf.StringValue unit = 6;
inline bool UpdateProjectRequest::_internal_has_unit() const {
  return this != internal_default_instance() && unit_ != nullptr;
}
inline bool UpdateProjectRequest::has_unit() const {
  return _internal_has_unit();
}
inline const PROTOBUF_NAMESPACE_ID::StringValue& UpdateProjectRequest::_internal_unit() const {
  const PROTOBUF_NAMESPACE_ID::StringValue* p = unit_;
  return p != nullptr ? *p : reinterpret_cast<const PROTOBUF_NAMESPACE_ID::StringValue&>(
      PROTOBUF_NAMESPACE_ID::_StringValue_default_instance_);
}
inline const PROTOBUF_NAMESPACE_ID::StringValue& UpdateProjectRequest::unit() const {
  // @@protoc_insertion_point(field_get:smart3dmap.v1.UpdateProjectRequest.unit)
  return _internal_unit();
}
inline void UpdateProjectRequest::unsafe_arena_set_allocated_unit(
    PROTOBUF_NAMESPACE_ID::StringValue* unit) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(unit_);
  }
  unit_ = unit;
  if (unit) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:smart3dmap.v1.UpdateProjectRequest.unit)
}
inline PROTOBUF_NAMESPACE_ID::StringValue* UpdateProjectRequest::release_unit() {
  
  PROTOBUF_NAMESPACE_ID::StringValue* temp = unit_;
  unit_ = nullptr;
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline PROTOBUF_NAMESPACE_ID::StringValue* UpdateProjectRequest::unsafe_arena_release_unit() {
  // @@protoc_insertion_point(field_release:smart3dmap.v1.UpdateProjectRequest.unit)
  
  PROTOBUF_NAMESPACE_ID::StringValue* temp = unit_;
  unit_ = nullptr;
  return temp;
}
inline PROTOBUF_NAMESPACE_ID::StringValue* UpdateProjectRequest::_internal_mutable_unit() {
  
  if (unit_ == nullptr) {
    auto* p = CreateMaybeMessage<PROTOBUF_NAMESPACE_ID::StringValue>(GetArena());
    unit_ = p;
  }
  return unit_;
}
inline PROTOBUF_NAMESPACE_ID::StringValue* UpdateProjectRequest::mutable_unit() {
  // @@protoc_insertion_point(field_mutable:smart3dmap.v1.UpdateProjectRequest.unit)
  return _internal_mutable_unit();
}
inline void UpdateProjectRequest::set_allocated_unit(PROTOBUF_NAMESPACE_ID::StringValue* unit) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(unit_);
  }
  if (unit) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(unit)->GetArena();
    if (message_arena != submessage_arena) {
      unit = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, unit, submessage_arena);
    }
    
  } else {
    
  }
  unit_ = unit;
  // @@protoc_insertion_point(field_set_allocated:smart3dmap.v1.UpdateProjectRequest.unit)
}

// .google.protobuf.DoubleValue min_x = 7;
inline bool UpdateProjectRequest::_internal_has_min_x() const {
  return this != internal_default_instance() && min_x_ != nullptr;
}
inline bool UpdateProjectRequest::has_min_x() const {
  return _internal_has_min_x();
}
inline const PROTOBUF_NAMESPACE_ID::DoubleValue& UpdateProjectRequest::_internal_min_x() const {
  const PROTOBUF_NAMESPACE_ID::DoubleValue* p = min_x_;
  return p != nullptr ? *p : reinterpret_cast<const PROTOBUF_NAMESPACE_ID::DoubleValue&>(
      PROTOBUF_NAMESPACE_ID::_DoubleValue_default_instance_);
}
inline const PROTOBUF_NAMESPACE_ID::DoubleValue& UpdateProjectRequest::min_x() const {
  // @@protoc_insertion_point(field_get:smart3dmap.v1.UpdateProjectRequest.min_x)
  return _internal_min_x();
}
inline void UpdateProjectRequest::unsafe_arena_set_allocated_min_x(
    PROTOBUF_NAMESPACE_ID::DoubleValue* min_x) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(min_x_);
  }
  min_x_ = min_x;
  if (min_x) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:smart3dmap.v1.UpdateProjectRequest.min_x)
}
inline PROTOBUF_NAMESPACE_ID::DoubleValue* UpdateProjectRequest::release_min_x() {
  
  PROTOBUF_NAMESPACE_ID::DoubleValue* temp = min_x_;
  min_x_ = nullptr;
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline PROTOBUF_NAMESPACE_ID::DoubleValue* UpdateProjectRequest::unsafe_arena_release_min_x() {
  // @@protoc_insertion_point(field_release:smart3dmap.v1.UpdateProjectRequest.min_x)
  
  PROTOBUF_NAMESPACE_ID::DoubleValue* temp = min_x_;
  min_x_ = nullptr;
  return temp;
}
inline PROTOBUF_NAMESPACE_ID::DoubleValue* UpdateProjectRequest::_internal_mutable_min_x() {
  
  if (min_x_ == nullptr) {
    auto* p = CreateMaybeMessage<PROTOBUF_NAMESPACE_ID::DoubleValue>(GetArena());
    min_x_ = p;
  }
  return min_x_;
}
inline PROTOBUF_NAMESPACE_ID::DoubleValue* UpdateProjectRequest::mutable_min_x() {
  // @@protoc_insertion_point(field_mutable:smart3dmap.v1.UpdateProjectRequest.min_x)
  return _internal_mutable_min_x();
}
inline void UpdateProjectRequest::set_allocated_min_x(PROTOBUF_NAMESPACE_ID::DoubleValue* min_x) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(min_x_);
  }
  if (min_x) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(min_x)->GetArena();
    if (message_arena != submessage_arena) {
      min_x = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, min_x, submessage_arena);
    }
    
  } else {
    
  }
  min_x_ = min_x;
  // @@protoc_insertion_point(field_set_allocated:smart3dmap.v1.UpdateProjectRequest.min_x)
}

// .google.protobuf.DoubleValue min_y = 8;
inline bool UpdateProjectRequest::_internal_has_min_y() const {
  return this != internal_default_instance() && min_y_ != nullptr;
}
inline bool UpdateProjectRequest::has_min_y() const {
  return _internal_has_min_y();
}
inline const PROTOBUF_NAMESPACE_ID::DoubleValue& UpdateProjectRequest::_internal_min_y() const {
  const PROTOBUF_NAMESPACE_ID::DoubleValue* p = min_y_;
  return p != nullptr ? *p : reinterpret_cast<const PROTOBUF_NAMESPACE_ID::DoubleValue&>(
      PROTOBUF_NAMESPACE_ID::_DoubleValue_default_instance_);
}
inline const PROTOBUF_NAMESPACE_ID::DoubleValue& UpdateProjectRequest::min_y() const {
  // @@protoc_insertion_point(field_get:smart3dmap.v1.UpdateProjectRequest.min_y)
  return _internal_min_y();
}
inline void UpdateProjectRequest::unsafe_arena_set_allocated_min_y(
    PROTOBUF_NAMESPACE_ID::DoubleValue* min_y) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(min_y_);
  }
  min_y_ = min_y;
  if (min_y) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:smart3dmap.v1.UpdateProjectRequest.min_y)
}
inline PROTOBUF_NAMESPACE_ID::DoubleValue* UpdateProjectRequest::release_min_y() {
  
  PROTOBUF_NAMESPACE_ID::DoubleValue* temp = min_y_;
  min_y_ = nullptr;
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline PROTOBUF_NAMESPACE_ID::DoubleValue* UpdateProjectRequest::unsafe_arena_release_min_y() {
  // @@protoc_insertion_point(field_release:smart3dmap.v1.UpdateProjectRequest.min_y)
  
  PROTOBUF_NAMESPACE_ID::DoubleValue* temp = min_y_;
  min_y_ = nullptr;
  return temp;
}
inline PROTOBUF_NAMESPACE_ID::DoubleValue* UpdateProjectRequest::_internal_mutable_min_y() {
  
  if (min_y_ == nullptr) {
    auto* p = CreateMaybeMessage<PROTOBUF_NAMESPACE_ID::DoubleValue>(GetArena());
    min_y_ = p;
  }
  return min_y_;
}
inline PROTOBUF_NAMESPACE_ID::DoubleValue* UpdateProjectRequest::mutable_min_y() {
  // @@protoc_insertion_point(field_mutable:smart3dmap.v1.UpdateProjectRequest.min_y)
  return _internal_mutable_min_y();
}
inline void UpdateProjectRequest::set_allocated_min_y(PROTOBUF_NAMESPACE_ID::DoubleValue* min_y) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(min_y_);
  }
  if (min_y) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(min_y)->GetArena();
    if (message_arena != submessage_arena) {
      min_y = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, min_y, submessage_arena);
    }
    
  } else {
    
  }
  min_y_ = min_y;
  // @@protoc_insertion_point(field_set_allocated:smart3dmap.v1.UpdateProjectRequest.min_y)
}

// .google.protobuf.DoubleValue min_z = 9;
inline bool UpdateProjectRequest::_internal_has_min_z() const {
  return this != internal_default_instance() && min_z_ != nullptr;
}
inline bool UpdateProjectRequest::has_min_z() const {
  return _internal_has_min_z();
}
inline const PROTOBUF_NAMESPACE_ID::DoubleValue& UpdateProjectRequest::_internal_min_z() const {
  const PROTOBUF_NAMESPACE_ID::DoubleValue* p = min_z_;
  return p != nullptr ? *p : reinterpret_cast<const PROTOBUF_NAMESPACE_ID::DoubleValue&>(
      PROTOBUF_NAMESPACE_ID::_DoubleValue_default_instance_);
}
inline const PROTOBUF_NAMESPACE_ID::DoubleValue& UpdateProjectRequest::min_z() const {
  // @@protoc_insertion_point(field_get:smart3dmap.v1.UpdateProjectRequest.min_z)
  return _internal_min_z();
}
inline void UpdateProjectRequest::unsafe_arena_set_allocated_min_z(
    PROTOBUF_NAMESPACE_ID::DoubleValue* min_z) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(min_z_);
  }
  min_z_ = min_z;
  if (min_z) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:smart3dmap.v1.UpdateProjectRequest.min_z)
}
inline PROTOBUF_NAMESPACE_ID::DoubleValue* UpdateProjectRequest::release_min_z() {
  
  PROTOBUF_NAMESPACE_ID::DoubleValue* temp = min_z_;
  min_z_ = nullptr;
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline PROTOBUF_NAMESPACE_ID::DoubleValue* UpdateProjectRequest::unsafe_arena_release_min_z() {
  // @@protoc_insertion_point(field_release:smart3dmap.v1.UpdateProjectRequest.min_z)
  
  PROTOBUF_NAMESPACE_ID::DoubleValue* temp = min_z_;
  min_z_ = nullptr;
  return temp;
}
inline PROTOBUF_NAMESPACE_ID::DoubleValue* UpdateProjectRequest::_internal_mutable_min_z() {
  
  if (min_z_ == nullptr) {
    auto* p = CreateMaybeMessage<PROTOBUF_NAMESPACE_ID::DoubleValue>(GetArena());
    min_z_ = p;
  }
  return min_z_;
}
inline PROTOBUF_NAMESPACE_ID::DoubleValue* UpdateProjectRequest::mutable_min_z() {
  // @@protoc_insertion_point(field_mutable:smart3dmap.v1.UpdateProjectRequest.min_z)
  return _internal_mutable_min_z();
}
inline void UpdateProjectRequest::set_allocated_min_z(PROTOBUF_NAMESPACE_ID::DoubleValue* min_z) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(min_z_);
  }
  if (min_z) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(min_z)->GetArena();
    if (message_arena != submessage_arena) {
      min_z = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, min_z, submessage_arena);
    }
    
  } else {
    
  }
  min_z_ = min_z;
  // @@protoc_insertion_point(field_set_allocated:smart3dmap.v1.UpdateProjectRequest.min_z)
}

// .google.protobuf.DoubleValue max_x = 10;
inline bool UpdateProjectRequest::_internal_has_max_x() const {
  return this != internal_default_instance() && max_x_ != nullptr;
}
inline bool UpdateProjectRequest::has_max_x() const {
  return _internal_has_max_x();
}
inline const PROTOBUF_NAMESPACE_ID::DoubleValue& UpdateProjectRequest::_internal_max_x() const {
  const PROTOBUF_NAMESPACE_ID::DoubleValue* p = max_x_;
  return p != nullptr ? *p : reinterpret_cast<const PROTOBUF_NAMESPACE_ID::DoubleValue&>(
      PROTOBUF_NAMESPACE_ID::_DoubleValue_default_instance_);
}
inline const PROTOBUF_NAMESPACE_ID::DoubleValue& UpdateProjectRequest::max_x() const {
  // @@protoc_insertion_point(field_get:smart3dmap.v1.UpdateProjectRequest.max_x)
  return _internal_max_x();
}
inline void UpdateProjectRequest::unsafe_arena_set_allocated_max_x(
    PROTOBUF_NAMESPACE_ID::DoubleValue* max_x) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(max_x_);
  }
  max_x_ = max_x;
  if (max_x) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:smart3dmap.v1.UpdateProjectRequest.max_x)
}
inline PROTOBUF_NAMESPACE_ID::DoubleValue* UpdateProjectRequest::release_max_x() {
  
  PROTOBUF_NAMESPACE_ID::DoubleValue* temp = max_x_;
  max_x_ = nullptr;
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline PROTOBUF_NAMESPACE_ID::DoubleValue* UpdateProjectRequest::unsafe_arena_release_max_x() {
  // @@protoc_insertion_point(field_release:smart3dmap.v1.UpdateProjectRequest.max_x)
  
  PROTOBUF_NAMESPACE_ID::DoubleValue* temp = max_x_;
  max_x_ = nullptr;
  return temp;
}
inline PROTOBUF_NAMESPACE_ID::DoubleValue* UpdateProjectRequest::_internal_mutable_max_x() {
  
  if (max_x_ == nullptr) {
    auto* p = CreateMaybeMessage<PROTOBUF_NAMESPACE_ID::DoubleValue>(GetArena());
    max_x_ = p;
  }
  return max_x_;
}
inline PROTOBUF_NAMESPACE_ID::DoubleValue* UpdateProjectRequest::mutable_max_x() {
  // @@protoc_insertion_point(field_mutable:smart3dmap.v1.UpdateProjectRequest.max_x)
  return _internal_mutable_max_x();
}
inline void UpdateProjectRequest::set_allocated_max_x(PROTOBUF_NAMESPACE_ID::DoubleValue* max_x) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(max_x_);
  }
  if (max_x) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(max_x)->GetArena();
    if (message_arena != submessage_arena) {
      max_x = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, max_x, submessage_arena);
    }
    
  } else {
    
  }
  max_x_ = max_x;
  // @@protoc_insertion_point(field_set_allocated:smart3dmap.v1.UpdateProjectRequest.max_x)
}

// .google.protobuf.DoubleValue max_y = 11;
inline bool UpdateProjectRequest::_internal_has_max_y() const {
  return this != internal_default_instance() && max_y_ != nullptr;
}
inline bool UpdateProjectRequest::has_max_y() const {
  return _internal_has_max_y();
}
inline const PROTOBUF_NAMESPACE_ID::DoubleValue& UpdateProjectRequest::_internal_max_y() const {
  const PROTOBUF_NAMESPACE_ID::DoubleValue* p = max_y_;
  return p != nullptr ? *p : reinterpret_cast<const PROTOBUF_NAMESPACE_ID::DoubleValue&>(
      PROTOBUF_NAMESPACE_ID::_DoubleValue_default_instance_);
}
inline const PROTOBUF_NAMESPACE_ID::DoubleValue& UpdateProjectRequest::max_y() const {
  // @@protoc_insertion_point(field_get:smart3dmap.v1.UpdateProjectRequest.max_y)
  return _internal_max_y();
}
inline void UpdateProjectRequest::unsafe_arena_set_allocated_max_y(
    PROTOBUF_NAMESPACE_ID::DoubleValue* max_y) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(max_y_);
  }
  max_y_ = max_y;
  if (max_y) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:smart3dmap.v1.UpdateProjectRequest.max_y)
}
inline PROTOBUF_NAMESPACE_ID::DoubleValue* UpdateProjectRequest::release_max_y() {
  
  PROTOBUF_NAMESPACE_ID::DoubleValue* temp = max_y_;
  max_y_ = nullptr;
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline PROTOBUF_NAMESPACE_ID::DoubleValue* UpdateProjectRequest::unsafe_arena_release_max_y() {
  // @@protoc_insertion_point(field_release:smart3dmap.v1.UpdateProjectRequest.max_y)
  
  PROTOBUF_NAMESPACE_ID::DoubleValue* temp = max_y_;
  max_y_ = nullptr;
  return temp;
}
inline PROTOBUF_NAMESPACE_ID::DoubleValue* UpdateProjectRequest::_internal_mutable_max_y() {
  
  if (max_y_ == nullptr) {
    auto* p = CreateMaybeMessage<PROTOBUF_NAMESPACE_ID::DoubleValue>(GetArena());
    max_y_ = p;
  }
  return max_y_;
}
inline PROTOBUF_NAMESPACE_ID::DoubleValue* UpdateProjectRequest::mutable_max_y() {
  // @@protoc_insertion_point(field_mutable:smart3dmap.v1.UpdateProjectRequest.max_y)
  return _internal_mutable_max_y();
}
inline void UpdateProjectRequest::set_allocated_max_y(PROTOBUF_NAMESPACE_ID::DoubleValue* max_y) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(max_y_);
  }
  if (max_y) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(max_y)->GetArena();
    if (message_arena != submessage_arena) {
      max_y = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, max_y, submessage_arena);
    }
    
  } else {
    
  }
  max_y_ = max_y;
  // @@protoc_insertion_point(field_set_allocated:smart3dmap.v1.UpdateProjectRequest.max_y)
}

// .google.protobuf.DoubleValue max_z = 12;
inline bool UpdateProjectRequest::_internal_has_max_z() const {
  return this != internal_default_instance() && max_z_ != nullptr;
}
inline bool UpdateProjectRequest::has_max_z() const {
  return _internal_has_max_z();
}
inline const PROTOBUF_NAMESPACE_ID::DoubleValue& UpdateProjectRequest::_internal_max_z() const {
  const PROTOBUF_NAMESPACE_ID::DoubleValue* p = max_z_;
  return p != nullptr ? *p : reinterpret_cast<const PROTOBUF_NAMESPACE_ID::DoubleValue&>(
      PROTOBUF_NAMESPACE_ID::_DoubleValue_default_instance_);
}
inline const PROTOBUF_NAMESPACE_ID::DoubleValue& UpdateProjectRequest::max_z() const {
  // @@protoc_insertion_point(field_get:smart3dmap.v1.UpdateProjectRequest.max_z)
  return _internal_max_z();
}
inline void UpdateProjectRequest::unsafe_arena_set_allocated_max_z(
    PROTOBUF_NAMESPACE_ID::DoubleValue* max_z) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(max_z_);
  }
  max_z_ = max_z;
  if (max_z) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:smart3dmap.v1.UpdateProjectRequest.max_z)
}
inline PROTOBUF_NAMESPACE_ID::DoubleValue* UpdateProjectRequest::release_max_z() {
  
  PROTOBUF_NAMESPACE_ID::DoubleValue* temp = max_z_;
  max_z_ = nullptr;
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline PROTOBUF_NAMESPACE_ID::DoubleValue* UpdateProjectRequest::unsafe_arena_release_max_z() {
  // @@protoc_insertion_point(field_release:smart3dmap.v1.UpdateProjectRequest.max_z)
  
  PROTOBUF_NAMESPACE_ID::DoubleValue* temp = max_z_;
  max_z_ = nullptr;
  return temp;
}
inline PROTOBUF_NAMESPACE_ID::DoubleValue* UpdateProjectRequest::_internal_mutable_max_z() {
  
  if (max_z_ == nullptr) {
    auto* p = CreateMaybeMessage<PROTOBUF_NAMESPACE_ID::DoubleValue>(GetArena());
    max_z_ = p;
  }
  return max_z_;
}
inline PROTOBUF_NAMESPACE_ID::DoubleValue* UpdateProjectRequest::mutable_max_z() {
  // @@protoc_insertion_point(field_mutable:smart3dmap.v1.UpdateProjectRequest.max_z)
  return _internal_mutable_max_z();
}
inline void UpdateProjectRequest::set_allocated_max_z(PROTOBUF_NAMESPACE_ID::DoubleValue* max_z) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(max_z_);
  }
  if (max_z) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(max_z)->GetArena();
    if (message_arena != submessage_arena) {
      max_z = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, max_z, submessage_arena);
    }
    
  } else {
    
  }
  max_z_ = max_z;
  // @@protoc_insertion_point(field_set_allocated:smart3dmap.v1.UpdateProjectRequest.max_z)
}

// .google.protobuf.Int32Value std_strat_version = 13;
inline bool UpdateProjectRequest::_internal_has_std_strat_version() const {
  return this != internal_default_instance() && std_strat_version_ != nullptr;
}
inline bool UpdateProjectRequest::has_std_strat_version() const {
  return _internal_has_std_strat_version();
}
inline const PROTOBUF_NAMESPACE_ID::Int32Value& UpdateProjectRequest::_internal_std_strat_version() const {
  const PROTOBUF_NAMESPACE_ID::Int32Value* p = std_strat_version_;
  return p != nullptr ? *p : reinterpret_cast<const PROTOBUF_NAMESPACE_ID::Int32Value&>(
      PROTOBUF_NAMESPACE_ID::_Int32Value_default_instance_);
}
inline const PROTOBUF_NAMESPACE_ID::Int32Value& UpdateProjectRequest::std_strat_version() const {
  // @@protoc_insertion_point(field_get:smart3dmap.v1.UpdateProjectRequest.std_strat_version)
  return _internal_std_strat_version();
}
inline void UpdateProjectRequest::unsafe_arena_set_allocated_std_strat_version(
    PROTOBUF_NAMESPACE_ID::Int32Value* std_strat_version) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(std_strat_version_);
  }
  std_strat_version_ = std_strat_version;
  if (std_strat_version) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:smart3dmap.v1.UpdateProjectRequest.std_strat_version)
}
inline PROTOBUF_NAMESPACE_ID::Int32Value* UpdateProjectRequest::release_std_strat_version() {
  
  PROTOBUF_NAMESPACE_ID::Int32Value* temp = std_strat_version_;
  std_strat_version_ = nullptr;
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline PROTOBUF_NAMESPACE_ID::Int32Value* UpdateProjectRequest::unsafe_arena_release_std_strat_version() {
  // @@protoc_insertion_point(field_release:smart3dmap.v1.UpdateProjectRequest.std_strat_version)
  
  PROTOBUF_NAMESPACE_ID::Int32Value* temp = std_strat_version_;
  std_strat_version_ = nullptr;
  return temp;
}
inline PROTOBUF_NAMESPACE_ID::Int32Value* UpdateProjectRequest::_internal_mutable_std_strat_version() {
  
  if (std_strat_version_ == nullptr) {
    auto* p = CreateMaybeMessage<PROTOBUF_NAMESPACE_ID::Int32Value>(GetArena());
    std_strat_version_ = p;
  }
  return std_strat_version_;
}
inline PROTOBUF_NAMESPACE_ID::Int32Value* UpdateProjectRequest::mutable_std_strat_version() {
  // @@protoc_insertion_point(field_mutable:smart3dmap.v1.UpdateProjectRequest.std_strat_version)
  return _internal_mutable_std_strat_version();
}
inline void UpdateProjectRequest::set_allocated_std_strat_version(PROTOBUF_NAMESPACE_ID::Int32Value* std_strat_version) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(std_strat_version_);
  }
  if (std_strat_version) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(std_strat_version)->GetArena();
    if (message_arena != submessage_arena) {
      std_strat_version = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, std_strat_version, submessage_arena);
    }
    
  } else {
    
  }
  std_strat_version_ = std_strat_version;
  // @@protoc_insertion_point(field_set_allocated:smart3dmap.v1.UpdateProjectRequest.std_strat_version)
}

// .google.protobuf.StringValue db_info = 14;
inline bool UpdateProjectRequest::_internal_has_db_info() const {
  return this != internal_default_instance() && db_info_ != nullptr;
}
inline bool UpdateProjectRequest::has_db_info() const {
  return _internal_has_db_info();
}
inline const PROTOBUF_NAMESPACE_ID::StringValue& UpdateProjectRequest::_internal_db_info() const {
  const PROTOBUF_NAMESPACE_ID::StringValue* p = db_info_;
  return p != nullptr ? *p : reinterpret_cast<const PROTOBUF_NAMESPACE_ID::StringValue&>(
      PROTOBUF_NAMESPACE_ID::_StringValue_default_instance_);
}
inline const PROTOBUF_NAMESPACE_ID::StringValue& UpdateProjectRequest::db_info() const {
  // @@protoc_insertion_point(field_get:smart3dmap.v1.UpdateProjectRequest.db_info)
  return _internal_db_info();
}
inline void UpdateProjectRequest::unsafe_arena_set_allocated_db_info(
    PROTOBUF_NAMESPACE_ID::StringValue* db_info) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(db_info_);
  }
  db_info_ = db_info;
  if (db_info) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:smart3dmap.v1.UpdateProjectRequest.db_info)
}
inline PROTOBUF_NAMESPACE_ID::StringValue* UpdateProjectRequest::release_db_info() {
  
  PROTOBUF_NAMESPACE_ID::StringValue* temp = db_info_;
  db_info_ = nullptr;
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline PROTOBUF_NAMESPACE_ID::StringValue* UpdateProjectRequest::unsafe_arena_release_db_info() {
  // @@protoc_insertion_point(field_release:smart3dmap.v1.UpdateProjectRequest.db_info)
  
  PROTOBUF_NAMESPACE_ID::StringValue* temp = db_info_;
  db_info_ = nullptr;
  return temp;
}
inline PROTOBUF_NAMESPACE_ID::StringValue* UpdateProjectRequest::_internal_mutable_db_info() {
  
  if (db_info_ == nullptr) {
    auto* p = CreateMaybeMessage<PROTOBUF_NAMESPACE_ID::StringValue>(GetArena());
    db_info_ = p;
  }
  return db_info_;
}
inline PROTOBUF_NAMESPACE_ID::StringValue* UpdateProjectRequest::mutable_db_info() {
  // @@protoc_insertion_point(field_mutable:smart3dmap.v1.UpdateProjectRequest.db_info)
  return _internal_mutable_db_info();
}
inline void UpdateProjectRequest::set_allocated_db_info(PROTOBUF_NAMESPACE_ID::StringValue* db_info) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(db_info_);
  }
  if (db_info) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(db_info)->GetArena();
    if (message_arena != submessage_arena) {
      db_info = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, db_info, submessage_arena);
    }
    
  } else {
    
  }
  db_info_ = db_info;
  // @@protoc_insertion_point(field_set_allocated:smart3dmap.v1.UpdateProjectRequest.db_info)
}

// .google.protobuf.StringValue data_tree_2d = 15;
inline bool UpdateProjectRequest::_internal_has_data_tree_2d() const {
  return this != internal_default_instance() && data_tree_2d_ != nullptr;
}
inline bool UpdateProjectRequest::has_data_tree_2d() const {
  return _internal_has_data_tree_2d();
}
inline const PROTOBUF_NAMESPACE_ID::StringValue& UpdateProjectRequest::_internal_data_tree_2d() const {
  const PROTOBUF_NAMESPACE_ID::StringValue* p = data_tree_2d_;
  return p != nullptr ? *p : reinterpret_cast<const PROTOBUF_NAMESPACE_ID::StringValue&>(
      PROTOBUF_NAMESPACE_ID::_StringValue_default_instance_);
}
inline const PROTOBUF_NAMESPACE_ID::StringValue& UpdateProjectRequest::data_tree_2d() const {
  // @@protoc_insertion_point(field_get:smart3dmap.v1.UpdateProjectRequest.data_tree_2d)
  return _internal_data_tree_2d();
}
inline void UpdateProjectRequest::unsafe_arena_set_allocated_data_tree_2d(
    PROTOBUF_NAMESPACE_ID::StringValue* data_tree_2d) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(data_tree_2d_);
  }
  data_tree_2d_ = data_tree_2d;
  if (data_tree_2d) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:smart3dmap.v1.UpdateProjectRequest.data_tree_2d)
}
inline PROTOBUF_NAMESPACE_ID::StringValue* UpdateProjectRequest::release_data_tree_2d() {
  
  PROTOBUF_NAMESPACE_ID::StringValue* temp = data_tree_2d_;
  data_tree_2d_ = nullptr;
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline PROTOBUF_NAMESPACE_ID::StringValue* UpdateProjectRequest::unsafe_arena_release_data_tree_2d() {
  // @@protoc_insertion_point(field_release:smart3dmap.v1.UpdateProjectRequest.data_tree_2d)
  
  PROTOBUF_NAMESPACE_ID::StringValue* temp = data_tree_2d_;
  data_tree_2d_ = nullptr;
  return temp;
}
inline PROTOBUF_NAMESPACE_ID::StringValue* UpdateProjectRequest::_internal_mutable_data_tree_2d() {
  
  if (data_tree_2d_ == nullptr) {
    auto* p = CreateMaybeMessage<PROTOBUF_NAMESPACE_ID::StringValue>(GetArena());
    data_tree_2d_ = p;
  }
  return data_tree_2d_;
}
inline PROTOBUF_NAMESPACE_ID::StringValue* UpdateProjectRequest::mutable_data_tree_2d() {
  // @@protoc_insertion_point(field_mutable:smart3dmap.v1.UpdateProjectRequest.data_tree_2d)
  return _internal_mutable_data_tree_2d();
}
inline void UpdateProjectRequest::set_allocated_data_tree_2d(PROTOBUF_NAMESPACE_ID::StringValue* data_tree_2d) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(data_tree_2d_);
  }
  if (data_tree_2d) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(data_tree_2d)->GetArena();
    if (message_arena != submessage_arena) {
      data_tree_2d = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, data_tree_2d, submessage_arena);
    }
    
  } else {
    
  }
  data_tree_2d_ = data_tree_2d;
  // @@protoc_insertion_point(field_set_allocated:smart3dmap.v1.UpdateProjectRequest.data_tree_2d)
}

// .google.protobuf.StringValue data_tree_3d = 16;
inline bool UpdateProjectRequest::_internal_has_data_tree_3d() const {
  return this != internal_default_instance() && data_tree_3d_ != nullptr;
}
inline bool UpdateProjectRequest::has_data_tree_3d() const {
  return _internal_has_data_tree_3d();
}
inline const PROTOBUF_NAMESPACE_ID::StringValue& UpdateProjectRequest::_internal_data_tree_3d() const {
  const PROTOBUF_NAMESPACE_ID::StringValue* p = data_tree_3d_;
  return p != nullptr ? *p : reinterpret_cast<const PROTOBUF_NAMESPACE_ID::StringValue&>(
      PROTOBUF_NAMESPACE_ID::_StringValue_default_instance_);
}
inline const PROTOBUF_NAMESPACE_ID::StringValue& UpdateProjectRequest::data_tree_3d() const {
  // @@protoc_insertion_point(field_get:smart3dmap.v1.UpdateProjectRequest.data_tree_3d)
  return _internal_data_tree_3d();
}
inline void UpdateProjectRequest::unsafe_arena_set_allocated_data_tree_3d(
    PROTOBUF_NAMESPACE_ID::StringValue* data_tree_3d) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(data_tree_3d_);
  }
  data_tree_3d_ = data_tree_3d;
  if (data_tree_3d) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:smart3dmap.v1.UpdateProjectRequest.data_tree_3d)
}
inline PROTOBUF_NAMESPACE_ID::StringValue* UpdateProjectRequest::release_data_tree_3d() {
  
  PROTOBUF_NAMESPACE_ID::StringValue* temp = data_tree_3d_;
  data_tree_3d_ = nullptr;
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline PROTOBUF_NAMESPACE_ID::StringValue* UpdateProjectRequest::unsafe_arena_release_data_tree_3d() {
  // @@protoc_insertion_point(field_release:smart3dmap.v1.UpdateProjectRequest.data_tree_3d)
  
  PROTOBUF_NAMESPACE_ID::StringValue* temp = data_tree_3d_;
  data_tree_3d_ = nullptr;
  return temp;
}
inline PROTOBUF_NAMESPACE_ID::StringValue* UpdateProjectRequest::_internal_mutable_data_tree_3d() {
  
  if (data_tree_3d_ == nullptr) {
    auto* p = CreateMaybeMessage<PROTOBUF_NAMESPACE_ID::StringValue>(GetArena());
    data_tree_3d_ = p;
  }
  return data_tree_3d_;
}
inline PROTOBUF_NAMESPACE_ID::StringValue* UpdateProjectRequest::mutable_data_tree_3d() {
  // @@protoc_insertion_point(field_mutable:smart3dmap.v1.UpdateProjectRequest.data_tree_3d)
  return _internal_mutable_data_tree_3d();
}
inline void UpdateProjectRequest::set_allocated_data_tree_3d(PROTOBUF_NAMESPACE_ID::StringValue* data_tree_3d) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(data_tree_3d_);
  }
  if (data_tree_3d) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(data_tree_3d)->GetArena();
    if (message_arena != submessage_arena) {
      data_tree_3d = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, data_tree_3d, submessage_arena);
    }
    
  } else {
    
  }
  data_tree_3d_ = data_tree_3d;
  // @@protoc_insertion_point(field_set_allocated:smart3dmap.v1.UpdateProjectRequest.data_tree_3d)
}

// .google.protobuf.StringValue data_tree_db = 17;
inline bool UpdateProjectRequest::_internal_has_data_tree_db() const {
  return this != internal_default_instance() && data_tree_db_ != nullptr;
}
inline bool UpdateProjectRequest::has_data_tree_db() const {
  return _internal_has_data_tree_db();
}
inline const PROTOBUF_NAMESPACE_ID::StringValue& UpdateProjectRequest::_internal_data_tree_db() const {
  const PROTOBUF_NAMESPACE_ID::StringValue* p = data_tree_db_;
  return p != nullptr ? *p : reinterpret_cast<const PROTOBUF_NAMESPACE_ID::StringValue&>(
      PROTOBUF_NAMESPACE_ID::_StringValue_default_instance_);
}
inline const PROTOBUF_NAMESPACE_ID::StringValue& UpdateProjectRequest::data_tree_db() const {
  // @@protoc_insertion_point(field_get:smart3dmap.v1.UpdateProjectRequest.data_tree_db)
  return _internal_data_tree_db();
}
inline void UpdateProjectRequest::unsafe_arena_set_allocated_data_tree_db(
    PROTOBUF_NAMESPACE_ID::StringValue* data_tree_db) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(data_tree_db_);
  }
  data_tree_db_ = data_tree_db;
  if (data_tree_db) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:smart3dmap.v1.UpdateProjectRequest.data_tree_db)
}
inline PROTOBUF_NAMESPACE_ID::StringValue* UpdateProjectRequest::release_data_tree_db() {
  
  PROTOBUF_NAMESPACE_ID::StringValue* temp = data_tree_db_;
  data_tree_db_ = nullptr;
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline PROTOBUF_NAMESPACE_ID::StringValue* UpdateProjectRequest::unsafe_arena_release_data_tree_db() {
  // @@protoc_insertion_point(field_release:smart3dmap.v1.UpdateProjectRequest.data_tree_db)
  
  PROTOBUF_NAMESPACE_ID::StringValue* temp = data_tree_db_;
  data_tree_db_ = nullptr;
  return temp;
}
inline PROTOBUF_NAMESPACE_ID::StringValue* UpdateProjectRequest::_internal_mutable_data_tree_db() {
  
  if (data_tree_db_ == nullptr) {
    auto* p = CreateMaybeMessage<PROTOBUF_NAMESPACE_ID::StringValue>(GetArena());
    data_tree_db_ = p;
  }
  return data_tree_db_;
}
inline PROTOBUF_NAMESPACE_ID::StringValue* UpdateProjectRequest::mutable_data_tree_db() {
  // @@protoc_insertion_point(field_mutable:smart3dmap.v1.UpdateProjectRequest.data_tree_db)
  return _internal_mutable_data_tree_db();
}
inline void UpdateProjectRequest::set_allocated_data_tree_db(PROTOBUF_NAMESPACE_ID::StringValue* data_tree_db) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(data_tree_db_);
  }
  if (data_tree_db) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(data_tree_db)->GetArena();
    if (message_arena != submessage_arena) {
      data_tree_db = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, data_tree_db, submessage_arena);
    }
    
  } else {
    
  }
  data_tree_db_ = data_tree_db;
  // @@protoc_insertion_point(field_set_allocated:smart3dmap.v1.UpdateProjectRequest.data_tree_db)
}

// -------------------------------------------------------------------

// UpdateProjectResponse

// bool status = 1;
inline void UpdateProjectResponse::clear_status() {
  status_ = false;
}
inline bool UpdateProjectResponse::_internal_status() const {
  return status_;
}
inline bool UpdateProjectResponse::status() const {
  // @@protoc_insertion_point(field_get:smart3dmap.v1.UpdateProjectResponse.status)
  return _internal_status();
}
inline void UpdateProjectResponse::_internal_set_status(bool value) {
  
  status_ = value;
}
inline void UpdateProjectResponse::set_status(bool value) {
  _internal_set_status(value);
  // @@protoc_insertion_point(field_set:smart3dmap.v1.UpdateProjectResponse.status)
}

// string error = 2;
inline void UpdateProjectResponse::clear_error() {
  error_.ClearToEmpty();
}
inline const std::string& UpdateProjectResponse::error() const {
  // @@protoc_insertion_point(field_get:smart3dmap.v1.UpdateProjectResponse.error)
  return _internal_error();
}
inline void UpdateProjectResponse::set_error(const std::string& value) {
  _internal_set_error(value);
  // @@protoc_insertion_point(field_set:smart3dmap.v1.UpdateProjectResponse.error)
}
inline std::string* UpdateProjectResponse::mutable_error() {
  // @@protoc_insertion_point(field_mutable:smart3dmap.v1.UpdateProjectResponse.error)
  return _internal_mutable_error();
}
inline const std::string& UpdateProjectResponse::_internal_error() const {
  return error_.Get();
}
inline void UpdateProjectResponse::_internal_set_error(const std::string& value) {
  
  error_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArena());
}
inline void UpdateProjectResponse::set_error(std::string&& value) {
  
  error_.Set(
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:smart3dmap.v1.UpdateProjectResponse.error)
}
inline void UpdateProjectResponse::set_error(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  error_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(value), GetArena());
  // @@protoc_insertion_point(field_set_char:smart3dmap.v1.UpdateProjectResponse.error)
}
inline void UpdateProjectResponse::set_error(const char* value,
    size_t size) {
  
  error_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:smart3dmap.v1.UpdateProjectResponse.error)
}
inline std::string* UpdateProjectResponse::_internal_mutable_error() {
  
  return error_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArena());
}
inline std::string* UpdateProjectResponse::release_error() {
  // @@protoc_insertion_point(field_release:smart3dmap.v1.UpdateProjectResponse.error)
  return error_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void UpdateProjectResponse::set_allocated_error(std::string* error) {
  if (error != nullptr) {
    
  } else {
    
  }
  error_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), error,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:smart3dmap.v1.UpdateProjectResponse.error)
}

// -------------------------------------------------------------------

// PublishProjectRequest

// int32 id = 1;
inline void PublishProjectRequest::clear_id() {
  id_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 PublishProjectRequest::_internal_id() const {
  return id_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 PublishProjectRequest::id() const {
  // @@protoc_insertion_point(field_get:smart3dmap.v1.PublishProjectRequest.id)
  return _internal_id();
}
inline void PublishProjectRequest::_internal_set_id(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  id_ = value;
}
inline void PublishProjectRequest::set_id(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_id(value);
  // @@protoc_insertion_point(field_set:smart3dmap.v1.PublishProjectRequest.id)
}

// bool publish = 2;
inline void PublishProjectRequest::clear_publish() {
  publish_ = false;
}
inline bool PublishProjectRequest::_internal_publish() const {
  return publish_;
}
inline bool PublishProjectRequest::publish() const {
  // @@protoc_insertion_point(field_get:smart3dmap.v1.PublishProjectRequest.publish)
  return _internal_publish();
}
inline void PublishProjectRequest::_internal_set_publish(bool value) {
  
  publish_ = value;
}
inline void PublishProjectRequest::set_publish(bool value) {
  _internal_set_publish(value);
  // @@protoc_insertion_point(field_set:smart3dmap.v1.PublishProjectRequest.publish)
}

// -------------------------------------------------------------------

// PublishProjectResponse

// bool status = 1;
inline void PublishProjectResponse::clear_status() {
  status_ = false;
}
inline bool PublishProjectResponse::_internal_status() const {
  return status_;
}
inline bool PublishProjectResponse::status() const {
  // @@protoc_insertion_point(field_get:smart3dmap.v1.PublishProjectResponse.status)
  return _internal_status();
}
inline void PublishProjectResponse::_internal_set_status(bool value) {
  
  status_ = value;
}
inline void PublishProjectResponse::set_status(bool value) {
  _internal_set_status(value);
  // @@protoc_insertion_point(field_set:smart3dmap.v1.PublishProjectResponse.status)
}

// string error = 2;
inline void PublishProjectResponse::clear_error() {
  error_.ClearToEmpty();
}
inline const std::string& PublishProjectResponse::error() const {
  // @@protoc_insertion_point(field_get:smart3dmap.v1.PublishProjectResponse.error)
  return _internal_error();
}
inline void PublishProjectResponse::set_error(const std::string& value) {
  _internal_set_error(value);
  // @@protoc_insertion_point(field_set:smart3dmap.v1.PublishProjectResponse.error)
}
inline std::string* PublishProjectResponse::mutable_error() {
  // @@protoc_insertion_point(field_mutable:smart3dmap.v1.PublishProjectResponse.error)
  return _internal_mutable_error();
}
inline const std::string& PublishProjectResponse::_internal_error() const {
  return error_.Get();
}
inline void PublishProjectResponse::_internal_set_error(const std::string& value) {
  
  error_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArena());
}
inline void PublishProjectResponse::set_error(std::string&& value) {
  
  error_.Set(
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:smart3dmap.v1.PublishProjectResponse.error)
}
inline void PublishProjectResponse::set_error(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  error_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(value), GetArena());
  // @@protoc_insertion_point(field_set_char:smart3dmap.v1.PublishProjectResponse.error)
}
inline void PublishProjectResponse::set_error(const char* value,
    size_t size) {
  
  error_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:smart3dmap.v1.PublishProjectResponse.error)
}
inline std::string* PublishProjectResponse::_internal_mutable_error() {
  
  return error_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArena());
}
inline std::string* PublishProjectResponse::release_error() {
  // @@protoc_insertion_point(field_release:smart3dmap.v1.PublishProjectResponse.error)
  return error_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void PublishProjectResponse::set_allocated_error(std::string* error) {
  if (error != nullptr) {
    
  } else {
    
  }
  error_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), error,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:smart3dmap.v1.PublishProjectResponse.error)
}

// -------------------------------------------------------------------

// DeleteProjectRequest

// int32 id = 1;
inline void DeleteProjectRequest::clear_id() {
  id_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 DeleteProjectRequest::_internal_id() const {
  return id_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 DeleteProjectRequest::id() const {
  // @@protoc_insertion_point(field_get:smart3dmap.v1.DeleteProjectRequest.id)
  return _internal_id();
}
inline void DeleteProjectRequest::_internal_set_id(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  id_ = value;
}
inline void DeleteProjectRequest::set_id(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_id(value);
  // @@protoc_insertion_point(field_set:smart3dmap.v1.DeleteProjectRequest.id)
}

// -------------------------------------------------------------------

// DeleteProjectResponse

// bool status = 1;
inline void DeleteProjectResponse::clear_status() {
  status_ = false;
}
inline bool DeleteProjectResponse::_internal_status() const {
  return status_;
}
inline bool DeleteProjectResponse::status() const {
  // @@protoc_insertion_point(field_get:smart3dmap.v1.DeleteProjectResponse.status)
  return _internal_status();
}
inline void DeleteProjectResponse::_internal_set_status(bool value) {
  
  status_ = value;
}
inline void DeleteProjectResponse::set_status(bool value) {
  _internal_set_status(value);
  // @@protoc_insertion_point(field_set:smart3dmap.v1.DeleteProjectResponse.status)
}

// string error = 2;
inline void DeleteProjectResponse::clear_error() {
  error_.ClearToEmpty();
}
inline const std::string& DeleteProjectResponse::error() const {
  // @@protoc_insertion_point(field_get:smart3dmap.v1.DeleteProjectResponse.error)
  return _internal_error();
}
inline void DeleteProjectResponse::set_error(const std::string& value) {
  _internal_set_error(value);
  // @@protoc_insertion_point(field_set:smart3dmap.v1.DeleteProjectResponse.error)
}
inline std::string* DeleteProjectResponse::mutable_error() {
  // @@protoc_insertion_point(field_mutable:smart3dmap.v1.DeleteProjectResponse.error)
  return _internal_mutable_error();
}
inline const std::string& DeleteProjectResponse::_internal_error() const {
  return error_.Get();
}
inline void DeleteProjectResponse::_internal_set_error(const std::string& value) {
  
  error_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArena());
}
inline void DeleteProjectResponse::set_error(std::string&& value) {
  
  error_.Set(
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:smart3dmap.v1.DeleteProjectResponse.error)
}
inline void DeleteProjectResponse::set_error(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  error_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(value), GetArena());
  // @@protoc_insertion_point(field_set_char:smart3dmap.v1.DeleteProjectResponse.error)
}
inline void DeleteProjectResponse::set_error(const char* value,
    size_t size) {
  
  error_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:smart3dmap.v1.DeleteProjectResponse.error)
}
inline std::string* DeleteProjectResponse::_internal_mutable_error() {
  
  return error_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArena());
}
inline std::string* DeleteProjectResponse::release_error() {
  // @@protoc_insertion_point(field_release:smart3dmap.v1.DeleteProjectResponse.error)
  return error_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void DeleteProjectResponse::set_allocated_error(std::string* error) {
  if (error != nullptr) {
    
  } else {
    
  }
  error_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), error,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:smart3dmap.v1.DeleteProjectResponse.error)
}

// -------------------------------------------------------------------

// BasicProject

// int32 id = 1;
inline void BasicProject::clear_id() {
  id_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 BasicProject::_internal_id() const {
  return id_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 BasicProject::id() const {
  // @@protoc_insertion_point(field_get:smart3dmap.v1.BasicProject.id)
  return _internal_id();
}
inline void BasicProject::_internal_set_id(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  id_ = value;
}
inline void BasicProject::set_id(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_id(value);
  // @@protoc_insertion_point(field_set:smart3dmap.v1.BasicProject.id)
}

// string name = 2;
inline void BasicProject::clear_name() {
  name_.ClearToEmpty();
}
inline const std::string& BasicProject::name() const {
  // @@protoc_insertion_point(field_get:smart3dmap.v1.BasicProject.name)
  return _internal_name();
}
inline void BasicProject::set_name(const std::string& value) {
  _internal_set_name(value);
  // @@protoc_insertion_point(field_set:smart3dmap.v1.BasicProject.name)
}
inline std::string* BasicProject::mutable_name() {
  // @@protoc_insertion_point(field_mutable:smart3dmap.v1.BasicProject.name)
  return _internal_mutable_name();
}
inline const std::string& BasicProject::_internal_name() const {
  return name_.Get();
}
inline void BasicProject::_internal_set_name(const std::string& value) {
  
  name_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArena());
}
inline void BasicProject::set_name(std::string&& value) {
  
  name_.Set(
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:smart3dmap.v1.BasicProject.name)
}
inline void BasicProject::set_name(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  name_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(value), GetArena());
  // @@protoc_insertion_point(field_set_char:smart3dmap.v1.BasicProject.name)
}
inline void BasicProject::set_name(const char* value,
    size_t size) {
  
  name_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:smart3dmap.v1.BasicProject.name)
}
inline std::string* BasicProject::_internal_mutable_name() {
  
  return name_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArena());
}
inline std::string* BasicProject::release_name() {
  // @@protoc_insertion_point(field_release:smart3dmap.v1.BasicProject.name)
  return name_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void BasicProject::set_allocated_name(std::string* name) {
  if (name != nullptr) {
    
  } else {
    
  }
  name_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), name,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:smart3dmap.v1.BasicProject.name)
}

// string authors = 3;
inline void BasicProject::clear_authors() {
  authors_.ClearToEmpty();
}
inline const std::string& BasicProject::authors() const {
  // @@protoc_insertion_point(field_get:smart3dmap.v1.BasicProject.authors)
  return _internal_authors();
}
inline void BasicProject::set_authors(const std::string& value) {
  _internal_set_authors(value);
  // @@protoc_insertion_point(field_set:smart3dmap.v1.BasicProject.authors)
}
inline std::string* BasicProject::mutable_authors() {
  // @@protoc_insertion_point(field_mutable:smart3dmap.v1.BasicProject.authors)
  return _internal_mutable_authors();
}
inline const std::string& BasicProject::_internal_authors() const {
  return authors_.Get();
}
inline void BasicProject::_internal_set_authors(const std::string& value) {
  
  authors_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArena());
}
inline void BasicProject::set_authors(std::string&& value) {
  
  authors_.Set(
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:smart3dmap.v1.BasicProject.authors)
}
inline void BasicProject::set_authors(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  authors_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(value), GetArena());
  // @@protoc_insertion_point(field_set_char:smart3dmap.v1.BasicProject.authors)
}
inline void BasicProject::set_authors(const char* value,
    size_t size) {
  
  authors_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:smart3dmap.v1.BasicProject.authors)
}
inline std::string* BasicProject::_internal_mutable_authors() {
  
  return authors_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArena());
}
inline std::string* BasicProject::release_authors() {
  // @@protoc_insertion_point(field_release:smart3dmap.v1.BasicProject.authors)
  return authors_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void BasicProject::set_allocated_authors(std::string* authors) {
  if (authors != nullptr) {
    
  } else {
    
  }
  authors_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), authors,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:smart3dmap.v1.BasicProject.authors)
}

// string description = 4;
inline void BasicProject::clear_description() {
  description_.ClearToEmpty();
}
inline const std::string& BasicProject::description() const {
  // @@protoc_insertion_point(field_get:smart3dmap.v1.BasicProject.description)
  return _internal_description();
}
inline void BasicProject::set_description(const std::string& value) {
  _internal_set_description(value);
  // @@protoc_insertion_point(field_set:smart3dmap.v1.BasicProject.description)
}
inline std::string* BasicProject::mutable_description() {
  // @@protoc_insertion_point(field_mutable:smart3dmap.v1.BasicProject.description)
  return _internal_mutable_description();
}
inline const std::string& BasicProject::_internal_description() const {
  return description_.Get();
}
inline void BasicProject::_internal_set_description(const std::string& value) {
  
  description_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArena());
}
inline void BasicProject::set_description(std::string&& value) {
  
  description_.Set(
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:smart3dmap.v1.BasicProject.description)
}
inline void BasicProject::set_description(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  description_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(value), GetArena());
  // @@protoc_insertion_point(field_set_char:smart3dmap.v1.BasicProject.description)
}
inline void BasicProject::set_description(const char* value,
    size_t size) {
  
  description_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:smart3dmap.v1.BasicProject.description)
}
inline std::string* BasicProject::_internal_mutable_description() {
  
  return description_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArena());
}
inline std::string* BasicProject::release_description() {
  // @@protoc_insertion_point(field_release:smart3dmap.v1.BasicProject.description)
  return description_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void BasicProject::set_allocated_description(std::string* description) {
  if (description != nullptr) {
    
  } else {
    
  }
  description_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), description,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:smart3dmap.v1.BasicProject.description)
}

// string crs = 5;
inline void BasicProject::clear_crs() {
  crs_.ClearToEmpty();
}
inline const std::string& BasicProject::crs() const {
  // @@protoc_insertion_point(field_get:smart3dmap.v1.BasicProject.crs)
  return _internal_crs();
}
inline void BasicProject::set_crs(const std::string& value) {
  _internal_set_crs(value);
  // @@protoc_insertion_point(field_set:smart3dmap.v1.BasicProject.crs)
}
inline std::string* BasicProject::mutable_crs() {
  // @@protoc_insertion_point(field_mutable:smart3dmap.v1.BasicProject.crs)
  return _internal_mutable_crs();
}
inline const std::string& BasicProject::_internal_crs() const {
  return crs_.Get();
}
inline void BasicProject::_internal_set_crs(const std::string& value) {
  
  crs_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArena());
}
inline void BasicProject::set_crs(std::string&& value) {
  
  crs_.Set(
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:smart3dmap.v1.BasicProject.crs)
}
inline void BasicProject::set_crs(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  crs_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(value), GetArena());
  // @@protoc_insertion_point(field_set_char:smart3dmap.v1.BasicProject.crs)
}
inline void BasicProject::set_crs(const char* value,
    size_t size) {
  
  crs_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:smart3dmap.v1.BasicProject.crs)
}
inline std::string* BasicProject::_internal_mutable_crs() {
  
  return crs_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArena());
}
inline std::string* BasicProject::release_crs() {
  // @@protoc_insertion_point(field_release:smart3dmap.v1.BasicProject.crs)
  return crs_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void BasicProject::set_allocated_crs(std::string* crs) {
  if (crs != nullptr) {
    
  } else {
    
  }
  crs_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), crs,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:smart3dmap.v1.BasicProject.crs)
}

// string unit = 6;
inline void BasicProject::clear_unit() {
  unit_.ClearToEmpty();
}
inline const std::string& BasicProject::unit() const {
  // @@protoc_insertion_point(field_get:smart3dmap.v1.BasicProject.unit)
  return _internal_unit();
}
inline void BasicProject::set_unit(const std::string& value) {
  _internal_set_unit(value);
  // @@protoc_insertion_point(field_set:smart3dmap.v1.BasicProject.unit)
}
inline std::string* BasicProject::mutable_unit() {
  // @@protoc_insertion_point(field_mutable:smart3dmap.v1.BasicProject.unit)
  return _internal_mutable_unit();
}
inline const std::string& BasicProject::_internal_unit() const {
  return unit_.Get();
}
inline void BasicProject::_internal_set_unit(const std::string& value) {
  
  unit_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArena());
}
inline void BasicProject::set_unit(std::string&& value) {
  
  unit_.Set(
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:smart3dmap.v1.BasicProject.unit)
}
inline void BasicProject::set_unit(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  unit_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(value), GetArena());
  // @@protoc_insertion_point(field_set_char:smart3dmap.v1.BasicProject.unit)
}
inline void BasicProject::set_unit(const char* value,
    size_t size) {
  
  unit_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:smart3dmap.v1.BasicProject.unit)
}
inline std::string* BasicProject::_internal_mutable_unit() {
  
  return unit_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArena());
}
inline std::string* BasicProject::release_unit() {
  // @@protoc_insertion_point(field_release:smart3dmap.v1.BasicProject.unit)
  return unit_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void BasicProject::set_allocated_unit(std::string* unit) {
  if (unit != nullptr) {
    
  } else {
    
  }
  unit_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), unit,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:smart3dmap.v1.BasicProject.unit)
}

// double min_x = 7;
inline void BasicProject::clear_min_x() {
  min_x_ = 0;
}
inline double BasicProject::_internal_min_x() const {
  return min_x_;
}
inline double BasicProject::min_x() const {
  // @@protoc_insertion_point(field_get:smart3dmap.v1.BasicProject.min_x)
  return _internal_min_x();
}
inline void BasicProject::_internal_set_min_x(double value) {
  
  min_x_ = value;
}
inline void BasicProject::set_min_x(double value) {
  _internal_set_min_x(value);
  // @@protoc_insertion_point(field_set:smart3dmap.v1.BasicProject.min_x)
}

// double min_y = 8;
inline void BasicProject::clear_min_y() {
  min_y_ = 0;
}
inline double BasicProject::_internal_min_y() const {
  return min_y_;
}
inline double BasicProject::min_y() const {
  // @@protoc_insertion_point(field_get:smart3dmap.v1.BasicProject.min_y)
  return _internal_min_y();
}
inline void BasicProject::_internal_set_min_y(double value) {
  
  min_y_ = value;
}
inline void BasicProject::set_min_y(double value) {
  _internal_set_min_y(value);
  // @@protoc_insertion_point(field_set:smart3dmap.v1.BasicProject.min_y)
}

// double min_z = 9;
inline void BasicProject::clear_min_z() {
  min_z_ = 0;
}
inline double BasicProject::_internal_min_z() const {
  return min_z_;
}
inline double BasicProject::min_z() const {
  // @@protoc_insertion_point(field_get:smart3dmap.v1.BasicProject.min_z)
  return _internal_min_z();
}
inline void BasicProject::_internal_set_min_z(double value) {
  
  min_z_ = value;
}
inline void BasicProject::set_min_z(double value) {
  _internal_set_min_z(value);
  // @@protoc_insertion_point(field_set:smart3dmap.v1.BasicProject.min_z)
}

// double max_x = 10;
inline void BasicProject::clear_max_x() {
  max_x_ = 0;
}
inline double BasicProject::_internal_max_x() const {
  return max_x_;
}
inline double BasicProject::max_x() const {
  // @@protoc_insertion_point(field_get:smart3dmap.v1.BasicProject.max_x)
  return _internal_max_x();
}
inline void BasicProject::_internal_set_max_x(double value) {
  
  max_x_ = value;
}
inline void BasicProject::set_max_x(double value) {
  _internal_set_max_x(value);
  // @@protoc_insertion_point(field_set:smart3dmap.v1.BasicProject.max_x)
}

// double max_y = 11;
inline void BasicProject::clear_max_y() {
  max_y_ = 0;
}
inline double BasicProject::_internal_max_y() const {
  return max_y_;
}
inline double BasicProject::max_y() const {
  // @@protoc_insertion_point(field_get:smart3dmap.v1.BasicProject.max_y)
  return _internal_max_y();
}
inline void BasicProject::_internal_set_max_y(double value) {
  
  max_y_ = value;
}
inline void BasicProject::set_max_y(double value) {
  _internal_set_max_y(value);
  // @@protoc_insertion_point(field_set:smart3dmap.v1.BasicProject.max_y)
}

// double max_z = 12;
inline void BasicProject::clear_max_z() {
  max_z_ = 0;
}
inline double BasicProject::_internal_max_z() const {
  return max_z_;
}
inline double BasicProject::max_z() const {
  // @@protoc_insertion_point(field_get:smart3dmap.v1.BasicProject.max_z)
  return _internal_max_z();
}
inline void BasicProject::_internal_set_max_z(double value) {
  
  max_z_ = value;
}
inline void BasicProject::set_max_z(double value) {
  _internal_set_max_z(value);
  // @@protoc_insertion_point(field_set:smart3dmap.v1.BasicProject.max_z)
}

// bool is_published = 13;
inline void BasicProject::clear_is_published() {
  is_published_ = false;
}
inline bool BasicProject::_internal_is_published() const {
  return is_published_;
}
inline bool BasicProject::is_published() const {
  // @@protoc_insertion_point(field_get:smart3dmap.v1.BasicProject.is_published)
  return _internal_is_published();
}
inline void BasicProject::_internal_set_is_published(bool value) {
  
  is_published_ = value;
}
inline void BasicProject::set_is_published(bool value) {
  _internal_set_is_published(value);
  // @@protoc_insertion_point(field_set:smart3dmap.v1.BasicProject.is_published)
}

// .google.protobuf.Timestamp created_at = 14;
inline bool BasicProject::_internal_has_created_at() const {
  return this != internal_default_instance() && created_at_ != nullptr;
}
inline bool BasicProject::has_created_at() const {
  return _internal_has_created_at();
}
inline const PROTOBUF_NAMESPACE_ID::Timestamp& BasicProject::_internal_created_at() const {
  const PROTOBUF_NAMESPACE_ID::Timestamp* p = created_at_;
  return p != nullptr ? *p : reinterpret_cast<const PROTOBUF_NAMESPACE_ID::Timestamp&>(
      PROTOBUF_NAMESPACE_ID::_Timestamp_default_instance_);
}
inline const PROTOBUF_NAMESPACE_ID::Timestamp& BasicProject::created_at() const {
  // @@protoc_insertion_point(field_get:smart3dmap.v1.BasicProject.created_at)
  return _internal_created_at();
}
inline void BasicProject::unsafe_arena_set_allocated_created_at(
    PROTOBUF_NAMESPACE_ID::Timestamp* created_at) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(created_at_);
  }
  created_at_ = created_at;
  if (created_at) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:smart3dmap.v1.BasicProject.created_at)
}
inline PROTOBUF_NAMESPACE_ID::Timestamp* BasicProject::release_created_at() {
  
  PROTOBUF_NAMESPACE_ID::Timestamp* temp = created_at_;
  created_at_ = nullptr;
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline PROTOBUF_NAMESPACE_ID::Timestamp* BasicProject::unsafe_arena_release_created_at() {
  // @@protoc_insertion_point(field_release:smart3dmap.v1.BasicProject.created_at)
  
  PROTOBUF_NAMESPACE_ID::Timestamp* temp = created_at_;
  created_at_ = nullptr;
  return temp;
}
inline PROTOBUF_NAMESPACE_ID::Timestamp* BasicProject::_internal_mutable_created_at() {
  
  if (created_at_ == nullptr) {
    auto* p = CreateMaybeMessage<PROTOBUF_NAMESPACE_ID::Timestamp>(GetArena());
    created_at_ = p;
  }
  return created_at_;
}
inline PROTOBUF_NAMESPACE_ID::Timestamp* BasicProject::mutable_created_at() {
  // @@protoc_insertion_point(field_mutable:smart3dmap.v1.BasicProject.created_at)
  return _internal_mutable_created_at();
}
inline void BasicProject::set_allocated_created_at(PROTOBUF_NAMESPACE_ID::Timestamp* created_at) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(created_at_);
  }
  if (created_at) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(created_at)->GetArena();
    if (message_arena != submessage_arena) {
      created_at = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, created_at, submessage_arena);
    }
    
  } else {
    
  }
  created_at_ = created_at;
  // @@protoc_insertion_point(field_set_allocated:smart3dmap.v1.BasicProject.created_at)
}

// .google.protobuf.Timestamp updated_at = 15;
inline bool BasicProject::_internal_has_updated_at() const {
  return this != internal_default_instance() && updated_at_ != nullptr;
}
inline bool BasicProject::has_updated_at() const {
  return _internal_has_updated_at();
}
inline const PROTOBUF_NAMESPACE_ID::Timestamp& BasicProject::_internal_updated_at() const {
  const PROTOBUF_NAMESPACE_ID::Timestamp* p = updated_at_;
  return p != nullptr ? *p : reinterpret_cast<const PROTOBUF_NAMESPACE_ID::Timestamp&>(
      PROTOBUF_NAMESPACE_ID::_Timestamp_default_instance_);
}
inline const PROTOBUF_NAMESPACE_ID::Timestamp& BasicProject::updated_at() const {
  // @@protoc_insertion_point(field_get:smart3dmap.v1.BasicProject.updated_at)
  return _internal_updated_at();
}
inline void BasicProject::unsafe_arena_set_allocated_updated_at(
    PROTOBUF_NAMESPACE_ID::Timestamp* updated_at) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(updated_at_);
  }
  updated_at_ = updated_at;
  if (updated_at) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:smart3dmap.v1.BasicProject.updated_at)
}
inline PROTOBUF_NAMESPACE_ID::Timestamp* BasicProject::release_updated_at() {
  
  PROTOBUF_NAMESPACE_ID::Timestamp* temp = updated_at_;
  updated_at_ = nullptr;
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline PROTOBUF_NAMESPACE_ID::Timestamp* BasicProject::unsafe_arena_release_updated_at() {
  // @@protoc_insertion_point(field_release:smart3dmap.v1.BasicProject.updated_at)
  
  PROTOBUF_NAMESPACE_ID::Timestamp* temp = updated_at_;
  updated_at_ = nullptr;
  return temp;
}
inline PROTOBUF_NAMESPACE_ID::Timestamp* BasicProject::_internal_mutable_updated_at() {
  
  if (updated_at_ == nullptr) {
    auto* p = CreateMaybeMessage<PROTOBUF_NAMESPACE_ID::Timestamp>(GetArena());
    updated_at_ = p;
  }
  return updated_at_;
}
inline PROTOBUF_NAMESPACE_ID::Timestamp* BasicProject::mutable_updated_at() {
  // @@protoc_insertion_point(field_mutable:smart3dmap.v1.BasicProject.updated_at)
  return _internal_mutable_updated_at();
}
inline void BasicProject::set_allocated_updated_at(PROTOBUF_NAMESPACE_ID::Timestamp* updated_at) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(updated_at_);
  }
  if (updated_at) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(updated_at)->GetArena();
    if (message_arena != submessage_arena) {
      updated_at = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, updated_at, submessage_arena);
    }
    
  } else {
    
  }
  updated_at_ = updated_at;
  // @@protoc_insertion_point(field_set_allocated:smart3dmap.v1.BasicProject.updated_at)
}

// -------------------------------------------------------------------

// Project

// int32 id = 1;
inline void Project::clear_id() {
  id_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 Project::_internal_id() const {
  return id_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 Project::id() const {
  // @@protoc_insertion_point(field_get:smart3dmap.v1.Project.id)
  return _internal_id();
}
inline void Project::_internal_set_id(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  id_ = value;
}
inline void Project::set_id(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_id(value);
  // @@protoc_insertion_point(field_set:smart3dmap.v1.Project.id)
}

// string name = 2;
inline void Project::clear_name() {
  name_.ClearToEmpty();
}
inline const std::string& Project::name() const {
  // @@protoc_insertion_point(field_get:smart3dmap.v1.Project.name)
  return _internal_name();
}
inline void Project::set_name(const std::string& value) {
  _internal_set_name(value);
  // @@protoc_insertion_point(field_set:smart3dmap.v1.Project.name)
}
inline std::string* Project::mutable_name() {
  // @@protoc_insertion_point(field_mutable:smart3dmap.v1.Project.name)
  return _internal_mutable_name();
}
inline const std::string& Project::_internal_name() const {
  return name_.Get();
}
inline void Project::_internal_set_name(const std::string& value) {
  
  name_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArena());
}
inline void Project::set_name(std::string&& value) {
  
  name_.Set(
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:smart3dmap.v1.Project.name)
}
inline void Project::set_name(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  name_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(value), GetArena());
  // @@protoc_insertion_point(field_set_char:smart3dmap.v1.Project.name)
}
inline void Project::set_name(const char* value,
    size_t size) {
  
  name_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:smart3dmap.v1.Project.name)
}
inline std::string* Project::_internal_mutable_name() {
  
  return name_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArena());
}
inline std::string* Project::release_name() {
  // @@protoc_insertion_point(field_release:smart3dmap.v1.Project.name)
  return name_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void Project::set_allocated_name(std::string* name) {
  if (name != nullptr) {
    
  } else {
    
  }
  name_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), name,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:smart3dmap.v1.Project.name)
}

// string authors = 3;
inline void Project::clear_authors() {
  authors_.ClearToEmpty();
}
inline const std::string& Project::authors() const {
  // @@protoc_insertion_point(field_get:smart3dmap.v1.Project.authors)
  return _internal_authors();
}
inline void Project::set_authors(const std::string& value) {
  _internal_set_authors(value);
  // @@protoc_insertion_point(field_set:smart3dmap.v1.Project.authors)
}
inline std::string* Project::mutable_authors() {
  // @@protoc_insertion_point(field_mutable:smart3dmap.v1.Project.authors)
  return _internal_mutable_authors();
}
inline const std::string& Project::_internal_authors() const {
  return authors_.Get();
}
inline void Project::_internal_set_authors(const std::string& value) {
  
  authors_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArena());
}
inline void Project::set_authors(std::string&& value) {
  
  authors_.Set(
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:smart3dmap.v1.Project.authors)
}
inline void Project::set_authors(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  authors_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(value), GetArena());
  // @@protoc_insertion_point(field_set_char:smart3dmap.v1.Project.authors)
}
inline void Project::set_authors(const char* value,
    size_t size) {
  
  authors_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:smart3dmap.v1.Project.authors)
}
inline std::string* Project::_internal_mutable_authors() {
  
  return authors_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArena());
}
inline std::string* Project::release_authors() {
  // @@protoc_insertion_point(field_release:smart3dmap.v1.Project.authors)
  return authors_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void Project::set_allocated_authors(std::string* authors) {
  if (authors != nullptr) {
    
  } else {
    
  }
  authors_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), authors,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:smart3dmap.v1.Project.authors)
}

// string description = 4;
inline void Project::clear_description() {
  description_.ClearToEmpty();
}
inline const std::string& Project::description() const {
  // @@protoc_insertion_point(field_get:smart3dmap.v1.Project.description)
  return _internal_description();
}
inline void Project::set_description(const std::string& value) {
  _internal_set_description(value);
  // @@protoc_insertion_point(field_set:smart3dmap.v1.Project.description)
}
inline std::string* Project::mutable_description() {
  // @@protoc_insertion_point(field_mutable:smart3dmap.v1.Project.description)
  return _internal_mutable_description();
}
inline const std::string& Project::_internal_description() const {
  return description_.Get();
}
inline void Project::_internal_set_description(const std::string& value) {
  
  description_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArena());
}
inline void Project::set_description(std::string&& value) {
  
  description_.Set(
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:smart3dmap.v1.Project.description)
}
inline void Project::set_description(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  description_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(value), GetArena());
  // @@protoc_insertion_point(field_set_char:smart3dmap.v1.Project.description)
}
inline void Project::set_description(const char* value,
    size_t size) {
  
  description_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:smart3dmap.v1.Project.description)
}
inline std::string* Project::_internal_mutable_description() {
  
  return description_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArena());
}
inline std::string* Project::release_description() {
  // @@protoc_insertion_point(field_release:smart3dmap.v1.Project.description)
  return description_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void Project::set_allocated_description(std::string* description) {
  if (description != nullptr) {
    
  } else {
    
  }
  description_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), description,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:smart3dmap.v1.Project.description)
}

// string crs = 5;
inline void Project::clear_crs() {
  crs_.ClearToEmpty();
}
inline const std::string& Project::crs() const {
  // @@protoc_insertion_point(field_get:smart3dmap.v1.Project.crs)
  return _internal_crs();
}
inline void Project::set_crs(const std::string& value) {
  _internal_set_crs(value);
  // @@protoc_insertion_point(field_set:smart3dmap.v1.Project.crs)
}
inline std::string* Project::mutable_crs() {
  // @@protoc_insertion_point(field_mutable:smart3dmap.v1.Project.crs)
  return _internal_mutable_crs();
}
inline const std::string& Project::_internal_crs() const {
  return crs_.Get();
}
inline void Project::_internal_set_crs(const std::string& value) {
  
  crs_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArena());
}
inline void Project::set_crs(std::string&& value) {
  
  crs_.Set(
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:smart3dmap.v1.Project.crs)
}
inline void Project::set_crs(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  crs_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(value), GetArena());
  // @@protoc_insertion_point(field_set_char:smart3dmap.v1.Project.crs)
}
inline void Project::set_crs(const char* value,
    size_t size) {
  
  crs_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:smart3dmap.v1.Project.crs)
}
inline std::string* Project::_internal_mutable_crs() {
  
  return crs_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArena());
}
inline std::string* Project::release_crs() {
  // @@protoc_insertion_point(field_release:smart3dmap.v1.Project.crs)
  return crs_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void Project::set_allocated_crs(std::string* crs) {
  if (crs != nullptr) {
    
  } else {
    
  }
  crs_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), crs,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:smart3dmap.v1.Project.crs)
}

// string unit = 6;
inline void Project::clear_unit() {
  unit_.ClearToEmpty();
}
inline const std::string& Project::unit() const {
  // @@protoc_insertion_point(field_get:smart3dmap.v1.Project.unit)
  return _internal_unit();
}
inline void Project::set_unit(const std::string& value) {
  _internal_set_unit(value);
  // @@protoc_insertion_point(field_set:smart3dmap.v1.Project.unit)
}
inline std::string* Project::mutable_unit() {
  // @@protoc_insertion_point(field_mutable:smart3dmap.v1.Project.unit)
  return _internal_mutable_unit();
}
inline const std::string& Project::_internal_unit() const {
  return unit_.Get();
}
inline void Project::_internal_set_unit(const std::string& value) {
  
  unit_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArena());
}
inline void Project::set_unit(std::string&& value) {
  
  unit_.Set(
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:smart3dmap.v1.Project.unit)
}
inline void Project::set_unit(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  unit_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(value), GetArena());
  // @@protoc_insertion_point(field_set_char:smart3dmap.v1.Project.unit)
}
inline void Project::set_unit(const char* value,
    size_t size) {
  
  unit_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:smart3dmap.v1.Project.unit)
}
inline std::string* Project::_internal_mutable_unit() {
  
  return unit_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArena());
}
inline std::string* Project::release_unit() {
  // @@protoc_insertion_point(field_release:smart3dmap.v1.Project.unit)
  return unit_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void Project::set_allocated_unit(std::string* unit) {
  if (unit != nullptr) {
    
  } else {
    
  }
  unit_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), unit,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:smart3dmap.v1.Project.unit)
}

// double min_x = 7;
inline void Project::clear_min_x() {
  min_x_ = 0;
}
inline double Project::_internal_min_x() const {
  return min_x_;
}
inline double Project::min_x() const {
  // @@protoc_insertion_point(field_get:smart3dmap.v1.Project.min_x)
  return _internal_min_x();
}
inline void Project::_internal_set_min_x(double value) {
  
  min_x_ = value;
}
inline void Project::set_min_x(double value) {
  _internal_set_min_x(value);
  // @@protoc_insertion_point(field_set:smart3dmap.v1.Project.min_x)
}

// double min_y = 8;
inline void Project::clear_min_y() {
  min_y_ = 0;
}
inline double Project::_internal_min_y() const {
  return min_y_;
}
inline double Project::min_y() const {
  // @@protoc_insertion_point(field_get:smart3dmap.v1.Project.min_y)
  return _internal_min_y();
}
inline void Project::_internal_set_min_y(double value) {
  
  min_y_ = value;
}
inline void Project::set_min_y(double value) {
  _internal_set_min_y(value);
  // @@protoc_insertion_point(field_set:smart3dmap.v1.Project.min_y)
}

// double min_z = 9;
inline void Project::clear_min_z() {
  min_z_ = 0;
}
inline double Project::_internal_min_z() const {
  return min_z_;
}
inline double Project::min_z() const {
  // @@protoc_insertion_point(field_get:smart3dmap.v1.Project.min_z)
  return _internal_min_z();
}
inline void Project::_internal_set_min_z(double value) {
  
  min_z_ = value;
}
inline void Project::set_min_z(double value) {
  _internal_set_min_z(value);
  // @@protoc_insertion_point(field_set:smart3dmap.v1.Project.min_z)
}

// double max_x = 10;
inline void Project::clear_max_x() {
  max_x_ = 0;
}
inline double Project::_internal_max_x() const {
  return max_x_;
}
inline double Project::max_x() const {
  // @@protoc_insertion_point(field_get:smart3dmap.v1.Project.max_x)
  return _internal_max_x();
}
inline void Project::_internal_set_max_x(double value) {
  
  max_x_ = value;
}
inline void Project::set_max_x(double value) {
  _internal_set_max_x(value);
  // @@protoc_insertion_point(field_set:smart3dmap.v1.Project.max_x)
}

// double max_y = 11;
inline void Project::clear_max_y() {
  max_y_ = 0;
}
inline double Project::_internal_max_y() const {
  return max_y_;
}
inline double Project::max_y() const {
  // @@protoc_insertion_point(field_get:smart3dmap.v1.Project.max_y)
  return _internal_max_y();
}
inline void Project::_internal_set_max_y(double value) {
  
  max_y_ = value;
}
inline void Project::set_max_y(double value) {
  _internal_set_max_y(value);
  // @@protoc_insertion_point(field_set:smart3dmap.v1.Project.max_y)
}

// double max_z = 12;
inline void Project::clear_max_z() {
  max_z_ = 0;
}
inline double Project::_internal_max_z() const {
  return max_z_;
}
inline double Project::max_z() const {
  // @@protoc_insertion_point(field_get:smart3dmap.v1.Project.max_z)
  return _internal_max_z();
}
inline void Project::_internal_set_max_z(double value) {
  
  max_z_ = value;
}
inline void Project::set_max_z(double value) {
  _internal_set_max_z(value);
  // @@protoc_insertion_point(field_set:smart3dmap.v1.Project.max_z)
}

// bool is_published = 13;
inline void Project::clear_is_published() {
  is_published_ = false;
}
inline bool Project::_internal_is_published() const {
  return is_published_;
}
inline bool Project::is_published() const {
  // @@protoc_insertion_point(field_get:smart3dmap.v1.Project.is_published)
  return _internal_is_published();
}
inline void Project::_internal_set_is_published(bool value) {
  
  is_published_ = value;
}
inline void Project::set_is_published(bool value) {
  _internal_set_is_published(value);
  // @@protoc_insertion_point(field_set:smart3dmap.v1.Project.is_published)
}

// int32 std_strat_version = 14;
inline void Project::clear_std_strat_version() {
  std_strat_version_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 Project::_internal_std_strat_version() const {
  return std_strat_version_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 Project::std_strat_version() const {
  // @@protoc_insertion_point(field_get:smart3dmap.v1.Project.std_strat_version)
  return _internal_std_strat_version();
}
inline void Project::_internal_set_std_strat_version(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  std_strat_version_ = value;
}
inline void Project::set_std_strat_version(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_std_strat_version(value);
  // @@protoc_insertion_point(field_set:smart3dmap.v1.Project.std_strat_version)
}

// string db_info = 15;
inline void Project::clear_db_info() {
  db_info_.ClearToEmpty();
}
inline const std::string& Project::db_info() const {
  // @@protoc_insertion_point(field_get:smart3dmap.v1.Project.db_info)
  return _internal_db_info();
}
inline void Project::set_db_info(const std::string& value) {
  _internal_set_db_info(value);
  // @@protoc_insertion_point(field_set:smart3dmap.v1.Project.db_info)
}
inline std::string* Project::mutable_db_info() {
  // @@protoc_insertion_point(field_mutable:smart3dmap.v1.Project.db_info)
  return _internal_mutable_db_info();
}
inline const std::string& Project::_internal_db_info() const {
  return db_info_.Get();
}
inline void Project::_internal_set_db_info(const std::string& value) {
  
  db_info_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArena());
}
inline void Project::set_db_info(std::string&& value) {
  
  db_info_.Set(
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:smart3dmap.v1.Project.db_info)
}
inline void Project::set_db_info(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  db_info_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(value), GetArena());
  // @@protoc_insertion_point(field_set_char:smart3dmap.v1.Project.db_info)
}
inline void Project::set_db_info(const char* value,
    size_t size) {
  
  db_info_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:smart3dmap.v1.Project.db_info)
}
inline std::string* Project::_internal_mutable_db_info() {
  
  return db_info_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArena());
}
inline std::string* Project::release_db_info() {
  // @@protoc_insertion_point(field_release:smart3dmap.v1.Project.db_info)
  return db_info_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void Project::set_allocated_db_info(std::string* db_info) {
  if (db_info != nullptr) {
    
  } else {
    
  }
  db_info_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), db_info,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:smart3dmap.v1.Project.db_info)
}

// string data_tree_2d = 16;
inline void Project::clear_data_tree_2d() {
  data_tree_2d_.ClearToEmpty();
}
inline const std::string& Project::data_tree_2d() const {
  // @@protoc_insertion_point(field_get:smart3dmap.v1.Project.data_tree_2d)
  return _internal_data_tree_2d();
}
inline void Project::set_data_tree_2d(const std::string& value) {
  _internal_set_data_tree_2d(value);
  // @@protoc_insertion_point(field_set:smart3dmap.v1.Project.data_tree_2d)
}
inline std::string* Project::mutable_data_tree_2d() {
  // @@protoc_insertion_point(field_mutable:smart3dmap.v1.Project.data_tree_2d)
  return _internal_mutable_data_tree_2d();
}
inline const std::string& Project::_internal_data_tree_2d() const {
  return data_tree_2d_.Get();
}
inline void Project::_internal_set_data_tree_2d(const std::string& value) {
  
  data_tree_2d_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArena());
}
inline void Project::set_data_tree_2d(std::string&& value) {
  
  data_tree_2d_.Set(
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:smart3dmap.v1.Project.data_tree_2d)
}
inline void Project::set_data_tree_2d(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  data_tree_2d_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(value), GetArena());
  // @@protoc_insertion_point(field_set_char:smart3dmap.v1.Project.data_tree_2d)
}
inline void Project::set_data_tree_2d(const char* value,
    size_t size) {
  
  data_tree_2d_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:smart3dmap.v1.Project.data_tree_2d)
}
inline std::string* Project::_internal_mutable_data_tree_2d() {
  
  return data_tree_2d_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArena());
}
inline std::string* Project::release_data_tree_2d() {
  // @@protoc_insertion_point(field_release:smart3dmap.v1.Project.data_tree_2d)
  return data_tree_2d_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void Project::set_allocated_data_tree_2d(std::string* data_tree_2d) {
  if (data_tree_2d != nullptr) {
    
  } else {
    
  }
  data_tree_2d_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), data_tree_2d,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:smart3dmap.v1.Project.data_tree_2d)
}

// string data_tree_3d = 17;
inline void Project::clear_data_tree_3d() {
  data_tree_3d_.ClearToEmpty();
}
inline const std::string& Project::data_tree_3d() const {
  // @@protoc_insertion_point(field_get:smart3dmap.v1.Project.data_tree_3d)
  return _internal_data_tree_3d();
}
inline void Project::set_data_tree_3d(const std::string& value) {
  _internal_set_data_tree_3d(value);
  // @@protoc_insertion_point(field_set:smart3dmap.v1.Project.data_tree_3d)
}
inline std::string* Project::mutable_data_tree_3d() {
  // @@protoc_insertion_point(field_mutable:smart3dmap.v1.Project.data_tree_3d)
  return _internal_mutable_data_tree_3d();
}
inline const std::string& Project::_internal_data_tree_3d() const {
  return data_tree_3d_.Get();
}
inline void Project::_internal_set_data_tree_3d(const std::string& value) {
  
  data_tree_3d_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArena());
}
inline void Project::set_data_tree_3d(std::string&& value) {
  
  data_tree_3d_.Set(
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:smart3dmap.v1.Project.data_tree_3d)
}
inline void Project::set_data_tree_3d(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  data_tree_3d_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(value), GetArena());
  // @@protoc_insertion_point(field_set_char:smart3dmap.v1.Project.data_tree_3d)
}
inline void Project::set_data_tree_3d(const char* value,
    size_t size) {
  
  data_tree_3d_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:smart3dmap.v1.Project.data_tree_3d)
}
inline std::string* Project::_internal_mutable_data_tree_3d() {
  
  return data_tree_3d_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArena());
}
inline std::string* Project::release_data_tree_3d() {
  // @@protoc_insertion_point(field_release:smart3dmap.v1.Project.data_tree_3d)
  return data_tree_3d_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void Project::set_allocated_data_tree_3d(std::string* data_tree_3d) {
  if (data_tree_3d != nullptr) {
    
  } else {
    
  }
  data_tree_3d_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), data_tree_3d,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:smart3dmap.v1.Project.data_tree_3d)
}

// string data_tree_db = 18;
inline void Project::clear_data_tree_db() {
  data_tree_db_.ClearToEmpty();
}
inline const std::string& Project::data_tree_db() const {
  // @@protoc_insertion_point(field_get:smart3dmap.v1.Project.data_tree_db)
  return _internal_data_tree_db();
}
inline void Project::set_data_tree_db(const std::string& value) {
  _internal_set_data_tree_db(value);
  // @@protoc_insertion_point(field_set:smart3dmap.v1.Project.data_tree_db)
}
inline std::string* Project::mutable_data_tree_db() {
  // @@protoc_insertion_point(field_mutable:smart3dmap.v1.Project.data_tree_db)
  return _internal_mutable_data_tree_db();
}
inline const std::string& Project::_internal_data_tree_db() const {
  return data_tree_db_.Get();
}
inline void Project::_internal_set_data_tree_db(const std::string& value) {
  
  data_tree_db_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArena());
}
inline void Project::set_data_tree_db(std::string&& value) {
  
  data_tree_db_.Set(
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:smart3dmap.v1.Project.data_tree_db)
}
inline void Project::set_data_tree_db(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  data_tree_db_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(value), GetArena());
  // @@protoc_insertion_point(field_set_char:smart3dmap.v1.Project.data_tree_db)
}
inline void Project::set_data_tree_db(const char* value,
    size_t size) {
  
  data_tree_db_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:smart3dmap.v1.Project.data_tree_db)
}
inline std::string* Project::_internal_mutable_data_tree_db() {
  
  return data_tree_db_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArena());
}
inline std::string* Project::release_data_tree_db() {
  // @@protoc_insertion_point(field_release:smart3dmap.v1.Project.data_tree_db)
  return data_tree_db_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void Project::set_allocated_data_tree_db(std::string* data_tree_db) {
  if (data_tree_db != nullptr) {
    
  } else {
    
  }
  data_tree_db_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), data_tree_db,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:smart3dmap.v1.Project.data_tree_db)
}

// .google.protobuf.Timestamp created_at = 19;
inline bool Project::_internal_has_created_at() const {
  return this != internal_default_instance() && created_at_ != nullptr;
}
inline bool Project::has_created_at() const {
  return _internal_has_created_at();
}
inline const PROTOBUF_NAMESPACE_ID::Timestamp& Project::_internal_created_at() const {
  const PROTOBUF_NAMESPACE_ID::Timestamp* p = created_at_;
  return p != nullptr ? *p : reinterpret_cast<const PROTOBUF_NAMESPACE_ID::Timestamp&>(
      PROTOBUF_NAMESPACE_ID::_Timestamp_default_instance_);
}
inline const PROTOBUF_NAMESPACE_ID::Timestamp& Project::created_at() const {
  // @@protoc_insertion_point(field_get:smart3dmap.v1.Project.created_at)
  return _internal_created_at();
}
inline void Project::unsafe_arena_set_allocated_created_at(
    PROTOBUF_NAMESPACE_ID::Timestamp* created_at) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(created_at_);
  }
  created_at_ = created_at;
  if (created_at) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:smart3dmap.v1.Project.created_at)
}
inline PROTOBUF_NAMESPACE_ID::Timestamp* Project::release_created_at() {
  
  PROTOBUF_NAMESPACE_ID::Timestamp* temp = created_at_;
  created_at_ = nullptr;
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline PROTOBUF_NAMESPACE_ID::Timestamp* Project::unsafe_arena_release_created_at() {
  // @@protoc_insertion_point(field_release:smart3dmap.v1.Project.created_at)
  
  PROTOBUF_NAMESPACE_ID::Timestamp* temp = created_at_;
  created_at_ = nullptr;
  return temp;
}
inline PROTOBUF_NAMESPACE_ID::Timestamp* Project::_internal_mutable_created_at() {
  
  if (created_at_ == nullptr) {
    auto* p = CreateMaybeMessage<PROTOBUF_NAMESPACE_ID::Timestamp>(GetArena());
    created_at_ = p;
  }
  return created_at_;
}
inline PROTOBUF_NAMESPACE_ID::Timestamp* Project::mutable_created_at() {
  // @@protoc_insertion_point(field_mutable:smart3dmap.v1.Project.created_at)
  return _internal_mutable_created_at();
}
inline void Project::set_allocated_created_at(PROTOBUF_NAMESPACE_ID::Timestamp* created_at) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(created_at_);
  }
  if (created_at) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(created_at)->GetArena();
    if (message_arena != submessage_arena) {
      created_at = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, created_at, submessage_arena);
    }
    
  } else {
    
  }
  created_at_ = created_at;
  // @@protoc_insertion_point(field_set_allocated:smart3dmap.v1.Project.created_at)
}

// .google.protobuf.Timestamp updated_at = 20;
inline bool Project::_internal_has_updated_at() const {
  return this != internal_default_instance() && updated_at_ != nullptr;
}
inline bool Project::has_updated_at() const {
  return _internal_has_updated_at();
}
inline const PROTOBUF_NAMESPACE_ID::Timestamp& Project::_internal_updated_at() const {
  const PROTOBUF_NAMESPACE_ID::Timestamp* p = updated_at_;
  return p != nullptr ? *p : reinterpret_cast<const PROTOBUF_NAMESPACE_ID::Timestamp&>(
      PROTOBUF_NAMESPACE_ID::_Timestamp_default_instance_);
}
inline const PROTOBUF_NAMESPACE_ID::Timestamp& Project::updated_at() const {
  // @@protoc_insertion_point(field_get:smart3dmap.v1.Project.updated_at)
  return _internal_updated_at();
}
inline void Project::unsafe_arena_set_allocated_updated_at(
    PROTOBUF_NAMESPACE_ID::Timestamp* updated_at) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(updated_at_);
  }
  updated_at_ = updated_at;
  if (updated_at) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:smart3dmap.v1.Project.updated_at)
}
inline PROTOBUF_NAMESPACE_ID::Timestamp* Project::release_updated_at() {
  
  PROTOBUF_NAMESPACE_ID::Timestamp* temp = updated_at_;
  updated_at_ = nullptr;
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline PROTOBUF_NAMESPACE_ID::Timestamp* Project::unsafe_arena_release_updated_at() {
  // @@protoc_insertion_point(field_release:smart3dmap.v1.Project.updated_at)
  
  PROTOBUF_NAMESPACE_ID::Timestamp* temp = updated_at_;
  updated_at_ = nullptr;
  return temp;
}
inline PROTOBUF_NAMESPACE_ID::Timestamp* Project::_internal_mutable_updated_at() {
  
  if (updated_at_ == nullptr) {
    auto* p = CreateMaybeMessage<PROTOBUF_NAMESPACE_ID::Timestamp>(GetArena());
    updated_at_ = p;
  }
  return updated_at_;
}
inline PROTOBUF_NAMESPACE_ID::Timestamp* Project::mutable_updated_at() {
  // @@protoc_insertion_point(field_mutable:smart3dmap.v1.Project.updated_at)
  return _internal_mutable_updated_at();
}
inline void Project::set_allocated_updated_at(PROTOBUF_NAMESPACE_ID::Timestamp* updated_at) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(updated_at_);
  }
  if (updated_at) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(updated_at)->GetArena();
    if (message_arena != submessage_arena) {
      updated_at = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, updated_at, submessage_arena);
    }
    
  } else {
    
  }
  updated_at_ = updated_at;
  // @@protoc_insertion_point(field_set_allocated:smart3dmap.v1.Project.updated_at)
}

// -------------------------------------------------------------------

// DicTableCategory

// int32 id = 1;
inline void DicTableCategory::clear_id() {
  id_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 DicTableCategory::_internal_id() const {
  return id_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 DicTableCategory::id() const {
  // @@protoc_insertion_point(field_get:smart3dmap.v1.DicTableCategory.id)
  return _internal_id();
}
inline void DicTableCategory::_internal_set_id(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  id_ = value;
}
inline void DicTableCategory::set_id(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_id(value);
  // @@protoc_insertion_point(field_set:smart3dmap.v1.DicTableCategory.id)
}

// string name = 2;
inline void DicTableCategory::clear_name() {
  name_.ClearToEmpty();
}
inline const std::string& DicTableCategory::name() const {
  // @@protoc_insertion_point(field_get:smart3dmap.v1.DicTableCategory.name)
  return _internal_name();
}
inline void DicTableCategory::set_name(const std::string& value) {
  _internal_set_name(value);
  // @@protoc_insertion_point(field_set:smart3dmap.v1.DicTableCategory.name)
}
inline std::string* DicTableCategory::mutable_name() {
  // @@protoc_insertion_point(field_mutable:smart3dmap.v1.DicTableCategory.name)
  return _internal_mutable_name();
}
inline const std::string& DicTableCategory::_internal_name() const {
  return name_.Get();
}
inline void DicTableCategory::_internal_set_name(const std::string& value) {
  
  name_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArena());
}
inline void DicTableCategory::set_name(std::string&& value) {
  
  name_.Set(
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:smart3dmap.v1.DicTableCategory.name)
}
inline void DicTableCategory::set_name(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  name_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(value), GetArena());
  // @@protoc_insertion_point(field_set_char:smart3dmap.v1.DicTableCategory.name)
}
inline void DicTableCategory::set_name(const char* value,
    size_t size) {
  
  name_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:smart3dmap.v1.DicTableCategory.name)
}
inline std::string* DicTableCategory::_internal_mutable_name() {
  
  return name_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArena());
}
inline std::string* DicTableCategory::release_name() {
  // @@protoc_insertion_point(field_release:smart3dmap.v1.DicTableCategory.name)
  return name_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void DicTableCategory::set_allocated_name(std::string* name) {
  if (name != nullptr) {
    
  } else {
    
  }
  name_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), name,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:smart3dmap.v1.DicTableCategory.name)
}

// string alias = 3;
inline void DicTableCategory::clear_alias() {
  alias_.ClearToEmpty();
}
inline const std::string& DicTableCategory::alias() const {
  // @@protoc_insertion_point(field_get:smart3dmap.v1.DicTableCategory.alias)
  return _internal_alias();
}
inline void DicTableCategory::set_alias(const std::string& value) {
  _internal_set_alias(value);
  // @@protoc_insertion_point(field_set:smart3dmap.v1.DicTableCategory.alias)
}
inline std::string* DicTableCategory::mutable_alias() {
  // @@protoc_insertion_point(field_mutable:smart3dmap.v1.DicTableCategory.alias)
  return _internal_mutable_alias();
}
inline const std::string& DicTableCategory::_internal_alias() const {
  return alias_.Get();
}
inline void DicTableCategory::_internal_set_alias(const std::string& value) {
  
  alias_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArena());
}
inline void DicTableCategory::set_alias(std::string&& value) {
  
  alias_.Set(
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:smart3dmap.v1.DicTableCategory.alias)
}
inline void DicTableCategory::set_alias(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  alias_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(value), GetArena());
  // @@protoc_insertion_point(field_set_char:smart3dmap.v1.DicTableCategory.alias)
}
inline void DicTableCategory::set_alias(const char* value,
    size_t size) {
  
  alias_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:smart3dmap.v1.DicTableCategory.alias)
}
inline std::string* DicTableCategory::_internal_mutable_alias() {
  
  return alias_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArena());
}
inline std::string* DicTableCategory::release_alias() {
  // @@protoc_insertion_point(field_release:smart3dmap.v1.DicTableCategory.alias)
  return alias_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void DicTableCategory::set_allocated_alias(std::string* alias) {
  if (alias != nullptr) {
    
  } else {
    
  }
  alias_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), alias,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:smart3dmap.v1.DicTableCategory.alias)
}

// -------------------------------------------------------------------

// DicTable

// int32 id = 1;
inline void DicTable::clear_id() {
  id_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 DicTable::_internal_id() const {
  return id_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 DicTable::id() const {
  // @@protoc_insertion_point(field_get:smart3dmap.v1.DicTable.id)
  return _internal_id();
}
inline void DicTable::_internal_set_id(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  id_ = value;
}
inline void DicTable::set_id(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_id(value);
  // @@protoc_insertion_point(field_set:smart3dmap.v1.DicTable.id)
}

// string name = 2;
inline void DicTable::clear_name() {
  name_.ClearToEmpty();
}
inline const std::string& DicTable::name() const {
  // @@protoc_insertion_point(field_get:smart3dmap.v1.DicTable.name)
  return _internal_name();
}
inline void DicTable::set_name(const std::string& value) {
  _internal_set_name(value);
  // @@protoc_insertion_point(field_set:smart3dmap.v1.DicTable.name)
}
inline std::string* DicTable::mutable_name() {
  // @@protoc_insertion_point(field_mutable:smart3dmap.v1.DicTable.name)
  return _internal_mutable_name();
}
inline const std::string& DicTable::_internal_name() const {
  return name_.Get();
}
inline void DicTable::_internal_set_name(const std::string& value) {
  
  name_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArena());
}
inline void DicTable::set_name(std::string&& value) {
  
  name_.Set(
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:smart3dmap.v1.DicTable.name)
}
inline void DicTable::set_name(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  name_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(value), GetArena());
  // @@protoc_insertion_point(field_set_char:smart3dmap.v1.DicTable.name)
}
inline void DicTable::set_name(const char* value,
    size_t size) {
  
  name_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:smart3dmap.v1.DicTable.name)
}
inline std::string* DicTable::_internal_mutable_name() {
  
  return name_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArena());
}
inline std::string* DicTable::release_name() {
  // @@protoc_insertion_point(field_release:smart3dmap.v1.DicTable.name)
  return name_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void DicTable::set_allocated_name(std::string* name) {
  if (name != nullptr) {
    
  } else {
    
  }
  name_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), name,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:smart3dmap.v1.DicTable.name)
}

// string alias = 3;
inline void DicTable::clear_alias() {
  alias_.ClearToEmpty();
}
inline const std::string& DicTable::alias() const {
  // @@protoc_insertion_point(field_get:smart3dmap.v1.DicTable.alias)
  return _internal_alias();
}
inline void DicTable::set_alias(const std::string& value) {
  _internal_set_alias(value);
  // @@protoc_insertion_point(field_set:smart3dmap.v1.DicTable.alias)
}
inline std::string* DicTable::mutable_alias() {
  // @@protoc_insertion_point(field_mutable:smart3dmap.v1.DicTable.alias)
  return _internal_mutable_alias();
}
inline const std::string& DicTable::_internal_alias() const {
  return alias_.Get();
}
inline void DicTable::_internal_set_alias(const std::string& value) {
  
  alias_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArena());
}
inline void DicTable::set_alias(std::string&& value) {
  
  alias_.Set(
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:smart3dmap.v1.DicTable.alias)
}
inline void DicTable::set_alias(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  alias_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(value), GetArena());
  // @@protoc_insertion_point(field_set_char:smart3dmap.v1.DicTable.alias)
}
inline void DicTable::set_alias(const char* value,
    size_t size) {
  
  alias_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:smart3dmap.v1.DicTable.alias)
}
inline std::string* DicTable::_internal_mutable_alias() {
  
  return alias_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArena());
}
inline std::string* DicTable::release_alias() {
  // @@protoc_insertion_point(field_release:smart3dmap.v1.DicTable.alias)
  return alias_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void DicTable::set_allocated_alias(std::string* alias) {
  if (alias != nullptr) {
    
  } else {
    
  }
  alias_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), alias,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:smart3dmap.v1.DicTable.alias)
}

// bool is_required = 4;
inline void DicTable::clear_is_required() {
  is_required_ = false;
}
inline bool DicTable::_internal_is_required() const {
  return is_required_;
}
inline bool DicTable::is_required() const {
  // @@protoc_insertion_point(field_get:smart3dmap.v1.DicTable.is_required)
  return _internal_is_required();
}
inline void DicTable::_internal_set_is_required(bool value) {
  
  is_required_ = value;
}
inline void DicTable::set_is_required(bool value) {
  _internal_set_is_required(value);
  // @@protoc_insertion_point(field_set:smart3dmap.v1.DicTable.is_required)
}

// int32 category_id = 5;
inline void DicTable::clear_category_id() {
  category_id_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 DicTable::_internal_category_id() const {
  return category_id_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 DicTable::category_id() const {
  // @@protoc_insertion_point(field_get:smart3dmap.v1.DicTable.category_id)
  return _internal_category_id();
}
inline void DicTable::_internal_set_category_id(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  category_id_ = value;
}
inline void DicTable::set_category_id(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_category_id(value);
  // @@protoc_insertion_point(field_set:smart3dmap.v1.DicTable.category_id)
}

// string user_table_name = 6;
inline void DicTable::clear_user_table_name() {
  user_table_name_.ClearToEmpty();
}
inline const std::string& DicTable::user_table_name() const {
  // @@protoc_insertion_point(field_get:smart3dmap.v1.DicTable.user_table_name)
  return _internal_user_table_name();
}
inline void DicTable::set_user_table_name(const std::string& value) {
  _internal_set_user_table_name(value);
  // @@protoc_insertion_point(field_set:smart3dmap.v1.DicTable.user_table_name)
}
inline std::string* DicTable::mutable_user_table_name() {
  // @@protoc_insertion_point(field_mutable:smart3dmap.v1.DicTable.user_table_name)
  return _internal_mutable_user_table_name();
}
inline const std::string& DicTable::_internal_user_table_name() const {
  return user_table_name_.Get();
}
inline void DicTable::_internal_set_user_table_name(const std::string& value) {
  
  user_table_name_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArena());
}
inline void DicTable::set_user_table_name(std::string&& value) {
  
  user_table_name_.Set(
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:smart3dmap.v1.DicTable.user_table_name)
}
inline void DicTable::set_user_table_name(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  user_table_name_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(value), GetArena());
  // @@protoc_insertion_point(field_set_char:smart3dmap.v1.DicTable.user_table_name)
}
inline void DicTable::set_user_table_name(const char* value,
    size_t size) {
  
  user_table_name_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:smart3dmap.v1.DicTable.user_table_name)
}
inline std::string* DicTable::_internal_mutable_user_table_name() {
  
  return user_table_name_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArena());
}
inline std::string* DicTable::release_user_table_name() {
  // @@protoc_insertion_point(field_release:smart3dmap.v1.DicTable.user_table_name)
  return user_table_name_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void DicTable::set_allocated_user_table_name(std::string* user_table_name) {
  if (user_table_name != nullptr) {
    
  } else {
    
  }
  user_table_name_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), user_table_name,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:smart3dmap.v1.DicTable.user_table_name)
}

// -------------------------------------------------------------------

// DicTableField

// int32 id = 1;
inline void DicTableField::clear_id() {
  id_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 DicTableField::_internal_id() const {
  return id_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 DicTableField::id() const {
  // @@protoc_insertion_point(field_get:smart3dmap.v1.DicTableField.id)
  return _internal_id();
}
inline void DicTableField::_internal_set_id(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  id_ = value;
}
inline void DicTableField::set_id(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_id(value);
  // @@protoc_insertion_point(field_set:smart3dmap.v1.DicTableField.id)
}

// int32 table_id = 2;
inline void DicTableField::clear_table_id() {
  table_id_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 DicTableField::_internal_table_id() const {
  return table_id_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 DicTableField::table_id() const {
  // @@protoc_insertion_point(field_get:smart3dmap.v1.DicTableField.table_id)
  return _internal_table_id();
}
inline void DicTableField::_internal_set_table_id(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  table_id_ = value;
}
inline void DicTableField::set_table_id(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_table_id(value);
  // @@protoc_insertion_point(field_set:smart3dmap.v1.DicTableField.table_id)
}

// string name = 3;
inline void DicTableField::clear_name() {
  name_.ClearToEmpty();
}
inline const std::string& DicTableField::name() const {
  // @@protoc_insertion_point(field_get:smart3dmap.v1.DicTableField.name)
  return _internal_name();
}
inline void DicTableField::set_name(const std::string& value) {
  _internal_set_name(value);
  // @@protoc_insertion_point(field_set:smart3dmap.v1.DicTableField.name)
}
inline std::string* DicTableField::mutable_name() {
  // @@protoc_insertion_point(field_mutable:smart3dmap.v1.DicTableField.name)
  return _internal_mutable_name();
}
inline const std::string& DicTableField::_internal_name() const {
  return name_.Get();
}
inline void DicTableField::_internal_set_name(const std::string& value) {
  
  name_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArena());
}
inline void DicTableField::set_name(std::string&& value) {
  
  name_.Set(
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:smart3dmap.v1.DicTableField.name)
}
inline void DicTableField::set_name(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  name_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(value), GetArena());
  // @@protoc_insertion_point(field_set_char:smart3dmap.v1.DicTableField.name)
}
inline void DicTableField::set_name(const char* value,
    size_t size) {
  
  name_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:smart3dmap.v1.DicTableField.name)
}
inline std::string* DicTableField::_internal_mutable_name() {
  
  return name_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArena());
}
inline std::string* DicTableField::release_name() {
  // @@protoc_insertion_point(field_release:smart3dmap.v1.DicTableField.name)
  return name_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void DicTableField::set_allocated_name(std::string* name) {
  if (name != nullptr) {
    
  } else {
    
  }
  name_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), name,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:smart3dmap.v1.DicTableField.name)
}

// string alias = 4;
inline void DicTableField::clear_alias() {
  alias_.ClearToEmpty();
}
inline const std::string& DicTableField::alias() const {
  // @@protoc_insertion_point(field_get:smart3dmap.v1.DicTableField.alias)
  return _internal_alias();
}
inline void DicTableField::set_alias(const std::string& value) {
  _internal_set_alias(value);
  // @@protoc_insertion_point(field_set:smart3dmap.v1.DicTableField.alias)
}
inline std::string* DicTableField::mutable_alias() {
  // @@protoc_insertion_point(field_mutable:smart3dmap.v1.DicTableField.alias)
  return _internal_mutable_alias();
}
inline const std::string& DicTableField::_internal_alias() const {
  return alias_.Get();
}
inline void DicTableField::_internal_set_alias(const std::string& value) {
  
  alias_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArena());
}
inline void DicTableField::set_alias(std::string&& value) {
  
  alias_.Set(
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:smart3dmap.v1.DicTableField.alias)
}
inline void DicTableField::set_alias(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  alias_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(value), GetArena());
  // @@protoc_insertion_point(field_set_char:smart3dmap.v1.DicTableField.alias)
}
inline void DicTableField::set_alias(const char* value,
    size_t size) {
  
  alias_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:smart3dmap.v1.DicTableField.alias)
}
inline std::string* DicTableField::_internal_mutable_alias() {
  
  return alias_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArena());
}
inline std::string* DicTableField::release_alias() {
  // @@protoc_insertion_point(field_release:smart3dmap.v1.DicTableField.alias)
  return alias_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void DicTableField::set_allocated_alias(std::string* alias) {
  if (alias != nullptr) {
    
  } else {
    
  }
  alias_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), alias,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:smart3dmap.v1.DicTableField.alias)
}

// string data_type = 5;
inline void DicTableField::clear_data_type() {
  data_type_.ClearToEmpty();
}
inline const std::string& DicTableField::data_type() const {
  // @@protoc_insertion_point(field_get:smart3dmap.v1.DicTableField.data_type)
  return _internal_data_type();
}
inline void DicTableField::set_data_type(const std::string& value) {
  _internal_set_data_type(value);
  // @@protoc_insertion_point(field_set:smart3dmap.v1.DicTableField.data_type)
}
inline std::string* DicTableField::mutable_data_type() {
  // @@protoc_insertion_point(field_mutable:smart3dmap.v1.DicTableField.data_type)
  return _internal_mutable_data_type();
}
inline const std::string& DicTableField::_internal_data_type() const {
  return data_type_.Get();
}
inline void DicTableField::_internal_set_data_type(const std::string& value) {
  
  data_type_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArena());
}
inline void DicTableField::set_data_type(std::string&& value) {
  
  data_type_.Set(
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:smart3dmap.v1.DicTableField.data_type)
}
inline void DicTableField::set_data_type(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  data_type_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(value), GetArena());
  // @@protoc_insertion_point(field_set_char:smart3dmap.v1.DicTableField.data_type)
}
inline void DicTableField::set_data_type(const char* value,
    size_t size) {
  
  data_type_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:smart3dmap.v1.DicTableField.data_type)
}
inline std::string* DicTableField::_internal_mutable_data_type() {
  
  return data_type_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArena());
}
inline std::string* DicTableField::release_data_type() {
  // @@protoc_insertion_point(field_release:smart3dmap.v1.DicTableField.data_type)
  return data_type_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void DicTableField::set_allocated_data_type(std::string* data_type) {
  if (data_type != nullptr) {
    
  } else {
    
  }
  data_type_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), data_type,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:smart3dmap.v1.DicTableField.data_type)
}

// string user_field_name = 6;
inline void DicTableField::clear_user_field_name() {
  user_field_name_.ClearToEmpty();
}
inline const std::string& DicTableField::user_field_name() const {
  // @@protoc_insertion_point(field_get:smart3dmap.v1.DicTableField.user_field_name)
  return _internal_user_field_name();
}
inline void DicTableField::set_user_field_name(const std::string& value) {
  _internal_set_user_field_name(value);
  // @@protoc_insertion_point(field_set:smart3dmap.v1.DicTableField.user_field_name)
}
inline std::string* DicTableField::mutable_user_field_name() {
  // @@protoc_insertion_point(field_mutable:smart3dmap.v1.DicTableField.user_field_name)
  return _internal_mutable_user_field_name();
}
inline const std::string& DicTableField::_internal_user_field_name() const {
  return user_field_name_.Get();
}
inline void DicTableField::_internal_set_user_field_name(const std::string& value) {
  
  user_field_name_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArena());
}
inline void DicTableField::set_user_field_name(std::string&& value) {
  
  user_field_name_.Set(
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:smart3dmap.v1.DicTableField.user_field_name)
}
inline void DicTableField::set_user_field_name(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  user_field_name_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(value), GetArena());
  // @@protoc_insertion_point(field_set_char:smart3dmap.v1.DicTableField.user_field_name)
}
inline void DicTableField::set_user_field_name(const char* value,
    size_t size) {
  
  user_field_name_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:smart3dmap.v1.DicTableField.user_field_name)
}
inline std::string* DicTableField::_internal_mutable_user_field_name() {
  
  return user_field_name_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArena());
}
inline std::string* DicTableField::release_user_field_name() {
  // @@protoc_insertion_point(field_release:smart3dmap.v1.DicTableField.user_field_name)
  return user_field_name_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void DicTableField::set_allocated_user_field_name(std::string* user_field_name) {
  if (user_field_name != nullptr) {
    
  } else {
    
  }
  user_field_name_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), user_field_name,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:smart3dmap.v1.DicTableField.user_field_name)
}

// bool is_required = 7;
inline void DicTableField::clear_is_required() {
  is_required_ = false;
}
inline bool DicTableField::_internal_is_required() const {
  return is_required_;
}
inline bool DicTableField::is_required() const {
  // @@protoc_insertion_point(field_get:smart3dmap.v1.DicTableField.is_required)
  return _internal_is_required();
}
inline void DicTableField::_internal_set_is_required(bool value) {
  
  is_required_ = value;
}
inline void DicTableField::set_is_required(bool value) {
  _internal_set_is_required(value);
  // @@protoc_insertion_point(field_set:smart3dmap.v1.DicTableField.is_required)
}

// -------------------------------------------------------------------

// ListDicTableCategoriesRequest

// int32 db_id = 1;
inline void ListDicTableCategoriesRequest::clear_db_id() {
  db_id_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 ListDicTableCategoriesRequest::_internal_db_id() const {
  return db_id_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 ListDicTableCategoriesRequest::db_id() const {
  // @@protoc_insertion_point(field_get:smart3dmap.v1.ListDicTableCategoriesRequest.db_id)
  return _internal_db_id();
}
inline void ListDicTableCategoriesRequest::_internal_set_db_id(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  db_id_ = value;
}
inline void ListDicTableCategoriesRequest::set_db_id(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_db_id(value);
  // @@protoc_insertion_point(field_set:smart3dmap.v1.ListDicTableCategoriesRequest.db_id)
}

// -------------------------------------------------------------------

// ListDicTableCategoriesResponse

// int32 db_id = 1;
inline void ListDicTableCategoriesResponse::clear_db_id() {
  db_id_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 ListDicTableCategoriesResponse::_internal_db_id() const {
  return db_id_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 ListDicTableCategoriesResponse::db_id() const {
  // @@protoc_insertion_point(field_get:smart3dmap.v1.ListDicTableCategoriesResponse.db_id)
  return _internal_db_id();
}
inline void ListDicTableCategoriesResponse::_internal_set_db_id(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  db_id_ = value;
}
inline void ListDicTableCategoriesResponse::set_db_id(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_db_id(value);
  // @@protoc_insertion_point(field_set:smart3dmap.v1.ListDicTableCategoriesResponse.db_id)
}

// repeated .smart3dmap.v1.DicTableCategory categories = 2;
inline int ListDicTableCategoriesResponse::_internal_categories_size() const {
  return categories_.size();
}
inline int ListDicTableCategoriesResponse::categories_size() const {
  return _internal_categories_size();
}
inline void ListDicTableCategoriesResponse::clear_categories() {
  categories_.Clear();
}
inline ::smart3dmap::v1::DicTableCategory* ListDicTableCategoriesResponse::mutable_categories(int index) {
  // @@protoc_insertion_point(field_mutable:smart3dmap.v1.ListDicTableCategoriesResponse.categories)
  return categories_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::smart3dmap::v1::DicTableCategory >*
ListDicTableCategoriesResponse::mutable_categories() {
  // @@protoc_insertion_point(field_mutable_list:smart3dmap.v1.ListDicTableCategoriesResponse.categories)
  return &categories_;
}
inline const ::smart3dmap::v1::DicTableCategory& ListDicTableCategoriesResponse::_internal_categories(int index) const {
  return categories_.Get(index);
}
inline const ::smart3dmap::v1::DicTableCategory& ListDicTableCategoriesResponse::categories(int index) const {
  // @@protoc_insertion_point(field_get:smart3dmap.v1.ListDicTableCategoriesResponse.categories)
  return _internal_categories(index);
}
inline ::smart3dmap::v1::DicTableCategory* ListDicTableCategoriesResponse::_internal_add_categories() {
  return categories_.Add();
}
inline ::smart3dmap::v1::DicTableCategory* ListDicTableCategoriesResponse::add_categories() {
  // @@protoc_insertion_point(field_add:smart3dmap.v1.ListDicTableCategoriesResponse.categories)
  return _internal_add_categories();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::smart3dmap::v1::DicTableCategory >&
ListDicTableCategoriesResponse::categories() const {
  // @@protoc_insertion_point(field_list:smart3dmap.v1.ListDicTableCategoriesResponse.categories)
  return categories_;
}

// -------------------------------------------------------------------

// ListDicTablesRequest

// int32 db_id = 1;
inline void ListDicTablesRequest::clear_db_id() {
  db_id_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 ListDicTablesRequest::_internal_db_id() const {
  return db_id_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 ListDicTablesRequest::db_id() const {
  // @@protoc_insertion_point(field_get:smart3dmap.v1.ListDicTablesRequest.db_id)
  return _internal_db_id();
}
inline void ListDicTablesRequest::_internal_set_db_id(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  db_id_ = value;
}
inline void ListDicTablesRequest::set_db_id(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_db_id(value);
  // @@protoc_insertion_point(field_set:smart3dmap.v1.ListDicTablesRequest.db_id)
}

// int32 category_id = 2;
inline void ListDicTablesRequest::clear_category_id() {
  category_id_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 ListDicTablesRequest::_internal_category_id() const {
  return category_id_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 ListDicTablesRequest::category_id() const {
  // @@protoc_insertion_point(field_get:smart3dmap.v1.ListDicTablesRequest.category_id)
  return _internal_category_id();
}
inline void ListDicTablesRequest::_internal_set_category_id(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  category_id_ = value;
}
inline void ListDicTablesRequest::set_category_id(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_category_id(value);
  // @@protoc_insertion_point(field_set:smart3dmap.v1.ListDicTablesRequest.category_id)
}

// -------------------------------------------------------------------

// ListDicTablesResponse

// int32 db_id = 1;
inline void ListDicTablesResponse::clear_db_id() {
  db_id_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 ListDicTablesResponse::_internal_db_id() const {
  return db_id_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 ListDicTablesResponse::db_id() const {
  // @@protoc_insertion_point(field_get:smart3dmap.v1.ListDicTablesResponse.db_id)
  return _internal_db_id();
}
inline void ListDicTablesResponse::_internal_set_db_id(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  db_id_ = value;
}
inline void ListDicTablesResponse::set_db_id(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_db_id(value);
  // @@protoc_insertion_point(field_set:smart3dmap.v1.ListDicTablesResponse.db_id)
}

// repeated .smart3dmap.v1.DicTable tables = 2;
inline int ListDicTablesResponse::_internal_tables_size() const {
  return tables_.size();
}
inline int ListDicTablesResponse::tables_size() const {
  return _internal_tables_size();
}
inline void ListDicTablesResponse::clear_tables() {
  tables_.Clear();
}
inline ::smart3dmap::v1::DicTable* ListDicTablesResponse::mutable_tables(int index) {
  // @@protoc_insertion_point(field_mutable:smart3dmap.v1.ListDicTablesResponse.tables)
  return tables_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::smart3dmap::v1::DicTable >*
ListDicTablesResponse::mutable_tables() {
  // @@protoc_insertion_point(field_mutable_list:smart3dmap.v1.ListDicTablesResponse.tables)
  return &tables_;
}
inline const ::smart3dmap::v1::DicTable& ListDicTablesResponse::_internal_tables(int index) const {
  return tables_.Get(index);
}
inline const ::smart3dmap::v1::DicTable& ListDicTablesResponse::tables(int index) const {
  // @@protoc_insertion_point(field_get:smart3dmap.v1.ListDicTablesResponse.tables)
  return _internal_tables(index);
}
inline ::smart3dmap::v1::DicTable* ListDicTablesResponse::_internal_add_tables() {
  return tables_.Add();
}
inline ::smart3dmap::v1::DicTable* ListDicTablesResponse::add_tables() {
  // @@protoc_insertion_point(field_add:smart3dmap.v1.ListDicTablesResponse.tables)
  return _internal_add_tables();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::smart3dmap::v1::DicTable >&
ListDicTablesResponse::tables() const {
  // @@protoc_insertion_point(field_list:smart3dmap.v1.ListDicTablesResponse.tables)
  return tables_;
}

// -------------------------------------------------------------------

// ListDicTableFieldsRequest

// int32 db_id = 1;
inline void ListDicTableFieldsRequest::clear_db_id() {
  db_id_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 ListDicTableFieldsRequest::_internal_db_id() const {
  return db_id_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 ListDicTableFieldsRequest::db_id() const {
  // @@protoc_insertion_point(field_get:smart3dmap.v1.ListDicTableFieldsRequest.db_id)
  return _internal_db_id();
}
inline void ListDicTableFieldsRequest::_internal_set_db_id(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  db_id_ = value;
}
inline void ListDicTableFieldsRequest::set_db_id(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_db_id(value);
  // @@protoc_insertion_point(field_set:smart3dmap.v1.ListDicTableFieldsRequest.db_id)
}

// int32 table_id = 2;
inline void ListDicTableFieldsRequest::clear_table_id() {
  table_id_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 ListDicTableFieldsRequest::_internal_table_id() const {
  return table_id_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 ListDicTableFieldsRequest::table_id() const {
  // @@protoc_insertion_point(field_get:smart3dmap.v1.ListDicTableFieldsRequest.table_id)
  return _internal_table_id();
}
inline void ListDicTableFieldsRequest::_internal_set_table_id(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  table_id_ = value;
}
inline void ListDicTableFieldsRequest::set_table_id(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_table_id(value);
  // @@protoc_insertion_point(field_set:smart3dmap.v1.ListDicTableFieldsRequest.table_id)
}

// -------------------------------------------------------------------

// ListDicTableFieldsResponse

// int32 db_id = 1;
inline void ListDicTableFieldsResponse::clear_db_id() {
  db_id_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 ListDicTableFieldsResponse::_internal_db_id() const {
  return db_id_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 ListDicTableFieldsResponse::db_id() const {
  // @@protoc_insertion_point(field_get:smart3dmap.v1.ListDicTableFieldsResponse.db_id)
  return _internal_db_id();
}
inline void ListDicTableFieldsResponse::_internal_set_db_id(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  db_id_ = value;
}
inline void ListDicTableFieldsResponse::set_db_id(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_db_id(value);
  // @@protoc_insertion_point(field_set:smart3dmap.v1.ListDicTableFieldsResponse.db_id)
}

// .smart3dmap.v1.DicTable table = 2;
inline bool ListDicTableFieldsResponse::_internal_has_table() const {
  return this != internal_default_instance() && table_ != nullptr;
}
inline bool ListDicTableFieldsResponse::has_table() const {
  return _internal_has_table();
}
inline void ListDicTableFieldsResponse::clear_table() {
  if (GetArena() == nullptr && table_ != nullptr) {
    delete table_;
  }
  table_ = nullptr;
}
inline const ::smart3dmap::v1::DicTable& ListDicTableFieldsResponse::_internal_table() const {
  const ::smart3dmap::v1::DicTable* p = table_;
  return p != nullptr ? *p : reinterpret_cast<const ::smart3dmap::v1::DicTable&>(
      ::smart3dmap::v1::_DicTable_default_instance_);
}
inline const ::smart3dmap::v1::DicTable& ListDicTableFieldsResponse::table() const {
  // @@protoc_insertion_point(field_get:smart3dmap.v1.ListDicTableFieldsResponse.table)
  return _internal_table();
}
inline void ListDicTableFieldsResponse::unsafe_arena_set_allocated_table(
    ::smart3dmap::v1::DicTable* table) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(table_);
  }
  table_ = table;
  if (table) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:smart3dmap.v1.ListDicTableFieldsResponse.table)
}
inline ::smart3dmap::v1::DicTable* ListDicTableFieldsResponse::release_table() {
  
  ::smart3dmap::v1::DicTable* temp = table_;
  table_ = nullptr;
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::smart3dmap::v1::DicTable* ListDicTableFieldsResponse::unsafe_arena_release_table() {
  // @@protoc_insertion_point(field_release:smart3dmap.v1.ListDicTableFieldsResponse.table)
  
  ::smart3dmap::v1::DicTable* temp = table_;
  table_ = nullptr;
  return temp;
}
inline ::smart3dmap::v1::DicTable* ListDicTableFieldsResponse::_internal_mutable_table() {
  
  if (table_ == nullptr) {
    auto* p = CreateMaybeMessage<::smart3dmap::v1::DicTable>(GetArena());
    table_ = p;
  }
  return table_;
}
inline ::smart3dmap::v1::DicTable* ListDicTableFieldsResponse::mutable_table() {
  // @@protoc_insertion_point(field_mutable:smart3dmap.v1.ListDicTableFieldsResponse.table)
  return _internal_mutable_table();
}
inline void ListDicTableFieldsResponse::set_allocated_table(::smart3dmap::v1::DicTable* table) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete table_;
  }
  if (table) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(table);
    if (message_arena != submessage_arena) {
      table = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, table, submessage_arena);
    }
    
  } else {
    
  }
  table_ = table;
  // @@protoc_insertion_point(field_set_allocated:smart3dmap.v1.ListDicTableFieldsResponse.table)
}

// repeated .smart3dmap.v1.DicTableField fields = 3;
inline int ListDicTableFieldsResponse::_internal_fields_size() const {
  return fields_.size();
}
inline int ListDicTableFieldsResponse::fields_size() const {
  return _internal_fields_size();
}
inline void ListDicTableFieldsResponse::clear_fields() {
  fields_.Clear();
}
inline ::smart3dmap::v1::DicTableField* ListDicTableFieldsResponse::mutable_fields(int index) {
  // @@protoc_insertion_point(field_mutable:smart3dmap.v1.ListDicTableFieldsResponse.fields)
  return fields_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::smart3dmap::v1::DicTableField >*
ListDicTableFieldsResponse::mutable_fields() {
  // @@protoc_insertion_point(field_mutable_list:smart3dmap.v1.ListDicTableFieldsResponse.fields)
  return &fields_;
}
inline const ::smart3dmap::v1::DicTableField& ListDicTableFieldsResponse::_internal_fields(int index) const {
  return fields_.Get(index);
}
inline const ::smart3dmap::v1::DicTableField& ListDicTableFieldsResponse::fields(int index) const {
  // @@protoc_insertion_point(field_get:smart3dmap.v1.ListDicTableFieldsResponse.fields)
  return _internal_fields(index);
}
inline ::smart3dmap::v1::DicTableField* ListDicTableFieldsResponse::_internal_add_fields() {
  return fields_.Add();
}
inline ::smart3dmap::v1::DicTableField* ListDicTableFieldsResponse::add_fields() {
  // @@protoc_insertion_point(field_add:smart3dmap.v1.ListDicTableFieldsResponse.fields)
  return _internal_add_fields();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::smart3dmap::v1::DicTableField >&
ListDicTableFieldsResponse::fields() const {
  // @@protoc_insertion_point(field_list:smart3dmap.v1.ListDicTableFieldsResponse.fields)
  return fields_;
}

// -------------------------------------------------------------------

// ConfigTableFieldMapRequest_FieldMap

// int32 field_id = 1;
inline void ConfigTableFieldMapRequest_FieldMap::clear_field_id() {
  field_id_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 ConfigTableFieldMapRequest_FieldMap::_internal_field_id() const {
  return field_id_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 ConfigTableFieldMapRequest_FieldMap::field_id() const {
  // @@protoc_insertion_point(field_get:smart3dmap.v1.ConfigTableFieldMapRequest.FieldMap.field_id)
  return _internal_field_id();
}
inline void ConfigTableFieldMapRequest_FieldMap::_internal_set_field_id(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  field_id_ = value;
}
inline void ConfigTableFieldMapRequest_FieldMap::set_field_id(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_field_id(value);
  // @@protoc_insertion_point(field_set:smart3dmap.v1.ConfigTableFieldMapRequest.FieldMap.field_id)
}

// string user_field_name = 2;
inline void ConfigTableFieldMapRequest_FieldMap::clear_user_field_name() {
  user_field_name_.ClearToEmpty();
}
inline const std::string& ConfigTableFieldMapRequest_FieldMap::user_field_name() const {
  // @@protoc_insertion_point(field_get:smart3dmap.v1.ConfigTableFieldMapRequest.FieldMap.user_field_name)
  return _internal_user_field_name();
}
inline void ConfigTableFieldMapRequest_FieldMap::set_user_field_name(const std::string& value) {
  _internal_set_user_field_name(value);
  // @@protoc_insertion_point(field_set:smart3dmap.v1.ConfigTableFieldMapRequest.FieldMap.user_field_name)
}
inline std::string* ConfigTableFieldMapRequest_FieldMap::mutable_user_field_name() {
  // @@protoc_insertion_point(field_mutable:smart3dmap.v1.ConfigTableFieldMapRequest.FieldMap.user_field_name)
  return _internal_mutable_user_field_name();
}
inline const std::string& ConfigTableFieldMapRequest_FieldMap::_internal_user_field_name() const {
  return user_field_name_.Get();
}
inline void ConfigTableFieldMapRequest_FieldMap::_internal_set_user_field_name(const std::string& value) {
  
  user_field_name_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArena());
}
inline void ConfigTableFieldMapRequest_FieldMap::set_user_field_name(std::string&& value) {
  
  user_field_name_.Set(
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:smart3dmap.v1.ConfigTableFieldMapRequest.FieldMap.user_field_name)
}
inline void ConfigTableFieldMapRequest_FieldMap::set_user_field_name(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  user_field_name_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(value), GetArena());
  // @@protoc_insertion_point(field_set_char:smart3dmap.v1.ConfigTableFieldMapRequest.FieldMap.user_field_name)
}
inline void ConfigTableFieldMapRequest_FieldMap::set_user_field_name(const char* value,
    size_t size) {
  
  user_field_name_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:smart3dmap.v1.ConfigTableFieldMapRequest.FieldMap.user_field_name)
}
inline std::string* ConfigTableFieldMapRequest_FieldMap::_internal_mutable_user_field_name() {
  
  return user_field_name_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArena());
}
inline std::string* ConfigTableFieldMapRequest_FieldMap::release_user_field_name() {
  // @@protoc_insertion_point(field_release:smart3dmap.v1.ConfigTableFieldMapRequest.FieldMap.user_field_name)
  return user_field_name_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void ConfigTableFieldMapRequest_FieldMap::set_allocated_user_field_name(std::string* user_field_name) {
  if (user_field_name != nullptr) {
    
  } else {
    
  }
  user_field_name_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), user_field_name,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:smart3dmap.v1.ConfigTableFieldMapRequest.FieldMap.user_field_name)
}

// -------------------------------------------------------------------

// ConfigTableFieldMapRequest

// int32 db_id = 1;
inline void ConfigTableFieldMapRequest::clear_db_id() {
  db_id_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 ConfigTableFieldMapRequest::_internal_db_id() const {
  return db_id_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 ConfigTableFieldMapRequest::db_id() const {
  // @@protoc_insertion_point(field_get:smart3dmap.v1.ConfigTableFieldMapRequest.db_id)
  return _internal_db_id();
}
inline void ConfigTableFieldMapRequest::_internal_set_db_id(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  db_id_ = value;
}
inline void ConfigTableFieldMapRequest::set_db_id(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_db_id(value);
  // @@protoc_insertion_point(field_set:smart3dmap.v1.ConfigTableFieldMapRequest.db_id)
}

// int32 table_id = 2;
inline void ConfigTableFieldMapRequest::clear_table_id() {
  table_id_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 ConfigTableFieldMapRequest::_internal_table_id() const {
  return table_id_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 ConfigTableFieldMapRequest::table_id() const {
  // @@protoc_insertion_point(field_get:smart3dmap.v1.ConfigTableFieldMapRequest.table_id)
  return _internal_table_id();
}
inline void ConfigTableFieldMapRequest::_internal_set_table_id(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  table_id_ = value;
}
inline void ConfigTableFieldMapRequest::set_table_id(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_table_id(value);
  // @@protoc_insertion_point(field_set:smart3dmap.v1.ConfigTableFieldMapRequest.table_id)
}

// string user_table_name = 3;
inline void ConfigTableFieldMapRequest::clear_user_table_name() {
  user_table_name_.ClearToEmpty();
}
inline const std::string& ConfigTableFieldMapRequest::user_table_name() const {
  // @@protoc_insertion_point(field_get:smart3dmap.v1.ConfigTableFieldMapRequest.user_table_name)
  return _internal_user_table_name();
}
inline void ConfigTableFieldMapRequest::set_user_table_name(const std::string& value) {
  _internal_set_user_table_name(value);
  // @@protoc_insertion_point(field_set:smart3dmap.v1.ConfigTableFieldMapRequest.user_table_name)
}
inline std::string* ConfigTableFieldMapRequest::mutable_user_table_name() {
  // @@protoc_insertion_point(field_mutable:smart3dmap.v1.ConfigTableFieldMapRequest.user_table_name)
  return _internal_mutable_user_table_name();
}
inline const std::string& ConfigTableFieldMapRequest::_internal_user_table_name() const {
  return user_table_name_.Get();
}
inline void ConfigTableFieldMapRequest::_internal_set_user_table_name(const std::string& value) {
  
  user_table_name_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArena());
}
inline void ConfigTableFieldMapRequest::set_user_table_name(std::string&& value) {
  
  user_table_name_.Set(
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:smart3dmap.v1.ConfigTableFieldMapRequest.user_table_name)
}
inline void ConfigTableFieldMapRequest::set_user_table_name(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  user_table_name_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(value), GetArena());
  // @@protoc_insertion_point(field_set_char:smart3dmap.v1.ConfigTableFieldMapRequest.user_table_name)
}
inline void ConfigTableFieldMapRequest::set_user_table_name(const char* value,
    size_t size) {
  
  user_table_name_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:smart3dmap.v1.ConfigTableFieldMapRequest.user_table_name)
}
inline std::string* ConfigTableFieldMapRequest::_internal_mutable_user_table_name() {
  
  return user_table_name_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArena());
}
inline std::string* ConfigTableFieldMapRequest::release_user_table_name() {
  // @@protoc_insertion_point(field_release:smart3dmap.v1.ConfigTableFieldMapRequest.user_table_name)
  return user_table_name_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void ConfigTableFieldMapRequest::set_allocated_user_table_name(std::string* user_table_name) {
  if (user_table_name != nullptr) {
    
  } else {
    
  }
  user_table_name_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), user_table_name,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:smart3dmap.v1.ConfigTableFieldMapRequest.user_table_name)
}

// repeated .smart3dmap.v1.ConfigTableFieldMapRequest.FieldMap field_mapping = 4;
inline int ConfigTableFieldMapRequest::_internal_field_mapping_size() const {
  return field_mapping_.size();
}
inline int ConfigTableFieldMapRequest::field_mapping_size() const {
  return _internal_field_mapping_size();
}
inline void ConfigTableFieldMapRequest::clear_field_mapping() {
  field_mapping_.Clear();
}
inline ::smart3dmap::v1::ConfigTableFieldMapRequest_FieldMap* ConfigTableFieldMapRequest::mutable_field_mapping(int index) {
  // @@protoc_insertion_point(field_mutable:smart3dmap.v1.ConfigTableFieldMapRequest.field_mapping)
  return field_mapping_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::smart3dmap::v1::ConfigTableFieldMapRequest_FieldMap >*
ConfigTableFieldMapRequest::mutable_field_mapping() {
  // @@protoc_insertion_point(field_mutable_list:smart3dmap.v1.ConfigTableFieldMapRequest.field_mapping)
  return &field_mapping_;
}
inline const ::smart3dmap::v1::ConfigTableFieldMapRequest_FieldMap& ConfigTableFieldMapRequest::_internal_field_mapping(int index) const {
  return field_mapping_.Get(index);
}
inline const ::smart3dmap::v1::ConfigTableFieldMapRequest_FieldMap& ConfigTableFieldMapRequest::field_mapping(int index) const {
  // @@protoc_insertion_point(field_get:smart3dmap.v1.ConfigTableFieldMapRequest.field_mapping)
  return _internal_field_mapping(index);
}
inline ::smart3dmap::v1::ConfigTableFieldMapRequest_FieldMap* ConfigTableFieldMapRequest::_internal_add_field_mapping() {
  return field_mapping_.Add();
}
inline ::smart3dmap::v1::ConfigTableFieldMapRequest_FieldMap* ConfigTableFieldMapRequest::add_field_mapping() {
  // @@protoc_insertion_point(field_add:smart3dmap.v1.ConfigTableFieldMapRequest.field_mapping)
  return _internal_add_field_mapping();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::smart3dmap::v1::ConfigTableFieldMapRequest_FieldMap >&
ConfigTableFieldMapRequest::field_mapping() const {
  // @@protoc_insertion_point(field_list:smart3dmap.v1.ConfigTableFieldMapRequest.field_mapping)
  return field_mapping_;
}

// -------------------------------------------------------------------

// ConfigTableFieldMapResponse

// bool status = 1;
inline void ConfigTableFieldMapResponse::clear_status() {
  status_ = false;
}
inline bool ConfigTableFieldMapResponse::_internal_status() const {
  return status_;
}
inline bool ConfigTableFieldMapResponse::status() const {
  // @@protoc_insertion_point(field_get:smart3dmap.v1.ConfigTableFieldMapResponse.status)
  return _internal_status();
}
inline void ConfigTableFieldMapResponse::_internal_set_status(bool value) {
  
  status_ = value;
}
inline void ConfigTableFieldMapResponse::set_status(bool value) {
  _internal_set_status(value);
  // @@protoc_insertion_point(field_set:smart3dmap.v1.ConfigTableFieldMapResponse.status)
}

// string error = 2;
inline void ConfigTableFieldMapResponse::clear_error() {
  error_.ClearToEmpty();
}
inline const std::string& ConfigTableFieldMapResponse::error() const {
  // @@protoc_insertion_point(field_get:smart3dmap.v1.ConfigTableFieldMapResponse.error)
  return _internal_error();
}
inline void ConfigTableFieldMapResponse::set_error(const std::string& value) {
  _internal_set_error(value);
  // @@protoc_insertion_point(field_set:smart3dmap.v1.ConfigTableFieldMapResponse.error)
}
inline std::string* ConfigTableFieldMapResponse::mutable_error() {
  // @@protoc_insertion_point(field_mutable:smart3dmap.v1.ConfigTableFieldMapResponse.error)
  return _internal_mutable_error();
}
inline const std::string& ConfigTableFieldMapResponse::_internal_error() const {
  return error_.Get();
}
inline void ConfigTableFieldMapResponse::_internal_set_error(const std::string& value) {
  
  error_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArena());
}
inline void ConfigTableFieldMapResponse::set_error(std::string&& value) {
  
  error_.Set(
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:smart3dmap.v1.ConfigTableFieldMapResponse.error)
}
inline void ConfigTableFieldMapResponse::set_error(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  error_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(value), GetArena());
  // @@protoc_insertion_point(field_set_char:smart3dmap.v1.ConfigTableFieldMapResponse.error)
}
inline void ConfigTableFieldMapResponse::set_error(const char* value,
    size_t size) {
  
  error_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:smart3dmap.v1.ConfigTableFieldMapResponse.error)
}
inline std::string* ConfigTableFieldMapResponse::_internal_mutable_error() {
  
  return error_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArena());
}
inline std::string* ConfigTableFieldMapResponse::release_error() {
  // @@protoc_insertion_point(field_release:smart3dmap.v1.ConfigTableFieldMapResponse.error)
  return error_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void ConfigTableFieldMapResponse::set_allocated_error(std::string* error) {
  if (error != nullptr) {
    
  } else {
    
  }
  error_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), error,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:smart3dmap.v1.ConfigTableFieldMapResponse.error)
}

// -------------------------------------------------------------------

// ListTablesInDBRequest

// int32 db_id = 1;
inline void ListTablesInDBRequest::clear_db_id() {
  db_id_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 ListTablesInDBRequest::_internal_db_id() const {
  return db_id_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 ListTablesInDBRequest::db_id() const {
  // @@protoc_insertion_point(field_get:smart3dmap.v1.ListTablesInDBRequest.db_id)
  return _internal_db_id();
}
inline void ListTablesInDBRequest::_internal_set_db_id(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  db_id_ = value;
}
inline void ListTablesInDBRequest::set_db_id(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_db_id(value);
  // @@protoc_insertion_point(field_set:smart3dmap.v1.ListTablesInDBRequest.db_id)
}

// -------------------------------------------------------------------

// ListTablesInDBResponse

// int32 db_id = 1;
inline void ListTablesInDBResponse::clear_db_id() {
  db_id_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 ListTablesInDBResponse::_internal_db_id() const {
  return db_id_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 ListTablesInDBResponse::db_id() const {
  // @@protoc_insertion_point(field_get:smart3dmap.v1.ListTablesInDBResponse.db_id)
  return _internal_db_id();
}
inline void ListTablesInDBResponse::_internal_set_db_id(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  db_id_ = value;
}
inline void ListTablesInDBResponse::set_db_id(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_db_id(value);
  // @@protoc_insertion_point(field_set:smart3dmap.v1.ListTablesInDBResponse.db_id)
}

// repeated string table_names = 2;
inline int ListTablesInDBResponse::_internal_table_names_size() const {
  return table_names_.size();
}
inline int ListTablesInDBResponse::table_names_size() const {
  return _internal_table_names_size();
}
inline void ListTablesInDBResponse::clear_table_names() {
  table_names_.Clear();
}
inline std::string* ListTablesInDBResponse::add_table_names() {
  // @@protoc_insertion_point(field_add_mutable:smart3dmap.v1.ListTablesInDBResponse.table_names)
  return _internal_add_table_names();
}
inline const std::string& ListTablesInDBResponse::_internal_table_names(int index) const {
  return table_names_.Get(index);
}
inline const std::string& ListTablesInDBResponse::table_names(int index) const {
  // @@protoc_insertion_point(field_get:smart3dmap.v1.ListTablesInDBResponse.table_names)
  return _internal_table_names(index);
}
inline std::string* ListTablesInDBResponse::mutable_table_names(int index) {
  // @@protoc_insertion_point(field_mutable:smart3dmap.v1.ListTablesInDBResponse.table_names)
  return table_names_.Mutable(index);
}
inline void ListTablesInDBResponse::set_table_names(int index, const std::string& value) {
  // @@protoc_insertion_point(field_set:smart3dmap.v1.ListTablesInDBResponse.table_names)
  table_names_.Mutable(index)->assign(value);
}
inline void ListTablesInDBResponse::set_table_names(int index, std::string&& value) {
  // @@protoc_insertion_point(field_set:smart3dmap.v1.ListTablesInDBResponse.table_names)
  table_names_.Mutable(index)->assign(std::move(value));
}
inline void ListTablesInDBResponse::set_table_names(int index, const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  table_names_.Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set_char:smart3dmap.v1.ListTablesInDBResponse.table_names)
}
inline void ListTablesInDBResponse::set_table_names(int index, const char* value, size_t size) {
  table_names_.Mutable(index)->assign(
    reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:smart3dmap.v1.ListTablesInDBResponse.table_names)
}
inline std::string* ListTablesInDBResponse::_internal_add_table_names() {
  return table_names_.Add();
}
inline void ListTablesInDBResponse::add_table_names(const std::string& value) {
  table_names_.Add()->assign(value);
  // @@protoc_insertion_point(field_add:smart3dmap.v1.ListTablesInDBResponse.table_names)
}
inline void ListTablesInDBResponse::add_table_names(std::string&& value) {
  table_names_.Add(std::move(value));
  // @@protoc_insertion_point(field_add:smart3dmap.v1.ListTablesInDBResponse.table_names)
}
inline void ListTablesInDBResponse::add_table_names(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  table_names_.Add()->assign(value);
  // @@protoc_insertion_point(field_add_char:smart3dmap.v1.ListTablesInDBResponse.table_names)
}
inline void ListTablesInDBResponse::add_table_names(const char* value, size_t size) {
  table_names_.Add()->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_add_pointer:smart3dmap.v1.ListTablesInDBResponse.table_names)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>&
ListTablesInDBResponse::table_names() const {
  // @@protoc_insertion_point(field_list:smart3dmap.v1.ListTablesInDBResponse.table_names)
  return table_names_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>*
ListTablesInDBResponse::mutable_table_names() {
  // @@protoc_insertion_point(field_mutable_list:smart3dmap.v1.ListTablesInDBResponse.table_names)
  return &table_names_;
}

// -------------------------------------------------------------------

// ListFieldsOfTableRequest

// int32 db_id = 1;
inline void ListFieldsOfTableRequest::clear_db_id() {
  db_id_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 ListFieldsOfTableRequest::_internal_db_id() const {
  return db_id_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 ListFieldsOfTableRequest::db_id() const {
  // @@protoc_insertion_point(field_get:smart3dmap.v1.ListFieldsOfTableRequest.db_id)
  return _internal_db_id();
}
inline void ListFieldsOfTableRequest::_internal_set_db_id(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  db_id_ = value;
}
inline void ListFieldsOfTableRequest::set_db_id(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_db_id(value);
  // @@protoc_insertion_point(field_set:smart3dmap.v1.ListFieldsOfTableRequest.db_id)
}

// string table_name = 2;
inline void ListFieldsOfTableRequest::clear_table_name() {
  table_name_.ClearToEmpty();
}
inline const std::string& ListFieldsOfTableRequest::table_name() const {
  // @@protoc_insertion_point(field_get:smart3dmap.v1.ListFieldsOfTableRequest.table_name)
  return _internal_table_name();
}
inline void ListFieldsOfTableRequest::set_table_name(const std::string& value) {
  _internal_set_table_name(value);
  // @@protoc_insertion_point(field_set:smart3dmap.v1.ListFieldsOfTableRequest.table_name)
}
inline std::string* ListFieldsOfTableRequest::mutable_table_name() {
  // @@protoc_insertion_point(field_mutable:smart3dmap.v1.ListFieldsOfTableRequest.table_name)
  return _internal_mutable_table_name();
}
inline const std::string& ListFieldsOfTableRequest::_internal_table_name() const {
  return table_name_.Get();
}
inline void ListFieldsOfTableRequest::_internal_set_table_name(const std::string& value) {
  
  table_name_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArena());
}
inline void ListFieldsOfTableRequest::set_table_name(std::string&& value) {
  
  table_name_.Set(
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:smart3dmap.v1.ListFieldsOfTableRequest.table_name)
}
inline void ListFieldsOfTableRequest::set_table_name(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  table_name_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(value), GetArena());
  // @@protoc_insertion_point(field_set_char:smart3dmap.v1.ListFieldsOfTableRequest.table_name)
}
inline void ListFieldsOfTableRequest::set_table_name(const char* value,
    size_t size) {
  
  table_name_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:smart3dmap.v1.ListFieldsOfTableRequest.table_name)
}
inline std::string* ListFieldsOfTableRequest::_internal_mutable_table_name() {
  
  return table_name_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArena());
}
inline std::string* ListFieldsOfTableRequest::release_table_name() {
  // @@protoc_insertion_point(field_release:smart3dmap.v1.ListFieldsOfTableRequest.table_name)
  return table_name_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void ListFieldsOfTableRequest::set_allocated_table_name(std::string* table_name) {
  if (table_name != nullptr) {
    
  } else {
    
  }
  table_name_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), table_name,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:smart3dmap.v1.ListFieldsOfTableRequest.table_name)
}

// -------------------------------------------------------------------

// ListFieldsOfTableResponse_TableField

// string name = 1;
inline void ListFieldsOfTableResponse_TableField::clear_name() {
  name_.ClearToEmpty();
}
inline const std::string& ListFieldsOfTableResponse_TableField::name() const {
  // @@protoc_insertion_point(field_get:smart3dmap.v1.ListFieldsOfTableResponse.TableField.name)
  return _internal_name();
}
inline void ListFieldsOfTableResponse_TableField::set_name(const std::string& value) {
  _internal_set_name(value);
  // @@protoc_insertion_point(field_set:smart3dmap.v1.ListFieldsOfTableResponse.TableField.name)
}
inline std::string* ListFieldsOfTableResponse_TableField::mutable_name() {
  // @@protoc_insertion_point(field_mutable:smart3dmap.v1.ListFieldsOfTableResponse.TableField.name)
  return _internal_mutable_name();
}
inline const std::string& ListFieldsOfTableResponse_TableField::_internal_name() const {
  return name_.Get();
}
inline void ListFieldsOfTableResponse_TableField::_internal_set_name(const std::string& value) {
  
  name_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArena());
}
inline void ListFieldsOfTableResponse_TableField::set_name(std::string&& value) {
  
  name_.Set(
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:smart3dmap.v1.ListFieldsOfTableResponse.TableField.name)
}
inline void ListFieldsOfTableResponse_TableField::set_name(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  name_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(value), GetArena());
  // @@protoc_insertion_point(field_set_char:smart3dmap.v1.ListFieldsOfTableResponse.TableField.name)
}
inline void ListFieldsOfTableResponse_TableField::set_name(const char* value,
    size_t size) {
  
  name_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:smart3dmap.v1.ListFieldsOfTableResponse.TableField.name)
}
inline std::string* ListFieldsOfTableResponse_TableField::_internal_mutable_name() {
  
  return name_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArena());
}
inline std::string* ListFieldsOfTableResponse_TableField::release_name() {
  // @@protoc_insertion_point(field_release:smart3dmap.v1.ListFieldsOfTableResponse.TableField.name)
  return name_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void ListFieldsOfTableResponse_TableField::set_allocated_name(std::string* name) {
  if (name != nullptr) {
    
  } else {
    
  }
  name_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), name,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:smart3dmap.v1.ListFieldsOfTableResponse.TableField.name)
}

// string data_type = 2;
inline void ListFieldsOfTableResponse_TableField::clear_data_type() {
  data_type_.ClearToEmpty();
}
inline const std::string& ListFieldsOfTableResponse_TableField::data_type() const {
  // @@protoc_insertion_point(field_get:smart3dmap.v1.ListFieldsOfTableResponse.TableField.data_type)
  return _internal_data_type();
}
inline void ListFieldsOfTableResponse_TableField::set_data_type(const std::string& value) {
  _internal_set_data_type(value);
  // @@protoc_insertion_point(field_set:smart3dmap.v1.ListFieldsOfTableResponse.TableField.data_type)
}
inline std::string* ListFieldsOfTableResponse_TableField::mutable_data_type() {
  // @@protoc_insertion_point(field_mutable:smart3dmap.v1.ListFieldsOfTableResponse.TableField.data_type)
  return _internal_mutable_data_type();
}
inline const std::string& ListFieldsOfTableResponse_TableField::_internal_data_type() const {
  return data_type_.Get();
}
inline void ListFieldsOfTableResponse_TableField::_internal_set_data_type(const std::string& value) {
  
  data_type_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArena());
}
inline void ListFieldsOfTableResponse_TableField::set_data_type(std::string&& value) {
  
  data_type_.Set(
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:smart3dmap.v1.ListFieldsOfTableResponse.TableField.data_type)
}
inline void ListFieldsOfTableResponse_TableField::set_data_type(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  data_type_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(value), GetArena());
  // @@protoc_insertion_point(field_set_char:smart3dmap.v1.ListFieldsOfTableResponse.TableField.data_type)
}
inline void ListFieldsOfTableResponse_TableField::set_data_type(const char* value,
    size_t size) {
  
  data_type_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:smart3dmap.v1.ListFieldsOfTableResponse.TableField.data_type)
}
inline std::string* ListFieldsOfTableResponse_TableField::_internal_mutable_data_type() {
  
  return data_type_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArena());
}
inline std::string* ListFieldsOfTableResponse_TableField::release_data_type() {
  // @@protoc_insertion_point(field_release:smart3dmap.v1.ListFieldsOfTableResponse.TableField.data_type)
  return data_type_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void ListFieldsOfTableResponse_TableField::set_allocated_data_type(std::string* data_type) {
  if (data_type != nullptr) {
    
  } else {
    
  }
  data_type_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), data_type,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:smart3dmap.v1.ListFieldsOfTableResponse.TableField.data_type)
}

// -------------------------------------------------------------------

// ListFieldsOfTableResponse

// int32 db_id = 1;
inline void ListFieldsOfTableResponse::clear_db_id() {
  db_id_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 ListFieldsOfTableResponse::_internal_db_id() const {
  return db_id_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 ListFieldsOfTableResponse::db_id() const {
  // @@protoc_insertion_point(field_get:smart3dmap.v1.ListFieldsOfTableResponse.db_id)
  return _internal_db_id();
}
inline void ListFieldsOfTableResponse::_internal_set_db_id(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  db_id_ = value;
}
inline void ListFieldsOfTableResponse::set_db_id(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_db_id(value);
  // @@protoc_insertion_point(field_set:smart3dmap.v1.ListFieldsOfTableResponse.db_id)
}

// string table_name = 2;
inline void ListFieldsOfTableResponse::clear_table_name() {
  table_name_.ClearToEmpty();
}
inline const std::string& ListFieldsOfTableResponse::table_name() const {
  // @@protoc_insertion_point(field_get:smart3dmap.v1.ListFieldsOfTableResponse.table_name)
  return _internal_table_name();
}
inline void ListFieldsOfTableResponse::set_table_name(const std::string& value) {
  _internal_set_table_name(value);
  // @@protoc_insertion_point(field_set:smart3dmap.v1.ListFieldsOfTableResponse.table_name)
}
inline std::string* ListFieldsOfTableResponse::mutable_table_name() {
  // @@protoc_insertion_point(field_mutable:smart3dmap.v1.ListFieldsOfTableResponse.table_name)
  return _internal_mutable_table_name();
}
inline const std::string& ListFieldsOfTableResponse::_internal_table_name() const {
  return table_name_.Get();
}
inline void ListFieldsOfTableResponse::_internal_set_table_name(const std::string& value) {
  
  table_name_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArena());
}
inline void ListFieldsOfTableResponse::set_table_name(std::string&& value) {
  
  table_name_.Set(
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:smart3dmap.v1.ListFieldsOfTableResponse.table_name)
}
inline void ListFieldsOfTableResponse::set_table_name(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  table_name_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(value), GetArena());
  // @@protoc_insertion_point(field_set_char:smart3dmap.v1.ListFieldsOfTableResponse.table_name)
}
inline void ListFieldsOfTableResponse::set_table_name(const char* value,
    size_t size) {
  
  table_name_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:smart3dmap.v1.ListFieldsOfTableResponse.table_name)
}
inline std::string* ListFieldsOfTableResponse::_internal_mutable_table_name() {
  
  return table_name_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArena());
}
inline std::string* ListFieldsOfTableResponse::release_table_name() {
  // @@protoc_insertion_point(field_release:smart3dmap.v1.ListFieldsOfTableResponse.table_name)
  return table_name_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void ListFieldsOfTableResponse::set_allocated_table_name(std::string* table_name) {
  if (table_name != nullptr) {
    
  } else {
    
  }
  table_name_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), table_name,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:smart3dmap.v1.ListFieldsOfTableResponse.table_name)
}

// repeated .smart3dmap.v1.ListFieldsOfTableResponse.TableField fields = 3;
inline int ListFieldsOfTableResponse::_internal_fields_size() const {
  return fields_.size();
}
inline int ListFieldsOfTableResponse::fields_size() const {
  return _internal_fields_size();
}
inline void ListFieldsOfTableResponse::clear_fields() {
  fields_.Clear();
}
inline ::smart3dmap::v1::ListFieldsOfTableResponse_TableField* ListFieldsOfTableResponse::mutable_fields(int index) {
  // @@protoc_insertion_point(field_mutable:smart3dmap.v1.ListFieldsOfTableResponse.fields)
  return fields_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::smart3dmap::v1::ListFieldsOfTableResponse_TableField >*
ListFieldsOfTableResponse::mutable_fields() {
  // @@protoc_insertion_point(field_mutable_list:smart3dmap.v1.ListFieldsOfTableResponse.fields)
  return &fields_;
}
inline const ::smart3dmap::v1::ListFieldsOfTableResponse_TableField& ListFieldsOfTableResponse::_internal_fields(int index) const {
  return fields_.Get(index);
}
inline const ::smart3dmap::v1::ListFieldsOfTableResponse_TableField& ListFieldsOfTableResponse::fields(int index) const {
  // @@protoc_insertion_point(field_get:smart3dmap.v1.ListFieldsOfTableResponse.fields)
  return _internal_fields(index);
}
inline ::smart3dmap::v1::ListFieldsOfTableResponse_TableField* ListFieldsOfTableResponse::_internal_add_fields() {
  return fields_.Add();
}
inline ::smart3dmap::v1::ListFieldsOfTableResponse_TableField* ListFieldsOfTableResponse::add_fields() {
  // @@protoc_insertion_point(field_add:smart3dmap.v1.ListFieldsOfTableResponse.fields)
  return _internal_add_fields();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::smart3dmap::v1::ListFieldsOfTableResponse_TableField >&
ListFieldsOfTableResponse::fields() const {
  // @@protoc_insertion_point(field_list:smart3dmap.v1.ListFieldsOfTableResponse.fields)
  return fields_;
}

// -------------------------------------------------------------------

// ListDataResourceTypesRequest

// -------------------------------------------------------------------

// ListDataResourceTypesResponse_TypeItem

// string name = 1;
inline void ListDataResourceTypesResponse_TypeItem::clear_name() {
  name_.ClearToEmpty();
}
inline const std::string& ListDataResourceTypesResponse_TypeItem::name() const {
  // @@protoc_insertion_point(field_get:smart3dmap.v1.ListDataResourceTypesResponse.TypeItem.name)
  return _internal_name();
}
inline void ListDataResourceTypesResponse_TypeItem::set_name(const std::string& value) {
  _internal_set_name(value);
  // @@protoc_insertion_point(field_set:smart3dmap.v1.ListDataResourceTypesResponse.TypeItem.name)
}
inline std::string* ListDataResourceTypesResponse_TypeItem::mutable_name() {
  // @@protoc_insertion_point(field_mutable:smart3dmap.v1.ListDataResourceTypesResponse.TypeItem.name)
  return _internal_mutable_name();
}
inline const std::string& ListDataResourceTypesResponse_TypeItem::_internal_name() const {
  return name_.Get();
}
inline void ListDataResourceTypesResponse_TypeItem::_internal_set_name(const std::string& value) {
  
  name_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArena());
}
inline void ListDataResourceTypesResponse_TypeItem::set_name(std::string&& value) {
  
  name_.Set(
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:smart3dmap.v1.ListDataResourceTypesResponse.TypeItem.name)
}
inline void ListDataResourceTypesResponse_TypeItem::set_name(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  name_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(value), GetArena());
  // @@protoc_insertion_point(field_set_char:smart3dmap.v1.ListDataResourceTypesResponse.TypeItem.name)
}
inline void ListDataResourceTypesResponse_TypeItem::set_name(const char* value,
    size_t size) {
  
  name_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:smart3dmap.v1.ListDataResourceTypesResponse.TypeItem.name)
}
inline std::string* ListDataResourceTypesResponse_TypeItem::_internal_mutable_name() {
  
  return name_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArena());
}
inline std::string* ListDataResourceTypesResponse_TypeItem::release_name() {
  // @@protoc_insertion_point(field_release:smart3dmap.v1.ListDataResourceTypesResponse.TypeItem.name)
  return name_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void ListDataResourceTypesResponse_TypeItem::set_allocated_name(std::string* name) {
  if (name != nullptr) {
    
  } else {
    
  }
  name_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), name,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:smart3dmap.v1.ListDataResourceTypesResponse.TypeItem.name)
}

// .smart3dmap.v1.DataResourceType type = 2;
inline void ListDataResourceTypesResponse_TypeItem::clear_type() {
  type_ = 0;
}
inline ::smart3dmap::v1::DataResourceType ListDataResourceTypesResponse_TypeItem::_internal_type() const {
  return static_cast< ::smart3dmap::v1::DataResourceType >(type_);
}
inline ::smart3dmap::v1::DataResourceType ListDataResourceTypesResponse_TypeItem::type() const {
  // @@protoc_insertion_point(field_get:smart3dmap.v1.ListDataResourceTypesResponse.TypeItem.type)
  return _internal_type();
}
inline void ListDataResourceTypesResponse_TypeItem::_internal_set_type(::smart3dmap::v1::DataResourceType value) {
  
  type_ = value;
}
inline void ListDataResourceTypesResponse_TypeItem::set_type(::smart3dmap::v1::DataResourceType value) {
  _internal_set_type(value);
  // @@protoc_insertion_point(field_set:smart3dmap.v1.ListDataResourceTypesResponse.TypeItem.type)
}

// .smart3dmap.v1.DBAppType app_type = 4;
inline void ListDataResourceTypesResponse_TypeItem::clear_app_type() {
  app_type_ = 0;
}
inline ::smart3dmap::v1::DBAppType ListDataResourceTypesResponse_TypeItem::_internal_app_type() const {
  return static_cast< ::smart3dmap::v1::DBAppType >(app_type_);
}
inline ::smart3dmap::v1::DBAppType ListDataResourceTypesResponse_TypeItem::app_type() const {
  // @@protoc_insertion_point(field_get:smart3dmap.v1.ListDataResourceTypesResponse.TypeItem.app_type)
  return _internal_app_type();
}
inline void ListDataResourceTypesResponse_TypeItem::_internal_set_app_type(::smart3dmap::v1::DBAppType value) {
  
  app_type_ = value;
}
inline void ListDataResourceTypesResponse_TypeItem::set_app_type(::smart3dmap::v1::DBAppType value) {
  _internal_set_app_type(value);
  // @@protoc_insertion_point(field_set:smart3dmap.v1.ListDataResourceTypesResponse.TypeItem.app_type)
}

// .smart3dmap.v1.DataPreviewMode preview_mode = 5;
inline void ListDataResourceTypesResponse_TypeItem::clear_preview_mode() {
  preview_mode_ = 0;
}
inline ::smart3dmap::v1::DataPreviewMode ListDataResourceTypesResponse_TypeItem::_internal_preview_mode() const {
  return static_cast< ::smart3dmap::v1::DataPreviewMode >(preview_mode_);
}
inline ::smart3dmap::v1::DataPreviewMode ListDataResourceTypesResponse_TypeItem::preview_mode() const {
  // @@protoc_insertion_point(field_get:smart3dmap.v1.ListDataResourceTypesResponse.TypeItem.preview_mode)
  return _internal_preview_mode();
}
inline void ListDataResourceTypesResponse_TypeItem::_internal_set_preview_mode(::smart3dmap::v1::DataPreviewMode value) {
  
  preview_mode_ = value;
}
inline void ListDataResourceTypesResponse_TypeItem::set_preview_mode(::smart3dmap::v1::DataPreviewMode value) {
  _internal_set_preview_mode(value);
  // @@protoc_insertion_point(field_set:smart3dmap.v1.ListDataResourceTypesResponse.TypeItem.preview_mode)
}

// -------------------------------------------------------------------

// ListDataResourceTypesResponse

// repeated .smart3dmap.v1.ListDataResourceTypesResponse.TypeItem items = 1;
inline int ListDataResourceTypesResponse::_internal_items_size() const {
  return items_.size();
}
inline int ListDataResourceTypesResponse::items_size() const {
  return _internal_items_size();
}
inline void ListDataResourceTypesResponse::clear_items() {
  items_.Clear();
}
inline ::smart3dmap::v1::ListDataResourceTypesResponse_TypeItem* ListDataResourceTypesResponse::mutable_items(int index) {
  // @@protoc_insertion_point(field_mutable:smart3dmap.v1.ListDataResourceTypesResponse.items)
  return items_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::smart3dmap::v1::ListDataResourceTypesResponse_TypeItem >*
ListDataResourceTypesResponse::mutable_items() {
  // @@protoc_insertion_point(field_mutable_list:smart3dmap.v1.ListDataResourceTypesResponse.items)
  return &items_;
}
inline const ::smart3dmap::v1::ListDataResourceTypesResponse_TypeItem& ListDataResourceTypesResponse::_internal_items(int index) const {
  return items_.Get(index);
}
inline const ::smart3dmap::v1::ListDataResourceTypesResponse_TypeItem& ListDataResourceTypesResponse::items(int index) const {
  // @@protoc_insertion_point(field_get:smart3dmap.v1.ListDataResourceTypesResponse.items)
  return _internal_items(index);
}
inline ::smart3dmap::v1::ListDataResourceTypesResponse_TypeItem* ListDataResourceTypesResponse::_internal_add_items() {
  return items_.Add();
}
inline ::smart3dmap::v1::ListDataResourceTypesResponse_TypeItem* ListDataResourceTypesResponse::add_items() {
  // @@protoc_insertion_point(field_add:smart3dmap.v1.ListDataResourceTypesResponse.items)
  return _internal_add_items();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::smart3dmap::v1::ListDataResourceTypesResponse_TypeItem >&
ListDataResourceTypesResponse::items() const {
  // @@protoc_insertion_point(field_list:smart3dmap.v1.ListDataResourceTypesResponse.items)
  return items_;
}

// -------------------------------------------------------------------

// Layer

// int32 id = 1;
inline void Layer::clear_id() {
  id_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 Layer::_internal_id() const {
  return id_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 Layer::id() const {
  // @@protoc_insertion_point(field_get:smart3dmap.v1.Layer.id)
  return _internal_id();
}
inline void Layer::_internal_set_id(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  id_ = value;
}
inline void Layer::set_id(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_id(value);
  // @@protoc_insertion_point(field_set:smart3dmap.v1.Layer.id)
}

// int32 map_id = 2;
inline void Layer::clear_map_id() {
  map_id_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 Layer::_internal_map_id() const {
  return map_id_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 Layer::map_id() const {
  // @@protoc_insertion_point(field_get:smart3dmap.v1.Layer.map_id)
  return _internal_map_id();
}
inline void Layer::_internal_set_map_id(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  map_id_ = value;
}
inline void Layer::set_map_id(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_map_id(value);
  // @@protoc_insertion_point(field_set:smart3dmap.v1.Layer.map_id)
}

// string name = 3;
inline void Layer::clear_name() {
  name_.ClearToEmpty();
}
inline const std::string& Layer::name() const {
  // @@protoc_insertion_point(field_get:smart3dmap.v1.Layer.name)
  return _internal_name();
}
inline void Layer::set_name(const std::string& value) {
  _internal_set_name(value);
  // @@protoc_insertion_point(field_set:smart3dmap.v1.Layer.name)
}
inline std::string* Layer::mutable_name() {
  // @@protoc_insertion_point(field_mutable:smart3dmap.v1.Layer.name)
  return _internal_mutable_name();
}
inline const std::string& Layer::_internal_name() const {
  return name_.Get();
}
inline void Layer::_internal_set_name(const std::string& value) {
  
  name_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArena());
}
inline void Layer::set_name(std::string&& value) {
  
  name_.Set(
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:smart3dmap.v1.Layer.name)
}
inline void Layer::set_name(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  name_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(value), GetArena());
  // @@protoc_insertion_point(field_set_char:smart3dmap.v1.Layer.name)
}
inline void Layer::set_name(const char* value,
    size_t size) {
  
  name_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:smart3dmap.v1.Layer.name)
}
inline std::string* Layer::_internal_mutable_name() {
  
  return name_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArena());
}
inline std::string* Layer::release_name() {
  // @@protoc_insertion_point(field_release:smart3dmap.v1.Layer.name)
  return name_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void Layer::set_allocated_name(std::string* name) {
  if (name != nullptr) {
    
  } else {
    
  }
  name_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), name,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:smart3dmap.v1.Layer.name)
}

// string base_name = 4;
inline void Layer::clear_base_name() {
  base_name_.ClearToEmpty();
}
inline const std::string& Layer::base_name() const {
  // @@protoc_insertion_point(field_get:smart3dmap.v1.Layer.base_name)
  return _internal_base_name();
}
inline void Layer::set_base_name(const std::string& value) {
  _internal_set_base_name(value);
  // @@protoc_insertion_point(field_set:smart3dmap.v1.Layer.base_name)
}
inline std::string* Layer::mutable_base_name() {
  // @@protoc_insertion_point(field_mutable:smart3dmap.v1.Layer.base_name)
  return _internal_mutable_base_name();
}
inline const std::string& Layer::_internal_base_name() const {
  return base_name_.Get();
}
inline void Layer::_internal_set_base_name(const std::string& value) {
  
  base_name_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArena());
}
inline void Layer::set_base_name(std::string&& value) {
  
  base_name_.Set(
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:smart3dmap.v1.Layer.base_name)
}
inline void Layer::set_base_name(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  base_name_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(value), GetArena());
  // @@protoc_insertion_point(field_set_char:smart3dmap.v1.Layer.base_name)
}
inline void Layer::set_base_name(const char* value,
    size_t size) {
  
  base_name_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:smart3dmap.v1.Layer.base_name)
}
inline std::string* Layer::_internal_mutable_base_name() {
  
  return base_name_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArena());
}
inline std::string* Layer::release_base_name() {
  // @@protoc_insertion_point(field_release:smart3dmap.v1.Layer.base_name)
  return base_name_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void Layer::set_allocated_base_name(std::string* base_name) {
  if (base_name != nullptr) {
    
  } else {
    
  }
  base_name_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), base_name,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:smart3dmap.v1.Layer.base_name)
}

// string table_name = 5;
inline void Layer::clear_table_name() {
  table_name_.ClearToEmpty();
}
inline const std::string& Layer::table_name() const {
  // @@protoc_insertion_point(field_get:smart3dmap.v1.Layer.table_name)
  return _internal_table_name();
}
inline void Layer::set_table_name(const std::string& value) {
  _internal_set_table_name(value);
  // @@protoc_insertion_point(field_set:smart3dmap.v1.Layer.table_name)
}
inline std::string* Layer::mutable_table_name() {
  // @@protoc_insertion_point(field_mutable:smart3dmap.v1.Layer.table_name)
  return _internal_mutable_table_name();
}
inline const std::string& Layer::_internal_table_name() const {
  return table_name_.Get();
}
inline void Layer::_internal_set_table_name(const std::string& value) {
  
  table_name_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArena());
}
inline void Layer::set_table_name(std::string&& value) {
  
  table_name_.Set(
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:smart3dmap.v1.Layer.table_name)
}
inline void Layer::set_table_name(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  table_name_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(value), GetArena());
  // @@protoc_insertion_point(field_set_char:smart3dmap.v1.Layer.table_name)
}
inline void Layer::set_table_name(const char* value,
    size_t size) {
  
  table_name_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:smart3dmap.v1.Layer.table_name)
}
inline std::string* Layer::_internal_mutable_table_name() {
  
  return table_name_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArena());
}
inline std::string* Layer::release_table_name() {
  // @@protoc_insertion_point(field_release:smart3dmap.v1.Layer.table_name)
  return table_name_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void Layer::set_allocated_table_name(std::string* table_name) {
  if (table_name != nullptr) {
    
  } else {
    
  }
  table_name_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), table_name,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:smart3dmap.v1.Layer.table_name)
}

// .smart3dmap.v1.Rect2D bound_box = 6;
inline bool Layer::_internal_has_bound_box() const {
  return this != internal_default_instance() && bound_box_ != nullptr;
}
inline bool Layer::has_bound_box() const {
  return _internal_has_bound_box();
}
inline const ::smart3dmap::v1::Rect2D& Layer::_internal_bound_box() const {
  const ::smart3dmap::v1::Rect2D* p = bound_box_;
  return p != nullptr ? *p : reinterpret_cast<const ::smart3dmap::v1::Rect2D&>(
      ::smart3dmap::v1::_Rect2D_default_instance_);
}
inline const ::smart3dmap::v1::Rect2D& Layer::bound_box() const {
  // @@protoc_insertion_point(field_get:smart3dmap.v1.Layer.bound_box)
  return _internal_bound_box();
}
inline void Layer::unsafe_arena_set_allocated_bound_box(
    ::smart3dmap::v1::Rect2D* bound_box) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(bound_box_);
  }
  bound_box_ = bound_box;
  if (bound_box) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:smart3dmap.v1.Layer.bound_box)
}
inline ::smart3dmap::v1::Rect2D* Layer::release_bound_box() {
  
  ::smart3dmap::v1::Rect2D* temp = bound_box_;
  bound_box_ = nullptr;
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::smart3dmap::v1::Rect2D* Layer::unsafe_arena_release_bound_box() {
  // @@protoc_insertion_point(field_release:smart3dmap.v1.Layer.bound_box)
  
  ::smart3dmap::v1::Rect2D* temp = bound_box_;
  bound_box_ = nullptr;
  return temp;
}
inline ::smart3dmap::v1::Rect2D* Layer::_internal_mutable_bound_box() {
  
  if (bound_box_ == nullptr) {
    auto* p = CreateMaybeMessage<::smart3dmap::v1::Rect2D>(GetArena());
    bound_box_ = p;
  }
  return bound_box_;
}
inline ::smart3dmap::v1::Rect2D* Layer::mutable_bound_box() {
  // @@protoc_insertion_point(field_mutable:smart3dmap.v1.Layer.bound_box)
  return _internal_mutable_bound_box();
}
inline void Layer::set_allocated_bound_box(::smart3dmap::v1::Rect2D* bound_box) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(bound_box_);
  }
  if (bound_box) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(bound_box)->GetArena();
    if (message_arena != submessage_arena) {
      bound_box = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, bound_box, submessage_arena);
    }
    
  } else {
    
  }
  bound_box_ = bound_box;
  // @@protoc_insertion_point(field_set_allocated:smart3dmap.v1.Layer.bound_box)
}

// string crs_code = 7;
inline void Layer::clear_crs_code() {
  crs_code_.ClearToEmpty();
}
inline const std::string& Layer::crs_code() const {
  // @@protoc_insertion_point(field_get:smart3dmap.v1.Layer.crs_code)
  return _internal_crs_code();
}
inline void Layer::set_crs_code(const std::string& value) {
  _internal_set_crs_code(value);
  // @@protoc_insertion_point(field_set:smart3dmap.v1.Layer.crs_code)
}
inline std::string* Layer::mutable_crs_code() {
  // @@protoc_insertion_point(field_mutable:smart3dmap.v1.Layer.crs_code)
  return _internal_mutable_crs_code();
}
inline const std::string& Layer::_internal_crs_code() const {
  return crs_code_.Get();
}
inline void Layer::_internal_set_crs_code(const std::string& value) {
  
  crs_code_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArena());
}
inline void Layer::set_crs_code(std::string&& value) {
  
  crs_code_.Set(
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:smart3dmap.v1.Layer.crs_code)
}
inline void Layer::set_crs_code(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  crs_code_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(value), GetArena());
  // @@protoc_insertion_point(field_set_char:smart3dmap.v1.Layer.crs_code)
}
inline void Layer::set_crs_code(const char* value,
    size_t size) {
  
  crs_code_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:smart3dmap.v1.Layer.crs_code)
}
inline std::string* Layer::_internal_mutable_crs_code() {
  
  return crs_code_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArena());
}
inline std::string* Layer::release_crs_code() {
  // @@protoc_insertion_point(field_release:smart3dmap.v1.Layer.crs_code)
  return crs_code_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void Layer::set_allocated_crs_code(std::string* crs_code) {
  if (crs_code != nullptr) {
    
  } else {
    
  }
  crs_code_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), crs_code,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:smart3dmap.v1.Layer.crs_code)
}

// string sld = 8;
inline void Layer::clear_sld() {
  sld_.ClearToEmpty();
}
inline const std::string& Layer::sld() const {
  // @@protoc_insertion_point(field_get:smart3dmap.v1.Layer.sld)
  return _internal_sld();
}
inline void Layer::set_sld(const std::string& value) {
  _internal_set_sld(value);
  // @@protoc_insertion_point(field_set:smart3dmap.v1.Layer.sld)
}
inline std::string* Layer::mutable_sld() {
  // @@protoc_insertion_point(field_mutable:smart3dmap.v1.Layer.sld)
  return _internal_mutable_sld();
}
inline const std::string& Layer::_internal_sld() const {
  return sld_.Get();
}
inline void Layer::_internal_set_sld(const std::string& value) {
  
  sld_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArena());
}
inline void Layer::set_sld(std::string&& value) {
  
  sld_.Set(
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:smart3dmap.v1.Layer.sld)
}
inline void Layer::set_sld(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  sld_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(value), GetArena());
  // @@protoc_insertion_point(field_set_char:smart3dmap.v1.Layer.sld)
}
inline void Layer::set_sld(const char* value,
    size_t size) {
  
  sld_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:smart3dmap.v1.Layer.sld)
}
inline std::string* Layer::_internal_mutable_sld() {
  
  return sld_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArena());
}
inline std::string* Layer::release_sld() {
  // @@protoc_insertion_point(field_release:smart3dmap.v1.Layer.sld)
  return sld_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void Layer::set_allocated_sld(std::string* sld) {
  if (sld != nullptr) {
    
  } else {
    
  }
  sld_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), sld,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:smart3dmap.v1.Layer.sld)
}

// int32 order = 9;
inline void Layer::clear_order() {
  order_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 Layer::_internal_order() const {
  return order_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 Layer::order() const {
  // @@protoc_insertion_point(field_get:smart3dmap.v1.Layer.order)
  return _internal_order();
}
inline void Layer::_internal_set_order(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  order_ = value;
}
inline void Layer::set_order(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_order(value);
  // @@protoc_insertion_point(field_set:smart3dmap.v1.Layer.order)
}

// int32 db_id = 10;
inline void Layer::clear_db_id() {
  db_id_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 Layer::_internal_db_id() const {
  return db_id_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 Layer::db_id() const {
  // @@protoc_insertion_point(field_get:smart3dmap.v1.Layer.db_id)
  return _internal_db_id();
}
inline void Layer::_internal_set_db_id(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  db_id_ = value;
}
inline void Layer::set_db_id(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_db_id(value);
  // @@protoc_insertion_point(field_set:smart3dmap.v1.Layer.db_id)
}

// .google.protobuf.Timestamp created_at = 11;
inline bool Layer::_internal_has_created_at() const {
  return this != internal_default_instance() && created_at_ != nullptr;
}
inline bool Layer::has_created_at() const {
  return _internal_has_created_at();
}
inline const PROTOBUF_NAMESPACE_ID::Timestamp& Layer::_internal_created_at() const {
  const PROTOBUF_NAMESPACE_ID::Timestamp* p = created_at_;
  return p != nullptr ? *p : reinterpret_cast<const PROTOBUF_NAMESPACE_ID::Timestamp&>(
      PROTOBUF_NAMESPACE_ID::_Timestamp_default_instance_);
}
inline const PROTOBUF_NAMESPACE_ID::Timestamp& Layer::created_at() const {
  // @@protoc_insertion_point(field_get:smart3dmap.v1.Layer.created_at)
  return _internal_created_at();
}
inline void Layer::unsafe_arena_set_allocated_created_at(
    PROTOBUF_NAMESPACE_ID::Timestamp* created_at) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(created_at_);
  }
  created_at_ = created_at;
  if (created_at) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:smart3dmap.v1.Layer.created_at)
}
inline PROTOBUF_NAMESPACE_ID::Timestamp* Layer::release_created_at() {
  
  PROTOBUF_NAMESPACE_ID::Timestamp* temp = created_at_;
  created_at_ = nullptr;
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline PROTOBUF_NAMESPACE_ID::Timestamp* Layer::unsafe_arena_release_created_at() {
  // @@protoc_insertion_point(field_release:smart3dmap.v1.Layer.created_at)
  
  PROTOBUF_NAMESPACE_ID::Timestamp* temp = created_at_;
  created_at_ = nullptr;
  return temp;
}
inline PROTOBUF_NAMESPACE_ID::Timestamp* Layer::_internal_mutable_created_at() {
  
  if (created_at_ == nullptr) {
    auto* p = CreateMaybeMessage<PROTOBUF_NAMESPACE_ID::Timestamp>(GetArena());
    created_at_ = p;
  }
  return created_at_;
}
inline PROTOBUF_NAMESPACE_ID::Timestamp* Layer::mutable_created_at() {
  // @@protoc_insertion_point(field_mutable:smart3dmap.v1.Layer.created_at)
  return _internal_mutable_created_at();
}
inline void Layer::set_allocated_created_at(PROTOBUF_NAMESPACE_ID::Timestamp* created_at) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(created_at_);
  }
  if (created_at) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(created_at)->GetArena();
    if (message_arena != submessage_arena) {
      created_at = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, created_at, submessage_arena);
    }
    
  } else {
    
  }
  created_at_ = created_at;
  // @@protoc_insertion_point(field_set_allocated:smart3dmap.v1.Layer.created_at)
}

// .google.protobuf.Timestamp updated_at = 12;
inline bool Layer::_internal_has_updated_at() const {
  return this != internal_default_instance() && updated_at_ != nullptr;
}
inline bool Layer::has_updated_at() const {
  return _internal_has_updated_at();
}
inline const PROTOBUF_NAMESPACE_ID::Timestamp& Layer::_internal_updated_at() const {
  const PROTOBUF_NAMESPACE_ID::Timestamp* p = updated_at_;
  return p != nullptr ? *p : reinterpret_cast<const PROTOBUF_NAMESPACE_ID::Timestamp&>(
      PROTOBUF_NAMESPACE_ID::_Timestamp_default_instance_);
}
inline const PROTOBUF_NAMESPACE_ID::Timestamp& Layer::updated_at() const {
  // @@protoc_insertion_point(field_get:smart3dmap.v1.Layer.updated_at)
  return _internal_updated_at();
}
inline void Layer::unsafe_arena_set_allocated_updated_at(
    PROTOBUF_NAMESPACE_ID::Timestamp* updated_at) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(updated_at_);
  }
  updated_at_ = updated_at;
  if (updated_at) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:smart3dmap.v1.Layer.updated_at)
}
inline PROTOBUF_NAMESPACE_ID::Timestamp* Layer::release_updated_at() {
  
  PROTOBUF_NAMESPACE_ID::Timestamp* temp = updated_at_;
  updated_at_ = nullptr;
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline PROTOBUF_NAMESPACE_ID::Timestamp* Layer::unsafe_arena_release_updated_at() {
  // @@protoc_insertion_point(field_release:smart3dmap.v1.Layer.updated_at)
  
  PROTOBUF_NAMESPACE_ID::Timestamp* temp = updated_at_;
  updated_at_ = nullptr;
  return temp;
}
inline PROTOBUF_NAMESPACE_ID::Timestamp* Layer::_internal_mutable_updated_at() {
  
  if (updated_at_ == nullptr) {
    auto* p = CreateMaybeMessage<PROTOBUF_NAMESPACE_ID::Timestamp>(GetArena());
    updated_at_ = p;
  }
  return updated_at_;
}
inline PROTOBUF_NAMESPACE_ID::Timestamp* Layer::mutable_updated_at() {
  // @@protoc_insertion_point(field_mutable:smart3dmap.v1.Layer.updated_at)
  return _internal_mutable_updated_at();
}
inline void Layer::set_allocated_updated_at(PROTOBUF_NAMESPACE_ID::Timestamp* updated_at) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(updated_at_);
  }
  if (updated_at) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(updated_at)->GetArena();
    if (message_arena != submessage_arena) {
      updated_at = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, updated_at, submessage_arena);
    }
    
  } else {
    
  }
  updated_at_ = updated_at;
  // @@protoc_insertion_point(field_set_allocated:smart3dmap.v1.Layer.updated_at)
}

// .smart3dmap.v1.Layer.Type type = 13;
inline void Layer::clear_type() {
  type_ = 0;
}
inline ::smart3dmap::v1::Layer_Type Layer::_internal_type() const {
  return static_cast< ::smart3dmap::v1::Layer_Type >(type_);
}
inline ::smart3dmap::v1::Layer_Type Layer::type() const {
  // @@protoc_insertion_point(field_get:smart3dmap.v1.Layer.type)
  return _internal_type();
}
inline void Layer::_internal_set_type(::smart3dmap::v1::Layer_Type value) {
  
  type_ = value;
}
inline void Layer::set_type(::smart3dmap::v1::Layer_Type value) {
  _internal_set_type(value);
  // @@protoc_insertion_point(field_set:smart3dmap.v1.Layer.type)
}

// string crs_wkt = 14;
inline void Layer::clear_crs_wkt() {
  crs_wkt_.ClearToEmpty();
}
inline const std::string& Layer::crs_wkt() const {
  // @@protoc_insertion_point(field_get:smart3dmap.v1.Layer.crs_wkt)
  return _internal_crs_wkt();
}
inline void Layer::set_crs_wkt(const std::string& value) {
  _internal_set_crs_wkt(value);
  // @@protoc_insertion_point(field_set:smart3dmap.v1.Layer.crs_wkt)
}
inline std::string* Layer::mutable_crs_wkt() {
  // @@protoc_insertion_point(field_mutable:smart3dmap.v1.Layer.crs_wkt)
  return _internal_mutable_crs_wkt();
}
inline const std::string& Layer::_internal_crs_wkt() const {
  return crs_wkt_.Get();
}
inline void Layer::_internal_set_crs_wkt(const std::string& value) {
  
  crs_wkt_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArena());
}
inline void Layer::set_crs_wkt(std::string&& value) {
  
  crs_wkt_.Set(
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:smart3dmap.v1.Layer.crs_wkt)
}
inline void Layer::set_crs_wkt(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  crs_wkt_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(value), GetArena());
  // @@protoc_insertion_point(field_set_char:smart3dmap.v1.Layer.crs_wkt)
}
inline void Layer::set_crs_wkt(const char* value,
    size_t size) {
  
  crs_wkt_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:smart3dmap.v1.Layer.crs_wkt)
}
inline std::string* Layer::_internal_mutable_crs_wkt() {
  
  return crs_wkt_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArena());
}
inline std::string* Layer::release_crs_wkt() {
  // @@protoc_insertion_point(field_release:smart3dmap.v1.Layer.crs_wkt)
  return crs_wkt_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void Layer::set_allocated_crs_wkt(std::string* crs_wkt) {
  if (crs_wkt != nullptr) {
    
  } else {
    
  }
  crs_wkt_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), crs_wkt,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:smart3dmap.v1.Layer.crs_wkt)
}

// -------------------------------------------------------------------

// Map

// int32 db_id = 1;
inline void Map::clear_db_id() {
  db_id_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 Map::_internal_db_id() const {
  return db_id_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 Map::db_id() const {
  // @@protoc_insertion_point(field_get:smart3dmap.v1.Map.db_id)
  return _internal_db_id();
}
inline void Map::_internal_set_db_id(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  db_id_ = value;
}
inline void Map::set_db_id(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_db_id(value);
  // @@protoc_insertion_point(field_set:smart3dmap.v1.Map.db_id)
}

// int32 id = 2;
inline void Map::clear_id() {
  id_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 Map::_internal_id() const {
  return id_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 Map::id() const {
  // @@protoc_insertion_point(field_get:smart3dmap.v1.Map.id)
  return _internal_id();
}
inline void Map::_internal_set_id(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  id_ = value;
}
inline void Map::set_id(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_id(value);
  // @@protoc_insertion_point(field_set:smart3dmap.v1.Map.id)
}

// string name = 3;
inline void Map::clear_name() {
  name_.ClearToEmpty();
}
inline const std::string& Map::name() const {
  // @@protoc_insertion_point(field_get:smart3dmap.v1.Map.name)
  return _internal_name();
}
inline void Map::set_name(const std::string& value) {
  _internal_set_name(value);
  // @@protoc_insertion_point(field_set:smart3dmap.v1.Map.name)
}
inline std::string* Map::mutable_name() {
  // @@protoc_insertion_point(field_mutable:smart3dmap.v1.Map.name)
  return _internal_mutable_name();
}
inline const std::string& Map::_internal_name() const {
  return name_.Get();
}
inline void Map::_internal_set_name(const std::string& value) {
  
  name_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArena());
}
inline void Map::set_name(std::string&& value) {
  
  name_.Set(
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:smart3dmap.v1.Map.name)
}
inline void Map::set_name(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  name_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(value), GetArena());
  // @@protoc_insertion_point(field_set_char:smart3dmap.v1.Map.name)
}
inline void Map::set_name(const char* value,
    size_t size) {
  
  name_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:smart3dmap.v1.Map.name)
}
inline std::string* Map::_internal_mutable_name() {
  
  return name_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArena());
}
inline std::string* Map::release_name() {
  // @@protoc_insertion_point(field_release:smart3dmap.v1.Map.name)
  return name_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void Map::set_allocated_name(std::string* name) {
  if (name != nullptr) {
    
  } else {
    
  }
  name_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), name,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:smart3dmap.v1.Map.name)
}

// .smart3dmap.v1.DataResourceType type = 4;
inline void Map::clear_type() {
  type_ = 0;
}
inline ::smart3dmap::v1::DataResourceType Map::_internal_type() const {
  return static_cast< ::smart3dmap::v1::DataResourceType >(type_);
}
inline ::smart3dmap::v1::DataResourceType Map::type() const {
  // @@protoc_insertion_point(field_get:smart3dmap.v1.Map.type)
  return _internal_type();
}
inline void Map::_internal_set_type(::smart3dmap::v1::DataResourceType value) {
  
  type_ = value;
}
inline void Map::set_type(::smart3dmap::v1::DataResourceType value) {
  _internal_set_type(value);
  // @@protoc_insertion_point(field_set:smart3dmap.v1.Map.type)
}

// .smart3dmap.v1.Rect2D bound_box = 5;
inline bool Map::_internal_has_bound_box() const {
  return this != internal_default_instance() && bound_box_ != nullptr;
}
inline bool Map::has_bound_box() const {
  return _internal_has_bound_box();
}
inline const ::smart3dmap::v1::Rect2D& Map::_internal_bound_box() const {
  const ::smart3dmap::v1::Rect2D* p = bound_box_;
  return p != nullptr ? *p : reinterpret_cast<const ::smart3dmap::v1::Rect2D&>(
      ::smart3dmap::v1::_Rect2D_default_instance_);
}
inline const ::smart3dmap::v1::Rect2D& Map::bound_box() const {
  // @@protoc_insertion_point(field_get:smart3dmap.v1.Map.bound_box)
  return _internal_bound_box();
}
inline void Map::unsafe_arena_set_allocated_bound_box(
    ::smart3dmap::v1::Rect2D* bound_box) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(bound_box_);
  }
  bound_box_ = bound_box;
  if (bound_box) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:smart3dmap.v1.Map.bound_box)
}
inline ::smart3dmap::v1::Rect2D* Map::release_bound_box() {
  
  ::smart3dmap::v1::Rect2D* temp = bound_box_;
  bound_box_ = nullptr;
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::smart3dmap::v1::Rect2D* Map::unsafe_arena_release_bound_box() {
  // @@protoc_insertion_point(field_release:smart3dmap.v1.Map.bound_box)
  
  ::smart3dmap::v1::Rect2D* temp = bound_box_;
  bound_box_ = nullptr;
  return temp;
}
inline ::smart3dmap::v1::Rect2D* Map::_internal_mutable_bound_box() {
  
  if (bound_box_ == nullptr) {
    auto* p = CreateMaybeMessage<::smart3dmap::v1::Rect2D>(GetArena());
    bound_box_ = p;
  }
  return bound_box_;
}
inline ::smart3dmap::v1::Rect2D* Map::mutable_bound_box() {
  // @@protoc_insertion_point(field_mutable:smart3dmap.v1.Map.bound_box)
  return _internal_mutable_bound_box();
}
inline void Map::set_allocated_bound_box(::smart3dmap::v1::Rect2D* bound_box) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(bound_box_);
  }
  if (bound_box) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(bound_box)->GetArena();
    if (message_arena != submessage_arena) {
      bound_box = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, bound_box, submessage_arena);
    }
    
  } else {
    
  }
  bound_box_ = bound_box;
  // @@protoc_insertion_point(field_set_allocated:smart3dmap.v1.Map.bound_box)
}

// string crs_code = 6;
inline void Map::clear_crs_code() {
  crs_code_.ClearToEmpty();
}
inline const std::string& Map::crs_code() const {
  // @@protoc_insertion_point(field_get:smart3dmap.v1.Map.crs_code)
  return _internal_crs_code();
}
inline void Map::set_crs_code(const std::string& value) {
  _internal_set_crs_code(value);
  // @@protoc_insertion_point(field_set:smart3dmap.v1.Map.crs_code)
}
inline std::string* Map::mutable_crs_code() {
  // @@protoc_insertion_point(field_mutable:smart3dmap.v1.Map.crs_code)
  return _internal_mutable_crs_code();
}
inline const std::string& Map::_internal_crs_code() const {
  return crs_code_.Get();
}
inline void Map::_internal_set_crs_code(const std::string& value) {
  
  crs_code_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArena());
}
inline void Map::set_crs_code(std::string&& value) {
  
  crs_code_.Set(
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:smart3dmap.v1.Map.crs_code)
}
inline void Map::set_crs_code(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  crs_code_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(value), GetArena());
  // @@protoc_insertion_point(field_set_char:smart3dmap.v1.Map.crs_code)
}
inline void Map::set_crs_code(const char* value,
    size_t size) {
  
  crs_code_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:smart3dmap.v1.Map.crs_code)
}
inline std::string* Map::_internal_mutable_crs_code() {
  
  return crs_code_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArena());
}
inline std::string* Map::release_crs_code() {
  // @@protoc_insertion_point(field_release:smart3dmap.v1.Map.crs_code)
  return crs_code_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void Map::set_allocated_crs_code(std::string* crs_code) {
  if (crs_code != nullptr) {
    
  } else {
    
  }
  crs_code_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), crs_code,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:smart3dmap.v1.Map.crs_code)
}

// string qgs_project = 7;
inline void Map::clear_qgs_project() {
  qgs_project_.ClearToEmpty();
}
inline const std::string& Map::qgs_project() const {
  // @@protoc_insertion_point(field_get:smart3dmap.v1.Map.qgs_project)
  return _internal_qgs_project();
}
inline void Map::set_qgs_project(const std::string& value) {
  _internal_set_qgs_project(value);
  // @@protoc_insertion_point(field_set:smart3dmap.v1.Map.qgs_project)
}
inline std::string* Map::mutable_qgs_project() {
  // @@protoc_insertion_point(field_mutable:smart3dmap.v1.Map.qgs_project)
  return _internal_mutable_qgs_project();
}
inline const std::string& Map::_internal_qgs_project() const {
  return qgs_project_.Get();
}
inline void Map::_internal_set_qgs_project(const std::string& value) {
  
  qgs_project_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArena());
}
inline void Map::set_qgs_project(std::string&& value) {
  
  qgs_project_.Set(
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:smart3dmap.v1.Map.qgs_project)
}
inline void Map::set_qgs_project(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  qgs_project_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(value), GetArena());
  // @@protoc_insertion_point(field_set_char:smart3dmap.v1.Map.qgs_project)
}
inline void Map::set_qgs_project(const char* value,
    size_t size) {
  
  qgs_project_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:smart3dmap.v1.Map.qgs_project)
}
inline std::string* Map::_internal_mutable_qgs_project() {
  
  return qgs_project_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArena());
}
inline std::string* Map::release_qgs_project() {
  // @@protoc_insertion_point(field_release:smart3dmap.v1.Map.qgs_project)
  return qgs_project_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void Map::set_allocated_qgs_project(std::string* qgs_project) {
  if (qgs_project != nullptr) {
    
  } else {
    
  }
  qgs_project_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), qgs_project,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:smart3dmap.v1.Map.qgs_project)
}

// .google.protobuf.Timestamp created_at = 9;
inline bool Map::_internal_has_created_at() const {
  return this != internal_default_instance() && created_at_ != nullptr;
}
inline bool Map::has_created_at() const {
  return _internal_has_created_at();
}
inline const PROTOBUF_NAMESPACE_ID::Timestamp& Map::_internal_created_at() const {
  const PROTOBUF_NAMESPACE_ID::Timestamp* p = created_at_;
  return p != nullptr ? *p : reinterpret_cast<const PROTOBUF_NAMESPACE_ID::Timestamp&>(
      PROTOBUF_NAMESPACE_ID::_Timestamp_default_instance_);
}
inline const PROTOBUF_NAMESPACE_ID::Timestamp& Map::created_at() const {
  // @@protoc_insertion_point(field_get:smart3dmap.v1.Map.created_at)
  return _internal_created_at();
}
inline void Map::unsafe_arena_set_allocated_created_at(
    PROTOBUF_NAMESPACE_ID::Timestamp* created_at) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(created_at_);
  }
  created_at_ = created_at;
  if (created_at) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:smart3dmap.v1.Map.created_at)
}
inline PROTOBUF_NAMESPACE_ID::Timestamp* Map::release_created_at() {
  
  PROTOBUF_NAMESPACE_ID::Timestamp* temp = created_at_;
  created_at_ = nullptr;
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline PROTOBUF_NAMESPACE_ID::Timestamp* Map::unsafe_arena_release_created_at() {
  // @@protoc_insertion_point(field_release:smart3dmap.v1.Map.created_at)
  
  PROTOBUF_NAMESPACE_ID::Timestamp* temp = created_at_;
  created_at_ = nullptr;
  return temp;
}
inline PROTOBUF_NAMESPACE_ID::Timestamp* Map::_internal_mutable_created_at() {
  
  if (created_at_ == nullptr) {
    auto* p = CreateMaybeMessage<PROTOBUF_NAMESPACE_ID::Timestamp>(GetArena());
    created_at_ = p;
  }
  return created_at_;
}
inline PROTOBUF_NAMESPACE_ID::Timestamp* Map::mutable_created_at() {
  // @@protoc_insertion_point(field_mutable:smart3dmap.v1.Map.created_at)
  return _internal_mutable_created_at();
}
inline void Map::set_allocated_created_at(PROTOBUF_NAMESPACE_ID::Timestamp* created_at) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(created_at_);
  }
  if (created_at) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(created_at)->GetArena();
    if (message_arena != submessage_arena) {
      created_at = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, created_at, submessage_arena);
    }
    
  } else {
    
  }
  created_at_ = created_at;
  // @@protoc_insertion_point(field_set_allocated:smart3dmap.v1.Map.created_at)
}

// .google.protobuf.Timestamp updated_at = 10;
inline bool Map::_internal_has_updated_at() const {
  return this != internal_default_instance() && updated_at_ != nullptr;
}
inline bool Map::has_updated_at() const {
  return _internal_has_updated_at();
}
inline const PROTOBUF_NAMESPACE_ID::Timestamp& Map::_internal_updated_at() const {
  const PROTOBUF_NAMESPACE_ID::Timestamp* p = updated_at_;
  return p != nullptr ? *p : reinterpret_cast<const PROTOBUF_NAMESPACE_ID::Timestamp&>(
      PROTOBUF_NAMESPACE_ID::_Timestamp_default_instance_);
}
inline const PROTOBUF_NAMESPACE_ID::Timestamp& Map::updated_at() const {
  // @@protoc_insertion_point(field_get:smart3dmap.v1.Map.updated_at)
  return _internal_updated_at();
}
inline void Map::unsafe_arena_set_allocated_updated_at(
    PROTOBUF_NAMESPACE_ID::Timestamp* updated_at) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(updated_at_);
  }
  updated_at_ = updated_at;
  if (updated_at) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:smart3dmap.v1.Map.updated_at)
}
inline PROTOBUF_NAMESPACE_ID::Timestamp* Map::release_updated_at() {
  
  PROTOBUF_NAMESPACE_ID::Timestamp* temp = updated_at_;
  updated_at_ = nullptr;
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline PROTOBUF_NAMESPACE_ID::Timestamp* Map::unsafe_arena_release_updated_at() {
  // @@protoc_insertion_point(field_release:smart3dmap.v1.Map.updated_at)
  
  PROTOBUF_NAMESPACE_ID::Timestamp* temp = updated_at_;
  updated_at_ = nullptr;
  return temp;
}
inline PROTOBUF_NAMESPACE_ID::Timestamp* Map::_internal_mutable_updated_at() {
  
  if (updated_at_ == nullptr) {
    auto* p = CreateMaybeMessage<PROTOBUF_NAMESPACE_ID::Timestamp>(GetArena());
    updated_at_ = p;
  }
  return updated_at_;
}
inline PROTOBUF_NAMESPACE_ID::Timestamp* Map::mutable_updated_at() {
  // @@protoc_insertion_point(field_mutable:smart3dmap.v1.Map.updated_at)
  return _internal_mutable_updated_at();
}
inline void Map::set_allocated_updated_at(PROTOBUF_NAMESPACE_ID::Timestamp* updated_at) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(updated_at_);
  }
  if (updated_at) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(updated_at)->GetArena();
    if (message_arena != submessage_arena) {
      updated_at = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, updated_at, submessage_arena);
    }
    
  } else {
    
  }
  updated_at_ = updated_at;
  // @@protoc_insertion_point(field_set_allocated:smart3dmap.v1.Map.updated_at)
}

// string crs_wkt = 11;
inline void Map::clear_crs_wkt() {
  crs_wkt_.ClearToEmpty();
}
inline const std::string& Map::crs_wkt() const {
  // @@protoc_insertion_point(field_get:smart3dmap.v1.Map.crs_wkt)
  return _internal_crs_wkt();
}
inline void Map::set_crs_wkt(const std::string& value) {
  _internal_set_crs_wkt(value);
  // @@protoc_insertion_point(field_set:smart3dmap.v1.Map.crs_wkt)
}
inline std::string* Map::mutable_crs_wkt() {
  // @@protoc_insertion_point(field_mutable:smart3dmap.v1.Map.crs_wkt)
  return _internal_mutable_crs_wkt();
}
inline const std::string& Map::_internal_crs_wkt() const {
  return crs_wkt_.Get();
}
inline void Map::_internal_set_crs_wkt(const std::string& value) {
  
  crs_wkt_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArena());
}
inline void Map::set_crs_wkt(std::string&& value) {
  
  crs_wkt_.Set(
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:smart3dmap.v1.Map.crs_wkt)
}
inline void Map::set_crs_wkt(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  crs_wkt_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(value), GetArena());
  // @@protoc_insertion_point(field_set_char:smart3dmap.v1.Map.crs_wkt)
}
inline void Map::set_crs_wkt(const char* value,
    size_t size) {
  
  crs_wkt_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:smart3dmap.v1.Map.crs_wkt)
}
inline std::string* Map::_internal_mutable_crs_wkt() {
  
  return crs_wkt_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArena());
}
inline std::string* Map::release_crs_wkt() {
  // @@protoc_insertion_point(field_release:smart3dmap.v1.Map.crs_wkt)
  return crs_wkt_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void Map::set_allocated_crs_wkt(std::string* crs_wkt) {
  if (crs_wkt != nullptr) {
    
  } else {
    
  }
  crs_wkt_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), crs_wkt,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:smart3dmap.v1.Map.crs_wkt)
}

// -------------------------------------------------------------------

// ListMapsRequest

// .smart3dmap.v1.Pagination pagination = 1;
inline bool ListMapsRequest::_internal_has_pagination() const {
  return this != internal_default_instance() && pagination_ != nullptr;
}
inline bool ListMapsRequest::has_pagination() const {
  return _internal_has_pagination();
}
inline const ::smart3dmap::v1::Pagination& ListMapsRequest::_internal_pagination() const {
  const ::smart3dmap::v1::Pagination* p = pagination_;
  return p != nullptr ? *p : reinterpret_cast<const ::smart3dmap::v1::Pagination&>(
      ::smart3dmap::v1::_Pagination_default_instance_);
}
inline const ::smart3dmap::v1::Pagination& ListMapsRequest::pagination() const {
  // @@protoc_insertion_point(field_get:smart3dmap.v1.ListMapsRequest.pagination)
  return _internal_pagination();
}
inline void ListMapsRequest::unsafe_arena_set_allocated_pagination(
    ::smart3dmap::v1::Pagination* pagination) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(pagination_);
  }
  pagination_ = pagination;
  if (pagination) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:smart3dmap.v1.ListMapsRequest.pagination)
}
inline ::smart3dmap::v1::Pagination* ListMapsRequest::release_pagination() {
  
  ::smart3dmap::v1::Pagination* temp = pagination_;
  pagination_ = nullptr;
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::smart3dmap::v1::Pagination* ListMapsRequest::unsafe_arena_release_pagination() {
  // @@protoc_insertion_point(field_release:smart3dmap.v1.ListMapsRequest.pagination)
  
  ::smart3dmap::v1::Pagination* temp = pagination_;
  pagination_ = nullptr;
  return temp;
}
inline ::smart3dmap::v1::Pagination* ListMapsRequest::_internal_mutable_pagination() {
  
  if (pagination_ == nullptr) {
    auto* p = CreateMaybeMessage<::smart3dmap::v1::Pagination>(GetArena());
    pagination_ = p;
  }
  return pagination_;
}
inline ::smart3dmap::v1::Pagination* ListMapsRequest::mutable_pagination() {
  // @@protoc_insertion_point(field_mutable:smart3dmap.v1.ListMapsRequest.pagination)
  return _internal_mutable_pagination();
}
inline void ListMapsRequest::set_allocated_pagination(::smart3dmap::v1::Pagination* pagination) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(pagination_);
  }
  if (pagination) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(pagination)->GetArena();
    if (message_arena != submessage_arena) {
      pagination = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, pagination, submessage_arena);
    }
    
  } else {
    
  }
  pagination_ = pagination;
  // @@protoc_insertion_point(field_set_allocated:smart3dmap.v1.ListMapsRequest.pagination)
}

// int32 db_id = 2;
inline void ListMapsRequest::clear_db_id() {
  db_id_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 ListMapsRequest::_internal_db_id() const {
  return db_id_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 ListMapsRequest::db_id() const {
  // @@protoc_insertion_point(field_get:smart3dmap.v1.ListMapsRequest.db_id)
  return _internal_db_id();
}
inline void ListMapsRequest::_internal_set_db_id(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  db_id_ = value;
}
inline void ListMapsRequest::set_db_id(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_db_id(value);
  // @@protoc_insertion_point(field_set:smart3dmap.v1.ListMapsRequest.db_id)
}

// .smart3dmap.v1.DataResourceType type = 3;
inline void ListMapsRequest::clear_type() {
  type_ = 0;
}
inline ::smart3dmap::v1::DataResourceType ListMapsRequest::_internal_type() const {
  return static_cast< ::smart3dmap::v1::DataResourceType >(type_);
}
inline ::smart3dmap::v1::DataResourceType ListMapsRequest::type() const {
  // @@protoc_insertion_point(field_get:smart3dmap.v1.ListMapsRequest.type)
  return _internal_type();
}
inline void ListMapsRequest::_internal_set_type(::smart3dmap::v1::DataResourceType value) {
  
  type_ = value;
}
inline void ListMapsRequest::set_type(::smart3dmap::v1::DataResourceType value) {
  _internal_set_type(value);
  // @@protoc_insertion_point(field_set:smart3dmap.v1.ListMapsRequest.type)
}

// -------------------------------------------------------------------

// ListMapsResponse

// int32 total_count = 1;
inline void ListMapsResponse::clear_total_count() {
  total_count_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 ListMapsResponse::_internal_total_count() const {
  return total_count_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 ListMapsResponse::total_count() const {
  // @@protoc_insertion_point(field_get:smart3dmap.v1.ListMapsResponse.total_count)
  return _internal_total_count();
}
inline void ListMapsResponse::_internal_set_total_count(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  total_count_ = value;
}
inline void ListMapsResponse::set_total_count(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_total_count(value);
  // @@protoc_insertion_point(field_set:smart3dmap.v1.ListMapsResponse.total_count)
}

// repeated .smart3dmap.v1.Map maps = 2;
inline int ListMapsResponse::_internal_maps_size() const {
  return maps_.size();
}
inline int ListMapsResponse::maps_size() const {
  return _internal_maps_size();
}
inline void ListMapsResponse::clear_maps() {
  maps_.Clear();
}
inline ::smart3dmap::v1::Map* ListMapsResponse::mutable_maps(int index) {
  // @@protoc_insertion_point(field_mutable:smart3dmap.v1.ListMapsResponse.maps)
  return maps_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::smart3dmap::v1::Map >*
ListMapsResponse::mutable_maps() {
  // @@protoc_insertion_point(field_mutable_list:smart3dmap.v1.ListMapsResponse.maps)
  return &maps_;
}
inline const ::smart3dmap::v1::Map& ListMapsResponse::_internal_maps(int index) const {
  return maps_.Get(index);
}
inline const ::smart3dmap::v1::Map& ListMapsResponse::maps(int index) const {
  // @@protoc_insertion_point(field_get:smart3dmap.v1.ListMapsResponse.maps)
  return _internal_maps(index);
}
inline ::smart3dmap::v1::Map* ListMapsResponse::_internal_add_maps() {
  return maps_.Add();
}
inline ::smart3dmap::v1::Map* ListMapsResponse::add_maps() {
  // @@protoc_insertion_point(field_add:smart3dmap.v1.ListMapsResponse.maps)
  return _internal_add_maps();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::smart3dmap::v1::Map >&
ListMapsResponse::maps() const {
  // @@protoc_insertion_point(field_list:smart3dmap.v1.ListMapsResponse.maps)
  return maps_;
}

// -------------------------------------------------------------------

// GetMapRequest

// int32 db_id = 1;
inline void GetMapRequest::clear_db_id() {
  db_id_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 GetMapRequest::_internal_db_id() const {
  return db_id_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 GetMapRequest::db_id() const {
  // @@protoc_insertion_point(field_get:smart3dmap.v1.GetMapRequest.db_id)
  return _internal_db_id();
}
inline void GetMapRequest::_internal_set_db_id(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  db_id_ = value;
}
inline void GetMapRequest::set_db_id(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_db_id(value);
  // @@protoc_insertion_point(field_set:smart3dmap.v1.GetMapRequest.db_id)
}

// int32 map_id = 2;
inline void GetMapRequest::clear_map_id() {
  map_id_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 GetMapRequest::_internal_map_id() const {
  return map_id_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 GetMapRequest::map_id() const {
  // @@protoc_insertion_point(field_get:smart3dmap.v1.GetMapRequest.map_id)
  return _internal_map_id();
}
inline void GetMapRequest::_internal_set_map_id(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  map_id_ = value;
}
inline void GetMapRequest::set_map_id(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_map_id(value);
  // @@protoc_insertion_point(field_set:smart3dmap.v1.GetMapRequest.map_id)
}

// bool including_qgs_project = 3;
inline void GetMapRequest::clear_including_qgs_project() {
  including_qgs_project_ = false;
}
inline bool GetMapRequest::_internal_including_qgs_project() const {
  return including_qgs_project_;
}
inline bool GetMapRequest::including_qgs_project() const {
  // @@protoc_insertion_point(field_get:smart3dmap.v1.GetMapRequest.including_qgs_project)
  return _internal_including_qgs_project();
}
inline void GetMapRequest::_internal_set_including_qgs_project(bool value) {
  
  including_qgs_project_ = value;
}
inline void GetMapRequest::set_including_qgs_project(bool value) {
  _internal_set_including_qgs_project(value);
  // @@protoc_insertion_point(field_set:smart3dmap.v1.GetMapRequest.including_qgs_project)
}

// -------------------------------------------------------------------

// ListLayersOfMapRequest

// int32 db_id = 1;
inline void ListLayersOfMapRequest::clear_db_id() {
  db_id_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 ListLayersOfMapRequest::_internal_db_id() const {
  return db_id_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 ListLayersOfMapRequest::db_id() const {
  // @@protoc_insertion_point(field_get:smart3dmap.v1.ListLayersOfMapRequest.db_id)
  return _internal_db_id();
}
inline void ListLayersOfMapRequest::_internal_set_db_id(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  db_id_ = value;
}
inline void ListLayersOfMapRequest::set_db_id(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_db_id(value);
  // @@protoc_insertion_point(field_set:smart3dmap.v1.ListLayersOfMapRequest.db_id)
}

// int32 map_id = 2;
inline void ListLayersOfMapRequest::clear_map_id() {
  map_id_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 ListLayersOfMapRequest::_internal_map_id() const {
  return map_id_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 ListLayersOfMapRequest::map_id() const {
  // @@protoc_insertion_point(field_get:smart3dmap.v1.ListLayersOfMapRequest.map_id)
  return _internal_map_id();
}
inline void ListLayersOfMapRequest::_internal_set_map_id(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  map_id_ = value;
}
inline void ListLayersOfMapRequest::set_map_id(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_map_id(value);
  // @@protoc_insertion_point(field_set:smart3dmap.v1.ListLayersOfMapRequest.map_id)
}

// bool including_sld = 3;
inline void ListLayersOfMapRequest::clear_including_sld() {
  including_sld_ = false;
}
inline bool ListLayersOfMapRequest::_internal_including_sld() const {
  return including_sld_;
}
inline bool ListLayersOfMapRequest::including_sld() const {
  // @@protoc_insertion_point(field_get:smart3dmap.v1.ListLayersOfMapRequest.including_sld)
  return _internal_including_sld();
}
inline void ListLayersOfMapRequest::_internal_set_including_sld(bool value) {
  
  including_sld_ = value;
}
inline void ListLayersOfMapRequest::set_including_sld(bool value) {
  _internal_set_including_sld(value);
  // @@protoc_insertion_point(field_set:smart3dmap.v1.ListLayersOfMapRequest.including_sld)
}

// -------------------------------------------------------------------

// ListLayersOfMapByPageRequest

// .smart3dmap.v1.Pagination pagination = 1;
inline bool ListLayersOfMapByPageRequest::_internal_has_pagination() const {
  return this != internal_default_instance() && pagination_ != nullptr;
}
inline bool ListLayersOfMapByPageRequest::has_pagination() const {
  return _internal_has_pagination();
}
inline const ::smart3dmap::v1::Pagination& ListLayersOfMapByPageRequest::_internal_pagination() const {
  const ::smart3dmap::v1::Pagination* p = pagination_;
  return p != nullptr ? *p : reinterpret_cast<const ::smart3dmap::v1::Pagination&>(
      ::smart3dmap::v1::_Pagination_default_instance_);
}
inline const ::smart3dmap::v1::Pagination& ListLayersOfMapByPageRequest::pagination() const {
  // @@protoc_insertion_point(field_get:smart3dmap.v1.ListLayersOfMapByPageRequest.pagination)
  return _internal_pagination();
}
inline void ListLayersOfMapByPageRequest::unsafe_arena_set_allocated_pagination(
    ::smart3dmap::v1::Pagination* pagination) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(pagination_);
  }
  pagination_ = pagination;
  if (pagination) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:smart3dmap.v1.ListLayersOfMapByPageRequest.pagination)
}
inline ::smart3dmap::v1::Pagination* ListLayersOfMapByPageRequest::release_pagination() {
  
  ::smart3dmap::v1::Pagination* temp = pagination_;
  pagination_ = nullptr;
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::smart3dmap::v1::Pagination* ListLayersOfMapByPageRequest::unsafe_arena_release_pagination() {
  // @@protoc_insertion_point(field_release:smart3dmap.v1.ListLayersOfMapByPageRequest.pagination)
  
  ::smart3dmap::v1::Pagination* temp = pagination_;
  pagination_ = nullptr;
  return temp;
}
inline ::smart3dmap::v1::Pagination* ListLayersOfMapByPageRequest::_internal_mutable_pagination() {
  
  if (pagination_ == nullptr) {
    auto* p = CreateMaybeMessage<::smart3dmap::v1::Pagination>(GetArena());
    pagination_ = p;
  }
  return pagination_;
}
inline ::smart3dmap::v1::Pagination* ListLayersOfMapByPageRequest::mutable_pagination() {
  // @@protoc_insertion_point(field_mutable:smart3dmap.v1.ListLayersOfMapByPageRequest.pagination)
  return _internal_mutable_pagination();
}
inline void ListLayersOfMapByPageRequest::set_allocated_pagination(::smart3dmap::v1::Pagination* pagination) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(pagination_);
  }
  if (pagination) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(pagination)->GetArena();
    if (message_arena != submessage_arena) {
      pagination = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, pagination, submessage_arena);
    }
    
  } else {
    
  }
  pagination_ = pagination;
  // @@protoc_insertion_point(field_set_allocated:smart3dmap.v1.ListLayersOfMapByPageRequest.pagination)
}

// int32 db_id = 2;
inline void ListLayersOfMapByPageRequest::clear_db_id() {
  db_id_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 ListLayersOfMapByPageRequest::_internal_db_id() const {
  return db_id_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 ListLayersOfMapByPageRequest::db_id() const {
  // @@protoc_insertion_point(field_get:smart3dmap.v1.ListLayersOfMapByPageRequest.db_id)
  return _internal_db_id();
}
inline void ListLayersOfMapByPageRequest::_internal_set_db_id(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  db_id_ = value;
}
inline void ListLayersOfMapByPageRequest::set_db_id(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_db_id(value);
  // @@protoc_insertion_point(field_set:smart3dmap.v1.ListLayersOfMapByPageRequest.db_id)
}

// int32 map_id = 3;
inline void ListLayersOfMapByPageRequest::clear_map_id() {
  map_id_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 ListLayersOfMapByPageRequest::_internal_map_id() const {
  return map_id_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 ListLayersOfMapByPageRequest::map_id() const {
  // @@protoc_insertion_point(field_get:smart3dmap.v1.ListLayersOfMapByPageRequest.map_id)
  return _internal_map_id();
}
inline void ListLayersOfMapByPageRequest::_internal_set_map_id(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  map_id_ = value;
}
inline void ListLayersOfMapByPageRequest::set_map_id(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_map_id(value);
  // @@protoc_insertion_point(field_set:smart3dmap.v1.ListLayersOfMapByPageRequest.map_id)
}

// bool including_sld = 4;
inline void ListLayersOfMapByPageRequest::clear_including_sld() {
  including_sld_ = false;
}
inline bool ListLayersOfMapByPageRequest::_internal_including_sld() const {
  return including_sld_;
}
inline bool ListLayersOfMapByPageRequest::including_sld() const {
  // @@protoc_insertion_point(field_get:smart3dmap.v1.ListLayersOfMapByPageRequest.including_sld)
  return _internal_including_sld();
}
inline void ListLayersOfMapByPageRequest::_internal_set_including_sld(bool value) {
  
  including_sld_ = value;
}
inline void ListLayersOfMapByPageRequest::set_including_sld(bool value) {
  _internal_set_including_sld(value);
  // @@protoc_insertion_point(field_set:smart3dmap.v1.ListLayersOfMapByPageRequest.including_sld)
}

// -------------------------------------------------------------------

// ListLayersOfMapByPageResponse

// int32 total_count = 1;
inline void ListLayersOfMapByPageResponse::clear_total_count() {
  total_count_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 ListLayersOfMapByPageResponse::_internal_total_count() const {
  return total_count_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 ListLayersOfMapByPageResponse::total_count() const {
  // @@protoc_insertion_point(field_get:smart3dmap.v1.ListLayersOfMapByPageResponse.total_count)
  return _internal_total_count();
}
inline void ListLayersOfMapByPageResponse::_internal_set_total_count(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  total_count_ = value;
}
inline void ListLayersOfMapByPageResponse::set_total_count(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_total_count(value);
  // @@protoc_insertion_point(field_set:smart3dmap.v1.ListLayersOfMapByPageResponse.total_count)
}

// repeated .smart3dmap.v1.Layer layers = 2;
inline int ListLayersOfMapByPageResponse::_internal_layers_size() const {
  return layers_.size();
}
inline int ListLayersOfMapByPageResponse::layers_size() const {
  return _internal_layers_size();
}
inline void ListLayersOfMapByPageResponse::clear_layers() {
  layers_.Clear();
}
inline ::smart3dmap::v1::Layer* ListLayersOfMapByPageResponse::mutable_layers(int index) {
  // @@protoc_insertion_point(field_mutable:smart3dmap.v1.ListLayersOfMapByPageResponse.layers)
  return layers_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::smart3dmap::v1::Layer >*
ListLayersOfMapByPageResponse::mutable_layers() {
  // @@protoc_insertion_point(field_mutable_list:smart3dmap.v1.ListLayersOfMapByPageResponse.layers)
  return &layers_;
}
inline const ::smart3dmap::v1::Layer& ListLayersOfMapByPageResponse::_internal_layers(int index) const {
  return layers_.Get(index);
}
inline const ::smart3dmap::v1::Layer& ListLayersOfMapByPageResponse::layers(int index) const {
  // @@protoc_insertion_point(field_get:smart3dmap.v1.ListLayersOfMapByPageResponse.layers)
  return _internal_layers(index);
}
inline ::smart3dmap::v1::Layer* ListLayersOfMapByPageResponse::_internal_add_layers() {
  return layers_.Add();
}
inline ::smart3dmap::v1::Layer* ListLayersOfMapByPageResponse::add_layers() {
  // @@protoc_insertion_point(field_add:smart3dmap.v1.ListLayersOfMapByPageResponse.layers)
  return _internal_add_layers();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::smart3dmap::v1::Layer >&
ListLayersOfMapByPageResponse::layers() const {
  // @@protoc_insertion_point(field_list:smart3dmap.v1.ListLayersOfMapByPageResponse.layers)
  return layers_;
}

// -------------------------------------------------------------------

// GetRasterLayerDataRequest

// int32 db_id = 1;
inline void GetRasterLayerDataRequest::clear_db_id() {
  db_id_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 GetRasterLayerDataRequest::_internal_db_id() const {
  return db_id_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 GetRasterLayerDataRequest::db_id() const {
  // @@protoc_insertion_point(field_get:smart3dmap.v1.GetRasterLayerDataRequest.db_id)
  return _internal_db_id();
}
inline void GetRasterLayerDataRequest::_internal_set_db_id(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  db_id_ = value;
}
inline void GetRasterLayerDataRequest::set_db_id(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_db_id(value);
  // @@protoc_insertion_point(field_set:smart3dmap.v1.GetRasterLayerDataRequest.db_id)
}

// int32 layer_id = 2;
inline void GetRasterLayerDataRequest::clear_layer_id() {
  layer_id_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 GetRasterLayerDataRequest::_internal_layer_id() const {
  return layer_id_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 GetRasterLayerDataRequest::layer_id() const {
  // @@protoc_insertion_point(field_get:smart3dmap.v1.GetRasterLayerDataRequest.layer_id)
  return _internal_layer_id();
}
inline void GetRasterLayerDataRequest::_internal_set_layer_id(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  layer_id_ = value;
}
inline void GetRasterLayerDataRequest::set_layer_id(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_layer_id(value);
  // @@protoc_insertion_point(field_set:smart3dmap.v1.GetRasterLayerDataRequest.layer_id)
}

// -------------------------------------------------------------------

// RasterLayerData

// int32 db_id = 1;
inline void RasterLayerData::clear_db_id() {
  db_id_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 RasterLayerData::_internal_db_id() const {
  return db_id_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 RasterLayerData::db_id() const {
  // @@protoc_insertion_point(field_get:smart3dmap.v1.RasterLayerData.db_id)
  return _internal_db_id();
}
inline void RasterLayerData::_internal_set_db_id(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  db_id_ = value;
}
inline void RasterLayerData::set_db_id(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_db_id(value);
  // @@protoc_insertion_point(field_set:smart3dmap.v1.RasterLayerData.db_id)
}

// int32 map_id = 2;
inline void RasterLayerData::clear_map_id() {
  map_id_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 RasterLayerData::_internal_map_id() const {
  return map_id_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 RasterLayerData::map_id() const {
  // @@protoc_insertion_point(field_get:smart3dmap.v1.RasterLayerData.map_id)
  return _internal_map_id();
}
inline void RasterLayerData::_internal_set_map_id(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  map_id_ = value;
}
inline void RasterLayerData::set_map_id(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_map_id(value);
  // @@protoc_insertion_point(field_set:smart3dmap.v1.RasterLayerData.map_id)
}

// int32 layer_id = 3;
inline void RasterLayerData::clear_layer_id() {
  layer_id_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 RasterLayerData::_internal_layer_id() const {
  return layer_id_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 RasterLayerData::layer_id() const {
  // @@protoc_insertion_point(field_get:smart3dmap.v1.RasterLayerData.layer_id)
  return _internal_layer_id();
}
inline void RasterLayerData::_internal_set_layer_id(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  layer_id_ = value;
}
inline void RasterLayerData::set_layer_id(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_layer_id(value);
  // @@protoc_insertion_point(field_set:smart3dmap.v1.RasterLayerData.layer_id)
}

// int32 layer_order = 4;
inline void RasterLayerData::clear_layer_order() {
  layer_order_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 RasterLayerData::_internal_layer_order() const {
  return layer_order_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 RasterLayerData::layer_order() const {
  // @@protoc_insertion_point(field_get:smart3dmap.v1.RasterLayerData.layer_order)
  return _internal_layer_order();
}
inline void RasterLayerData::_internal_set_layer_order(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  layer_order_ = value;
}
inline void RasterLayerData::set_layer_order(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_layer_order(value);
  // @@protoc_insertion_point(field_set:smart3dmap.v1.RasterLayerData.layer_order)
}

// .smart3dmap.v1.Layer.Type type = 5;
inline void RasterLayerData::clear_type() {
  type_ = 0;
}
inline ::smart3dmap::v1::Layer_Type RasterLayerData::_internal_type() const {
  return static_cast< ::smart3dmap::v1::Layer_Type >(type_);
}
inline ::smart3dmap::v1::Layer_Type RasterLayerData::type() const {
  // @@protoc_insertion_point(field_get:smart3dmap.v1.RasterLayerData.type)
  return _internal_type();
}
inline void RasterLayerData::_internal_set_type(::smart3dmap::v1::Layer_Type value) {
  
  type_ = value;
}
inline void RasterLayerData::set_type(::smart3dmap::v1::Layer_Type value) {
  _internal_set_type(value);
  // @@protoc_insertion_point(field_set:smart3dmap.v1.RasterLayerData.type)
}

// string file_name = 6;
inline void RasterLayerData::clear_file_name() {
  file_name_.ClearToEmpty();
}
inline const std::string& RasterLayerData::file_name() const {
  // @@protoc_insertion_point(field_get:smart3dmap.v1.RasterLayerData.file_name)
  return _internal_file_name();
}
inline void RasterLayerData::set_file_name(const std::string& value) {
  _internal_set_file_name(value);
  // @@protoc_insertion_point(field_set:smart3dmap.v1.RasterLayerData.file_name)
}
inline std::string* RasterLayerData::mutable_file_name() {
  // @@protoc_insertion_point(field_mutable:smart3dmap.v1.RasterLayerData.file_name)
  return _internal_mutable_file_name();
}
inline const std::string& RasterLayerData::_internal_file_name() const {
  return file_name_.Get();
}
inline void RasterLayerData::_internal_set_file_name(const std::string& value) {
  
  file_name_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArena());
}
inline void RasterLayerData::set_file_name(std::string&& value) {
  
  file_name_.Set(
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:smart3dmap.v1.RasterLayerData.file_name)
}
inline void RasterLayerData::set_file_name(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  file_name_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(value), GetArena());
  // @@protoc_insertion_point(field_set_char:smart3dmap.v1.RasterLayerData.file_name)
}
inline void RasterLayerData::set_file_name(const char* value,
    size_t size) {
  
  file_name_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:smart3dmap.v1.RasterLayerData.file_name)
}
inline std::string* RasterLayerData::_internal_mutable_file_name() {
  
  return file_name_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArena());
}
inline std::string* RasterLayerData::release_file_name() {
  // @@protoc_insertion_point(field_release:smart3dmap.v1.RasterLayerData.file_name)
  return file_name_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void RasterLayerData::set_allocated_file_name(std::string* file_name) {
  if (file_name != nullptr) {
    
  } else {
    
  }
  file_name_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), file_name,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:smart3dmap.v1.RasterLayerData.file_name)
}

// bytes file_content = 7;
inline void RasterLayerData::clear_file_content() {
  file_content_.ClearToEmpty();
}
inline const std::string& RasterLayerData::file_content() const {
  // @@protoc_insertion_point(field_get:smart3dmap.v1.RasterLayerData.file_content)
  return _internal_file_content();
}
inline void RasterLayerData::set_file_content(const std::string& value) {
  _internal_set_file_content(value);
  // @@protoc_insertion_point(field_set:smart3dmap.v1.RasterLayerData.file_content)
}
inline std::string* RasterLayerData::mutable_file_content() {
  // @@protoc_insertion_point(field_mutable:smart3dmap.v1.RasterLayerData.file_content)
  return _internal_mutable_file_content();
}
inline const std::string& RasterLayerData::_internal_file_content() const {
  return file_content_.Get();
}
inline void RasterLayerData::_internal_set_file_content(const std::string& value) {
  
  file_content_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArena());
}
inline void RasterLayerData::set_file_content(std::string&& value) {
  
  file_content_.Set(
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:smart3dmap.v1.RasterLayerData.file_content)
}
inline void RasterLayerData::set_file_content(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  file_content_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(value), GetArena());
  // @@protoc_insertion_point(field_set_char:smart3dmap.v1.RasterLayerData.file_content)
}
inline void RasterLayerData::set_file_content(const void* value,
    size_t size) {
  
  file_content_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:smart3dmap.v1.RasterLayerData.file_content)
}
inline std::string* RasterLayerData::_internal_mutable_file_content() {
  
  return file_content_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArena());
}
inline std::string* RasterLayerData::release_file_content() {
  // @@protoc_insertion_point(field_release:smart3dmap.v1.RasterLayerData.file_content)
  return file_content_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void RasterLayerData::set_allocated_file_content(std::string* file_content) {
  if (file_content != nullptr) {
    
  } else {
    
  }
  file_content_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), file_content,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:smart3dmap.v1.RasterLayerData.file_content)
}

// double step_x = 8;
inline void RasterLayerData::clear_step_x() {
  step_x_ = 0;
}
inline double RasterLayerData::_internal_step_x() const {
  return step_x_;
}
inline double RasterLayerData::step_x() const {
  // @@protoc_insertion_point(field_get:smart3dmap.v1.RasterLayerData.step_x)
  return _internal_step_x();
}
inline void RasterLayerData::_internal_set_step_x(double value) {
  
  step_x_ = value;
}
inline void RasterLayerData::set_step_x(double value) {
  _internal_set_step_x(value);
  // @@protoc_insertion_point(field_set:smart3dmap.v1.RasterLayerData.step_x)
}

// double step_y = 9;
inline void RasterLayerData::clear_step_y() {
  step_y_ = 0;
}
inline double RasterLayerData::_internal_step_y() const {
  return step_y_;
}
inline double RasterLayerData::step_y() const {
  // @@protoc_insertion_point(field_get:smart3dmap.v1.RasterLayerData.step_y)
  return _internal_step_y();
}
inline void RasterLayerData::_internal_set_step_y(double value) {
  
  step_y_ = value;
}
inline void RasterLayerData::set_step_y(double value) {
  _internal_set_step_y(value);
  // @@protoc_insertion_point(field_set:smart3dmap.v1.RasterLayerData.step_y)
}

// double rotation_coef_x = 10;
inline void RasterLayerData::clear_rotation_coef_x() {
  rotation_coef_x_ = 0;
}
inline double RasterLayerData::_internal_rotation_coef_x() const {
  return rotation_coef_x_;
}
inline double RasterLayerData::rotation_coef_x() const {
  // @@protoc_insertion_point(field_get:smart3dmap.v1.RasterLayerData.rotation_coef_x)
  return _internal_rotation_coef_x();
}
inline void RasterLayerData::_internal_set_rotation_coef_x(double value) {
  
  rotation_coef_x_ = value;
}
inline void RasterLayerData::set_rotation_coef_x(double value) {
  _internal_set_rotation_coef_x(value);
  // @@protoc_insertion_point(field_set:smart3dmap.v1.RasterLayerData.rotation_coef_x)
}

// double rotation_coef_y = 11;
inline void RasterLayerData::clear_rotation_coef_y() {
  rotation_coef_y_ = 0;
}
inline double RasterLayerData::_internal_rotation_coef_y() const {
  return rotation_coef_y_;
}
inline double RasterLayerData::rotation_coef_y() const {
  // @@protoc_insertion_point(field_get:smart3dmap.v1.RasterLayerData.rotation_coef_y)
  return _internal_rotation_coef_y();
}
inline void RasterLayerData::_internal_set_rotation_coef_y(double value) {
  
  rotation_coef_y_ = value;
}
inline void RasterLayerData::set_rotation_coef_y(double value) {
  _internal_set_rotation_coef_y(value);
  // @@protoc_insertion_point(field_set:smart3dmap.v1.RasterLayerData.rotation_coef_y)
}

// double top_left_x = 12;
inline void RasterLayerData::clear_top_left_x() {
  top_left_x_ = 0;
}
inline double RasterLayerData::_internal_top_left_x() const {
  return top_left_x_;
}
inline double RasterLayerData::top_left_x() const {
  // @@protoc_insertion_point(field_get:smart3dmap.v1.RasterLayerData.top_left_x)
  return _internal_top_left_x();
}
inline void RasterLayerData::_internal_set_top_left_x(double value) {
  
  top_left_x_ = value;
}
inline void RasterLayerData::set_top_left_x(double value) {
  _internal_set_top_left_x(value);
  // @@protoc_insertion_point(field_set:smart3dmap.v1.RasterLayerData.top_left_x)
}

// double top_left_y = 13;
inline void RasterLayerData::clear_top_left_y() {
  top_left_y_ = 0;
}
inline double RasterLayerData::_internal_top_left_y() const {
  return top_left_y_;
}
inline double RasterLayerData::top_left_y() const {
  // @@protoc_insertion_point(field_get:smart3dmap.v1.RasterLayerData.top_left_y)
  return _internal_top_left_y();
}
inline void RasterLayerData::_internal_set_top_left_y(double value) {
  
  top_left_y_ = value;
}
inline void RasterLayerData::set_top_left_y(double value) {
  _internal_set_top_left_y(value);
  // @@protoc_insertion_point(field_set:smart3dmap.v1.RasterLayerData.top_left_y)
}

// -------------------------------------------------------------------

// DeleteMapRequest

// int32 db_id = 1;
inline void DeleteMapRequest::clear_db_id() {
  db_id_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 DeleteMapRequest::_internal_db_id() const {
  return db_id_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 DeleteMapRequest::db_id() const {
  // @@protoc_insertion_point(field_get:smart3dmap.v1.DeleteMapRequest.db_id)
  return _internal_db_id();
}
inline void DeleteMapRequest::_internal_set_db_id(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  db_id_ = value;
}
inline void DeleteMapRequest::set_db_id(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_db_id(value);
  // @@protoc_insertion_point(field_set:smart3dmap.v1.DeleteMapRequest.db_id)
}

// int32 map_id = 2;
inline void DeleteMapRequest::clear_map_id() {
  map_id_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 DeleteMapRequest::_internal_map_id() const {
  return map_id_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 DeleteMapRequest::map_id() const {
  // @@protoc_insertion_point(field_get:smart3dmap.v1.DeleteMapRequest.map_id)
  return _internal_map_id();
}
inline void DeleteMapRequest::_internal_set_map_id(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  map_id_ = value;
}
inline void DeleteMapRequest::set_map_id(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_map_id(value);
  // @@protoc_insertion_point(field_set:smart3dmap.v1.DeleteMapRequest.map_id)
}

// -------------------------------------------------------------------

// DeleteMapResponse

// bool status = 1;
inline void DeleteMapResponse::clear_status() {
  status_ = false;
}
inline bool DeleteMapResponse::_internal_status() const {
  return status_;
}
inline bool DeleteMapResponse::status() const {
  // @@protoc_insertion_point(field_get:smart3dmap.v1.DeleteMapResponse.status)
  return _internal_status();
}
inline void DeleteMapResponse::_internal_set_status(bool value) {
  
  status_ = value;
}
inline void DeleteMapResponse::set_status(bool value) {
  _internal_set_status(value);
  // @@protoc_insertion_point(field_set:smart3dmap.v1.DeleteMapResponse.status)
}

// string error = 2;
inline void DeleteMapResponse::clear_error() {
  error_.ClearToEmpty();
}
inline const std::string& DeleteMapResponse::error() const {
  // @@protoc_insertion_point(field_get:smart3dmap.v1.DeleteMapResponse.error)
  return _internal_error();
}
inline void DeleteMapResponse::set_error(const std::string& value) {
  _internal_set_error(value);
  // @@protoc_insertion_point(field_set:smart3dmap.v1.DeleteMapResponse.error)
}
inline std::string* DeleteMapResponse::mutable_error() {
  // @@protoc_insertion_point(field_mutable:smart3dmap.v1.DeleteMapResponse.error)
  return _internal_mutable_error();
}
inline const std::string& DeleteMapResponse::_internal_error() const {
  return error_.Get();
}
inline void DeleteMapResponse::_internal_set_error(const std::string& value) {
  
  error_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArena());
}
inline void DeleteMapResponse::set_error(std::string&& value) {
  
  error_.Set(
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:smart3dmap.v1.DeleteMapResponse.error)
}
inline void DeleteMapResponse::set_error(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  error_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(value), GetArena());
  // @@protoc_insertion_point(field_set_char:smart3dmap.v1.DeleteMapResponse.error)
}
inline void DeleteMapResponse::set_error(const char* value,
    size_t size) {
  
  error_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:smart3dmap.v1.DeleteMapResponse.error)
}
inline std::string* DeleteMapResponse::_internal_mutable_error() {
  
  return error_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArena());
}
inline std::string* DeleteMapResponse::release_error() {
  // @@protoc_insertion_point(field_release:smart3dmap.v1.DeleteMapResponse.error)
  return error_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void DeleteMapResponse::set_allocated_error(std::string* error) {
  if (error != nullptr) {
    
  } else {
    
  }
  error_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), error,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:smart3dmap.v1.DeleteMapResponse.error)
}

// -------------------------------------------------------------------

// ListDrillsByPageRequest

// .smart3dmap.v1.Pagination pagination = 1;
inline bool ListDrillsByPageRequest::_internal_has_pagination() const {
  return this != internal_default_instance() && pagination_ != nullptr;
}
inline bool ListDrillsByPageRequest::has_pagination() const {
  return _internal_has_pagination();
}
inline const ::smart3dmap::v1::Pagination& ListDrillsByPageRequest::_internal_pagination() const {
  const ::smart3dmap::v1::Pagination* p = pagination_;
  return p != nullptr ? *p : reinterpret_cast<const ::smart3dmap::v1::Pagination&>(
      ::smart3dmap::v1::_Pagination_default_instance_);
}
inline const ::smart3dmap::v1::Pagination& ListDrillsByPageRequest::pagination() const {
  // @@protoc_insertion_point(field_get:smart3dmap.v1.ListDrillsByPageRequest.pagination)
  return _internal_pagination();
}
inline void ListDrillsByPageRequest::unsafe_arena_set_allocated_pagination(
    ::smart3dmap::v1::Pagination* pagination) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(pagination_);
  }
  pagination_ = pagination;
  if (pagination) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:smart3dmap.v1.ListDrillsByPageRequest.pagination)
}
inline ::smart3dmap::v1::Pagination* ListDrillsByPageRequest::release_pagination() {
  
  ::smart3dmap::v1::Pagination* temp = pagination_;
  pagination_ = nullptr;
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::smart3dmap::v1::Pagination* ListDrillsByPageRequest::unsafe_arena_release_pagination() {
  // @@protoc_insertion_point(field_release:smart3dmap.v1.ListDrillsByPageRequest.pagination)
  
  ::smart3dmap::v1::Pagination* temp = pagination_;
  pagination_ = nullptr;
  return temp;
}
inline ::smart3dmap::v1::Pagination* ListDrillsByPageRequest::_internal_mutable_pagination() {
  
  if (pagination_ == nullptr) {
    auto* p = CreateMaybeMessage<::smart3dmap::v1::Pagination>(GetArena());
    pagination_ = p;
  }
  return pagination_;
}
inline ::smart3dmap::v1::Pagination* ListDrillsByPageRequest::mutable_pagination() {
  // @@protoc_insertion_point(field_mutable:smart3dmap.v1.ListDrillsByPageRequest.pagination)
  return _internal_mutable_pagination();
}
inline void ListDrillsByPageRequest::set_allocated_pagination(::smart3dmap::v1::Pagination* pagination) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(pagination_);
  }
  if (pagination) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(pagination)->GetArena();
    if (message_arena != submessage_arena) {
      pagination = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, pagination, submessage_arena);
    }
    
  } else {
    
  }
  pagination_ = pagination;
  // @@protoc_insertion_point(field_set_allocated:smart3dmap.v1.ListDrillsByPageRequest.pagination)
}

// int32 db_id = 2;
inline void ListDrillsByPageRequest::clear_db_id() {
  db_id_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 ListDrillsByPageRequest::_internal_db_id() const {
  return db_id_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 ListDrillsByPageRequest::db_id() const {
  // @@protoc_insertion_point(field_get:smart3dmap.v1.ListDrillsByPageRequest.db_id)
  return _internal_db_id();
}
inline void ListDrillsByPageRequest::_internal_set_db_id(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  db_id_ = value;
}
inline void ListDrillsByPageRequest::set_db_id(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_db_id(value);
  // @@protoc_insertion_point(field_set:smart3dmap.v1.ListDrillsByPageRequest.db_id)
}

// int32 geo_survey_project_id = 3;
inline void ListDrillsByPageRequest::clear_geo_survey_project_id() {
  geo_survey_project_id_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 ListDrillsByPageRequest::_internal_geo_survey_project_id() const {
  return geo_survey_project_id_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 ListDrillsByPageRequest::geo_survey_project_id() const {
  // @@protoc_insertion_point(field_get:smart3dmap.v1.ListDrillsByPageRequest.geo_survey_project_id)
  return _internal_geo_survey_project_id();
}
inline void ListDrillsByPageRequest::_internal_set_geo_survey_project_id(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  geo_survey_project_id_ = value;
}
inline void ListDrillsByPageRequest::set_geo_survey_project_id(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_geo_survey_project_id(value);
  // @@protoc_insertion_point(field_set:smart3dmap.v1.ListDrillsByPageRequest.geo_survey_project_id)
}

// -------------------------------------------------------------------

// ListDrillsByPageResponse

// int32 total_count = 1;
inline void ListDrillsByPageResponse::clear_total_count() {
  total_count_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 ListDrillsByPageResponse::_internal_total_count() const {
  return total_count_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 ListDrillsByPageResponse::total_count() const {
  // @@protoc_insertion_point(field_get:smart3dmap.v1.ListDrillsByPageResponse.total_count)
  return _internal_total_count();
}
inline void ListDrillsByPageResponse::_internal_set_total_count(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  total_count_ = value;
}
inline void ListDrillsByPageResponse::set_total_count(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_total_count(value);
  // @@protoc_insertion_point(field_set:smart3dmap.v1.ListDrillsByPageResponse.total_count)
}

// repeated .smart3dmap.v1.Drill drills = 2;
inline int ListDrillsByPageResponse::_internal_drills_size() const {
  return drills_.size();
}
inline int ListDrillsByPageResponse::drills_size() const {
  return _internal_drills_size();
}
inline void ListDrillsByPageResponse::clear_drills() {
  drills_.Clear();
}
inline ::smart3dmap::v1::Drill* ListDrillsByPageResponse::mutable_drills(int index) {
  // @@protoc_insertion_point(field_mutable:smart3dmap.v1.ListDrillsByPageResponse.drills)
  return drills_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::smart3dmap::v1::Drill >*
ListDrillsByPageResponse::mutable_drills() {
  // @@protoc_insertion_point(field_mutable_list:smart3dmap.v1.ListDrillsByPageResponse.drills)
  return &drills_;
}
inline const ::smart3dmap::v1::Drill& ListDrillsByPageResponse::_internal_drills(int index) const {
  return drills_.Get(index);
}
inline const ::smart3dmap::v1::Drill& ListDrillsByPageResponse::drills(int index) const {
  // @@protoc_insertion_point(field_get:smart3dmap.v1.ListDrillsByPageResponse.drills)
  return _internal_drills(index);
}
inline ::smart3dmap::v1::Drill* ListDrillsByPageResponse::_internal_add_drills() {
  return drills_.Add();
}
inline ::smart3dmap::v1::Drill* ListDrillsByPageResponse::add_drills() {
  // @@protoc_insertion_point(field_add:smart3dmap.v1.ListDrillsByPageResponse.drills)
  return _internal_add_drills();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::smart3dmap::v1::Drill >&
ListDrillsByPageResponse::drills() const {
  // @@protoc_insertion_point(field_list:smart3dmap.v1.ListDrillsByPageResponse.drills)
  return drills_;
}

// -------------------------------------------------------------------

// ListDrillsByStreamRequest

// int32 db_id = 1;
inline void ListDrillsByStreamRequest::clear_db_id() {
  db_id_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 ListDrillsByStreamRequest::_internal_db_id() const {
  return db_id_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 ListDrillsByStreamRequest::db_id() const {
  // @@protoc_insertion_point(field_get:smart3dmap.v1.ListDrillsByStreamRequest.db_id)
  return _internal_db_id();
}
inline void ListDrillsByStreamRequest::_internal_set_db_id(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  db_id_ = value;
}
inline void ListDrillsByStreamRequest::set_db_id(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_db_id(value);
  // @@protoc_insertion_point(field_set:smart3dmap.v1.ListDrillsByStreamRequest.db_id)
}

// int32 geo_survey_project_id = 2;
inline void ListDrillsByStreamRequest::clear_geo_survey_project_id() {
  geo_survey_project_id_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 ListDrillsByStreamRequest::_internal_geo_survey_project_id() const {
  return geo_survey_project_id_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 ListDrillsByStreamRequest::geo_survey_project_id() const {
  // @@protoc_insertion_point(field_get:smart3dmap.v1.ListDrillsByStreamRequest.geo_survey_project_id)
  return _internal_geo_survey_project_id();
}
inline void ListDrillsByStreamRequest::_internal_set_geo_survey_project_id(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  geo_survey_project_id_ = value;
}
inline void ListDrillsByStreamRequest::set_geo_survey_project_id(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_geo_survey_project_id(value);
  // @@protoc_insertion_point(field_set:smart3dmap.v1.ListDrillsByStreamRequest.geo_survey_project_id)
}

// -------------------------------------------------------------------

// DrillLog

// int32 id = 1;
inline void DrillLog::clear_id() {
  id_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 DrillLog::_internal_id() const {
  return id_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 DrillLog::id() const {
  // @@protoc_insertion_point(field_get:smart3dmap.v1.DrillLog.id)
  return _internal_id();
}
inline void DrillLog::_internal_set_id(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  id_ = value;
}
inline void DrillLog::set_id(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_id(value);
  // @@protoc_insertion_point(field_set:smart3dmap.v1.DrillLog.id)
}

// string name = 2;
inline void DrillLog::clear_name() {
  name_.ClearToEmpty();
}
inline const std::string& DrillLog::name() const {
  // @@protoc_insertion_point(field_get:smart3dmap.v1.DrillLog.name)
  return _internal_name();
}
inline void DrillLog::set_name(const std::string& value) {
  _internal_set_name(value);
  // @@protoc_insertion_point(field_set:smart3dmap.v1.DrillLog.name)
}
inline std::string* DrillLog::mutable_name() {
  // @@protoc_insertion_point(field_mutable:smart3dmap.v1.DrillLog.name)
  return _internal_mutable_name();
}
inline const std::string& DrillLog::_internal_name() const {
  return name_.Get();
}
inline void DrillLog::_internal_set_name(const std::string& value) {
  
  name_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArena());
}
inline void DrillLog::set_name(std::string&& value) {
  
  name_.Set(
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:smart3dmap.v1.DrillLog.name)
}
inline void DrillLog::set_name(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  name_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(value), GetArena());
  // @@protoc_insertion_point(field_set_char:smart3dmap.v1.DrillLog.name)
}
inline void DrillLog::set_name(const char* value,
    size_t size) {
  
  name_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:smart3dmap.v1.DrillLog.name)
}
inline std::string* DrillLog::_internal_mutable_name() {
  
  return name_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArena());
}
inline std::string* DrillLog::release_name() {
  // @@protoc_insertion_point(field_release:smart3dmap.v1.DrillLog.name)
  return name_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void DrillLog::set_allocated_name(std::string* name) {
  if (name != nullptr) {
    
  } else {
    
  }
  name_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), name,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:smart3dmap.v1.DrillLog.name)
}

// int32 drill_id = 3;
inline void DrillLog::clear_drill_id() {
  drill_id_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 DrillLog::_internal_drill_id() const {
  return drill_id_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 DrillLog::drill_id() const {
  // @@protoc_insertion_point(field_get:smart3dmap.v1.DrillLog.drill_id)
  return _internal_drill_id();
}
inline void DrillLog::_internal_set_drill_id(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  drill_id_ = value;
}
inline void DrillLog::set_drill_id(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_drill_id(value);
  // @@protoc_insertion_point(field_set:smart3dmap.v1.DrillLog.drill_id)
}

// int32 db_id = 4;
inline void DrillLog::clear_db_id() {
  db_id_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 DrillLog::_internal_db_id() const {
  return db_id_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 DrillLog::db_id() const {
  // @@protoc_insertion_point(field_get:smart3dmap.v1.DrillLog.db_id)
  return _internal_db_id();
}
inline void DrillLog::_internal_set_db_id(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  db_id_ = value;
}
inline void DrillLog::set_db_id(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_db_id(value);
  // @@protoc_insertion_point(field_set:smart3dmap.v1.DrillLog.db_id)
}

// .google.protobuf.Timestamp created_at = 5;
inline bool DrillLog::_internal_has_created_at() const {
  return this != internal_default_instance() && created_at_ != nullptr;
}
inline bool DrillLog::has_created_at() const {
  return _internal_has_created_at();
}
inline const PROTOBUF_NAMESPACE_ID::Timestamp& DrillLog::_internal_created_at() const {
  const PROTOBUF_NAMESPACE_ID::Timestamp* p = created_at_;
  return p != nullptr ? *p : reinterpret_cast<const PROTOBUF_NAMESPACE_ID::Timestamp&>(
      PROTOBUF_NAMESPACE_ID::_Timestamp_default_instance_);
}
inline const PROTOBUF_NAMESPACE_ID::Timestamp& DrillLog::created_at() const {
  // @@protoc_insertion_point(field_get:smart3dmap.v1.DrillLog.created_at)
  return _internal_created_at();
}
inline void DrillLog::unsafe_arena_set_allocated_created_at(
    PROTOBUF_NAMESPACE_ID::Timestamp* created_at) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(created_at_);
  }
  created_at_ = created_at;
  if (created_at) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:smart3dmap.v1.DrillLog.created_at)
}
inline PROTOBUF_NAMESPACE_ID::Timestamp* DrillLog::release_created_at() {
  
  PROTOBUF_NAMESPACE_ID::Timestamp* temp = created_at_;
  created_at_ = nullptr;
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline PROTOBUF_NAMESPACE_ID::Timestamp* DrillLog::unsafe_arena_release_created_at() {
  // @@protoc_insertion_point(field_release:smart3dmap.v1.DrillLog.created_at)
  
  PROTOBUF_NAMESPACE_ID::Timestamp* temp = created_at_;
  created_at_ = nullptr;
  return temp;
}
inline PROTOBUF_NAMESPACE_ID::Timestamp* DrillLog::_internal_mutable_created_at() {
  
  if (created_at_ == nullptr) {
    auto* p = CreateMaybeMessage<PROTOBUF_NAMESPACE_ID::Timestamp>(GetArena());
    created_at_ = p;
  }
  return created_at_;
}
inline PROTOBUF_NAMESPACE_ID::Timestamp* DrillLog::mutable_created_at() {
  // @@protoc_insertion_point(field_mutable:smart3dmap.v1.DrillLog.created_at)
  return _internal_mutable_created_at();
}
inline void DrillLog::set_allocated_created_at(PROTOBUF_NAMESPACE_ID::Timestamp* created_at) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(created_at_);
  }
  if (created_at) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(created_at)->GetArena();
    if (message_arena != submessage_arena) {
      created_at = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, created_at, submessage_arena);
    }
    
  } else {
    
  }
  created_at_ = created_at;
  // @@protoc_insertion_point(field_set_allocated:smart3dmap.v1.DrillLog.created_at)
}

// int32 drill_db_id = 6;
inline void DrillLog::clear_drill_db_id() {
  drill_db_id_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 DrillLog::_internal_drill_db_id() const {
  return drill_db_id_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 DrillLog::drill_db_id() const {
  // @@protoc_insertion_point(field_get:smart3dmap.v1.DrillLog.drill_db_id)
  return _internal_drill_db_id();
}
inline void DrillLog::_internal_set_drill_db_id(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  drill_db_id_ = value;
}
inline void DrillLog::set_drill_db_id(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_drill_db_id(value);
  // @@protoc_insertion_point(field_set:smart3dmap.v1.DrillLog.drill_db_id)
}

// int32 strat_version_id = 7;
inline void DrillLog::clear_strat_version_id() {
  strat_version_id_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 DrillLog::_internal_strat_version_id() const {
  return strat_version_id_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 DrillLog::strat_version_id() const {
  // @@protoc_insertion_point(field_get:smart3dmap.v1.DrillLog.strat_version_id)
  return _internal_strat_version_id();
}
inline void DrillLog::_internal_set_strat_version_id(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  strat_version_id_ = value;
}
inline void DrillLog::set_strat_version_id(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_strat_version_id(value);
  // @@protoc_insertion_point(field_set:smart3dmap.v1.DrillLog.strat_version_id)
}

// -------------------------------------------------------------------

// ListDrillLogsRequest

// .smart3dmap.v1.Pagination pagination = 1;
inline bool ListDrillLogsRequest::_internal_has_pagination() const {
  return this != internal_default_instance() && pagination_ != nullptr;
}
inline bool ListDrillLogsRequest::has_pagination() const {
  return _internal_has_pagination();
}
inline const ::smart3dmap::v1::Pagination& ListDrillLogsRequest::_internal_pagination() const {
  const ::smart3dmap::v1::Pagination* p = pagination_;
  return p != nullptr ? *p : reinterpret_cast<const ::smart3dmap::v1::Pagination&>(
      ::smart3dmap::v1::_Pagination_default_instance_);
}
inline const ::smart3dmap::v1::Pagination& ListDrillLogsRequest::pagination() const {
  // @@protoc_insertion_point(field_get:smart3dmap.v1.ListDrillLogsRequest.pagination)
  return _internal_pagination();
}
inline void ListDrillLogsRequest::unsafe_arena_set_allocated_pagination(
    ::smart3dmap::v1::Pagination* pagination) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(pagination_);
  }
  pagination_ = pagination;
  if (pagination) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:smart3dmap.v1.ListDrillLogsRequest.pagination)
}
inline ::smart3dmap::v1::Pagination* ListDrillLogsRequest::release_pagination() {
  
  ::smart3dmap::v1::Pagination* temp = pagination_;
  pagination_ = nullptr;
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::smart3dmap::v1::Pagination* ListDrillLogsRequest::unsafe_arena_release_pagination() {
  // @@protoc_insertion_point(field_release:smart3dmap.v1.ListDrillLogsRequest.pagination)
  
  ::smart3dmap::v1::Pagination* temp = pagination_;
  pagination_ = nullptr;
  return temp;
}
inline ::smart3dmap::v1::Pagination* ListDrillLogsRequest::_internal_mutable_pagination() {
  
  if (pagination_ == nullptr) {
    auto* p = CreateMaybeMessage<::smart3dmap::v1::Pagination>(GetArena());
    pagination_ = p;
  }
  return pagination_;
}
inline ::smart3dmap::v1::Pagination* ListDrillLogsRequest::mutable_pagination() {
  // @@protoc_insertion_point(field_mutable:smart3dmap.v1.ListDrillLogsRequest.pagination)
  return _internal_mutable_pagination();
}
inline void ListDrillLogsRequest::set_allocated_pagination(::smart3dmap::v1::Pagination* pagination) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(pagination_);
  }
  if (pagination) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(pagination)->GetArena();
    if (message_arena != submessage_arena) {
      pagination = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, pagination, submessage_arena);
    }
    
  } else {
    
  }
  pagination_ = pagination;
  // @@protoc_insertion_point(field_set_allocated:smart3dmap.v1.ListDrillLogsRequest.pagination)
}

// int32 db_id = 2;
inline void ListDrillLogsRequest::clear_db_id() {
  db_id_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 ListDrillLogsRequest::_internal_db_id() const {
  return db_id_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 ListDrillLogsRequest::db_id() const {
  // @@protoc_insertion_point(field_get:smart3dmap.v1.ListDrillLogsRequest.db_id)
  return _internal_db_id();
}
inline void ListDrillLogsRequest::_internal_set_db_id(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  db_id_ = value;
}
inline void ListDrillLogsRequest::set_db_id(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_db_id(value);
  // @@protoc_insertion_point(field_set:smart3dmap.v1.ListDrillLogsRequest.db_id)
}

// int32 drill_db_id = 3;
inline void ListDrillLogsRequest::clear_drill_db_id() {
  drill_db_id_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 ListDrillLogsRequest::_internal_drill_db_id() const {
  return drill_db_id_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 ListDrillLogsRequest::drill_db_id() const {
  // @@protoc_insertion_point(field_get:smart3dmap.v1.ListDrillLogsRequest.drill_db_id)
  return _internal_drill_db_id();
}
inline void ListDrillLogsRequest::_internal_set_drill_db_id(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  drill_db_id_ = value;
}
inline void ListDrillLogsRequest::set_drill_db_id(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_drill_db_id(value);
  // @@protoc_insertion_point(field_set:smart3dmap.v1.ListDrillLogsRequest.drill_db_id)
}

// int32 drill_id = 4;
inline void ListDrillLogsRequest::clear_drill_id() {
  drill_id_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 ListDrillLogsRequest::_internal_drill_id() const {
  return drill_id_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 ListDrillLogsRequest::drill_id() const {
  // @@protoc_insertion_point(field_get:smart3dmap.v1.ListDrillLogsRequest.drill_id)
  return _internal_drill_id();
}
inline void ListDrillLogsRequest::_internal_set_drill_id(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  drill_id_ = value;
}
inline void ListDrillLogsRequest::set_drill_id(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_drill_id(value);
  // @@protoc_insertion_point(field_set:smart3dmap.v1.ListDrillLogsRequest.drill_id)
}

// int32 strat_version_id = 5;
inline void ListDrillLogsRequest::clear_strat_version_id() {
  strat_version_id_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 ListDrillLogsRequest::_internal_strat_version_id() const {
  return strat_version_id_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 ListDrillLogsRequest::strat_version_id() const {
  // @@protoc_insertion_point(field_get:smart3dmap.v1.ListDrillLogsRequest.strat_version_id)
  return _internal_strat_version_id();
}
inline void ListDrillLogsRequest::_internal_set_strat_version_id(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  strat_version_id_ = value;
}
inline void ListDrillLogsRequest::set_strat_version_id(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_strat_version_id(value);
  // @@protoc_insertion_point(field_set:smart3dmap.v1.ListDrillLogsRequest.strat_version_id)
}

// -------------------------------------------------------------------

// ListDrillLogsResponse

// int32 total_count = 1;
inline void ListDrillLogsResponse::clear_total_count() {
  total_count_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 ListDrillLogsResponse::_internal_total_count() const {
  return total_count_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 ListDrillLogsResponse::total_count() const {
  // @@protoc_insertion_point(field_get:smart3dmap.v1.ListDrillLogsResponse.total_count)
  return _internal_total_count();
}
inline void ListDrillLogsResponse::_internal_set_total_count(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  total_count_ = value;
}
inline void ListDrillLogsResponse::set_total_count(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_total_count(value);
  // @@protoc_insertion_point(field_set:smart3dmap.v1.ListDrillLogsResponse.total_count)
}

// repeated .smart3dmap.v1.DrillLog logs = 2;
inline int ListDrillLogsResponse::_internal_logs_size() const {
  return logs_.size();
}
inline int ListDrillLogsResponse::logs_size() const {
  return _internal_logs_size();
}
inline void ListDrillLogsResponse::clear_logs() {
  logs_.Clear();
}
inline ::smart3dmap::v1::DrillLog* ListDrillLogsResponse::mutable_logs(int index) {
  // @@protoc_insertion_point(field_mutable:smart3dmap.v1.ListDrillLogsResponse.logs)
  return logs_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::smart3dmap::v1::DrillLog >*
ListDrillLogsResponse::mutable_logs() {
  // @@protoc_insertion_point(field_mutable_list:smart3dmap.v1.ListDrillLogsResponse.logs)
  return &logs_;
}
inline const ::smart3dmap::v1::DrillLog& ListDrillLogsResponse::_internal_logs(int index) const {
  return logs_.Get(index);
}
inline const ::smart3dmap::v1::DrillLog& ListDrillLogsResponse::logs(int index) const {
  // @@protoc_insertion_point(field_get:smart3dmap.v1.ListDrillLogsResponse.logs)
  return _internal_logs(index);
}
inline ::smart3dmap::v1::DrillLog* ListDrillLogsResponse::_internal_add_logs() {
  return logs_.Add();
}
inline ::smart3dmap::v1::DrillLog* ListDrillLogsResponse::add_logs() {
  // @@protoc_insertion_point(field_add:smart3dmap.v1.ListDrillLogsResponse.logs)
  return _internal_add_logs();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::smart3dmap::v1::DrillLog >&
ListDrillLogsResponse::logs() const {
  // @@protoc_insertion_point(field_list:smart3dmap.v1.ListDrillLogsResponse.logs)
  return logs_;
}

// -------------------------------------------------------------------

// SectionMap

// int32 id = 1;
inline void SectionMap::clear_id() {
  id_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 SectionMap::_internal_id() const {
  return id_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 SectionMap::id() const {
  // @@protoc_insertion_point(field_get:smart3dmap.v1.SectionMap.id)
  return _internal_id();
}
inline void SectionMap::_internal_set_id(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  id_ = value;
}
inline void SectionMap::set_id(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_id(value);
  // @@protoc_insertion_point(field_set:smart3dmap.v1.SectionMap.id)
}

// string name = 2;
inline void SectionMap::clear_name() {
  name_.ClearToEmpty();
}
inline const std::string& SectionMap::name() const {
  // @@protoc_insertion_point(field_get:smart3dmap.v1.SectionMap.name)
  return _internal_name();
}
inline void SectionMap::set_name(const std::string& value) {
  _internal_set_name(value);
  // @@protoc_insertion_point(field_set:smart3dmap.v1.SectionMap.name)
}
inline std::string* SectionMap::mutable_name() {
  // @@protoc_insertion_point(field_mutable:smart3dmap.v1.SectionMap.name)
  return _internal_mutable_name();
}
inline const std::string& SectionMap::_internal_name() const {
  return name_.Get();
}
inline void SectionMap::_internal_set_name(const std::string& value) {
  
  name_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArena());
}
inline void SectionMap::set_name(std::string&& value) {
  
  name_.Set(
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:smart3dmap.v1.SectionMap.name)
}
inline void SectionMap::set_name(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  name_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(value), GetArena());
  // @@protoc_insertion_point(field_set_char:smart3dmap.v1.SectionMap.name)
}
inline void SectionMap::set_name(const char* value,
    size_t size) {
  
  name_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:smart3dmap.v1.SectionMap.name)
}
inline std::string* SectionMap::_internal_mutable_name() {
  
  return name_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArena());
}
inline std::string* SectionMap::release_name() {
  // @@protoc_insertion_point(field_release:smart3dmap.v1.SectionMap.name)
  return name_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void SectionMap::set_allocated_name(std::string* name) {
  if (name != nullptr) {
    
  } else {
    
  }
  name_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), name,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:smart3dmap.v1.SectionMap.name)
}

// int32 db_id = 3;
inline void SectionMap::clear_db_id() {
  db_id_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 SectionMap::_internal_db_id() const {
  return db_id_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 SectionMap::db_id() const {
  // @@protoc_insertion_point(field_get:smart3dmap.v1.SectionMap.db_id)
  return _internal_db_id();
}
inline void SectionMap::_internal_set_db_id(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  db_id_ = value;
}
inline void SectionMap::set_db_id(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_db_id(value);
  // @@protoc_insertion_point(field_set:smart3dmap.v1.SectionMap.db_id)
}

// .google.protobuf.Timestamp created_at = 4;
inline bool SectionMap::_internal_has_created_at() const {
  return this != internal_default_instance() && created_at_ != nullptr;
}
inline bool SectionMap::has_created_at() const {
  return _internal_has_created_at();
}
inline const PROTOBUF_NAMESPACE_ID::Timestamp& SectionMap::_internal_created_at() const {
  const PROTOBUF_NAMESPACE_ID::Timestamp* p = created_at_;
  return p != nullptr ? *p : reinterpret_cast<const PROTOBUF_NAMESPACE_ID::Timestamp&>(
      PROTOBUF_NAMESPACE_ID::_Timestamp_default_instance_);
}
inline const PROTOBUF_NAMESPACE_ID::Timestamp& SectionMap::created_at() const {
  // @@protoc_insertion_point(field_get:smart3dmap.v1.SectionMap.created_at)
  return _internal_created_at();
}
inline void SectionMap::unsafe_arena_set_allocated_created_at(
    PROTOBUF_NAMESPACE_ID::Timestamp* created_at) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(created_at_);
  }
  created_at_ = created_at;
  if (created_at) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:smart3dmap.v1.SectionMap.created_at)
}
inline PROTOBUF_NAMESPACE_ID::Timestamp* SectionMap::release_created_at() {
  
  PROTOBUF_NAMESPACE_ID::Timestamp* temp = created_at_;
  created_at_ = nullptr;
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline PROTOBUF_NAMESPACE_ID::Timestamp* SectionMap::unsafe_arena_release_created_at() {
  // @@protoc_insertion_point(field_release:smart3dmap.v1.SectionMap.created_at)
  
  PROTOBUF_NAMESPACE_ID::Timestamp* temp = created_at_;
  created_at_ = nullptr;
  return temp;
}
inline PROTOBUF_NAMESPACE_ID::Timestamp* SectionMap::_internal_mutable_created_at() {
  
  if (created_at_ == nullptr) {
    auto* p = CreateMaybeMessage<PROTOBUF_NAMESPACE_ID::Timestamp>(GetArena());
    created_at_ = p;
  }
  return created_at_;
}
inline PROTOBUF_NAMESPACE_ID::Timestamp* SectionMap::mutable_created_at() {
  // @@protoc_insertion_point(field_mutable:smart3dmap.v1.SectionMap.created_at)
  return _internal_mutable_created_at();
}
inline void SectionMap::set_allocated_created_at(PROTOBUF_NAMESPACE_ID::Timestamp* created_at) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(created_at_);
  }
  if (created_at) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(created_at)->GetArena();
    if (message_arena != submessage_arena) {
      created_at = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, created_at, submessage_arena);
    }
    
  } else {
    
  }
  created_at_ = created_at;
  // @@protoc_insertion_point(field_set_allocated:smart3dmap.v1.SectionMap.created_at)
}

// -------------------------------------------------------------------

// ListSectionMapsRequest

// .smart3dmap.v1.Pagination pagination = 1;
inline bool ListSectionMapsRequest::_internal_has_pagination() const {
  return this != internal_default_instance() && pagination_ != nullptr;
}
inline bool ListSectionMapsRequest::has_pagination() const {
  return _internal_has_pagination();
}
inline const ::smart3dmap::v1::Pagination& ListSectionMapsRequest::_internal_pagination() const {
  const ::smart3dmap::v1::Pagination* p = pagination_;
  return p != nullptr ? *p : reinterpret_cast<const ::smart3dmap::v1::Pagination&>(
      ::smart3dmap::v1::_Pagination_default_instance_);
}
inline const ::smart3dmap::v1::Pagination& ListSectionMapsRequest::pagination() const {
  // @@protoc_insertion_point(field_get:smart3dmap.v1.ListSectionMapsRequest.pagination)
  return _internal_pagination();
}
inline void ListSectionMapsRequest::unsafe_arena_set_allocated_pagination(
    ::smart3dmap::v1::Pagination* pagination) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(pagination_);
  }
  pagination_ = pagination;
  if (pagination) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:smart3dmap.v1.ListSectionMapsRequest.pagination)
}
inline ::smart3dmap::v1::Pagination* ListSectionMapsRequest::release_pagination() {
  
  ::smart3dmap::v1::Pagination* temp = pagination_;
  pagination_ = nullptr;
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::smart3dmap::v1::Pagination* ListSectionMapsRequest::unsafe_arena_release_pagination() {
  // @@protoc_insertion_point(field_release:smart3dmap.v1.ListSectionMapsRequest.pagination)
  
  ::smart3dmap::v1::Pagination* temp = pagination_;
  pagination_ = nullptr;
  return temp;
}
inline ::smart3dmap::v1::Pagination* ListSectionMapsRequest::_internal_mutable_pagination() {
  
  if (pagination_ == nullptr) {
    auto* p = CreateMaybeMessage<::smart3dmap::v1::Pagination>(GetArena());
    pagination_ = p;
  }
  return pagination_;
}
inline ::smart3dmap::v1::Pagination* ListSectionMapsRequest::mutable_pagination() {
  // @@protoc_insertion_point(field_mutable:smart3dmap.v1.ListSectionMapsRequest.pagination)
  return _internal_mutable_pagination();
}
inline void ListSectionMapsRequest::set_allocated_pagination(::smart3dmap::v1::Pagination* pagination) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(pagination_);
  }
  if (pagination) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(pagination)->GetArena();
    if (message_arena != submessage_arena) {
      pagination = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, pagination, submessage_arena);
    }
    
  } else {
    
  }
  pagination_ = pagination;
  // @@protoc_insertion_point(field_set_allocated:smart3dmap.v1.ListSectionMapsRequest.pagination)
}

// int32 db_id = 2;
inline void ListSectionMapsRequest::clear_db_id() {
  db_id_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 ListSectionMapsRequest::_internal_db_id() const {
  return db_id_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 ListSectionMapsRequest::db_id() const {
  // @@protoc_insertion_point(field_get:smart3dmap.v1.ListSectionMapsRequest.db_id)
  return _internal_db_id();
}
inline void ListSectionMapsRequest::_internal_set_db_id(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  db_id_ = value;
}
inline void ListSectionMapsRequest::set_db_id(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_db_id(value);
  // @@protoc_insertion_point(field_set:smart3dmap.v1.ListSectionMapsRequest.db_id)
}

// -------------------------------------------------------------------

// ListSectionMapsResponse

// int32 total_count = 1;
inline void ListSectionMapsResponse::clear_total_count() {
  total_count_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 ListSectionMapsResponse::_internal_total_count() const {
  return total_count_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 ListSectionMapsResponse::total_count() const {
  // @@protoc_insertion_point(field_get:smart3dmap.v1.ListSectionMapsResponse.total_count)
  return _internal_total_count();
}
inline void ListSectionMapsResponse::_internal_set_total_count(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  total_count_ = value;
}
inline void ListSectionMapsResponse::set_total_count(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_total_count(value);
  // @@protoc_insertion_point(field_set:smart3dmap.v1.ListSectionMapsResponse.total_count)
}

// repeated .smart3dmap.v1.SectionMap maps = 2;
inline int ListSectionMapsResponse::_internal_maps_size() const {
  return maps_.size();
}
inline int ListSectionMapsResponse::maps_size() const {
  return _internal_maps_size();
}
inline void ListSectionMapsResponse::clear_maps() {
  maps_.Clear();
}
inline ::smart3dmap::v1::SectionMap* ListSectionMapsResponse::mutable_maps(int index) {
  // @@protoc_insertion_point(field_mutable:smart3dmap.v1.ListSectionMapsResponse.maps)
  return maps_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::smart3dmap::v1::SectionMap >*
ListSectionMapsResponse::mutable_maps() {
  // @@protoc_insertion_point(field_mutable_list:smart3dmap.v1.ListSectionMapsResponse.maps)
  return &maps_;
}
inline const ::smart3dmap::v1::SectionMap& ListSectionMapsResponse::_internal_maps(int index) const {
  return maps_.Get(index);
}
inline const ::smart3dmap::v1::SectionMap& ListSectionMapsResponse::maps(int index) const {
  // @@protoc_insertion_point(field_get:smart3dmap.v1.ListSectionMapsResponse.maps)
  return _internal_maps(index);
}
inline ::smart3dmap::v1::SectionMap* ListSectionMapsResponse::_internal_add_maps() {
  return maps_.Add();
}
inline ::smart3dmap::v1::SectionMap* ListSectionMapsResponse::add_maps() {
  // @@protoc_insertion_point(field_add:smart3dmap.v1.ListSectionMapsResponse.maps)
  return _internal_add_maps();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::smart3dmap::v1::SectionMap >&
ListSectionMapsResponse::maps() const {
  // @@protoc_insertion_point(field_list:smart3dmap.v1.ListSectionMapsResponse.maps)
  return maps_;
}

// -------------------------------------------------------------------

// Model3DStructure

// int32 id = 1;
inline void Model3DStructure::clear_id() {
  id_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 Model3DStructure::_internal_id() const {
  return id_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 Model3DStructure::id() const {
  // @@protoc_insertion_point(field_get:smart3dmap.v1.Model3DStructure.id)
  return _internal_id();
}
inline void Model3DStructure::_internal_set_id(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  id_ = value;
}
inline void Model3DStructure::set_id(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_id(value);
  // @@protoc_insertion_point(field_set:smart3dmap.v1.Model3DStructure.id)
}

// string name = 2;
inline void Model3DStructure::clear_name() {
  name_.ClearToEmpty();
}
inline const std::string& Model3DStructure::name() const {
  // @@protoc_insertion_point(field_get:smart3dmap.v1.Model3DStructure.name)
  return _internal_name();
}
inline void Model3DStructure::set_name(const std::string& value) {
  _internal_set_name(value);
  // @@protoc_insertion_point(field_set:smart3dmap.v1.Model3DStructure.name)
}
inline std::string* Model3DStructure::mutable_name() {
  // @@protoc_insertion_point(field_mutable:smart3dmap.v1.Model3DStructure.name)
  return _internal_mutable_name();
}
inline const std::string& Model3DStructure::_internal_name() const {
  return name_.Get();
}
inline void Model3DStructure::_internal_set_name(const std::string& value) {
  
  name_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArena());
}
inline void Model3DStructure::set_name(std::string&& value) {
  
  name_.Set(
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:smart3dmap.v1.Model3DStructure.name)
}
inline void Model3DStructure::set_name(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  name_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(value), GetArena());
  // @@protoc_insertion_point(field_set_char:smart3dmap.v1.Model3DStructure.name)
}
inline void Model3DStructure::set_name(const char* value,
    size_t size) {
  
  name_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:smart3dmap.v1.Model3DStructure.name)
}
inline std::string* Model3DStructure::_internal_mutable_name() {
  
  return name_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArena());
}
inline std::string* Model3DStructure::release_name() {
  // @@protoc_insertion_point(field_release:smart3dmap.v1.Model3DStructure.name)
  return name_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void Model3DStructure::set_allocated_name(std::string* name) {
  if (name != nullptr) {
    
  } else {
    
  }
  name_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), name,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:smart3dmap.v1.Model3DStructure.name)
}

// int32 db_id = 3;
inline void Model3DStructure::clear_db_id() {
  db_id_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 Model3DStructure::_internal_db_id() const {
  return db_id_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 Model3DStructure::db_id() const {
  // @@protoc_insertion_point(field_get:smart3dmap.v1.Model3DStructure.db_id)
  return _internal_db_id();
}
inline void Model3DStructure::_internal_set_db_id(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  db_id_ = value;
}
inline void Model3DStructure::set_db_id(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_db_id(value);
  // @@protoc_insertion_point(field_set:smart3dmap.v1.Model3DStructure.db_id)
}

// .google.protobuf.Timestamp created_at = 4;
inline bool Model3DStructure::_internal_has_created_at() const {
  return this != internal_default_instance() && created_at_ != nullptr;
}
inline bool Model3DStructure::has_created_at() const {
  return _internal_has_created_at();
}
inline const PROTOBUF_NAMESPACE_ID::Timestamp& Model3DStructure::_internal_created_at() const {
  const PROTOBUF_NAMESPACE_ID::Timestamp* p = created_at_;
  return p != nullptr ? *p : reinterpret_cast<const PROTOBUF_NAMESPACE_ID::Timestamp&>(
      PROTOBUF_NAMESPACE_ID::_Timestamp_default_instance_);
}
inline const PROTOBUF_NAMESPACE_ID::Timestamp& Model3DStructure::created_at() const {
  // @@protoc_insertion_point(field_get:smart3dmap.v1.Model3DStructure.created_at)
  return _internal_created_at();
}
inline void Model3DStructure::unsafe_arena_set_allocated_created_at(
    PROTOBUF_NAMESPACE_ID::Timestamp* created_at) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(created_at_);
  }
  created_at_ = created_at;
  if (created_at) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:smart3dmap.v1.Model3DStructure.created_at)
}
inline PROTOBUF_NAMESPACE_ID::Timestamp* Model3DStructure::release_created_at() {
  
  PROTOBUF_NAMESPACE_ID::Timestamp* temp = created_at_;
  created_at_ = nullptr;
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline PROTOBUF_NAMESPACE_ID::Timestamp* Model3DStructure::unsafe_arena_release_created_at() {
  // @@protoc_insertion_point(field_release:smart3dmap.v1.Model3DStructure.created_at)
  
  PROTOBUF_NAMESPACE_ID::Timestamp* temp = created_at_;
  created_at_ = nullptr;
  return temp;
}
inline PROTOBUF_NAMESPACE_ID::Timestamp* Model3DStructure::_internal_mutable_created_at() {
  
  if (created_at_ == nullptr) {
    auto* p = CreateMaybeMessage<PROTOBUF_NAMESPACE_ID::Timestamp>(GetArena());
    created_at_ = p;
  }
  return created_at_;
}
inline PROTOBUF_NAMESPACE_ID::Timestamp* Model3DStructure::mutable_created_at() {
  // @@protoc_insertion_point(field_mutable:smart3dmap.v1.Model3DStructure.created_at)
  return _internal_mutable_created_at();
}
inline void Model3DStructure::set_allocated_created_at(PROTOBUF_NAMESPACE_ID::Timestamp* created_at) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(created_at_);
  }
  if (created_at) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(created_at)->GetArena();
    if (message_arena != submessage_arena) {
      created_at = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, created_at, submessage_arena);
    }
    
  } else {
    
  }
  created_at_ = created_at;
  // @@protoc_insertion_point(field_set_allocated:smart3dmap.v1.Model3DStructure.created_at)
}

// -------------------------------------------------------------------

// ListStructureModelsRequest

// .smart3dmap.v1.Pagination pagination = 1;
inline bool ListStructureModelsRequest::_internal_has_pagination() const {
  return this != internal_default_instance() && pagination_ != nullptr;
}
inline bool ListStructureModelsRequest::has_pagination() const {
  return _internal_has_pagination();
}
inline const ::smart3dmap::v1::Pagination& ListStructureModelsRequest::_internal_pagination() const {
  const ::smart3dmap::v1::Pagination* p = pagination_;
  return p != nullptr ? *p : reinterpret_cast<const ::smart3dmap::v1::Pagination&>(
      ::smart3dmap::v1::_Pagination_default_instance_);
}
inline const ::smart3dmap::v1::Pagination& ListStructureModelsRequest::pagination() const {
  // @@protoc_insertion_point(field_get:smart3dmap.v1.ListStructureModelsRequest.pagination)
  return _internal_pagination();
}
inline void ListStructureModelsRequest::unsafe_arena_set_allocated_pagination(
    ::smart3dmap::v1::Pagination* pagination) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(pagination_);
  }
  pagination_ = pagination;
  if (pagination) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:smart3dmap.v1.ListStructureModelsRequest.pagination)
}
inline ::smart3dmap::v1::Pagination* ListStructureModelsRequest::release_pagination() {
  
  ::smart3dmap::v1::Pagination* temp = pagination_;
  pagination_ = nullptr;
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::smart3dmap::v1::Pagination* ListStructureModelsRequest::unsafe_arena_release_pagination() {
  // @@protoc_insertion_point(field_release:smart3dmap.v1.ListStructureModelsRequest.pagination)
  
  ::smart3dmap::v1::Pagination* temp = pagination_;
  pagination_ = nullptr;
  return temp;
}
inline ::smart3dmap::v1::Pagination* ListStructureModelsRequest::_internal_mutable_pagination() {
  
  if (pagination_ == nullptr) {
    auto* p = CreateMaybeMessage<::smart3dmap::v1::Pagination>(GetArena());
    pagination_ = p;
  }
  return pagination_;
}
inline ::smart3dmap::v1::Pagination* ListStructureModelsRequest::mutable_pagination() {
  // @@protoc_insertion_point(field_mutable:smart3dmap.v1.ListStructureModelsRequest.pagination)
  return _internal_mutable_pagination();
}
inline void ListStructureModelsRequest::set_allocated_pagination(::smart3dmap::v1::Pagination* pagination) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(pagination_);
  }
  if (pagination) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(pagination)->GetArena();
    if (message_arena != submessage_arena) {
      pagination = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, pagination, submessage_arena);
    }
    
  } else {
    
  }
  pagination_ = pagination;
  // @@protoc_insertion_point(field_set_allocated:smart3dmap.v1.ListStructureModelsRequest.pagination)
}

// int32 db_id = 2;
inline void ListStructureModelsRequest::clear_db_id() {
  db_id_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 ListStructureModelsRequest::_internal_db_id() const {
  return db_id_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 ListStructureModelsRequest::db_id() const {
  // @@protoc_insertion_point(field_get:smart3dmap.v1.ListStructureModelsRequest.db_id)
  return _internal_db_id();
}
inline void ListStructureModelsRequest::_internal_set_db_id(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  db_id_ = value;
}
inline void ListStructureModelsRequest::set_db_id(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_db_id(value);
  // @@protoc_insertion_point(field_set:smart3dmap.v1.ListStructureModelsRequest.db_id)
}

// -------------------------------------------------------------------

// ListStructureModelsResponse

// int32 total_count = 1;
inline void ListStructureModelsResponse::clear_total_count() {
  total_count_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 ListStructureModelsResponse::_internal_total_count() const {
  return total_count_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 ListStructureModelsResponse::total_count() const {
  // @@protoc_insertion_point(field_get:smart3dmap.v1.ListStructureModelsResponse.total_count)
  return _internal_total_count();
}
inline void ListStructureModelsResponse::_internal_set_total_count(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  total_count_ = value;
}
inline void ListStructureModelsResponse::set_total_count(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_total_count(value);
  // @@protoc_insertion_point(field_set:smart3dmap.v1.ListStructureModelsResponse.total_count)
}

// repeated .smart3dmap.v1.Model3DStructure models = 2;
inline int ListStructureModelsResponse::_internal_models_size() const {
  return models_.size();
}
inline int ListStructureModelsResponse::models_size() const {
  return _internal_models_size();
}
inline void ListStructureModelsResponse::clear_models() {
  models_.Clear();
}
inline ::smart3dmap::v1::Model3DStructure* ListStructureModelsResponse::mutable_models(int index) {
  // @@protoc_insertion_point(field_mutable:smart3dmap.v1.ListStructureModelsResponse.models)
  return models_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::smart3dmap::v1::Model3DStructure >*
ListStructureModelsResponse::mutable_models() {
  // @@protoc_insertion_point(field_mutable_list:smart3dmap.v1.ListStructureModelsResponse.models)
  return &models_;
}
inline const ::smart3dmap::v1::Model3DStructure& ListStructureModelsResponse::_internal_models(int index) const {
  return models_.Get(index);
}
inline const ::smart3dmap::v1::Model3DStructure& ListStructureModelsResponse::models(int index) const {
  // @@protoc_insertion_point(field_get:smart3dmap.v1.ListStructureModelsResponse.models)
  return _internal_models(index);
}
inline ::smart3dmap::v1::Model3DStructure* ListStructureModelsResponse::_internal_add_models() {
  return models_.Add();
}
inline ::smart3dmap::v1::Model3DStructure* ListStructureModelsResponse::add_models() {
  // @@protoc_insertion_point(field_add:smart3dmap.v1.ListStructureModelsResponse.models)
  return _internal_add_models();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::smart3dmap::v1::Model3DStructure >&
ListStructureModelsResponse::models() const {
  // @@protoc_insertion_point(field_list:smart3dmap.v1.ListStructureModelsResponse.models)
  return models_;
}

// -------------------------------------------------------------------

// Model3DField

// int32 id = 1;
inline void Model3DField::clear_id() {
  id_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 Model3DField::_internal_id() const {
  return id_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 Model3DField::id() const {
  // @@protoc_insertion_point(field_get:smart3dmap.v1.Model3DField.id)
  return _internal_id();
}
inline void Model3DField::_internal_set_id(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  id_ = value;
}
inline void Model3DField::set_id(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_id(value);
  // @@protoc_insertion_point(field_set:smart3dmap.v1.Model3DField.id)
}

// string name = 2;
inline void Model3DField::clear_name() {
  name_.ClearToEmpty();
}
inline const std::string& Model3DField::name() const {
  // @@protoc_insertion_point(field_get:smart3dmap.v1.Model3DField.name)
  return _internal_name();
}
inline void Model3DField::set_name(const std::string& value) {
  _internal_set_name(value);
  // @@protoc_insertion_point(field_set:smart3dmap.v1.Model3DField.name)
}
inline std::string* Model3DField::mutable_name() {
  // @@protoc_insertion_point(field_mutable:smart3dmap.v1.Model3DField.name)
  return _internal_mutable_name();
}
inline const std::string& Model3DField::_internal_name() const {
  return name_.Get();
}
inline void Model3DField::_internal_set_name(const std::string& value) {
  
  name_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArena());
}
inline void Model3DField::set_name(std::string&& value) {
  
  name_.Set(
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:smart3dmap.v1.Model3DField.name)
}
inline void Model3DField::set_name(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  name_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(value), GetArena());
  // @@protoc_insertion_point(field_set_char:smart3dmap.v1.Model3DField.name)
}
inline void Model3DField::set_name(const char* value,
    size_t size) {
  
  name_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:smart3dmap.v1.Model3DField.name)
}
inline std::string* Model3DField::_internal_mutable_name() {
  
  return name_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArena());
}
inline std::string* Model3DField::release_name() {
  // @@protoc_insertion_point(field_release:smart3dmap.v1.Model3DField.name)
  return name_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void Model3DField::set_allocated_name(std::string* name) {
  if (name != nullptr) {
    
  } else {
    
  }
  name_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), name,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:smart3dmap.v1.Model3DField.name)
}

// int32 db_id = 3;
inline void Model3DField::clear_db_id() {
  db_id_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 Model3DField::_internal_db_id() const {
  return db_id_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 Model3DField::db_id() const {
  // @@protoc_insertion_point(field_get:smart3dmap.v1.Model3DField.db_id)
  return _internal_db_id();
}
inline void Model3DField::_internal_set_db_id(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  db_id_ = value;
}
inline void Model3DField::set_db_id(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_db_id(value);
  // @@protoc_insertion_point(field_set:smart3dmap.v1.Model3DField.db_id)
}

// .google.protobuf.Timestamp created_at = 4;
inline bool Model3DField::_internal_has_created_at() const {
  return this != internal_default_instance() && created_at_ != nullptr;
}
inline bool Model3DField::has_created_at() const {
  return _internal_has_created_at();
}
inline const PROTOBUF_NAMESPACE_ID::Timestamp& Model3DField::_internal_created_at() const {
  const PROTOBUF_NAMESPACE_ID::Timestamp* p = created_at_;
  return p != nullptr ? *p : reinterpret_cast<const PROTOBUF_NAMESPACE_ID::Timestamp&>(
      PROTOBUF_NAMESPACE_ID::_Timestamp_default_instance_);
}
inline const PROTOBUF_NAMESPACE_ID::Timestamp& Model3DField::created_at() const {
  // @@protoc_insertion_point(field_get:smart3dmap.v1.Model3DField.created_at)
  return _internal_created_at();
}
inline void Model3DField::unsafe_arena_set_allocated_created_at(
    PROTOBUF_NAMESPACE_ID::Timestamp* created_at) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(created_at_);
  }
  created_at_ = created_at;
  if (created_at) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:smart3dmap.v1.Model3DField.created_at)
}
inline PROTOBUF_NAMESPACE_ID::Timestamp* Model3DField::release_created_at() {
  
  PROTOBUF_NAMESPACE_ID::Timestamp* temp = created_at_;
  created_at_ = nullptr;
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline PROTOBUF_NAMESPACE_ID::Timestamp* Model3DField::unsafe_arena_release_created_at() {
  // @@protoc_insertion_point(field_release:smart3dmap.v1.Model3DField.created_at)
  
  PROTOBUF_NAMESPACE_ID::Timestamp* temp = created_at_;
  created_at_ = nullptr;
  return temp;
}
inline PROTOBUF_NAMESPACE_ID::Timestamp* Model3DField::_internal_mutable_created_at() {
  
  if (created_at_ == nullptr) {
    auto* p = CreateMaybeMessage<PROTOBUF_NAMESPACE_ID::Timestamp>(GetArena());
    created_at_ = p;
  }
  return created_at_;
}
inline PROTOBUF_NAMESPACE_ID::Timestamp* Model3DField::mutable_created_at() {
  // @@protoc_insertion_point(field_mutable:smart3dmap.v1.Model3DField.created_at)
  return _internal_mutable_created_at();
}
inline void Model3DField::set_allocated_created_at(PROTOBUF_NAMESPACE_ID::Timestamp* created_at) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(created_at_);
  }
  if (created_at) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(created_at)->GetArena();
    if (message_arena != submessage_arena) {
      created_at = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, created_at, submessage_arena);
    }
    
  } else {
    
  }
  created_at_ = created_at;
  // @@protoc_insertion_point(field_set_allocated:smart3dmap.v1.Model3DField.created_at)
}

// -------------------------------------------------------------------

// ListFieldModelsRequest

// .smart3dmap.v1.Pagination pagination = 1;
inline bool ListFieldModelsRequest::_internal_has_pagination() const {
  return this != internal_default_instance() && pagination_ != nullptr;
}
inline bool ListFieldModelsRequest::has_pagination() const {
  return _internal_has_pagination();
}
inline const ::smart3dmap::v1::Pagination& ListFieldModelsRequest::_internal_pagination() const {
  const ::smart3dmap::v1::Pagination* p = pagination_;
  return p != nullptr ? *p : reinterpret_cast<const ::smart3dmap::v1::Pagination&>(
      ::smart3dmap::v1::_Pagination_default_instance_);
}
inline const ::smart3dmap::v1::Pagination& ListFieldModelsRequest::pagination() const {
  // @@protoc_insertion_point(field_get:smart3dmap.v1.ListFieldModelsRequest.pagination)
  return _internal_pagination();
}
inline void ListFieldModelsRequest::unsafe_arena_set_allocated_pagination(
    ::smart3dmap::v1::Pagination* pagination) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(pagination_);
  }
  pagination_ = pagination;
  if (pagination) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:smart3dmap.v1.ListFieldModelsRequest.pagination)
}
inline ::smart3dmap::v1::Pagination* ListFieldModelsRequest::release_pagination() {
  
  ::smart3dmap::v1::Pagination* temp = pagination_;
  pagination_ = nullptr;
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::smart3dmap::v1::Pagination* ListFieldModelsRequest::unsafe_arena_release_pagination() {
  // @@protoc_insertion_point(field_release:smart3dmap.v1.ListFieldModelsRequest.pagination)
  
  ::smart3dmap::v1::Pagination* temp = pagination_;
  pagination_ = nullptr;
  return temp;
}
inline ::smart3dmap::v1::Pagination* ListFieldModelsRequest::_internal_mutable_pagination() {
  
  if (pagination_ == nullptr) {
    auto* p = CreateMaybeMessage<::smart3dmap::v1::Pagination>(GetArena());
    pagination_ = p;
  }
  return pagination_;
}
inline ::smart3dmap::v1::Pagination* ListFieldModelsRequest::mutable_pagination() {
  // @@protoc_insertion_point(field_mutable:smart3dmap.v1.ListFieldModelsRequest.pagination)
  return _internal_mutable_pagination();
}
inline void ListFieldModelsRequest::set_allocated_pagination(::smart3dmap::v1::Pagination* pagination) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(pagination_);
  }
  if (pagination) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(pagination)->GetArena();
    if (message_arena != submessage_arena) {
      pagination = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, pagination, submessage_arena);
    }
    
  } else {
    
  }
  pagination_ = pagination;
  // @@protoc_insertion_point(field_set_allocated:smart3dmap.v1.ListFieldModelsRequest.pagination)
}

// int32 db_id = 2;
inline void ListFieldModelsRequest::clear_db_id() {
  db_id_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 ListFieldModelsRequest::_internal_db_id() const {
  return db_id_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 ListFieldModelsRequest::db_id() const {
  // @@protoc_insertion_point(field_get:smart3dmap.v1.ListFieldModelsRequest.db_id)
  return _internal_db_id();
}
inline void ListFieldModelsRequest::_internal_set_db_id(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  db_id_ = value;
}
inline void ListFieldModelsRequest::set_db_id(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_db_id(value);
  // @@protoc_insertion_point(field_set:smart3dmap.v1.ListFieldModelsRequest.db_id)
}

// -------------------------------------------------------------------

// ListFieldModelsResponse

// int32 total_count = 1;
inline void ListFieldModelsResponse::clear_total_count() {
  total_count_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 ListFieldModelsResponse::_internal_total_count() const {
  return total_count_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 ListFieldModelsResponse::total_count() const {
  // @@protoc_insertion_point(field_get:smart3dmap.v1.ListFieldModelsResponse.total_count)
  return _internal_total_count();
}
inline void ListFieldModelsResponse::_internal_set_total_count(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  total_count_ = value;
}
inline void ListFieldModelsResponse::set_total_count(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_total_count(value);
  // @@protoc_insertion_point(field_set:smart3dmap.v1.ListFieldModelsResponse.total_count)
}

// repeated .smart3dmap.v1.Model3DField models = 2;
inline int ListFieldModelsResponse::_internal_models_size() const {
  return models_.size();
}
inline int ListFieldModelsResponse::models_size() const {
  return _internal_models_size();
}
inline void ListFieldModelsResponse::clear_models() {
  models_.Clear();
}
inline ::smart3dmap::v1::Model3DField* ListFieldModelsResponse::mutable_models(int index) {
  // @@protoc_insertion_point(field_mutable:smart3dmap.v1.ListFieldModelsResponse.models)
  return models_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::smart3dmap::v1::Model3DField >*
ListFieldModelsResponse::mutable_models() {
  // @@protoc_insertion_point(field_mutable_list:smart3dmap.v1.ListFieldModelsResponse.models)
  return &models_;
}
inline const ::smart3dmap::v1::Model3DField& ListFieldModelsResponse::_internal_models(int index) const {
  return models_.Get(index);
}
inline const ::smart3dmap::v1::Model3DField& ListFieldModelsResponse::models(int index) const {
  // @@protoc_insertion_point(field_get:smart3dmap.v1.ListFieldModelsResponse.models)
  return _internal_models(index);
}
inline ::smart3dmap::v1::Model3DField* ListFieldModelsResponse::_internal_add_models() {
  return models_.Add();
}
inline ::smart3dmap::v1::Model3DField* ListFieldModelsResponse::add_models() {
  // @@protoc_insertion_point(field_add:smart3dmap.v1.ListFieldModelsResponse.models)
  return _internal_add_models();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::smart3dmap::v1::Model3DField >&
ListFieldModelsResponse::models() const {
  // @@protoc_insertion_point(field_list:smart3dmap.v1.ListFieldModelsResponse.models)
  return models_;
}

// -------------------------------------------------------------------

// StdStrat_Item

// string level = 1;
inline void StdStrat_Item::clear_level() {
  level_.ClearToEmpty();
}
inline const std::string& StdStrat_Item::level() const {
  // @@protoc_insertion_point(field_get:smart3dmap.v1.StdStrat.Item.level)
  return _internal_level();
}
inline void StdStrat_Item::set_level(const std::string& value) {
  _internal_set_level(value);
  // @@protoc_insertion_point(field_set:smart3dmap.v1.StdStrat.Item.level)
}
inline std::string* StdStrat_Item::mutable_level() {
  // @@protoc_insertion_point(field_mutable:smart3dmap.v1.StdStrat.Item.level)
  return _internal_mutable_level();
}
inline const std::string& StdStrat_Item::_internal_level() const {
  return level_.Get();
}
inline void StdStrat_Item::_internal_set_level(const std::string& value) {
  
  level_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArena());
}
inline void StdStrat_Item::set_level(std::string&& value) {
  
  level_.Set(
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:smart3dmap.v1.StdStrat.Item.level)
}
inline void StdStrat_Item::set_level(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  level_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(value), GetArena());
  // @@protoc_insertion_point(field_set_char:smart3dmap.v1.StdStrat.Item.level)
}
inline void StdStrat_Item::set_level(const char* value,
    size_t size) {
  
  level_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:smart3dmap.v1.StdStrat.Item.level)
}
inline std::string* StdStrat_Item::_internal_mutable_level() {
  
  return level_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArena());
}
inline std::string* StdStrat_Item::release_level() {
  // @@protoc_insertion_point(field_release:smart3dmap.v1.StdStrat.Item.level)
  return level_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void StdStrat_Item::set_allocated_level(std::string* level) {
  if (level != nullptr) {
    
  } else {
    
  }
  level_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), level,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:smart3dmap.v1.StdStrat.Item.level)
}

// string code = 2;
inline void StdStrat_Item::clear_code() {
  code_.ClearToEmpty();
}
inline const std::string& StdStrat_Item::code() const {
  // @@protoc_insertion_point(field_get:smart3dmap.v1.StdStrat.Item.code)
  return _internal_code();
}
inline void StdStrat_Item::set_code(const std::string& value) {
  _internal_set_code(value);
  // @@protoc_insertion_point(field_set:smart3dmap.v1.StdStrat.Item.code)
}
inline std::string* StdStrat_Item::mutable_code() {
  // @@protoc_insertion_point(field_mutable:smart3dmap.v1.StdStrat.Item.code)
  return _internal_mutable_code();
}
inline const std::string& StdStrat_Item::_internal_code() const {
  return code_.Get();
}
inline void StdStrat_Item::_internal_set_code(const std::string& value) {
  
  code_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArena());
}
inline void StdStrat_Item::set_code(std::string&& value) {
  
  code_.Set(
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:smart3dmap.v1.StdStrat.Item.code)
}
inline void StdStrat_Item::set_code(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  code_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(value), GetArena());
  // @@protoc_insertion_point(field_set_char:smart3dmap.v1.StdStrat.Item.code)
}
inline void StdStrat_Item::set_code(const char* value,
    size_t size) {
  
  code_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:smart3dmap.v1.StdStrat.Item.code)
}
inline std::string* StdStrat_Item::_internal_mutable_code() {
  
  return code_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArena());
}
inline std::string* StdStrat_Item::release_code() {
  // @@protoc_insertion_point(field_release:smart3dmap.v1.StdStrat.Item.code)
  return code_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void StdStrat_Item::set_allocated_code(std::string* code) {
  if (code != nullptr) {
    
  } else {
    
  }
  code_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), code,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:smart3dmap.v1.StdStrat.Item.code)
}

// string name = 3;
inline void StdStrat_Item::clear_name() {
  name_.ClearToEmpty();
}
inline const std::string& StdStrat_Item::name() const {
  // @@protoc_insertion_point(field_get:smart3dmap.v1.StdStrat.Item.name)
  return _internal_name();
}
inline void StdStrat_Item::set_name(const std::string& value) {
  _internal_set_name(value);
  // @@protoc_insertion_point(field_set:smart3dmap.v1.StdStrat.Item.name)
}
inline std::string* StdStrat_Item::mutable_name() {
  // @@protoc_insertion_point(field_mutable:smart3dmap.v1.StdStrat.Item.name)
  return _internal_mutable_name();
}
inline const std::string& StdStrat_Item::_internal_name() const {
  return name_.Get();
}
inline void StdStrat_Item::_internal_set_name(const std::string& value) {
  
  name_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArena());
}
inline void StdStrat_Item::set_name(std::string&& value) {
  
  name_.Set(
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:smart3dmap.v1.StdStrat.Item.name)
}
inline void StdStrat_Item::set_name(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  name_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(value), GetArena());
  // @@protoc_insertion_point(field_set_char:smart3dmap.v1.StdStrat.Item.name)
}
inline void StdStrat_Item::set_name(const char* value,
    size_t size) {
  
  name_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:smart3dmap.v1.StdStrat.Item.name)
}
inline std::string* StdStrat_Item::_internal_mutable_name() {
  
  return name_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArena());
}
inline std::string* StdStrat_Item::release_name() {
  // @@protoc_insertion_point(field_release:smart3dmap.v1.StdStrat.Item.name)
  return name_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void StdStrat_Item::set_allocated_name(std::string* name) {
  if (name != nullptr) {
    
  } else {
    
  }
  name_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), name,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:smart3dmap.v1.StdStrat.Item.name)
}

// .smart3dmap.v1.StdStrat.Item.Type type = 4;
inline void StdStrat_Item::clear_type() {
  type_ = 0;
}
inline ::smart3dmap::v1::StdStrat_Item_Type StdStrat_Item::_internal_type() const {
  return static_cast< ::smart3dmap::v1::StdStrat_Item_Type >(type_);
}
inline ::smart3dmap::v1::StdStrat_Item_Type StdStrat_Item::type() const {
  // @@protoc_insertion_point(field_get:smart3dmap.v1.StdStrat.Item.type)
  return _internal_type();
}
inline void StdStrat_Item::_internal_set_type(::smart3dmap::v1::StdStrat_Item_Type value) {
  
  type_ = value;
}
inline void StdStrat_Item::set_type(::smart3dmap::v1::StdStrat_Item_Type value) {
  _internal_set_type(value);
  // @@protoc_insertion_point(field_set:smart3dmap.v1.StdStrat.Item.type)
}

// string pattern_no = 5;
inline void StdStrat_Item::clear_pattern_no() {
  pattern_no_.ClearToEmpty();
}
inline const std::string& StdStrat_Item::pattern_no() const {
  // @@protoc_insertion_point(field_get:smart3dmap.v1.StdStrat.Item.pattern_no)
  return _internal_pattern_no();
}
inline void StdStrat_Item::set_pattern_no(const std::string& value) {
  _internal_set_pattern_no(value);
  // @@protoc_insertion_point(field_set:smart3dmap.v1.StdStrat.Item.pattern_no)
}
inline std::string* StdStrat_Item::mutable_pattern_no() {
  // @@protoc_insertion_point(field_mutable:smart3dmap.v1.StdStrat.Item.pattern_no)
  return _internal_mutable_pattern_no();
}
inline const std::string& StdStrat_Item::_internal_pattern_no() const {
  return pattern_no_.Get();
}
inline void StdStrat_Item::_internal_set_pattern_no(const std::string& value) {
  
  pattern_no_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArena());
}
inline void StdStrat_Item::set_pattern_no(std::string&& value) {
  
  pattern_no_.Set(
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:smart3dmap.v1.StdStrat.Item.pattern_no)
}
inline void StdStrat_Item::set_pattern_no(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  pattern_no_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(value), GetArena());
  // @@protoc_insertion_point(field_set_char:smart3dmap.v1.StdStrat.Item.pattern_no)
}
inline void StdStrat_Item::set_pattern_no(const char* value,
    size_t size) {
  
  pattern_no_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:smart3dmap.v1.StdStrat.Item.pattern_no)
}
inline std::string* StdStrat_Item::_internal_mutable_pattern_no() {
  
  return pattern_no_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArena());
}
inline std::string* StdStrat_Item::release_pattern_no() {
  // @@protoc_insertion_point(field_release:smart3dmap.v1.StdStrat.Item.pattern_no)
  return pattern_no_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void StdStrat_Item::set_allocated_pattern_no(std::string* pattern_no) {
  if (pattern_no != nullptr) {
    
  } else {
    
  }
  pattern_no_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), pattern_no,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:smart3dmap.v1.StdStrat.Item.pattern_no)
}

// int32 pattern_clr = 6;
inline void StdStrat_Item::clear_pattern_clr() {
  pattern_clr_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 StdStrat_Item::_internal_pattern_clr() const {
  return pattern_clr_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 StdStrat_Item::pattern_clr() const {
  // @@protoc_insertion_point(field_get:smart3dmap.v1.StdStrat.Item.pattern_clr)
  return _internal_pattern_clr();
}
inline void StdStrat_Item::_internal_set_pattern_clr(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  pattern_clr_ = value;
}
inline void StdStrat_Item::set_pattern_clr(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_pattern_clr(value);
  // @@protoc_insertion_point(field_set:smart3dmap.v1.StdStrat.Item.pattern_clr)
}

// int32 clr = 7;
inline void StdStrat_Item::clear_clr() {
  clr_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 StdStrat_Item::_internal_clr() const {
  return clr_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 StdStrat_Item::clr() const {
  // @@protoc_insertion_point(field_get:smart3dmap.v1.StdStrat.Item.clr)
  return _internal_clr();
}
inline void StdStrat_Item::_internal_set_clr(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  clr_ = value;
}
inline void StdStrat_Item::set_clr(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_clr(value);
  // @@protoc_insertion_point(field_set:smart3dmap.v1.StdStrat.Item.clr)
}

// string weathering_degree = 8;
inline void StdStrat_Item::clear_weathering_degree() {
  weathering_degree_.ClearToEmpty();
}
inline const std::string& StdStrat_Item::weathering_degree() const {
  // @@protoc_insertion_point(field_get:smart3dmap.v1.StdStrat.Item.weathering_degree)
  return _internal_weathering_degree();
}
inline void StdStrat_Item::set_weathering_degree(const std::string& value) {
  _internal_set_weathering_degree(value);
  // @@protoc_insertion_point(field_set:smart3dmap.v1.StdStrat.Item.weathering_degree)
}
inline std::string* StdStrat_Item::mutable_weathering_degree() {
  // @@protoc_insertion_point(field_mutable:smart3dmap.v1.StdStrat.Item.weathering_degree)
  return _internal_mutable_weathering_degree();
}
inline const std::string& StdStrat_Item::_internal_weathering_degree() const {
  return weathering_degree_.Get();
}
inline void StdStrat_Item::_internal_set_weathering_degree(const std::string& value) {
  
  weathering_degree_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArena());
}
inline void StdStrat_Item::set_weathering_degree(std::string&& value) {
  
  weathering_degree_.Set(
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:smart3dmap.v1.StdStrat.Item.weathering_degree)
}
inline void StdStrat_Item::set_weathering_degree(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  weathering_degree_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(value), GetArena());
  // @@protoc_insertion_point(field_set_char:smart3dmap.v1.StdStrat.Item.weathering_degree)
}
inline void StdStrat_Item::set_weathering_degree(const char* value,
    size_t size) {
  
  weathering_degree_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:smart3dmap.v1.StdStrat.Item.weathering_degree)
}
inline std::string* StdStrat_Item::_internal_mutable_weathering_degree() {
  
  return weathering_degree_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArena());
}
inline std::string* StdStrat_Item::release_weathering_degree() {
  // @@protoc_insertion_point(field_release:smart3dmap.v1.StdStrat.Item.weathering_degree)
  return weathering_degree_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void StdStrat_Item::set_allocated_weathering_degree(std::string* weathering_degree) {
  if (weathering_degree != nullptr) {
    
  } else {
    
  }
  weathering_degree_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), weathering_degree,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:smart3dmap.v1.StdStrat.Item.weathering_degree)
}

// string geologic_age = 9;
inline void StdStrat_Item::clear_geologic_age() {
  geologic_age_.ClearToEmpty();
}
inline const std::string& StdStrat_Item::geologic_age() const {
  // @@protoc_insertion_point(field_get:smart3dmap.v1.StdStrat.Item.geologic_age)
  return _internal_geologic_age();
}
inline void StdStrat_Item::set_geologic_age(const std::string& value) {
  _internal_set_geologic_age(value);
  // @@protoc_insertion_point(field_set:smart3dmap.v1.StdStrat.Item.geologic_age)
}
inline std::string* StdStrat_Item::mutable_geologic_age() {
  // @@protoc_insertion_point(field_mutable:smart3dmap.v1.StdStrat.Item.geologic_age)
  return _internal_mutable_geologic_age();
}
inline const std::string& StdStrat_Item::_internal_geologic_age() const {
  return geologic_age_.Get();
}
inline void StdStrat_Item::_internal_set_geologic_age(const std::string& value) {
  
  geologic_age_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArena());
}
inline void StdStrat_Item::set_geologic_age(std::string&& value) {
  
  geologic_age_.Set(
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:smart3dmap.v1.StdStrat.Item.geologic_age)
}
inline void StdStrat_Item::set_geologic_age(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  geologic_age_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(value), GetArena());
  // @@protoc_insertion_point(field_set_char:smart3dmap.v1.StdStrat.Item.geologic_age)
}
inline void StdStrat_Item::set_geologic_age(const char* value,
    size_t size) {
  
  geologic_age_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:smart3dmap.v1.StdStrat.Item.geologic_age)
}
inline std::string* StdStrat_Item::_internal_mutable_geologic_age() {
  
  return geologic_age_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArena());
}
inline std::string* StdStrat_Item::release_geologic_age() {
  // @@protoc_insertion_point(field_release:smart3dmap.v1.StdStrat.Item.geologic_age)
  return geologic_age_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void StdStrat_Item::set_allocated_geologic_age(std::string* geologic_age) {
  if (geologic_age != nullptr) {
    
  } else {
    
  }
  geologic_age_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), geologic_age,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:smart3dmap.v1.StdStrat.Item.geologic_age)
}

// string formating_cause = 10;
inline void StdStrat_Item::clear_formating_cause() {
  formating_cause_.ClearToEmpty();
}
inline const std::string& StdStrat_Item::formating_cause() const {
  // @@protoc_insertion_point(field_get:smart3dmap.v1.StdStrat.Item.formating_cause)
  return _internal_formating_cause();
}
inline void StdStrat_Item::set_formating_cause(const std::string& value) {
  _internal_set_formating_cause(value);
  // @@protoc_insertion_point(field_set:smart3dmap.v1.StdStrat.Item.formating_cause)
}
inline std::string* StdStrat_Item::mutable_formating_cause() {
  // @@protoc_insertion_point(field_mutable:smart3dmap.v1.StdStrat.Item.formating_cause)
  return _internal_mutable_formating_cause();
}
inline const std::string& StdStrat_Item::_internal_formating_cause() const {
  return formating_cause_.Get();
}
inline void StdStrat_Item::_internal_set_formating_cause(const std::string& value) {
  
  formating_cause_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArena());
}
inline void StdStrat_Item::set_formating_cause(std::string&& value) {
  
  formating_cause_.Set(
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:smart3dmap.v1.StdStrat.Item.formating_cause)
}
inline void StdStrat_Item::set_formating_cause(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  formating_cause_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(value), GetArena());
  // @@protoc_insertion_point(field_set_char:smart3dmap.v1.StdStrat.Item.formating_cause)
}
inline void StdStrat_Item::set_formating_cause(const char* value,
    size_t size) {
  
  formating_cause_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:smart3dmap.v1.StdStrat.Item.formating_cause)
}
inline std::string* StdStrat_Item::_internal_mutable_formating_cause() {
  
  return formating_cause_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArena());
}
inline std::string* StdStrat_Item::release_formating_cause() {
  // @@protoc_insertion_point(field_release:smart3dmap.v1.StdStrat.Item.formating_cause)
  return formating_cause_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void StdStrat_Item::set_allocated_formating_cause(std::string* formating_cause) {
  if (formating_cause != nullptr) {
    
  } else {
    
  }
  formating_cause_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), formating_cause,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:smart3dmap.v1.StdStrat.Item.formating_cause)
}

// string description = 11;
inline void StdStrat_Item::clear_description() {
  description_.ClearToEmpty();
}
inline const std::string& StdStrat_Item::description() const {
  // @@protoc_insertion_point(field_get:smart3dmap.v1.StdStrat.Item.description)
  return _internal_description();
}
inline void StdStrat_Item::set_description(const std::string& value) {
  _internal_set_description(value);
  // @@protoc_insertion_point(field_set:smart3dmap.v1.StdStrat.Item.description)
}
inline std::string* StdStrat_Item::mutable_description() {
  // @@protoc_insertion_point(field_mutable:smart3dmap.v1.StdStrat.Item.description)
  return _internal_mutable_description();
}
inline const std::string& StdStrat_Item::_internal_description() const {
  return description_.Get();
}
inline void StdStrat_Item::_internal_set_description(const std::string& value) {
  
  description_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArena());
}
inline void StdStrat_Item::set_description(std::string&& value) {
  
  description_.Set(
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:smart3dmap.v1.StdStrat.Item.description)
}
inline void StdStrat_Item::set_description(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  description_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(value), GetArena());
  // @@protoc_insertion_point(field_set_char:smart3dmap.v1.StdStrat.Item.description)
}
inline void StdStrat_Item::set_description(const char* value,
    size_t size) {
  
  description_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:smart3dmap.v1.StdStrat.Item.description)
}
inline std::string* StdStrat_Item::_internal_mutable_description() {
  
  return description_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArena());
}
inline std::string* StdStrat_Item::release_description() {
  // @@protoc_insertion_point(field_release:smart3dmap.v1.StdStrat.Item.description)
  return description_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void StdStrat_Item::set_allocated_description(std::string* description) {
  if (description != nullptr) {
    
  } else {
    
  }
  description_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), description,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:smart3dmap.v1.StdStrat.Item.description)
}

// repeated .smart3dmap.v1.StdStrat.Item sub_items = 12;
inline int StdStrat_Item::_internal_sub_items_size() const {
  return sub_items_.size();
}
inline int StdStrat_Item::sub_items_size() const {
  return _internal_sub_items_size();
}
inline void StdStrat_Item::clear_sub_items() {
  sub_items_.Clear();
}
inline ::smart3dmap::v1::StdStrat_Item* StdStrat_Item::mutable_sub_items(int index) {
  // @@protoc_insertion_point(field_mutable:smart3dmap.v1.StdStrat.Item.sub_items)
  return sub_items_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::smart3dmap::v1::StdStrat_Item >*
StdStrat_Item::mutable_sub_items() {
  // @@protoc_insertion_point(field_mutable_list:smart3dmap.v1.StdStrat.Item.sub_items)
  return &sub_items_;
}
inline const ::smart3dmap::v1::StdStrat_Item& StdStrat_Item::_internal_sub_items(int index) const {
  return sub_items_.Get(index);
}
inline const ::smart3dmap::v1::StdStrat_Item& StdStrat_Item::sub_items(int index) const {
  // @@protoc_insertion_point(field_get:smart3dmap.v1.StdStrat.Item.sub_items)
  return _internal_sub_items(index);
}
inline ::smart3dmap::v1::StdStrat_Item* StdStrat_Item::_internal_add_sub_items() {
  return sub_items_.Add();
}
inline ::smart3dmap::v1::StdStrat_Item* StdStrat_Item::add_sub_items() {
  // @@protoc_insertion_point(field_add:smart3dmap.v1.StdStrat.Item.sub_items)
  return _internal_add_sub_items();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::smart3dmap::v1::StdStrat_Item >&
StdStrat_Item::sub_items() const {
  // @@protoc_insertion_point(field_list:smart3dmap.v1.StdStrat.Item.sub_items)
  return sub_items_;
}

// -------------------------------------------------------------------

// StdStrat

// int32 id = 1;
inline void StdStrat::clear_id() {
  id_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 StdStrat::_internal_id() const {
  return id_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 StdStrat::id() const {
  // @@protoc_insertion_point(field_get:smart3dmap.v1.StdStrat.id)
  return _internal_id();
}
inline void StdStrat::_internal_set_id(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  id_ = value;
}
inline void StdStrat::set_id(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_id(value);
  // @@protoc_insertion_point(field_set:smart3dmap.v1.StdStrat.id)
}

// string name = 2;
inline void StdStrat::clear_name() {
  name_.ClearToEmpty();
}
inline const std::string& StdStrat::name() const {
  // @@protoc_insertion_point(field_get:smart3dmap.v1.StdStrat.name)
  return _internal_name();
}
inline void StdStrat::set_name(const std::string& value) {
  _internal_set_name(value);
  // @@protoc_insertion_point(field_set:smart3dmap.v1.StdStrat.name)
}
inline std::string* StdStrat::mutable_name() {
  // @@protoc_insertion_point(field_mutable:smart3dmap.v1.StdStrat.name)
  return _internal_mutable_name();
}
inline const std::string& StdStrat::_internal_name() const {
  return name_.Get();
}
inline void StdStrat::_internal_set_name(const std::string& value) {
  
  name_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArena());
}
inline void StdStrat::set_name(std::string&& value) {
  
  name_.Set(
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:smart3dmap.v1.StdStrat.name)
}
inline void StdStrat::set_name(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  name_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(value), GetArena());
  // @@protoc_insertion_point(field_set_char:smart3dmap.v1.StdStrat.name)
}
inline void StdStrat::set_name(const char* value,
    size_t size) {
  
  name_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:smart3dmap.v1.StdStrat.name)
}
inline std::string* StdStrat::_internal_mutable_name() {
  
  return name_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArena());
}
inline std::string* StdStrat::release_name() {
  // @@protoc_insertion_point(field_release:smart3dmap.v1.StdStrat.name)
  return name_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void StdStrat::set_allocated_name(std::string* name) {
  if (name != nullptr) {
    
  } else {
    
  }
  name_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), name,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:smart3dmap.v1.StdStrat.name)
}

// string pro_name = 3;
inline void StdStrat::clear_pro_name() {
  pro_name_.ClearToEmpty();
}
inline const std::string& StdStrat::pro_name() const {
  // @@protoc_insertion_point(field_get:smart3dmap.v1.StdStrat.pro_name)
  return _internal_pro_name();
}
inline void StdStrat::set_pro_name(const std::string& value) {
  _internal_set_pro_name(value);
  // @@protoc_insertion_point(field_set:smart3dmap.v1.StdStrat.pro_name)
}
inline std::string* StdStrat::mutable_pro_name() {
  // @@protoc_insertion_point(field_mutable:smart3dmap.v1.StdStrat.pro_name)
  return _internal_mutable_pro_name();
}
inline const std::string& StdStrat::_internal_pro_name() const {
  return pro_name_.Get();
}
inline void StdStrat::_internal_set_pro_name(const std::string& value) {
  
  pro_name_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArena());
}
inline void StdStrat::set_pro_name(std::string&& value) {
  
  pro_name_.Set(
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:smart3dmap.v1.StdStrat.pro_name)
}
inline void StdStrat::set_pro_name(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  pro_name_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(value), GetArena());
  // @@protoc_insertion_point(field_set_char:smart3dmap.v1.StdStrat.pro_name)
}
inline void StdStrat::set_pro_name(const char* value,
    size_t size) {
  
  pro_name_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:smart3dmap.v1.StdStrat.pro_name)
}
inline std::string* StdStrat::_internal_mutable_pro_name() {
  
  return pro_name_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArena());
}
inline std::string* StdStrat::release_pro_name() {
  // @@protoc_insertion_point(field_release:smart3dmap.v1.StdStrat.pro_name)
  return pro_name_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void StdStrat::set_allocated_pro_name(std::string* pro_name) {
  if (pro_name != nullptr) {
    
  } else {
    
  }
  pro_name_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), pro_name,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:smart3dmap.v1.StdStrat.pro_name)
}

// string pro_code = 4;
inline void StdStrat::clear_pro_code() {
  pro_code_.ClearToEmpty();
}
inline const std::string& StdStrat::pro_code() const {
  // @@protoc_insertion_point(field_get:smart3dmap.v1.StdStrat.pro_code)
  return _internal_pro_code();
}
inline void StdStrat::set_pro_code(const std::string& value) {
  _internal_set_pro_code(value);
  // @@protoc_insertion_point(field_set:smart3dmap.v1.StdStrat.pro_code)
}
inline std::string* StdStrat::mutable_pro_code() {
  // @@protoc_insertion_point(field_mutable:smart3dmap.v1.StdStrat.pro_code)
  return _internal_mutable_pro_code();
}
inline const std::string& StdStrat::_internal_pro_code() const {
  return pro_code_.Get();
}
inline void StdStrat::_internal_set_pro_code(const std::string& value) {
  
  pro_code_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArena());
}
inline void StdStrat::set_pro_code(std::string&& value) {
  
  pro_code_.Set(
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:smart3dmap.v1.StdStrat.pro_code)
}
inline void StdStrat::set_pro_code(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  pro_code_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(value), GetArena());
  // @@protoc_insertion_point(field_set_char:smart3dmap.v1.StdStrat.pro_code)
}
inline void StdStrat::set_pro_code(const char* value,
    size_t size) {
  
  pro_code_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:smart3dmap.v1.StdStrat.pro_code)
}
inline std::string* StdStrat::_internal_mutable_pro_code() {
  
  return pro_code_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArena());
}
inline std::string* StdStrat::release_pro_code() {
  // @@protoc_insertion_point(field_release:smart3dmap.v1.StdStrat.pro_code)
  return pro_code_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void StdStrat::set_allocated_pro_code(std::string* pro_code) {
  if (pro_code != nullptr) {
    
  } else {
    
  }
  pro_code_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), pro_code,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:smart3dmap.v1.StdStrat.pro_code)
}

// string pro_type = 5;
inline void StdStrat::clear_pro_type() {
  pro_type_.ClearToEmpty();
}
inline const std::string& StdStrat::pro_type() const {
  // @@protoc_insertion_point(field_get:smart3dmap.v1.StdStrat.pro_type)
  return _internal_pro_type();
}
inline void StdStrat::set_pro_type(const std::string& value) {
  _internal_set_pro_type(value);
  // @@protoc_insertion_point(field_set:smart3dmap.v1.StdStrat.pro_type)
}
inline std::string* StdStrat::mutable_pro_type() {
  // @@protoc_insertion_point(field_mutable:smart3dmap.v1.StdStrat.pro_type)
  return _internal_mutable_pro_type();
}
inline const std::string& StdStrat::_internal_pro_type() const {
  return pro_type_.Get();
}
inline void StdStrat::_internal_set_pro_type(const std::string& value) {
  
  pro_type_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArena());
}
inline void StdStrat::set_pro_type(std::string&& value) {
  
  pro_type_.Set(
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:smart3dmap.v1.StdStrat.pro_type)
}
inline void StdStrat::set_pro_type(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  pro_type_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(value), GetArena());
  // @@protoc_insertion_point(field_set_char:smart3dmap.v1.StdStrat.pro_type)
}
inline void StdStrat::set_pro_type(const char* value,
    size_t size) {
  
  pro_type_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:smart3dmap.v1.StdStrat.pro_type)
}
inline std::string* StdStrat::_internal_mutable_pro_type() {
  
  return pro_type_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArena());
}
inline std::string* StdStrat::release_pro_type() {
  // @@protoc_insertion_point(field_release:smart3dmap.v1.StdStrat.pro_type)
  return pro_type_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void StdStrat::set_allocated_pro_type(std::string* pro_type) {
  if (pro_type != nullptr) {
    
  } else {
    
  }
  pro_type_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), pro_type,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:smart3dmap.v1.StdStrat.pro_type)
}

// string author = 6;
inline void StdStrat::clear_author() {
  author_.ClearToEmpty();
}
inline const std::string& StdStrat::author() const {
  // @@protoc_insertion_point(field_get:smart3dmap.v1.StdStrat.author)
  return _internal_author();
}
inline void StdStrat::set_author(const std::string& value) {
  _internal_set_author(value);
  // @@protoc_insertion_point(field_set:smart3dmap.v1.StdStrat.author)
}
inline std::string* StdStrat::mutable_author() {
  // @@protoc_insertion_point(field_mutable:smart3dmap.v1.StdStrat.author)
  return _internal_mutable_author();
}
inline const std::string& StdStrat::_internal_author() const {
  return author_.Get();
}
inline void StdStrat::_internal_set_author(const std::string& value) {
  
  author_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArena());
}
inline void StdStrat::set_author(std::string&& value) {
  
  author_.Set(
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:smart3dmap.v1.StdStrat.author)
}
inline void StdStrat::set_author(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  author_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(value), GetArena());
  // @@protoc_insertion_point(field_set_char:smart3dmap.v1.StdStrat.author)
}
inline void StdStrat::set_author(const char* value,
    size_t size) {
  
  author_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:smart3dmap.v1.StdStrat.author)
}
inline std::string* StdStrat::_internal_mutable_author() {
  
  return author_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArena());
}
inline std::string* StdStrat::release_author() {
  // @@protoc_insertion_point(field_release:smart3dmap.v1.StdStrat.author)
  return author_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void StdStrat::set_allocated_author(std::string* author) {
  if (author != nullptr) {
    
  } else {
    
  }
  author_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), author,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:smart3dmap.v1.StdStrat.author)
}

// repeated .smart3dmap.v1.StdStrat.Item items = 7;
inline int StdStrat::_internal_items_size() const {
  return items_.size();
}
inline int StdStrat::items_size() const {
  return _internal_items_size();
}
inline void StdStrat::clear_items() {
  items_.Clear();
}
inline ::smart3dmap::v1::StdStrat_Item* StdStrat::mutable_items(int index) {
  // @@protoc_insertion_point(field_mutable:smart3dmap.v1.StdStrat.items)
  return items_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::smart3dmap::v1::StdStrat_Item >*
StdStrat::mutable_items() {
  // @@protoc_insertion_point(field_mutable_list:smart3dmap.v1.StdStrat.items)
  return &items_;
}
inline const ::smart3dmap::v1::StdStrat_Item& StdStrat::_internal_items(int index) const {
  return items_.Get(index);
}
inline const ::smart3dmap::v1::StdStrat_Item& StdStrat::items(int index) const {
  // @@protoc_insertion_point(field_get:smart3dmap.v1.StdStrat.items)
  return _internal_items(index);
}
inline ::smart3dmap::v1::StdStrat_Item* StdStrat::_internal_add_items() {
  return items_.Add();
}
inline ::smart3dmap::v1::StdStrat_Item* StdStrat::add_items() {
  // @@protoc_insertion_point(field_add:smart3dmap.v1.StdStrat.items)
  return _internal_add_items();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::smart3dmap::v1::StdStrat_Item >&
StdStrat::items() const {
  // @@protoc_insertion_point(field_list:smart3dmap.v1.StdStrat.items)
  return items_;
}

// -------------------------------------------------------------------

// CreateStdStratRequest

// int32 db_id = 1;
inline void CreateStdStratRequest::clear_db_id() {
  db_id_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 CreateStdStratRequest::_internal_db_id() const {
  return db_id_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 CreateStdStratRequest::db_id() const {
  // @@protoc_insertion_point(field_get:smart3dmap.v1.CreateStdStratRequest.db_id)
  return _internal_db_id();
}
inline void CreateStdStratRequest::_internal_set_db_id(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  db_id_ = value;
}
inline void CreateStdStratRequest::set_db_id(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_db_id(value);
  // @@protoc_insertion_point(field_set:smart3dmap.v1.CreateStdStratRequest.db_id)
}

// string name = 2;
inline void CreateStdStratRequest::clear_name() {
  name_.ClearToEmpty();
}
inline const std::string& CreateStdStratRequest::name() const {
  // @@protoc_insertion_point(field_get:smart3dmap.v1.CreateStdStratRequest.name)
  return _internal_name();
}
inline void CreateStdStratRequest::set_name(const std::string& value) {
  _internal_set_name(value);
  // @@protoc_insertion_point(field_set:smart3dmap.v1.CreateStdStratRequest.name)
}
inline std::string* CreateStdStratRequest::mutable_name() {
  // @@protoc_insertion_point(field_mutable:smart3dmap.v1.CreateStdStratRequest.name)
  return _internal_mutable_name();
}
inline const std::string& CreateStdStratRequest::_internal_name() const {
  return name_.Get();
}
inline void CreateStdStratRequest::_internal_set_name(const std::string& value) {
  
  name_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArena());
}
inline void CreateStdStratRequest::set_name(std::string&& value) {
  
  name_.Set(
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:smart3dmap.v1.CreateStdStratRequest.name)
}
inline void CreateStdStratRequest::set_name(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  name_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(value), GetArena());
  // @@protoc_insertion_point(field_set_char:smart3dmap.v1.CreateStdStratRequest.name)
}
inline void CreateStdStratRequest::set_name(const char* value,
    size_t size) {
  
  name_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:smart3dmap.v1.CreateStdStratRequest.name)
}
inline std::string* CreateStdStratRequest::_internal_mutable_name() {
  
  return name_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArena());
}
inline std::string* CreateStdStratRequest::release_name() {
  // @@protoc_insertion_point(field_release:smart3dmap.v1.CreateStdStratRequest.name)
  return name_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void CreateStdStratRequest::set_allocated_name(std::string* name) {
  if (name != nullptr) {
    
  } else {
    
  }
  name_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), name,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:smart3dmap.v1.CreateStdStratRequest.name)
}

// string pro_name = 3;
inline void CreateStdStratRequest::clear_pro_name() {
  pro_name_.ClearToEmpty();
}
inline const std::string& CreateStdStratRequest::pro_name() const {
  // @@protoc_insertion_point(field_get:smart3dmap.v1.CreateStdStratRequest.pro_name)
  return _internal_pro_name();
}
inline void CreateStdStratRequest::set_pro_name(const std::string& value) {
  _internal_set_pro_name(value);
  // @@protoc_insertion_point(field_set:smart3dmap.v1.CreateStdStratRequest.pro_name)
}
inline std::string* CreateStdStratRequest::mutable_pro_name() {
  // @@protoc_insertion_point(field_mutable:smart3dmap.v1.CreateStdStratRequest.pro_name)
  return _internal_mutable_pro_name();
}
inline const std::string& CreateStdStratRequest::_internal_pro_name() const {
  return pro_name_.Get();
}
inline void CreateStdStratRequest::_internal_set_pro_name(const std::string& value) {
  
  pro_name_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArena());
}
inline void CreateStdStratRequest::set_pro_name(std::string&& value) {
  
  pro_name_.Set(
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:smart3dmap.v1.CreateStdStratRequest.pro_name)
}
inline void CreateStdStratRequest::set_pro_name(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  pro_name_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(value), GetArena());
  // @@protoc_insertion_point(field_set_char:smart3dmap.v1.CreateStdStratRequest.pro_name)
}
inline void CreateStdStratRequest::set_pro_name(const char* value,
    size_t size) {
  
  pro_name_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:smart3dmap.v1.CreateStdStratRequest.pro_name)
}
inline std::string* CreateStdStratRequest::_internal_mutable_pro_name() {
  
  return pro_name_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArena());
}
inline std::string* CreateStdStratRequest::release_pro_name() {
  // @@protoc_insertion_point(field_release:smart3dmap.v1.CreateStdStratRequest.pro_name)
  return pro_name_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void CreateStdStratRequest::set_allocated_pro_name(std::string* pro_name) {
  if (pro_name != nullptr) {
    
  } else {
    
  }
  pro_name_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), pro_name,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:smart3dmap.v1.CreateStdStratRequest.pro_name)
}

// string pro_code = 4;
inline void CreateStdStratRequest::clear_pro_code() {
  pro_code_.ClearToEmpty();
}
inline const std::string& CreateStdStratRequest::pro_code() const {
  // @@protoc_insertion_point(field_get:smart3dmap.v1.CreateStdStratRequest.pro_code)
  return _internal_pro_code();
}
inline void CreateStdStratRequest::set_pro_code(const std::string& value) {
  _internal_set_pro_code(value);
  // @@protoc_insertion_point(field_set:smart3dmap.v1.CreateStdStratRequest.pro_code)
}
inline std::string* CreateStdStratRequest::mutable_pro_code() {
  // @@protoc_insertion_point(field_mutable:smart3dmap.v1.CreateStdStratRequest.pro_code)
  return _internal_mutable_pro_code();
}
inline const std::string& CreateStdStratRequest::_internal_pro_code() const {
  return pro_code_.Get();
}
inline void CreateStdStratRequest::_internal_set_pro_code(const std::string& value) {
  
  pro_code_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArena());
}
inline void CreateStdStratRequest::set_pro_code(std::string&& value) {
  
  pro_code_.Set(
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:smart3dmap.v1.CreateStdStratRequest.pro_code)
}
inline void CreateStdStratRequest::set_pro_code(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  pro_code_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(value), GetArena());
  // @@protoc_insertion_point(field_set_char:smart3dmap.v1.CreateStdStratRequest.pro_code)
}
inline void CreateStdStratRequest::set_pro_code(const char* value,
    size_t size) {
  
  pro_code_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:smart3dmap.v1.CreateStdStratRequest.pro_code)
}
inline std::string* CreateStdStratRequest::_internal_mutable_pro_code() {
  
  return pro_code_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArena());
}
inline std::string* CreateStdStratRequest::release_pro_code() {
  // @@protoc_insertion_point(field_release:smart3dmap.v1.CreateStdStratRequest.pro_code)
  return pro_code_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void CreateStdStratRequest::set_allocated_pro_code(std::string* pro_code) {
  if (pro_code != nullptr) {
    
  } else {
    
  }
  pro_code_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), pro_code,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:smart3dmap.v1.CreateStdStratRequest.pro_code)
}

// .google.protobuf.StringValue pro_type = 5;
inline bool CreateStdStratRequest::_internal_has_pro_type() const {
  return this != internal_default_instance() && pro_type_ != nullptr;
}
inline bool CreateStdStratRequest::has_pro_type() const {
  return _internal_has_pro_type();
}
inline const PROTOBUF_NAMESPACE_ID::StringValue& CreateStdStratRequest::_internal_pro_type() const {
  const PROTOBUF_NAMESPACE_ID::StringValue* p = pro_type_;
  return p != nullptr ? *p : reinterpret_cast<const PROTOBUF_NAMESPACE_ID::StringValue&>(
      PROTOBUF_NAMESPACE_ID::_StringValue_default_instance_);
}
inline const PROTOBUF_NAMESPACE_ID::StringValue& CreateStdStratRequest::pro_type() const {
  // @@protoc_insertion_point(field_get:smart3dmap.v1.CreateStdStratRequest.pro_type)
  return _internal_pro_type();
}
inline void CreateStdStratRequest::unsafe_arena_set_allocated_pro_type(
    PROTOBUF_NAMESPACE_ID::StringValue* pro_type) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(pro_type_);
  }
  pro_type_ = pro_type;
  if (pro_type) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:smart3dmap.v1.CreateStdStratRequest.pro_type)
}
inline PROTOBUF_NAMESPACE_ID::StringValue* CreateStdStratRequest::release_pro_type() {
  
  PROTOBUF_NAMESPACE_ID::StringValue* temp = pro_type_;
  pro_type_ = nullptr;
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline PROTOBUF_NAMESPACE_ID::StringValue* CreateStdStratRequest::unsafe_arena_release_pro_type() {
  // @@protoc_insertion_point(field_release:smart3dmap.v1.CreateStdStratRequest.pro_type)
  
  PROTOBUF_NAMESPACE_ID::StringValue* temp = pro_type_;
  pro_type_ = nullptr;
  return temp;
}
inline PROTOBUF_NAMESPACE_ID::StringValue* CreateStdStratRequest::_internal_mutable_pro_type() {
  
  if (pro_type_ == nullptr) {
    auto* p = CreateMaybeMessage<PROTOBUF_NAMESPACE_ID::StringValue>(GetArena());
    pro_type_ = p;
  }
  return pro_type_;
}
inline PROTOBUF_NAMESPACE_ID::StringValue* CreateStdStratRequest::mutable_pro_type() {
  // @@protoc_insertion_point(field_mutable:smart3dmap.v1.CreateStdStratRequest.pro_type)
  return _internal_mutable_pro_type();
}
inline void CreateStdStratRequest::set_allocated_pro_type(PROTOBUF_NAMESPACE_ID::StringValue* pro_type) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(pro_type_);
  }
  if (pro_type) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(pro_type)->GetArena();
    if (message_arena != submessage_arena) {
      pro_type = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, pro_type, submessage_arena);
    }
    
  } else {
    
  }
  pro_type_ = pro_type;
  // @@protoc_insertion_point(field_set_allocated:smart3dmap.v1.CreateStdStratRequest.pro_type)
}

// .google.protobuf.StringValue author = 6;
inline bool CreateStdStratRequest::_internal_has_author() const {
  return this != internal_default_instance() && author_ != nullptr;
}
inline bool CreateStdStratRequest::has_author() const {
  return _internal_has_author();
}
inline const PROTOBUF_NAMESPACE_ID::StringValue& CreateStdStratRequest::_internal_author() const {
  const PROTOBUF_NAMESPACE_ID::StringValue* p = author_;
  return p != nullptr ? *p : reinterpret_cast<const PROTOBUF_NAMESPACE_ID::StringValue&>(
      PROTOBUF_NAMESPACE_ID::_StringValue_default_instance_);
}
inline const PROTOBUF_NAMESPACE_ID::StringValue& CreateStdStratRequest::author() const {
  // @@protoc_insertion_point(field_get:smart3dmap.v1.CreateStdStratRequest.author)
  return _internal_author();
}
inline void CreateStdStratRequest::unsafe_arena_set_allocated_author(
    PROTOBUF_NAMESPACE_ID::StringValue* author) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(author_);
  }
  author_ = author;
  if (author) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:smart3dmap.v1.CreateStdStratRequest.author)
}
inline PROTOBUF_NAMESPACE_ID::StringValue* CreateStdStratRequest::release_author() {
  
  PROTOBUF_NAMESPACE_ID::StringValue* temp = author_;
  author_ = nullptr;
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline PROTOBUF_NAMESPACE_ID::StringValue* CreateStdStratRequest::unsafe_arena_release_author() {
  // @@protoc_insertion_point(field_release:smart3dmap.v1.CreateStdStratRequest.author)
  
  PROTOBUF_NAMESPACE_ID::StringValue* temp = author_;
  author_ = nullptr;
  return temp;
}
inline PROTOBUF_NAMESPACE_ID::StringValue* CreateStdStratRequest::_internal_mutable_author() {
  
  if (author_ == nullptr) {
    auto* p = CreateMaybeMessage<PROTOBUF_NAMESPACE_ID::StringValue>(GetArena());
    author_ = p;
  }
  return author_;
}
inline PROTOBUF_NAMESPACE_ID::StringValue* CreateStdStratRequest::mutable_author() {
  // @@protoc_insertion_point(field_mutable:smart3dmap.v1.CreateStdStratRequest.author)
  return _internal_mutable_author();
}
inline void CreateStdStratRequest::set_allocated_author(PROTOBUF_NAMESPACE_ID::StringValue* author) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(author_);
  }
  if (author) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(author)->GetArena();
    if (message_arena != submessage_arena) {
      author = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, author, submessage_arena);
    }
    
  } else {
    
  }
  author_ = author;
  // @@protoc_insertion_point(field_set_allocated:smart3dmap.v1.CreateStdStratRequest.author)
}

// -------------------------------------------------------------------

// ListStdStratsRequest

// .smart3dmap.v1.Pagination pagination = 1;
inline bool ListStdStratsRequest::_internal_has_pagination() const {
  return this != internal_default_instance() && pagination_ != nullptr;
}
inline bool ListStdStratsRequest::has_pagination() const {
  return _internal_has_pagination();
}
inline const ::smart3dmap::v1::Pagination& ListStdStratsRequest::_internal_pagination() const {
  const ::smart3dmap::v1::Pagination* p = pagination_;
  return p != nullptr ? *p : reinterpret_cast<const ::smart3dmap::v1::Pagination&>(
      ::smart3dmap::v1::_Pagination_default_instance_);
}
inline const ::smart3dmap::v1::Pagination& ListStdStratsRequest::pagination() const {
  // @@protoc_insertion_point(field_get:smart3dmap.v1.ListStdStratsRequest.pagination)
  return _internal_pagination();
}
inline void ListStdStratsRequest::unsafe_arena_set_allocated_pagination(
    ::smart3dmap::v1::Pagination* pagination) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(pagination_);
  }
  pagination_ = pagination;
  if (pagination) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:smart3dmap.v1.ListStdStratsRequest.pagination)
}
inline ::smart3dmap::v1::Pagination* ListStdStratsRequest::release_pagination() {
  
  ::smart3dmap::v1::Pagination* temp = pagination_;
  pagination_ = nullptr;
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::smart3dmap::v1::Pagination* ListStdStratsRequest::unsafe_arena_release_pagination() {
  // @@protoc_insertion_point(field_release:smart3dmap.v1.ListStdStratsRequest.pagination)
  
  ::smart3dmap::v1::Pagination* temp = pagination_;
  pagination_ = nullptr;
  return temp;
}
inline ::smart3dmap::v1::Pagination* ListStdStratsRequest::_internal_mutable_pagination() {
  
  if (pagination_ == nullptr) {
    auto* p = CreateMaybeMessage<::smart3dmap::v1::Pagination>(GetArena());
    pagination_ = p;
  }
  return pagination_;
}
inline ::smart3dmap::v1::Pagination* ListStdStratsRequest::mutable_pagination() {
  // @@protoc_insertion_point(field_mutable:smart3dmap.v1.ListStdStratsRequest.pagination)
  return _internal_mutable_pagination();
}
inline void ListStdStratsRequest::set_allocated_pagination(::smart3dmap::v1::Pagination* pagination) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(pagination_);
  }
  if (pagination) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(pagination)->GetArena();
    if (message_arena != submessage_arena) {
      pagination = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, pagination, submessage_arena);
    }
    
  } else {
    
  }
  pagination_ = pagination;
  // @@protoc_insertion_point(field_set_allocated:smart3dmap.v1.ListStdStratsRequest.pagination)
}

// int32 db_id = 2;
inline void ListStdStratsRequest::clear_db_id() {
  db_id_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 ListStdStratsRequest::_internal_db_id() const {
  return db_id_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 ListStdStratsRequest::db_id() const {
  // @@protoc_insertion_point(field_get:smart3dmap.v1.ListStdStratsRequest.db_id)
  return _internal_db_id();
}
inline void ListStdStratsRequest::_internal_set_db_id(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  db_id_ = value;
}
inline void ListStdStratsRequest::set_db_id(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_db_id(value);
  // @@protoc_insertion_point(field_set:smart3dmap.v1.ListStdStratsRequest.db_id)
}

// string name = 3;
inline void ListStdStratsRequest::clear_name() {
  name_.ClearToEmpty();
}
inline const std::string& ListStdStratsRequest::name() const {
  // @@protoc_insertion_point(field_get:smart3dmap.v1.ListStdStratsRequest.name)
  return _internal_name();
}
inline void ListStdStratsRequest::set_name(const std::string& value) {
  _internal_set_name(value);
  // @@protoc_insertion_point(field_set:smart3dmap.v1.ListStdStratsRequest.name)
}
inline std::string* ListStdStratsRequest::mutable_name() {
  // @@protoc_insertion_point(field_mutable:smart3dmap.v1.ListStdStratsRequest.name)
  return _internal_mutable_name();
}
inline const std::string& ListStdStratsRequest::_internal_name() const {
  return name_.Get();
}
inline void ListStdStratsRequest::_internal_set_name(const std::string& value) {
  
  name_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArena());
}
inline void ListStdStratsRequest::set_name(std::string&& value) {
  
  name_.Set(
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:smart3dmap.v1.ListStdStratsRequest.name)
}
inline void ListStdStratsRequest::set_name(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  name_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(value), GetArena());
  // @@protoc_insertion_point(field_set_char:smart3dmap.v1.ListStdStratsRequest.name)
}
inline void ListStdStratsRequest::set_name(const char* value,
    size_t size) {
  
  name_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:smart3dmap.v1.ListStdStratsRequest.name)
}
inline std::string* ListStdStratsRequest::_internal_mutable_name() {
  
  return name_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArena());
}
inline std::string* ListStdStratsRequest::release_name() {
  // @@protoc_insertion_point(field_release:smart3dmap.v1.ListStdStratsRequest.name)
  return name_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void ListStdStratsRequest::set_allocated_name(std::string* name) {
  if (name != nullptr) {
    
  } else {
    
  }
  name_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), name,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:smart3dmap.v1.ListStdStratsRequest.name)
}

// -------------------------------------------------------------------

// ListStdStratsResponse

// int32 total_count = 1;
inline void ListStdStratsResponse::clear_total_count() {
  total_count_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 ListStdStratsResponse::_internal_total_count() const {
  return total_count_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 ListStdStratsResponse::total_count() const {
  // @@protoc_insertion_point(field_get:smart3dmap.v1.ListStdStratsResponse.total_count)
  return _internal_total_count();
}
inline void ListStdStratsResponse::_internal_set_total_count(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  total_count_ = value;
}
inline void ListStdStratsResponse::set_total_count(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_total_count(value);
  // @@protoc_insertion_point(field_set:smart3dmap.v1.ListStdStratsResponse.total_count)
}

// repeated .smart3dmap.v1.StdStrat strats = 2;
inline int ListStdStratsResponse::_internal_strats_size() const {
  return strats_.size();
}
inline int ListStdStratsResponse::strats_size() const {
  return _internal_strats_size();
}
inline void ListStdStratsResponse::clear_strats() {
  strats_.Clear();
}
inline ::smart3dmap::v1::StdStrat* ListStdStratsResponse::mutable_strats(int index) {
  // @@protoc_insertion_point(field_mutable:smart3dmap.v1.ListStdStratsResponse.strats)
  return strats_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::smart3dmap::v1::StdStrat >*
ListStdStratsResponse::mutable_strats() {
  // @@protoc_insertion_point(field_mutable_list:smart3dmap.v1.ListStdStratsResponse.strats)
  return &strats_;
}
inline const ::smart3dmap::v1::StdStrat& ListStdStratsResponse::_internal_strats(int index) const {
  return strats_.Get(index);
}
inline const ::smart3dmap::v1::StdStrat& ListStdStratsResponse::strats(int index) const {
  // @@protoc_insertion_point(field_get:smart3dmap.v1.ListStdStratsResponse.strats)
  return _internal_strats(index);
}
inline ::smart3dmap::v1::StdStrat* ListStdStratsResponse::_internal_add_strats() {
  return strats_.Add();
}
inline ::smart3dmap::v1::StdStrat* ListStdStratsResponse::add_strats() {
  // @@protoc_insertion_point(field_add:smart3dmap.v1.ListStdStratsResponse.strats)
  return _internal_add_strats();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::smart3dmap::v1::StdStrat >&
ListStdStratsResponse::strats() const {
  // @@protoc_insertion_point(field_list:smart3dmap.v1.ListStdStratsResponse.strats)
  return strats_;
}

// -------------------------------------------------------------------

// GetStdStratRequest

// int32 db_id = 1;
inline void GetStdStratRequest::clear_db_id() {
  db_id_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 GetStdStratRequest::_internal_db_id() const {
  return db_id_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 GetStdStratRequest::db_id() const {
  // @@protoc_insertion_point(field_get:smart3dmap.v1.GetStdStratRequest.db_id)
  return _internal_db_id();
}
inline void GetStdStratRequest::_internal_set_db_id(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  db_id_ = value;
}
inline void GetStdStratRequest::set_db_id(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_db_id(value);
  // @@protoc_insertion_point(field_set:smart3dmap.v1.GetStdStratRequest.db_id)
}

// int32 id = 2;
inline void GetStdStratRequest::clear_id() {
  id_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 GetStdStratRequest::_internal_id() const {
  return id_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 GetStdStratRequest::id() const {
  // @@protoc_insertion_point(field_get:smart3dmap.v1.GetStdStratRequest.id)
  return _internal_id();
}
inline void GetStdStratRequest::_internal_set_id(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  id_ = value;
}
inline void GetStdStratRequest::set_id(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_id(value);
  // @@protoc_insertion_point(field_set:smart3dmap.v1.GetStdStratRequest.id)
}

// -------------------------------------------------------------------

// UpdateStdStratRequest

// int32 db_id = 1;
inline void UpdateStdStratRequest::clear_db_id() {
  db_id_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 UpdateStdStratRequest::_internal_db_id() const {
  return db_id_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 UpdateStdStratRequest::db_id() const {
  // @@protoc_insertion_point(field_get:smart3dmap.v1.UpdateStdStratRequest.db_id)
  return _internal_db_id();
}
inline void UpdateStdStratRequest::_internal_set_db_id(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  db_id_ = value;
}
inline void UpdateStdStratRequest::set_db_id(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_db_id(value);
  // @@protoc_insertion_point(field_set:smart3dmap.v1.UpdateStdStratRequest.db_id)
}

// int32 id = 2;
inline void UpdateStdStratRequest::clear_id() {
  id_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 UpdateStdStratRequest::_internal_id() const {
  return id_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 UpdateStdStratRequest::id() const {
  // @@protoc_insertion_point(field_get:smart3dmap.v1.UpdateStdStratRequest.id)
  return _internal_id();
}
inline void UpdateStdStratRequest::_internal_set_id(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  id_ = value;
}
inline void UpdateStdStratRequest::set_id(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_id(value);
  // @@protoc_insertion_point(field_set:smart3dmap.v1.UpdateStdStratRequest.id)
}

// .google.protobuf.StringValue name = 3;
inline bool UpdateStdStratRequest::_internal_has_name() const {
  return this != internal_default_instance() && name_ != nullptr;
}
inline bool UpdateStdStratRequest::has_name() const {
  return _internal_has_name();
}
inline const PROTOBUF_NAMESPACE_ID::StringValue& UpdateStdStratRequest::_internal_name() const {
  const PROTOBUF_NAMESPACE_ID::StringValue* p = name_;
  return p != nullptr ? *p : reinterpret_cast<const PROTOBUF_NAMESPACE_ID::StringValue&>(
      PROTOBUF_NAMESPACE_ID::_StringValue_default_instance_);
}
inline const PROTOBUF_NAMESPACE_ID::StringValue& UpdateStdStratRequest::name() const {
  // @@protoc_insertion_point(field_get:smart3dmap.v1.UpdateStdStratRequest.name)
  return _internal_name();
}
inline void UpdateStdStratRequest::unsafe_arena_set_allocated_name(
    PROTOBUF_NAMESPACE_ID::StringValue* name) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(name_);
  }
  name_ = name;
  if (name) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:smart3dmap.v1.UpdateStdStratRequest.name)
}
inline PROTOBUF_NAMESPACE_ID::StringValue* UpdateStdStratRequest::release_name() {
  
  PROTOBUF_NAMESPACE_ID::StringValue* temp = name_;
  name_ = nullptr;
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline PROTOBUF_NAMESPACE_ID::StringValue* UpdateStdStratRequest::unsafe_arena_release_name() {
  // @@protoc_insertion_point(field_release:smart3dmap.v1.UpdateStdStratRequest.name)
  
  PROTOBUF_NAMESPACE_ID::StringValue* temp = name_;
  name_ = nullptr;
  return temp;
}
inline PROTOBUF_NAMESPACE_ID::StringValue* UpdateStdStratRequest::_internal_mutable_name() {
  
  if (name_ == nullptr) {
    auto* p = CreateMaybeMessage<PROTOBUF_NAMESPACE_ID::StringValue>(GetArena());
    name_ = p;
  }
  return name_;
}
inline PROTOBUF_NAMESPACE_ID::StringValue* UpdateStdStratRequest::mutable_name() {
  // @@protoc_insertion_point(field_mutable:smart3dmap.v1.UpdateStdStratRequest.name)
  return _internal_mutable_name();
}
inline void UpdateStdStratRequest::set_allocated_name(PROTOBUF_NAMESPACE_ID::StringValue* name) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(name_);
  }
  if (name) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(name)->GetArena();
    if (message_arena != submessage_arena) {
      name = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, name, submessage_arena);
    }
    
  } else {
    
  }
  name_ = name;
  // @@protoc_insertion_point(field_set_allocated:smart3dmap.v1.UpdateStdStratRequest.name)
}

// .google.protobuf.StringValue pro_name = 4;
inline bool UpdateStdStratRequest::_internal_has_pro_name() const {
  return this != internal_default_instance() && pro_name_ != nullptr;
}
inline bool UpdateStdStratRequest::has_pro_name() const {
  return _internal_has_pro_name();
}
inline const PROTOBUF_NAMESPACE_ID::StringValue& UpdateStdStratRequest::_internal_pro_name() const {
  const PROTOBUF_NAMESPACE_ID::StringValue* p = pro_name_;
  return p != nullptr ? *p : reinterpret_cast<const PROTOBUF_NAMESPACE_ID::StringValue&>(
      PROTOBUF_NAMESPACE_ID::_StringValue_default_instance_);
}
inline const PROTOBUF_NAMESPACE_ID::StringValue& UpdateStdStratRequest::pro_name() const {
  // @@protoc_insertion_point(field_get:smart3dmap.v1.UpdateStdStratRequest.pro_name)
  return _internal_pro_name();
}
inline void UpdateStdStratRequest::unsafe_arena_set_allocated_pro_name(
    PROTOBUF_NAMESPACE_ID::StringValue* pro_name) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(pro_name_);
  }
  pro_name_ = pro_name;
  if (pro_name) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:smart3dmap.v1.UpdateStdStratRequest.pro_name)
}
inline PROTOBUF_NAMESPACE_ID::StringValue* UpdateStdStratRequest::release_pro_name() {
  
  PROTOBUF_NAMESPACE_ID::StringValue* temp = pro_name_;
  pro_name_ = nullptr;
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline PROTOBUF_NAMESPACE_ID::StringValue* UpdateStdStratRequest::unsafe_arena_release_pro_name() {
  // @@protoc_insertion_point(field_release:smart3dmap.v1.UpdateStdStratRequest.pro_name)
  
  PROTOBUF_NAMESPACE_ID::StringValue* temp = pro_name_;
  pro_name_ = nullptr;
  return temp;
}
inline PROTOBUF_NAMESPACE_ID::StringValue* UpdateStdStratRequest::_internal_mutable_pro_name() {
  
  if (pro_name_ == nullptr) {
    auto* p = CreateMaybeMessage<PROTOBUF_NAMESPACE_ID::StringValue>(GetArena());
    pro_name_ = p;
  }
  return pro_name_;
}
inline PROTOBUF_NAMESPACE_ID::StringValue* UpdateStdStratRequest::mutable_pro_name() {
  // @@protoc_insertion_point(field_mutable:smart3dmap.v1.UpdateStdStratRequest.pro_name)
  return _internal_mutable_pro_name();
}
inline void UpdateStdStratRequest::set_allocated_pro_name(PROTOBUF_NAMESPACE_ID::StringValue* pro_name) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(pro_name_);
  }
  if (pro_name) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(pro_name)->GetArena();
    if (message_arena != submessage_arena) {
      pro_name = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, pro_name, submessage_arena);
    }
    
  } else {
    
  }
  pro_name_ = pro_name;
  // @@protoc_insertion_point(field_set_allocated:smart3dmap.v1.UpdateStdStratRequest.pro_name)
}

// .google.protobuf.StringValue pro_code = 5;
inline bool UpdateStdStratRequest::_internal_has_pro_code() const {
  return this != internal_default_instance() && pro_code_ != nullptr;
}
inline bool UpdateStdStratRequest::has_pro_code() const {
  return _internal_has_pro_code();
}
inline const PROTOBUF_NAMESPACE_ID::StringValue& UpdateStdStratRequest::_internal_pro_code() const {
  const PROTOBUF_NAMESPACE_ID::StringValue* p = pro_code_;
  return p != nullptr ? *p : reinterpret_cast<const PROTOBUF_NAMESPACE_ID::StringValue&>(
      PROTOBUF_NAMESPACE_ID::_StringValue_default_instance_);
}
inline const PROTOBUF_NAMESPACE_ID::StringValue& UpdateStdStratRequest::pro_code() const {
  // @@protoc_insertion_point(field_get:smart3dmap.v1.UpdateStdStratRequest.pro_code)
  return _internal_pro_code();
}
inline void UpdateStdStratRequest::unsafe_arena_set_allocated_pro_code(
    PROTOBUF_NAMESPACE_ID::StringValue* pro_code) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(pro_code_);
  }
  pro_code_ = pro_code;
  if (pro_code) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:smart3dmap.v1.UpdateStdStratRequest.pro_code)
}
inline PROTOBUF_NAMESPACE_ID::StringValue* UpdateStdStratRequest::release_pro_code() {
  
  PROTOBUF_NAMESPACE_ID::StringValue* temp = pro_code_;
  pro_code_ = nullptr;
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline PROTOBUF_NAMESPACE_ID::StringValue* UpdateStdStratRequest::unsafe_arena_release_pro_code() {
  // @@protoc_insertion_point(field_release:smart3dmap.v1.UpdateStdStratRequest.pro_code)
  
  PROTOBUF_NAMESPACE_ID::StringValue* temp = pro_code_;
  pro_code_ = nullptr;
  return temp;
}
inline PROTOBUF_NAMESPACE_ID::StringValue* UpdateStdStratRequest::_internal_mutable_pro_code() {
  
  if (pro_code_ == nullptr) {
    auto* p = CreateMaybeMessage<PROTOBUF_NAMESPACE_ID::StringValue>(GetArena());
    pro_code_ = p;
  }
  return pro_code_;
}
inline PROTOBUF_NAMESPACE_ID::StringValue* UpdateStdStratRequest::mutable_pro_code() {
  // @@protoc_insertion_point(field_mutable:smart3dmap.v1.UpdateStdStratRequest.pro_code)
  return _internal_mutable_pro_code();
}
inline void UpdateStdStratRequest::set_allocated_pro_code(PROTOBUF_NAMESPACE_ID::StringValue* pro_code) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(pro_code_);
  }
  if (pro_code) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(pro_code)->GetArena();
    if (message_arena != submessage_arena) {
      pro_code = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, pro_code, submessage_arena);
    }
    
  } else {
    
  }
  pro_code_ = pro_code;
  // @@protoc_insertion_point(field_set_allocated:smart3dmap.v1.UpdateStdStratRequest.pro_code)
}

// .google.protobuf.StringValue pro_type = 6;
inline bool UpdateStdStratRequest::_internal_has_pro_type() const {
  return this != internal_default_instance() && pro_type_ != nullptr;
}
inline bool UpdateStdStratRequest::has_pro_type() const {
  return _internal_has_pro_type();
}
inline const PROTOBUF_NAMESPACE_ID::StringValue& UpdateStdStratRequest::_internal_pro_type() const {
  const PROTOBUF_NAMESPACE_ID::StringValue* p = pro_type_;
  return p != nullptr ? *p : reinterpret_cast<const PROTOBUF_NAMESPACE_ID::StringValue&>(
      PROTOBUF_NAMESPACE_ID::_StringValue_default_instance_);
}
inline const PROTOBUF_NAMESPACE_ID::StringValue& UpdateStdStratRequest::pro_type() const {
  // @@protoc_insertion_point(field_get:smart3dmap.v1.UpdateStdStratRequest.pro_type)
  return _internal_pro_type();
}
inline void UpdateStdStratRequest::unsafe_arena_set_allocated_pro_type(
    PROTOBUF_NAMESPACE_ID::StringValue* pro_type) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(pro_type_);
  }
  pro_type_ = pro_type;
  if (pro_type) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:smart3dmap.v1.UpdateStdStratRequest.pro_type)
}
inline PROTOBUF_NAMESPACE_ID::StringValue* UpdateStdStratRequest::release_pro_type() {
  
  PROTOBUF_NAMESPACE_ID::StringValue* temp = pro_type_;
  pro_type_ = nullptr;
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline PROTOBUF_NAMESPACE_ID::StringValue* UpdateStdStratRequest::unsafe_arena_release_pro_type() {
  // @@protoc_insertion_point(field_release:smart3dmap.v1.UpdateStdStratRequest.pro_type)
  
  PROTOBUF_NAMESPACE_ID::StringValue* temp = pro_type_;
  pro_type_ = nullptr;
  return temp;
}
inline PROTOBUF_NAMESPACE_ID::StringValue* UpdateStdStratRequest::_internal_mutable_pro_type() {
  
  if (pro_type_ == nullptr) {
    auto* p = CreateMaybeMessage<PROTOBUF_NAMESPACE_ID::StringValue>(GetArena());
    pro_type_ = p;
  }
  return pro_type_;
}
inline PROTOBUF_NAMESPACE_ID::StringValue* UpdateStdStratRequest::mutable_pro_type() {
  // @@protoc_insertion_point(field_mutable:smart3dmap.v1.UpdateStdStratRequest.pro_type)
  return _internal_mutable_pro_type();
}
inline void UpdateStdStratRequest::set_allocated_pro_type(PROTOBUF_NAMESPACE_ID::StringValue* pro_type) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(pro_type_);
  }
  if (pro_type) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(pro_type)->GetArena();
    if (message_arena != submessage_arena) {
      pro_type = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, pro_type, submessage_arena);
    }
    
  } else {
    
  }
  pro_type_ = pro_type;
  // @@protoc_insertion_point(field_set_allocated:smart3dmap.v1.UpdateStdStratRequest.pro_type)
}

// .google.protobuf.StringValue author = 7;
inline bool UpdateStdStratRequest::_internal_has_author() const {
  return this != internal_default_instance() && author_ != nullptr;
}
inline bool UpdateStdStratRequest::has_author() const {
  return _internal_has_author();
}
inline const PROTOBUF_NAMESPACE_ID::StringValue& UpdateStdStratRequest::_internal_author() const {
  const PROTOBUF_NAMESPACE_ID::StringValue* p = author_;
  return p != nullptr ? *p : reinterpret_cast<const PROTOBUF_NAMESPACE_ID::StringValue&>(
      PROTOBUF_NAMESPACE_ID::_StringValue_default_instance_);
}
inline const PROTOBUF_NAMESPACE_ID::StringValue& UpdateStdStratRequest::author() const {
  // @@protoc_insertion_point(field_get:smart3dmap.v1.UpdateStdStratRequest.author)
  return _internal_author();
}
inline void UpdateStdStratRequest::unsafe_arena_set_allocated_author(
    PROTOBUF_NAMESPACE_ID::StringValue* author) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(author_);
  }
  author_ = author;
  if (author) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:smart3dmap.v1.UpdateStdStratRequest.author)
}
inline PROTOBUF_NAMESPACE_ID::StringValue* UpdateStdStratRequest::release_author() {
  
  PROTOBUF_NAMESPACE_ID::StringValue* temp = author_;
  author_ = nullptr;
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline PROTOBUF_NAMESPACE_ID::StringValue* UpdateStdStratRequest::unsafe_arena_release_author() {
  // @@protoc_insertion_point(field_release:smart3dmap.v1.UpdateStdStratRequest.author)
  
  PROTOBUF_NAMESPACE_ID::StringValue* temp = author_;
  author_ = nullptr;
  return temp;
}
inline PROTOBUF_NAMESPACE_ID::StringValue* UpdateStdStratRequest::_internal_mutable_author() {
  
  if (author_ == nullptr) {
    auto* p = CreateMaybeMessage<PROTOBUF_NAMESPACE_ID::StringValue>(GetArena());
    author_ = p;
  }
  return author_;
}
inline PROTOBUF_NAMESPACE_ID::StringValue* UpdateStdStratRequest::mutable_author() {
  // @@protoc_insertion_point(field_mutable:smart3dmap.v1.UpdateStdStratRequest.author)
  return _internal_mutable_author();
}
inline void UpdateStdStratRequest::set_allocated_author(PROTOBUF_NAMESPACE_ID::StringValue* author) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(author_);
  }
  if (author) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(author)->GetArena();
    if (message_arena != submessage_arena) {
      author = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, author, submessage_arena);
    }
    
  } else {
    
  }
  author_ = author;
  // @@protoc_insertion_point(field_set_allocated:smart3dmap.v1.UpdateStdStratRequest.author)
}

// -------------------------------------------------------------------

// UpdateStdStratResponse

// bool status = 1;
inline void UpdateStdStratResponse::clear_status() {
  status_ = false;
}
inline bool UpdateStdStratResponse::_internal_status() const {
  return status_;
}
inline bool UpdateStdStratResponse::status() const {
  // @@protoc_insertion_point(field_get:smart3dmap.v1.UpdateStdStratResponse.status)
  return _internal_status();
}
inline void UpdateStdStratResponse::_internal_set_status(bool value) {
  
  status_ = value;
}
inline void UpdateStdStratResponse::set_status(bool value) {
  _internal_set_status(value);
  // @@protoc_insertion_point(field_set:smart3dmap.v1.UpdateStdStratResponse.status)
}

// string error = 2;
inline void UpdateStdStratResponse::clear_error() {
  error_.ClearToEmpty();
}
inline const std::string& UpdateStdStratResponse::error() const {
  // @@protoc_insertion_point(field_get:smart3dmap.v1.UpdateStdStratResponse.error)
  return _internal_error();
}
inline void UpdateStdStratResponse::set_error(const std::string& value) {
  _internal_set_error(value);
  // @@protoc_insertion_point(field_set:smart3dmap.v1.UpdateStdStratResponse.error)
}
inline std::string* UpdateStdStratResponse::mutable_error() {
  // @@protoc_insertion_point(field_mutable:smart3dmap.v1.UpdateStdStratResponse.error)
  return _internal_mutable_error();
}
inline const std::string& UpdateStdStratResponse::_internal_error() const {
  return error_.Get();
}
inline void UpdateStdStratResponse::_internal_set_error(const std::string& value) {
  
  error_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArena());
}
inline void UpdateStdStratResponse::set_error(std::string&& value) {
  
  error_.Set(
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:smart3dmap.v1.UpdateStdStratResponse.error)
}
inline void UpdateStdStratResponse::set_error(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  error_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(value), GetArena());
  // @@protoc_insertion_point(field_set_char:smart3dmap.v1.UpdateStdStratResponse.error)
}
inline void UpdateStdStratResponse::set_error(const char* value,
    size_t size) {
  
  error_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:smart3dmap.v1.UpdateStdStratResponse.error)
}
inline std::string* UpdateStdStratResponse::_internal_mutable_error() {
  
  return error_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArena());
}
inline std::string* UpdateStdStratResponse::release_error() {
  // @@protoc_insertion_point(field_release:smart3dmap.v1.UpdateStdStratResponse.error)
  return error_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void UpdateStdStratResponse::set_allocated_error(std::string* error) {
  if (error != nullptr) {
    
  } else {
    
  }
  error_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), error,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:smart3dmap.v1.UpdateStdStratResponse.error)
}

// -------------------------------------------------------------------

// ResetStdStratItemsRequest

// int32 db_id = 1;
inline void ResetStdStratItemsRequest::clear_db_id() {
  db_id_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 ResetStdStratItemsRequest::_internal_db_id() const {
  return db_id_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 ResetStdStratItemsRequest::db_id() const {
  // @@protoc_insertion_point(field_get:smart3dmap.v1.ResetStdStratItemsRequest.db_id)
  return _internal_db_id();
}
inline void ResetStdStratItemsRequest::_internal_set_db_id(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  db_id_ = value;
}
inline void ResetStdStratItemsRequest::set_db_id(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_db_id(value);
  // @@protoc_insertion_point(field_set:smart3dmap.v1.ResetStdStratItemsRequest.db_id)
}

// int32 id = 2;
inline void ResetStdStratItemsRequest::clear_id() {
  id_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 ResetStdStratItemsRequest::_internal_id() const {
  return id_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 ResetStdStratItemsRequest::id() const {
  // @@protoc_insertion_point(field_get:smart3dmap.v1.ResetStdStratItemsRequest.id)
  return _internal_id();
}
inline void ResetStdStratItemsRequest::_internal_set_id(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  id_ = value;
}
inline void ResetStdStratItemsRequest::set_id(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_id(value);
  // @@protoc_insertion_point(field_set:smart3dmap.v1.ResetStdStratItemsRequest.id)
}

// repeated .smart3dmap.v1.StdStrat.Item items = 3;
inline int ResetStdStratItemsRequest::_internal_items_size() const {
  return items_.size();
}
inline int ResetStdStratItemsRequest::items_size() const {
  return _internal_items_size();
}
inline void ResetStdStratItemsRequest::clear_items() {
  items_.Clear();
}
inline ::smart3dmap::v1::StdStrat_Item* ResetStdStratItemsRequest::mutable_items(int index) {
  // @@protoc_insertion_point(field_mutable:smart3dmap.v1.ResetStdStratItemsRequest.items)
  return items_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::smart3dmap::v1::StdStrat_Item >*
ResetStdStratItemsRequest::mutable_items() {
  // @@protoc_insertion_point(field_mutable_list:smart3dmap.v1.ResetStdStratItemsRequest.items)
  return &items_;
}
inline const ::smart3dmap::v1::StdStrat_Item& ResetStdStratItemsRequest::_internal_items(int index) const {
  return items_.Get(index);
}
inline const ::smart3dmap::v1::StdStrat_Item& ResetStdStratItemsRequest::items(int index) const {
  // @@protoc_insertion_point(field_get:smart3dmap.v1.ResetStdStratItemsRequest.items)
  return _internal_items(index);
}
inline ::smart3dmap::v1::StdStrat_Item* ResetStdStratItemsRequest::_internal_add_items() {
  return items_.Add();
}
inline ::smart3dmap::v1::StdStrat_Item* ResetStdStratItemsRequest::add_items() {
  // @@protoc_insertion_point(field_add:smart3dmap.v1.ResetStdStratItemsRequest.items)
  return _internal_add_items();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::smart3dmap::v1::StdStrat_Item >&
ResetStdStratItemsRequest::items() const {
  // @@protoc_insertion_point(field_list:smart3dmap.v1.ResetStdStratItemsRequest.items)
  return items_;
}

// -------------------------------------------------------------------

// ResetStdStratItemsResponse

// bool status = 1;
inline void ResetStdStratItemsResponse::clear_status() {
  status_ = false;
}
inline bool ResetStdStratItemsResponse::_internal_status() const {
  return status_;
}
inline bool ResetStdStratItemsResponse::status() const {
  // @@protoc_insertion_point(field_get:smart3dmap.v1.ResetStdStratItemsResponse.status)
  return _internal_status();
}
inline void ResetStdStratItemsResponse::_internal_set_status(bool value) {
  
  status_ = value;
}
inline void ResetStdStratItemsResponse::set_status(bool value) {
  _internal_set_status(value);
  // @@protoc_insertion_point(field_set:smart3dmap.v1.ResetStdStratItemsResponse.status)
}

// string error = 2;
inline void ResetStdStratItemsResponse::clear_error() {
  error_.ClearToEmpty();
}
inline const std::string& ResetStdStratItemsResponse::error() const {
  // @@protoc_insertion_point(field_get:smart3dmap.v1.ResetStdStratItemsResponse.error)
  return _internal_error();
}
inline void ResetStdStratItemsResponse::set_error(const std::string& value) {
  _internal_set_error(value);
  // @@protoc_insertion_point(field_set:smart3dmap.v1.ResetStdStratItemsResponse.error)
}
inline std::string* ResetStdStratItemsResponse::mutable_error() {
  // @@protoc_insertion_point(field_mutable:smart3dmap.v1.ResetStdStratItemsResponse.error)
  return _internal_mutable_error();
}
inline const std::string& ResetStdStratItemsResponse::_internal_error() const {
  return error_.Get();
}
inline void ResetStdStratItemsResponse::_internal_set_error(const std::string& value) {
  
  error_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArena());
}
inline void ResetStdStratItemsResponse::set_error(std::string&& value) {
  
  error_.Set(
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:smart3dmap.v1.ResetStdStratItemsResponse.error)
}
inline void ResetStdStratItemsResponse::set_error(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  error_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(value), GetArena());
  // @@protoc_insertion_point(field_set_char:smart3dmap.v1.ResetStdStratItemsResponse.error)
}
inline void ResetStdStratItemsResponse::set_error(const char* value,
    size_t size) {
  
  error_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:smart3dmap.v1.ResetStdStratItemsResponse.error)
}
inline std::string* ResetStdStratItemsResponse::_internal_mutable_error() {
  
  return error_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArena());
}
inline std::string* ResetStdStratItemsResponse::release_error() {
  // @@protoc_insertion_point(field_release:smart3dmap.v1.ResetStdStratItemsResponse.error)
  return error_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void ResetStdStratItemsResponse::set_allocated_error(std::string* error) {
  if (error != nullptr) {
    
  } else {
    
  }
  error_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), error,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:smart3dmap.v1.ResetStdStratItemsResponse.error)
}

// -------------------------------------------------------------------

// DeleteStdStratRequest

// int32 db_id = 1;
inline void DeleteStdStratRequest::clear_db_id() {
  db_id_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 DeleteStdStratRequest::_internal_db_id() const {
  return db_id_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 DeleteStdStratRequest::db_id() const {
  // @@protoc_insertion_point(field_get:smart3dmap.v1.DeleteStdStratRequest.db_id)
  return _internal_db_id();
}
inline void DeleteStdStratRequest::_internal_set_db_id(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  db_id_ = value;
}
inline void DeleteStdStratRequest::set_db_id(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_db_id(value);
  // @@protoc_insertion_point(field_set:smart3dmap.v1.DeleteStdStratRequest.db_id)
}

// int32 id = 2;
inline void DeleteStdStratRequest::clear_id() {
  id_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 DeleteStdStratRequest::_internal_id() const {
  return id_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 DeleteStdStratRequest::id() const {
  // @@protoc_insertion_point(field_get:smart3dmap.v1.DeleteStdStratRequest.id)
  return _internal_id();
}
inline void DeleteStdStratRequest::_internal_set_id(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  id_ = value;
}
inline void DeleteStdStratRequest::set_id(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_id(value);
  // @@protoc_insertion_point(field_set:smart3dmap.v1.DeleteStdStratRequest.id)
}

// -------------------------------------------------------------------

// DeleteStdStratResponse

// bool status = 1;
inline void DeleteStdStratResponse::clear_status() {
  status_ = false;
}
inline bool DeleteStdStratResponse::_internal_status() const {
  return status_;
}
inline bool DeleteStdStratResponse::status() const {
  // @@protoc_insertion_point(field_get:smart3dmap.v1.DeleteStdStratResponse.status)
  return _internal_status();
}
inline void DeleteStdStratResponse::_internal_set_status(bool value) {
  
  status_ = value;
}
inline void DeleteStdStratResponse::set_status(bool value) {
  _internal_set_status(value);
  // @@protoc_insertion_point(field_set:smart3dmap.v1.DeleteStdStratResponse.status)
}

// string error = 2;
inline void DeleteStdStratResponse::clear_error() {
  error_.ClearToEmpty();
}
inline const std::string& DeleteStdStratResponse::error() const {
  // @@protoc_insertion_point(field_get:smart3dmap.v1.DeleteStdStratResponse.error)
  return _internal_error();
}
inline void DeleteStdStratResponse::set_error(const std::string& value) {
  _internal_set_error(value);
  // @@protoc_insertion_point(field_set:smart3dmap.v1.DeleteStdStratResponse.error)
}
inline std::string* DeleteStdStratResponse::mutable_error() {
  // @@protoc_insertion_point(field_mutable:smart3dmap.v1.DeleteStdStratResponse.error)
  return _internal_mutable_error();
}
inline const std::string& DeleteStdStratResponse::_internal_error() const {
  return error_.Get();
}
inline void DeleteStdStratResponse::_internal_set_error(const std::string& value) {
  
  error_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArena());
}
inline void DeleteStdStratResponse::set_error(std::string&& value) {
  
  error_.Set(
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:smart3dmap.v1.DeleteStdStratResponse.error)
}
inline void DeleteStdStratResponse::set_error(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  error_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(value), GetArena());
  // @@protoc_insertion_point(field_set_char:smart3dmap.v1.DeleteStdStratResponse.error)
}
inline void DeleteStdStratResponse::set_error(const char* value,
    size_t size) {
  
  error_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:smart3dmap.v1.DeleteStdStratResponse.error)
}
inline std::string* DeleteStdStratResponse::_internal_mutable_error() {
  
  return error_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArena());
}
inline std::string* DeleteStdStratResponse::release_error() {
  // @@protoc_insertion_point(field_release:smart3dmap.v1.DeleteStdStratResponse.error)
  return error_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void DeleteStdStratResponse::set_allocated_error(std::string* error) {
  if (error != nullptr) {
    
  } else {
    
  }
  error_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), error,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:smart3dmap.v1.DeleteStdStratResponse.error)
}

// -------------------------------------------------------------------

// ImportedStdStratItem

// int32 db_id = 1;
inline void ImportedStdStratItem::clear_db_id() {
  db_id_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 ImportedStdStratItem::_internal_db_id() const {
  return db_id_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 ImportedStdStratItem::db_id() const {
  // @@protoc_insertion_point(field_get:smart3dmap.v1.ImportedStdStratItem.db_id)
  return _internal_db_id();
}
inline void ImportedStdStratItem::_internal_set_db_id(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  db_id_ = value;
}
inline void ImportedStdStratItem::set_db_id(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_db_id(value);
  // @@protoc_insertion_point(field_set:smart3dmap.v1.ImportedStdStratItem.db_id)
}

// int32 strat_id = 2;
inline void ImportedStdStratItem::clear_strat_id() {
  strat_id_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 ImportedStdStratItem::_internal_strat_id() const {
  return strat_id_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 ImportedStdStratItem::strat_id() const {
  // @@protoc_insertion_point(field_get:smart3dmap.v1.ImportedStdStratItem.strat_id)
  return _internal_strat_id();
}
inline void ImportedStdStratItem::_internal_set_strat_id(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  strat_id_ = value;
}
inline void ImportedStdStratItem::set_strat_id(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_strat_id(value);
  // @@protoc_insertion_point(field_set:smart3dmap.v1.ImportedStdStratItem.strat_id)
}

// .smart3dmap.v1.StdStrat.Item item = 3;
inline bool ImportedStdStratItem::_internal_has_item() const {
  return this != internal_default_instance() && item_ != nullptr;
}
inline bool ImportedStdStratItem::has_item() const {
  return _internal_has_item();
}
inline void ImportedStdStratItem::clear_item() {
  if (GetArena() == nullptr && item_ != nullptr) {
    delete item_;
  }
  item_ = nullptr;
}
inline const ::smart3dmap::v1::StdStrat_Item& ImportedStdStratItem::_internal_item() const {
  const ::smart3dmap::v1::StdStrat_Item* p = item_;
  return p != nullptr ? *p : reinterpret_cast<const ::smart3dmap::v1::StdStrat_Item&>(
      ::smart3dmap::v1::_StdStrat_Item_default_instance_);
}
inline const ::smart3dmap::v1::StdStrat_Item& ImportedStdStratItem::item() const {
  // @@protoc_insertion_point(field_get:smart3dmap.v1.ImportedStdStratItem.item)
  return _internal_item();
}
inline void ImportedStdStratItem::unsafe_arena_set_allocated_item(
    ::smart3dmap::v1::StdStrat_Item* item) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(item_);
  }
  item_ = item;
  if (item) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:smart3dmap.v1.ImportedStdStratItem.item)
}
inline ::smart3dmap::v1::StdStrat_Item* ImportedStdStratItem::release_item() {
  
  ::smart3dmap::v1::StdStrat_Item* temp = item_;
  item_ = nullptr;
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::smart3dmap::v1::StdStrat_Item* ImportedStdStratItem::unsafe_arena_release_item() {
  // @@protoc_insertion_point(field_release:smart3dmap.v1.ImportedStdStratItem.item)
  
  ::smart3dmap::v1::StdStrat_Item* temp = item_;
  item_ = nullptr;
  return temp;
}
inline ::smart3dmap::v1::StdStrat_Item* ImportedStdStratItem::_internal_mutable_item() {
  
  if (item_ == nullptr) {
    auto* p = CreateMaybeMessage<::smart3dmap::v1::StdStrat_Item>(GetArena());
    item_ = p;
  }
  return item_;
}
inline ::smart3dmap::v1::StdStrat_Item* ImportedStdStratItem::mutable_item() {
  // @@protoc_insertion_point(field_mutable:smart3dmap.v1.ImportedStdStratItem.item)
  return _internal_mutable_item();
}
inline void ImportedStdStratItem::set_allocated_item(::smart3dmap::v1::StdStrat_Item* item) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete item_;
  }
  if (item) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(item);
    if (message_arena != submessage_arena) {
      item = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, item, submessage_arena);
    }
    
  } else {
    
  }
  item_ = item;
  // @@protoc_insertion_point(field_set_allocated:smart3dmap.v1.ImportedStdStratItem.item)
}

// -------------------------------------------------------------------

// ImportStdStratItemStatus

// bool status = 1;
inline void ImportStdStratItemStatus::clear_status() {
  status_ = false;
}
inline bool ImportStdStratItemStatus::_internal_status() const {
  return status_;
}
inline bool ImportStdStratItemStatus::status() const {
  // @@protoc_insertion_point(field_get:smart3dmap.v1.ImportStdStratItemStatus.status)
  return _internal_status();
}
inline void ImportStdStratItemStatus::_internal_set_status(bool value) {
  
  status_ = value;
}
inline void ImportStdStratItemStatus::set_status(bool value) {
  _internal_set_status(value);
  // @@protoc_insertion_point(field_set:smart3dmap.v1.ImportStdStratItemStatus.status)
}

// string error = 2;
inline void ImportStdStratItemStatus::clear_error() {
  error_.ClearToEmpty();
}
inline const std::string& ImportStdStratItemStatus::error() const {
  // @@protoc_insertion_point(field_get:smart3dmap.v1.ImportStdStratItemStatus.error)
  return _internal_error();
}
inline void ImportStdStratItemStatus::set_error(const std::string& value) {
  _internal_set_error(value);
  // @@protoc_insertion_point(field_set:smart3dmap.v1.ImportStdStratItemStatus.error)
}
inline std::string* ImportStdStratItemStatus::mutable_error() {
  // @@protoc_insertion_point(field_mutable:smart3dmap.v1.ImportStdStratItemStatus.error)
  return _internal_mutable_error();
}
inline const std::string& ImportStdStratItemStatus::_internal_error() const {
  return error_.Get();
}
inline void ImportStdStratItemStatus::_internal_set_error(const std::string& value) {
  
  error_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArena());
}
inline void ImportStdStratItemStatus::set_error(std::string&& value) {
  
  error_.Set(
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:smart3dmap.v1.ImportStdStratItemStatus.error)
}
inline void ImportStdStratItemStatus::set_error(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  error_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(value), GetArena());
  // @@protoc_insertion_point(field_set_char:smart3dmap.v1.ImportStdStratItemStatus.error)
}
inline void ImportStdStratItemStatus::set_error(const char* value,
    size_t size) {
  
  error_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:smart3dmap.v1.ImportStdStratItemStatus.error)
}
inline std::string* ImportStdStratItemStatus::_internal_mutable_error() {
  
  return error_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArena());
}
inline std::string* ImportStdStratItemStatus::release_error() {
  // @@protoc_insertion_point(field_release:smart3dmap.v1.ImportStdStratItemStatus.error)
  return error_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void ImportStdStratItemStatus::set_allocated_error(std::string* error) {
  if (error != nullptr) {
    
  } else {
    
  }
  error_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), error,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:smart3dmap.v1.ImportStdStratItemStatus.error)
}

// int32 db_id = 3;
inline void ImportStdStratItemStatus::clear_db_id() {
  db_id_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 ImportStdStratItemStatus::_internal_db_id() const {
  return db_id_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 ImportStdStratItemStatus::db_id() const {
  // @@protoc_insertion_point(field_get:smart3dmap.v1.ImportStdStratItemStatus.db_id)
  return _internal_db_id();
}
inline void ImportStdStratItemStatus::_internal_set_db_id(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  db_id_ = value;
}
inline void ImportStdStratItemStatus::set_db_id(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_db_id(value);
  // @@protoc_insertion_point(field_set:smart3dmap.v1.ImportStdStratItemStatus.db_id)
}

// int32 item_id = 4;
inline void ImportStdStratItemStatus::clear_item_id() {
  item_id_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 ImportStdStratItemStatus::_internal_item_id() const {
  return item_id_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 ImportStdStratItemStatus::item_id() const {
  // @@protoc_insertion_point(field_get:smart3dmap.v1.ImportStdStratItemStatus.item_id)
  return _internal_item_id();
}
inline void ImportStdStratItemStatus::_internal_set_item_id(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  item_id_ = value;
}
inline void ImportStdStratItemStatus::set_item_id(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_item_id(value);
  // @@protoc_insertion_point(field_set:smart3dmap.v1.ImportStdStratItemStatus.item_id)
}

// -------------------------------------------------------------------

// ImportStdStratItemsRequest

// int32 db_id = 1;
inline void ImportStdStratItemsRequest::clear_db_id() {
  db_id_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 ImportStdStratItemsRequest::_internal_db_id() const {
  return db_id_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 ImportStdStratItemsRequest::db_id() const {
  // @@protoc_insertion_point(field_get:smart3dmap.v1.ImportStdStratItemsRequest.db_id)
  return _internal_db_id();
}
inline void ImportStdStratItemsRequest::_internal_set_db_id(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  db_id_ = value;
}
inline void ImportStdStratItemsRequest::set_db_id(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_db_id(value);
  // @@protoc_insertion_point(field_set:smart3dmap.v1.ImportStdStratItemsRequest.db_id)
}

// int32 strat_id = 2;
inline void ImportStdStratItemsRequest::clear_strat_id() {
  strat_id_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 ImportStdStratItemsRequest::_internal_strat_id() const {
  return strat_id_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 ImportStdStratItemsRequest::strat_id() const {
  // @@protoc_insertion_point(field_get:smart3dmap.v1.ImportStdStratItemsRequest.strat_id)
  return _internal_strat_id();
}
inline void ImportStdStratItemsRequest::_internal_set_strat_id(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  strat_id_ = value;
}
inline void ImportStdStratItemsRequest::set_strat_id(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_strat_id(value);
  // @@protoc_insertion_point(field_set:smart3dmap.v1.ImportStdStratItemsRequest.strat_id)
}

// repeated .smart3dmap.v1.StdStrat.Item items = 3;
inline int ImportStdStratItemsRequest::_internal_items_size() const {
  return items_.size();
}
inline int ImportStdStratItemsRequest::items_size() const {
  return _internal_items_size();
}
inline void ImportStdStratItemsRequest::clear_items() {
  items_.Clear();
}
inline ::smart3dmap::v1::StdStrat_Item* ImportStdStratItemsRequest::mutable_items(int index) {
  // @@protoc_insertion_point(field_mutable:smart3dmap.v1.ImportStdStratItemsRequest.items)
  return items_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::smart3dmap::v1::StdStrat_Item >*
ImportStdStratItemsRequest::mutable_items() {
  // @@protoc_insertion_point(field_mutable_list:smart3dmap.v1.ImportStdStratItemsRequest.items)
  return &items_;
}
inline const ::smart3dmap::v1::StdStrat_Item& ImportStdStratItemsRequest::_internal_items(int index) const {
  return items_.Get(index);
}
inline const ::smart3dmap::v1::StdStrat_Item& ImportStdStratItemsRequest::items(int index) const {
  // @@protoc_insertion_point(field_get:smart3dmap.v1.ImportStdStratItemsRequest.items)
  return _internal_items(index);
}
inline ::smart3dmap::v1::StdStrat_Item* ImportStdStratItemsRequest::_internal_add_items() {
  return items_.Add();
}
inline ::smart3dmap::v1::StdStrat_Item* ImportStdStratItemsRequest::add_items() {
  // @@protoc_insertion_point(field_add:smart3dmap.v1.ImportStdStratItemsRequest.items)
  return _internal_add_items();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::smart3dmap::v1::StdStrat_Item >&
ImportStdStratItemsRequest::items() const {
  // @@protoc_insertion_point(field_list:smart3dmap.v1.ImportStdStratItemsRequest.items)
  return items_;
}

// -------------------------------------------------------------------

// ImportStdStratItemsResponse

// bool status = 1;
inline void ImportStdStratItemsResponse::clear_status() {
  status_ = false;
}
inline bool ImportStdStratItemsResponse::_internal_status() const {
  return status_;
}
inline bool ImportStdStratItemsResponse::status() const {
  // @@protoc_insertion_point(field_get:smart3dmap.v1.ImportStdStratItemsResponse.status)
  return _internal_status();
}
inline void ImportStdStratItemsResponse::_internal_set_status(bool value) {
  
  status_ = value;
}
inline void ImportStdStratItemsResponse::set_status(bool value) {
  _internal_set_status(value);
  // @@protoc_insertion_point(field_set:smart3dmap.v1.ImportStdStratItemsResponse.status)
}

// string error = 2;
inline void ImportStdStratItemsResponse::clear_error() {
  error_.ClearToEmpty();
}
inline const std::string& ImportStdStratItemsResponse::error() const {
  // @@protoc_insertion_point(field_get:smart3dmap.v1.ImportStdStratItemsResponse.error)
  return _internal_error();
}
inline void ImportStdStratItemsResponse::set_error(const std::string& value) {
  _internal_set_error(value);
  // @@protoc_insertion_point(field_set:smart3dmap.v1.ImportStdStratItemsResponse.error)
}
inline std::string* ImportStdStratItemsResponse::mutable_error() {
  // @@protoc_insertion_point(field_mutable:smart3dmap.v1.ImportStdStratItemsResponse.error)
  return _internal_mutable_error();
}
inline const std::string& ImportStdStratItemsResponse::_internal_error() const {
  return error_.Get();
}
inline void ImportStdStratItemsResponse::_internal_set_error(const std::string& value) {
  
  error_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArena());
}
inline void ImportStdStratItemsResponse::set_error(std::string&& value) {
  
  error_.Set(
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:smart3dmap.v1.ImportStdStratItemsResponse.error)
}
inline void ImportStdStratItemsResponse::set_error(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  error_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(value), GetArena());
  // @@protoc_insertion_point(field_set_char:smart3dmap.v1.ImportStdStratItemsResponse.error)
}
inline void ImportStdStratItemsResponse::set_error(const char* value,
    size_t size) {
  
  error_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:smart3dmap.v1.ImportStdStratItemsResponse.error)
}
inline std::string* ImportStdStratItemsResponse::_internal_mutable_error() {
  
  return error_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArena());
}
inline std::string* ImportStdStratItemsResponse::release_error() {
  // @@protoc_insertion_point(field_release:smart3dmap.v1.ImportStdStratItemsResponse.error)
  return error_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void ImportStdStratItemsResponse::set_allocated_error(std::string* error) {
  if (error != nullptr) {
    
  } else {
    
  }
  error_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), error,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:smart3dmap.v1.ImportStdStratItemsResponse.error)
}

// -------------------------------------------------------------------

// GeoSurveyProject

// int32 db_id = 1;
inline void GeoSurveyProject::clear_db_id() {
  db_id_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 GeoSurveyProject::_internal_db_id() const {
  return db_id_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 GeoSurveyProject::db_id() const {
  // @@protoc_insertion_point(field_get:smart3dmap.v1.GeoSurveyProject.db_id)
  return _internal_db_id();
}
inline void GeoSurveyProject::_internal_set_db_id(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  db_id_ = value;
}
inline void GeoSurveyProject::set_db_id(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_db_id(value);
  // @@protoc_insertion_point(field_set:smart3dmap.v1.GeoSurveyProject.db_id)
}

// int32 id = 2;
inline void GeoSurveyProject::clear_id() {
  id_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 GeoSurveyProject::_internal_id() const {
  return id_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 GeoSurveyProject::id() const {
  // @@protoc_insertion_point(field_get:smart3dmap.v1.GeoSurveyProject.id)
  return _internal_id();
}
inline void GeoSurveyProject::_internal_set_id(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  id_ = value;
}
inline void GeoSurveyProject::set_id(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_id(value);
  // @@protoc_insertion_point(field_set:smart3dmap.v1.GeoSurveyProject.id)
}

// string name = 3;
inline void GeoSurveyProject::clear_name() {
  name_.ClearToEmpty();
}
inline const std::string& GeoSurveyProject::name() const {
  // @@protoc_insertion_point(field_get:smart3dmap.v1.GeoSurveyProject.name)
  return _internal_name();
}
inline void GeoSurveyProject::set_name(const std::string& value) {
  _internal_set_name(value);
  // @@protoc_insertion_point(field_set:smart3dmap.v1.GeoSurveyProject.name)
}
inline std::string* GeoSurveyProject::mutable_name() {
  // @@protoc_insertion_point(field_mutable:smart3dmap.v1.GeoSurveyProject.name)
  return _internal_mutable_name();
}
inline const std::string& GeoSurveyProject::_internal_name() const {
  return name_.Get();
}
inline void GeoSurveyProject::_internal_set_name(const std::string& value) {
  
  name_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArena());
}
inline void GeoSurveyProject::set_name(std::string&& value) {
  
  name_.Set(
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:smart3dmap.v1.GeoSurveyProject.name)
}
inline void GeoSurveyProject::set_name(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  name_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(value), GetArena());
  // @@protoc_insertion_point(field_set_char:smart3dmap.v1.GeoSurveyProject.name)
}
inline void GeoSurveyProject::set_name(const char* value,
    size_t size) {
  
  name_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:smart3dmap.v1.GeoSurveyProject.name)
}
inline std::string* GeoSurveyProject::_internal_mutable_name() {
  
  return name_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArena());
}
inline std::string* GeoSurveyProject::release_name() {
  // @@protoc_insertion_point(field_release:smart3dmap.v1.GeoSurveyProject.name)
  return name_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void GeoSurveyProject::set_allocated_name(std::string* name) {
  if (name != nullptr) {
    
  } else {
    
  }
  name_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), name,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:smart3dmap.v1.GeoSurveyProject.name)
}

// string category = 4;
inline void GeoSurveyProject::clear_category() {
  category_.ClearToEmpty();
}
inline const std::string& GeoSurveyProject::category() const {
  // @@protoc_insertion_point(field_get:smart3dmap.v1.GeoSurveyProject.category)
  return _internal_category();
}
inline void GeoSurveyProject::set_category(const std::string& value) {
  _internal_set_category(value);
  // @@protoc_insertion_point(field_set:smart3dmap.v1.GeoSurveyProject.category)
}
inline std::string* GeoSurveyProject::mutable_category() {
  // @@protoc_insertion_point(field_mutable:smart3dmap.v1.GeoSurveyProject.category)
  return _internal_mutable_category();
}
inline const std::string& GeoSurveyProject::_internal_category() const {
  return category_.Get();
}
inline void GeoSurveyProject::_internal_set_category(const std::string& value) {
  
  category_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArena());
}
inline void GeoSurveyProject::set_category(std::string&& value) {
  
  category_.Set(
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:smart3dmap.v1.GeoSurveyProject.category)
}
inline void GeoSurveyProject::set_category(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  category_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(value), GetArena());
  // @@protoc_insertion_point(field_set_char:smart3dmap.v1.GeoSurveyProject.category)
}
inline void GeoSurveyProject::set_category(const char* value,
    size_t size) {
  
  category_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:smart3dmap.v1.GeoSurveyProject.category)
}
inline std::string* GeoSurveyProject::_internal_mutable_category() {
  
  return category_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArena());
}
inline std::string* GeoSurveyProject::release_category() {
  // @@protoc_insertion_point(field_release:smart3dmap.v1.GeoSurveyProject.category)
  return category_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void GeoSurveyProject::set_allocated_category(std::string* category) {
  if (category != nullptr) {
    
  } else {
    
  }
  category_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), category,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:smart3dmap.v1.GeoSurveyProject.category)
}

// string construction_organization = 5;
inline void GeoSurveyProject::clear_construction_organization() {
  construction_organization_.ClearToEmpty();
}
inline const std::string& GeoSurveyProject::construction_organization() const {
  // @@protoc_insertion_point(field_get:smart3dmap.v1.GeoSurveyProject.construction_organization)
  return _internal_construction_organization();
}
inline void GeoSurveyProject::set_construction_organization(const std::string& value) {
  _internal_set_construction_organization(value);
  // @@protoc_insertion_point(field_set:smart3dmap.v1.GeoSurveyProject.construction_organization)
}
inline std::string* GeoSurveyProject::mutable_construction_organization() {
  // @@protoc_insertion_point(field_mutable:smart3dmap.v1.GeoSurveyProject.construction_organization)
  return _internal_mutable_construction_organization();
}
inline const std::string& GeoSurveyProject::_internal_construction_organization() const {
  return construction_organization_.Get();
}
inline void GeoSurveyProject::_internal_set_construction_organization(const std::string& value) {
  
  construction_organization_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArena());
}
inline void GeoSurveyProject::set_construction_organization(std::string&& value) {
  
  construction_organization_.Set(
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:smart3dmap.v1.GeoSurveyProject.construction_organization)
}
inline void GeoSurveyProject::set_construction_organization(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  construction_organization_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(value), GetArena());
  // @@protoc_insertion_point(field_set_char:smart3dmap.v1.GeoSurveyProject.construction_organization)
}
inline void GeoSurveyProject::set_construction_organization(const char* value,
    size_t size) {
  
  construction_organization_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:smart3dmap.v1.GeoSurveyProject.construction_organization)
}
inline std::string* GeoSurveyProject::_internal_mutable_construction_organization() {
  
  return construction_organization_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArena());
}
inline std::string* GeoSurveyProject::release_construction_organization() {
  // @@protoc_insertion_point(field_release:smart3dmap.v1.GeoSurveyProject.construction_organization)
  return construction_organization_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void GeoSurveyProject::set_allocated_construction_organization(std::string* construction_organization) {
  if (construction_organization != nullptr) {
    
  } else {
    
  }
  construction_organization_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), construction_organization,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:smart3dmap.v1.GeoSurveyProject.construction_organization)
}

// .google.protobuf.Timestamp start_date = 6;
inline bool GeoSurveyProject::_internal_has_start_date() const {
  return this != internal_default_instance() && start_date_ != nullptr;
}
inline bool GeoSurveyProject::has_start_date() const {
  return _internal_has_start_date();
}
inline const PROTOBUF_NAMESPACE_ID::Timestamp& GeoSurveyProject::_internal_start_date() const {
  const PROTOBUF_NAMESPACE_ID::Timestamp* p = start_date_;
  return p != nullptr ? *p : reinterpret_cast<const PROTOBUF_NAMESPACE_ID::Timestamp&>(
      PROTOBUF_NAMESPACE_ID::_Timestamp_default_instance_);
}
inline const PROTOBUF_NAMESPACE_ID::Timestamp& GeoSurveyProject::start_date() const {
  // @@protoc_insertion_point(field_get:smart3dmap.v1.GeoSurveyProject.start_date)
  return _internal_start_date();
}
inline void GeoSurveyProject::unsafe_arena_set_allocated_start_date(
    PROTOBUF_NAMESPACE_ID::Timestamp* start_date) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(start_date_);
  }
  start_date_ = start_date;
  if (start_date) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:smart3dmap.v1.GeoSurveyProject.start_date)
}
inline PROTOBUF_NAMESPACE_ID::Timestamp* GeoSurveyProject::release_start_date() {
  
  PROTOBUF_NAMESPACE_ID::Timestamp* temp = start_date_;
  start_date_ = nullptr;
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline PROTOBUF_NAMESPACE_ID::Timestamp* GeoSurveyProject::unsafe_arena_release_start_date() {
  // @@protoc_insertion_point(field_release:smart3dmap.v1.GeoSurveyProject.start_date)
  
  PROTOBUF_NAMESPACE_ID::Timestamp* temp = start_date_;
  start_date_ = nullptr;
  return temp;
}
inline PROTOBUF_NAMESPACE_ID::Timestamp* GeoSurveyProject::_internal_mutable_start_date() {
  
  if (start_date_ == nullptr) {
    auto* p = CreateMaybeMessage<PROTOBUF_NAMESPACE_ID::Timestamp>(GetArena());
    start_date_ = p;
  }
  return start_date_;
}
inline PROTOBUF_NAMESPACE_ID::Timestamp* GeoSurveyProject::mutable_start_date() {
  // @@protoc_insertion_point(field_mutable:smart3dmap.v1.GeoSurveyProject.start_date)
  return _internal_mutable_start_date();
}
inline void GeoSurveyProject::set_allocated_start_date(PROTOBUF_NAMESPACE_ID::Timestamp* start_date) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(start_date_);
  }
  if (start_date) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(start_date)->GetArena();
    if (message_arena != submessage_arena) {
      start_date = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, start_date, submessage_arena);
    }
    
  } else {
    
  }
  start_date_ = start_date;
  // @@protoc_insertion_point(field_set_allocated:smart3dmap.v1.GeoSurveyProject.start_date)
}

// .google.protobuf.Timestamp end_date = 7;
inline bool GeoSurveyProject::_internal_has_end_date() const {
  return this != internal_default_instance() && end_date_ != nullptr;
}
inline bool GeoSurveyProject::has_end_date() const {
  return _internal_has_end_date();
}
inline const PROTOBUF_NAMESPACE_ID::Timestamp& GeoSurveyProject::_internal_end_date() const {
  const PROTOBUF_NAMESPACE_ID::Timestamp* p = end_date_;
  return p != nullptr ? *p : reinterpret_cast<const PROTOBUF_NAMESPACE_ID::Timestamp&>(
      PROTOBUF_NAMESPACE_ID::_Timestamp_default_instance_);
}
inline const PROTOBUF_NAMESPACE_ID::Timestamp& GeoSurveyProject::end_date() const {
  // @@protoc_insertion_point(field_get:smart3dmap.v1.GeoSurveyProject.end_date)
  return _internal_end_date();
}
inline void GeoSurveyProject::unsafe_arena_set_allocated_end_date(
    PROTOBUF_NAMESPACE_ID::Timestamp* end_date) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(end_date_);
  }
  end_date_ = end_date;
  if (end_date) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:smart3dmap.v1.GeoSurveyProject.end_date)
}
inline PROTOBUF_NAMESPACE_ID::Timestamp* GeoSurveyProject::release_end_date() {
  
  PROTOBUF_NAMESPACE_ID::Timestamp* temp = end_date_;
  end_date_ = nullptr;
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline PROTOBUF_NAMESPACE_ID::Timestamp* GeoSurveyProject::unsafe_arena_release_end_date() {
  // @@protoc_insertion_point(field_release:smart3dmap.v1.GeoSurveyProject.end_date)
  
  PROTOBUF_NAMESPACE_ID::Timestamp* temp = end_date_;
  end_date_ = nullptr;
  return temp;
}
inline PROTOBUF_NAMESPACE_ID::Timestamp* GeoSurveyProject::_internal_mutable_end_date() {
  
  if (end_date_ == nullptr) {
    auto* p = CreateMaybeMessage<PROTOBUF_NAMESPACE_ID::Timestamp>(GetArena());
    end_date_ = p;
  }
  return end_date_;
}
inline PROTOBUF_NAMESPACE_ID::Timestamp* GeoSurveyProject::mutable_end_date() {
  // @@protoc_insertion_point(field_mutable:smart3dmap.v1.GeoSurveyProject.end_date)
  return _internal_mutable_end_date();
}
inline void GeoSurveyProject::set_allocated_end_date(PROTOBUF_NAMESPACE_ID::Timestamp* end_date) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(end_date_);
  }
  if (end_date) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(end_date)->GetArena();
    if (message_arena != submessage_arena) {
      end_date = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, end_date, submessage_arena);
    }
    
  } else {
    
  }
  end_date_ = end_date;
  // @@protoc_insertion_point(field_set_allocated:smart3dmap.v1.GeoSurveyProject.end_date)
}

// -------------------------------------------------------------------

// GeographicPosition

// string crs = 1;
inline void GeographicPosition::clear_crs() {
  crs_.ClearToEmpty();
}
inline const std::string& GeographicPosition::crs() const {
  // @@protoc_insertion_point(field_get:smart3dmap.v1.GeographicPosition.crs)
  return _internal_crs();
}
inline void GeographicPosition::set_crs(const std::string& value) {
  _internal_set_crs(value);
  // @@protoc_insertion_point(field_set:smart3dmap.v1.GeographicPosition.crs)
}
inline std::string* GeographicPosition::mutable_crs() {
  // @@protoc_insertion_point(field_mutable:smart3dmap.v1.GeographicPosition.crs)
  return _internal_mutable_crs();
}
inline const std::string& GeographicPosition::_internal_crs() const {
  return crs_.Get();
}
inline void GeographicPosition::_internal_set_crs(const std::string& value) {
  
  crs_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArena());
}
inline void GeographicPosition::set_crs(std::string&& value) {
  
  crs_.Set(
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:smart3dmap.v1.GeographicPosition.crs)
}
inline void GeographicPosition::set_crs(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  crs_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(value), GetArena());
  // @@protoc_insertion_point(field_set_char:smart3dmap.v1.GeographicPosition.crs)
}
inline void GeographicPosition::set_crs(const char* value,
    size_t size) {
  
  crs_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:smart3dmap.v1.GeographicPosition.crs)
}
inline std::string* GeographicPosition::_internal_mutable_crs() {
  
  return crs_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArena());
}
inline std::string* GeographicPosition::release_crs() {
  // @@protoc_insertion_point(field_release:smart3dmap.v1.GeographicPosition.crs)
  return crs_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void GeographicPosition::set_allocated_crs(std::string* crs) {
  if (crs != nullptr) {
    
  } else {
    
  }
  crs_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), crs,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:smart3dmap.v1.GeographicPosition.crs)
}

// double x = 2;
inline void GeographicPosition::clear_x() {
  x_ = 0;
}
inline double GeographicPosition::_internal_x() const {
  return x_;
}
inline double GeographicPosition::x() const {
  // @@protoc_insertion_point(field_get:smart3dmap.v1.GeographicPosition.x)
  return _internal_x();
}
inline void GeographicPosition::_internal_set_x(double value) {
  
  x_ = value;
}
inline void GeographicPosition::set_x(double value) {
  _internal_set_x(value);
  // @@protoc_insertion_point(field_set:smart3dmap.v1.GeographicPosition.x)
}

// double y = 3;
inline void GeographicPosition::clear_y() {
  y_ = 0;
}
inline double GeographicPosition::_internal_y() const {
  return y_;
}
inline double GeographicPosition::y() const {
  // @@protoc_insertion_point(field_get:smart3dmap.v1.GeographicPosition.y)
  return _internal_y();
}
inline void GeographicPosition::_internal_set_y(double value) {
  
  y_ = value;
}
inline void GeographicPosition::set_y(double value) {
  _internal_set_y(value);
  // @@protoc_insertion_point(field_set:smart3dmap.v1.GeographicPosition.y)
}

// .google.protobuf.StringValue zrs = 4;
inline bool GeographicPosition::_internal_has_zrs() const {
  return this != internal_default_instance() && zrs_ != nullptr;
}
inline bool GeographicPosition::has_zrs() const {
  return _internal_has_zrs();
}
inline const PROTOBUF_NAMESPACE_ID::StringValue& GeographicPosition::_internal_zrs() const {
  const PROTOBUF_NAMESPACE_ID::StringValue* p = zrs_;
  return p != nullptr ? *p : reinterpret_cast<const PROTOBUF_NAMESPACE_ID::StringValue&>(
      PROTOBUF_NAMESPACE_ID::_StringValue_default_instance_);
}
inline const PROTOBUF_NAMESPACE_ID::StringValue& GeographicPosition::zrs() const {
  // @@protoc_insertion_point(field_get:smart3dmap.v1.GeographicPosition.zrs)
  return _internal_zrs();
}
inline void GeographicPosition::unsafe_arena_set_allocated_zrs(
    PROTOBUF_NAMESPACE_ID::StringValue* zrs) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(zrs_);
  }
  zrs_ = zrs;
  if (zrs) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:smart3dmap.v1.GeographicPosition.zrs)
}
inline PROTOBUF_NAMESPACE_ID::StringValue* GeographicPosition::release_zrs() {
  
  PROTOBUF_NAMESPACE_ID::StringValue* temp = zrs_;
  zrs_ = nullptr;
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline PROTOBUF_NAMESPACE_ID::StringValue* GeographicPosition::unsafe_arena_release_zrs() {
  // @@protoc_insertion_point(field_release:smart3dmap.v1.GeographicPosition.zrs)
  
  PROTOBUF_NAMESPACE_ID::StringValue* temp = zrs_;
  zrs_ = nullptr;
  return temp;
}
inline PROTOBUF_NAMESPACE_ID::StringValue* GeographicPosition::_internal_mutable_zrs() {
  
  if (zrs_ == nullptr) {
    auto* p = CreateMaybeMessage<PROTOBUF_NAMESPACE_ID::StringValue>(GetArena());
    zrs_ = p;
  }
  return zrs_;
}
inline PROTOBUF_NAMESPACE_ID::StringValue* GeographicPosition::mutable_zrs() {
  // @@protoc_insertion_point(field_mutable:smart3dmap.v1.GeographicPosition.zrs)
  return _internal_mutable_zrs();
}
inline void GeographicPosition::set_allocated_zrs(PROTOBUF_NAMESPACE_ID::StringValue* zrs) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(zrs_);
  }
  if (zrs) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(zrs)->GetArena();
    if (message_arena != submessage_arena) {
      zrs = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, zrs, submessage_arena);
    }
    
  } else {
    
  }
  zrs_ = zrs;
  // @@protoc_insertion_point(field_set_allocated:smart3dmap.v1.GeographicPosition.zrs)
}

// .google.protobuf.DoubleValue z = 5;
inline bool GeographicPosition::_internal_has_z() const {
  return this != internal_default_instance() && z_ != nullptr;
}
inline bool GeographicPosition::has_z() const {
  return _internal_has_z();
}
inline const PROTOBUF_NAMESPACE_ID::DoubleValue& GeographicPosition::_internal_z() const {
  const PROTOBUF_NAMESPACE_ID::DoubleValue* p = z_;
  return p != nullptr ? *p : reinterpret_cast<const PROTOBUF_NAMESPACE_ID::DoubleValue&>(
      PROTOBUF_NAMESPACE_ID::_DoubleValue_default_instance_);
}
inline const PROTOBUF_NAMESPACE_ID::DoubleValue& GeographicPosition::z() const {
  // @@protoc_insertion_point(field_get:smart3dmap.v1.GeographicPosition.z)
  return _internal_z();
}
inline void GeographicPosition::unsafe_arena_set_allocated_z(
    PROTOBUF_NAMESPACE_ID::DoubleValue* z) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(z_);
  }
  z_ = z;
  if (z) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:smart3dmap.v1.GeographicPosition.z)
}
inline PROTOBUF_NAMESPACE_ID::DoubleValue* GeographicPosition::release_z() {
  
  PROTOBUF_NAMESPACE_ID::DoubleValue* temp = z_;
  z_ = nullptr;
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline PROTOBUF_NAMESPACE_ID::DoubleValue* GeographicPosition::unsafe_arena_release_z() {
  // @@protoc_insertion_point(field_release:smart3dmap.v1.GeographicPosition.z)
  
  PROTOBUF_NAMESPACE_ID::DoubleValue* temp = z_;
  z_ = nullptr;
  return temp;
}
inline PROTOBUF_NAMESPACE_ID::DoubleValue* GeographicPosition::_internal_mutable_z() {
  
  if (z_ == nullptr) {
    auto* p = CreateMaybeMessage<PROTOBUF_NAMESPACE_ID::DoubleValue>(GetArena());
    z_ = p;
  }
  return z_;
}
inline PROTOBUF_NAMESPACE_ID::DoubleValue* GeographicPosition::mutable_z() {
  // @@protoc_insertion_point(field_mutable:smart3dmap.v1.GeographicPosition.z)
  return _internal_mutable_z();
}
inline void GeographicPosition::set_allocated_z(PROTOBUF_NAMESPACE_ID::DoubleValue* z) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(z_);
  }
  if (z) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(z)->GetArena();
    if (message_arena != submessage_arena) {
      z = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, z, submessage_arena);
    }
    
  } else {
    
  }
  z_ = z;
  // @@protoc_insertion_point(field_set_allocated:smart3dmap.v1.GeographicPosition.z)
}

// -------------------------------------------------------------------

// Drill

// int32 db_id = 1;
inline void Drill::clear_db_id() {
  db_id_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 Drill::_internal_db_id() const {
  return db_id_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 Drill::db_id() const {
  // @@protoc_insertion_point(field_get:smart3dmap.v1.Drill.db_id)
  return _internal_db_id();
}
inline void Drill::_internal_set_db_id(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  db_id_ = value;
}
inline void Drill::set_db_id(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_db_id(value);
  // @@protoc_insertion_point(field_set:smart3dmap.v1.Drill.db_id)
}

// int32 id = 2;
inline void Drill::clear_id() {
  id_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 Drill::_internal_id() const {
  return id_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 Drill::id() const {
  // @@protoc_insertion_point(field_get:smart3dmap.v1.Drill.id)
  return _internal_id();
}
inline void Drill::_internal_set_id(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  id_ = value;
}
inline void Drill::set_id(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_id(value);
  // @@protoc_insertion_point(field_set:smart3dmap.v1.Drill.id)
}

// string code = 3;
inline void Drill::clear_code() {
  code_.ClearToEmpty();
}
inline const std::string& Drill::code() const {
  // @@protoc_insertion_point(field_get:smart3dmap.v1.Drill.code)
  return _internal_code();
}
inline void Drill::set_code(const std::string& value) {
  _internal_set_code(value);
  // @@protoc_insertion_point(field_set:smart3dmap.v1.Drill.code)
}
inline std::string* Drill::mutable_code() {
  // @@protoc_insertion_point(field_mutable:smart3dmap.v1.Drill.code)
  return _internal_mutable_code();
}
inline const std::string& Drill::_internal_code() const {
  return code_.Get();
}
inline void Drill::_internal_set_code(const std::string& value) {
  
  code_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArena());
}
inline void Drill::set_code(std::string&& value) {
  
  code_.Set(
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:smart3dmap.v1.Drill.code)
}
inline void Drill::set_code(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  code_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(value), GetArena());
  // @@protoc_insertion_point(field_set_char:smart3dmap.v1.Drill.code)
}
inline void Drill::set_code(const char* value,
    size_t size) {
  
  code_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:smart3dmap.v1.Drill.code)
}
inline std::string* Drill::_internal_mutable_code() {
  
  return code_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArena());
}
inline std::string* Drill::release_code() {
  // @@protoc_insertion_point(field_release:smart3dmap.v1.Drill.code)
  return code_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void Drill::set_allocated_code(std::string* code) {
  if (code != nullptr) {
    
  } else {
    
  }
  code_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), code,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:smart3dmap.v1.Drill.code)
}

// string origin_code = 4;
inline void Drill::clear_origin_code() {
  origin_code_.ClearToEmpty();
}
inline const std::string& Drill::origin_code() const {
  // @@protoc_insertion_point(field_get:smart3dmap.v1.Drill.origin_code)
  return _internal_origin_code();
}
inline void Drill::set_origin_code(const std::string& value) {
  _internal_set_origin_code(value);
  // @@protoc_insertion_point(field_set:smart3dmap.v1.Drill.origin_code)
}
inline std::string* Drill::mutable_origin_code() {
  // @@protoc_insertion_point(field_mutable:smart3dmap.v1.Drill.origin_code)
  return _internal_mutable_origin_code();
}
inline const std::string& Drill::_internal_origin_code() const {
  return origin_code_.Get();
}
inline void Drill::_internal_set_origin_code(const std::string& value) {
  
  origin_code_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArena());
}
inline void Drill::set_origin_code(std::string&& value) {
  
  origin_code_.Set(
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:smart3dmap.v1.Drill.origin_code)
}
inline void Drill::set_origin_code(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  origin_code_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(value), GetArena());
  // @@protoc_insertion_point(field_set_char:smart3dmap.v1.Drill.origin_code)
}
inline void Drill::set_origin_code(const char* value,
    size_t size) {
  
  origin_code_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:smart3dmap.v1.Drill.origin_code)
}
inline std::string* Drill::_internal_mutable_origin_code() {
  
  return origin_code_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArena());
}
inline std::string* Drill::release_origin_code() {
  // @@protoc_insertion_point(field_release:smart3dmap.v1.Drill.origin_code)
  return origin_code_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void Drill::set_allocated_origin_code(std::string* origin_code) {
  if (origin_code != nullptr) {
    
  } else {
    
  }
  origin_code_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), origin_code,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:smart3dmap.v1.Drill.origin_code)
}

// string type = 5;
inline void Drill::clear_type() {
  type_.ClearToEmpty();
}
inline const std::string& Drill::type() const {
  // @@protoc_insertion_point(field_get:smart3dmap.v1.Drill.type)
  return _internal_type();
}
inline void Drill::set_type(const std::string& value) {
  _internal_set_type(value);
  // @@protoc_insertion_point(field_set:smart3dmap.v1.Drill.type)
}
inline std::string* Drill::mutable_type() {
  // @@protoc_insertion_point(field_mutable:smart3dmap.v1.Drill.type)
  return _internal_mutable_type();
}
inline const std::string& Drill::_internal_type() const {
  return type_.Get();
}
inline void Drill::_internal_set_type(const std::string& value) {
  
  type_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArena());
}
inline void Drill::set_type(std::string&& value) {
  
  type_.Set(
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:smart3dmap.v1.Drill.type)
}
inline void Drill::set_type(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  type_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(value), GetArena());
  // @@protoc_insertion_point(field_set_char:smart3dmap.v1.Drill.type)
}
inline void Drill::set_type(const char* value,
    size_t size) {
  
  type_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:smart3dmap.v1.Drill.type)
}
inline std::string* Drill::_internal_mutable_type() {
  
  return type_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArena());
}
inline std::string* Drill::release_type() {
  // @@protoc_insertion_point(field_release:smart3dmap.v1.Drill.type)
  return type_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void Drill::set_allocated_type(std::string* type) {
  if (type != nullptr) {
    
  } else {
    
  }
  type_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), type,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:smart3dmap.v1.Drill.type)
}

// int32 geo_survey_project_id = 6;
inline void Drill::clear_geo_survey_project_id() {
  geo_survey_project_id_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 Drill::_internal_geo_survey_project_id() const {
  return geo_survey_project_id_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 Drill::geo_survey_project_id() const {
  // @@protoc_insertion_point(field_get:smart3dmap.v1.Drill.geo_survey_project_id)
  return _internal_geo_survey_project_id();
}
inline void Drill::_internal_set_geo_survey_project_id(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  geo_survey_project_id_ = value;
}
inline void Drill::set_geo_survey_project_id(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_geo_survey_project_id(value);
  // @@protoc_insertion_point(field_set:smart3dmap.v1.Drill.geo_survey_project_id)
}

// string archive_organization = 7;
inline void Drill::clear_archive_organization() {
  archive_organization_.ClearToEmpty();
}
inline const std::string& Drill::archive_organization() const {
  // @@protoc_insertion_point(field_get:smart3dmap.v1.Drill.archive_organization)
  return _internal_archive_organization();
}
inline void Drill::set_archive_organization(const std::string& value) {
  _internal_set_archive_organization(value);
  // @@protoc_insertion_point(field_set:smart3dmap.v1.Drill.archive_organization)
}
inline std::string* Drill::mutable_archive_organization() {
  // @@protoc_insertion_point(field_mutable:smart3dmap.v1.Drill.archive_organization)
  return _internal_mutable_archive_organization();
}
inline const std::string& Drill::_internal_archive_organization() const {
  return archive_organization_.Get();
}
inline void Drill::_internal_set_archive_organization(const std::string& value) {
  
  archive_organization_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArena());
}
inline void Drill::set_archive_organization(std::string&& value) {
  
  archive_organization_.Set(
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:smart3dmap.v1.Drill.archive_organization)
}
inline void Drill::set_archive_organization(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  archive_organization_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(value), GetArena());
  // @@protoc_insertion_point(field_set_char:smart3dmap.v1.Drill.archive_organization)
}
inline void Drill::set_archive_organization(const char* value,
    size_t size) {
  
  archive_organization_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:smart3dmap.v1.Drill.archive_organization)
}
inline std::string* Drill::_internal_mutable_archive_organization() {
  
  return archive_organization_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArena());
}
inline std::string* Drill::release_archive_organization() {
  // @@protoc_insertion_point(field_release:smart3dmap.v1.Drill.archive_organization)
  return archive_organization_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void Drill::set_allocated_archive_organization(std::string* archive_organization) {
  if (archive_organization != nullptr) {
    
  } else {
    
  }
  archive_organization_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), archive_organization,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:smart3dmap.v1.Drill.archive_organization)
}

// .smart3dmap.v1.GeographicPosition position = 8;
inline bool Drill::_internal_has_position() const {
  return this != internal_default_instance() && position_ != nullptr;
}
inline bool Drill::has_position() const {
  return _internal_has_position();
}
inline void Drill::clear_position() {
  if (GetArena() == nullptr && position_ != nullptr) {
    delete position_;
  }
  position_ = nullptr;
}
inline const ::smart3dmap::v1::GeographicPosition& Drill::_internal_position() const {
  const ::smart3dmap::v1::GeographicPosition* p = position_;
  return p != nullptr ? *p : reinterpret_cast<const ::smart3dmap::v1::GeographicPosition&>(
      ::smart3dmap::v1::_GeographicPosition_default_instance_);
}
inline const ::smart3dmap::v1::GeographicPosition& Drill::position() const {
  // @@protoc_insertion_point(field_get:smart3dmap.v1.Drill.position)
  return _internal_position();
}
inline void Drill::unsafe_arena_set_allocated_position(
    ::smart3dmap::v1::GeographicPosition* position) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(position_);
  }
  position_ = position;
  if (position) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:smart3dmap.v1.Drill.position)
}
inline ::smart3dmap::v1::GeographicPosition* Drill::release_position() {
  
  ::smart3dmap::v1::GeographicPosition* temp = position_;
  position_ = nullptr;
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::smart3dmap::v1::GeographicPosition* Drill::unsafe_arena_release_position() {
  // @@protoc_insertion_point(field_release:smart3dmap.v1.Drill.position)
  
  ::smart3dmap::v1::GeographicPosition* temp = position_;
  position_ = nullptr;
  return temp;
}
inline ::smart3dmap::v1::GeographicPosition* Drill::_internal_mutable_position() {
  
  if (position_ == nullptr) {
    auto* p = CreateMaybeMessage<::smart3dmap::v1::GeographicPosition>(GetArena());
    position_ = p;
  }
  return position_;
}
inline ::smart3dmap::v1::GeographicPosition* Drill::mutable_position() {
  // @@protoc_insertion_point(field_mutable:smart3dmap.v1.Drill.position)
  return _internal_mutable_position();
}
inline void Drill::set_allocated_position(::smart3dmap::v1::GeographicPosition* position) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete position_;
  }
  if (position) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(position);
    if (message_arena != submessage_arena) {
      position = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, position, submessage_arena);
    }
    
  } else {
    
  }
  position_ = position;
  // @@protoc_insertion_point(field_set_allocated:smart3dmap.v1.Drill.position)
}

// .smart3dmap.v1.GeographicPosition origin_position = 9;
inline bool Drill::_internal_has_origin_position() const {
  return this != internal_default_instance() && origin_position_ != nullptr;
}
inline bool Drill::has_origin_position() const {
  return _internal_has_origin_position();
}
inline void Drill::clear_origin_position() {
  if (GetArena() == nullptr && origin_position_ != nullptr) {
    delete origin_position_;
  }
  origin_position_ = nullptr;
}
inline const ::smart3dmap::v1::GeographicPosition& Drill::_internal_origin_position() const {
  const ::smart3dmap::v1::GeographicPosition* p = origin_position_;
  return p != nullptr ? *p : reinterpret_cast<const ::smart3dmap::v1::GeographicPosition&>(
      ::smart3dmap::v1::_GeographicPosition_default_instance_);
}
inline const ::smart3dmap::v1::GeographicPosition& Drill::origin_position() const {
  // @@protoc_insertion_point(field_get:smart3dmap.v1.Drill.origin_position)
  return _internal_origin_position();
}
inline void Drill::unsafe_arena_set_allocated_origin_position(
    ::smart3dmap::v1::GeographicPosition* origin_position) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(origin_position_);
  }
  origin_position_ = origin_position;
  if (origin_position) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:smart3dmap.v1.Drill.origin_position)
}
inline ::smart3dmap::v1::GeographicPosition* Drill::release_origin_position() {
  
  ::smart3dmap::v1::GeographicPosition* temp = origin_position_;
  origin_position_ = nullptr;
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::smart3dmap::v1::GeographicPosition* Drill::unsafe_arena_release_origin_position() {
  // @@protoc_insertion_point(field_release:smart3dmap.v1.Drill.origin_position)
  
  ::smart3dmap::v1::GeographicPosition* temp = origin_position_;
  origin_position_ = nullptr;
  return temp;
}
inline ::smart3dmap::v1::GeographicPosition* Drill::_internal_mutable_origin_position() {
  
  if (origin_position_ == nullptr) {
    auto* p = CreateMaybeMessage<::smart3dmap::v1::GeographicPosition>(GetArena());
    origin_position_ = p;
  }
  return origin_position_;
}
inline ::smart3dmap::v1::GeographicPosition* Drill::mutable_origin_position() {
  // @@protoc_insertion_point(field_mutable:smart3dmap.v1.Drill.origin_position)
  return _internal_mutable_origin_position();
}
inline void Drill::set_allocated_origin_position(::smart3dmap::v1::GeographicPosition* origin_position) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete origin_position_;
  }
  if (origin_position) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(origin_position);
    if (message_arena != submessage_arena) {
      origin_position = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, origin_position, submessage_arena);
    }
    
  } else {
    
  }
  origin_position_ = origin_position;
  // @@protoc_insertion_point(field_set_allocated:smart3dmap.v1.Drill.origin_position)
}

// double depth = 10;
inline void Drill::clear_depth() {
  depth_ = 0;
}
inline double Drill::_internal_depth() const {
  return depth_;
}
inline double Drill::depth() const {
  // @@protoc_insertion_point(field_get:smart3dmap.v1.Drill.depth)
  return _internal_depth();
}
inline void Drill::_internal_set_depth(double value) {
  
  depth_ = value;
}
inline void Drill::set_depth(double value) {
  _internal_set_depth(value);
  // @@protoc_insertion_point(field_set:smart3dmap.v1.Drill.depth)
}

// double stable_water_depth = 11;
inline void Drill::clear_stable_water_depth() {
  stable_water_depth_ = 0;
}
inline double Drill::_internal_stable_water_depth() const {
  return stable_water_depth_;
}
inline double Drill::stable_water_depth() const {
  // @@protoc_insertion_point(field_get:smart3dmap.v1.Drill.stable_water_depth)
  return _internal_stable_water_depth();
}
inline void Drill::_internal_set_stable_water_depth(double value) {
  
  stable_water_depth_ = value;
}
inline void Drill::set_stable_water_depth(double value) {
  _internal_set_stable_water_depth(value);
  // @@protoc_insertion_point(field_set:smart3dmap.v1.Drill.stable_water_depth)
}

// string district = 12;
inline void Drill::clear_district() {
  district_.ClearToEmpty();
}
inline const std::string& Drill::district() const {
  // @@protoc_insertion_point(field_get:smart3dmap.v1.Drill.district)
  return _internal_district();
}
inline void Drill::set_district(const std::string& value) {
  _internal_set_district(value);
  // @@protoc_insertion_point(field_set:smart3dmap.v1.Drill.district)
}
inline std::string* Drill::mutable_district() {
  // @@protoc_insertion_point(field_mutable:smart3dmap.v1.Drill.district)
  return _internal_mutable_district();
}
inline const std::string& Drill::_internal_district() const {
  return district_.Get();
}
inline void Drill::_internal_set_district(const std::string& value) {
  
  district_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArena());
}
inline void Drill::set_district(std::string&& value) {
  
  district_.Set(
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:smart3dmap.v1.Drill.district)
}
inline void Drill::set_district(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  district_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(value), GetArena());
  // @@protoc_insertion_point(field_set_char:smart3dmap.v1.Drill.district)
}
inline void Drill::set_district(const char* value,
    size_t size) {
  
  district_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:smart3dmap.v1.Drill.district)
}
inline std::string* Drill::_internal_mutable_district() {
  
  return district_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArena());
}
inline std::string* Drill::release_district() {
  // @@protoc_insertion_point(field_release:smart3dmap.v1.Drill.district)
  return district_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void Drill::set_allocated_district(std::string* district) {
  if (district != nullptr) {
    
  } else {
    
  }
  district_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), district,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:smart3dmap.v1.Drill.district)
}

// .google.protobuf.Timestamp start_date = 13;
inline bool Drill::_internal_has_start_date() const {
  return this != internal_default_instance() && start_date_ != nullptr;
}
inline bool Drill::has_start_date() const {
  return _internal_has_start_date();
}
inline const PROTOBUF_NAMESPACE_ID::Timestamp& Drill::_internal_start_date() const {
  const PROTOBUF_NAMESPACE_ID::Timestamp* p = start_date_;
  return p != nullptr ? *p : reinterpret_cast<const PROTOBUF_NAMESPACE_ID::Timestamp&>(
      PROTOBUF_NAMESPACE_ID::_Timestamp_default_instance_);
}
inline const PROTOBUF_NAMESPACE_ID::Timestamp& Drill::start_date() const {
  // @@protoc_insertion_point(field_get:smart3dmap.v1.Drill.start_date)
  return _internal_start_date();
}
inline void Drill::unsafe_arena_set_allocated_start_date(
    PROTOBUF_NAMESPACE_ID::Timestamp* start_date) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(start_date_);
  }
  start_date_ = start_date;
  if (start_date) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:smart3dmap.v1.Drill.start_date)
}
inline PROTOBUF_NAMESPACE_ID::Timestamp* Drill::release_start_date() {
  
  PROTOBUF_NAMESPACE_ID::Timestamp* temp = start_date_;
  start_date_ = nullptr;
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline PROTOBUF_NAMESPACE_ID::Timestamp* Drill::unsafe_arena_release_start_date() {
  // @@protoc_insertion_point(field_release:smart3dmap.v1.Drill.start_date)
  
  PROTOBUF_NAMESPACE_ID::Timestamp* temp = start_date_;
  start_date_ = nullptr;
  return temp;
}
inline PROTOBUF_NAMESPACE_ID::Timestamp* Drill::_internal_mutable_start_date() {
  
  if (start_date_ == nullptr) {
    auto* p = CreateMaybeMessage<PROTOBUF_NAMESPACE_ID::Timestamp>(GetArena());
    start_date_ = p;
  }
  return start_date_;
}
inline PROTOBUF_NAMESPACE_ID::Timestamp* Drill::mutable_start_date() {
  // @@protoc_insertion_point(field_mutable:smart3dmap.v1.Drill.start_date)
  return _internal_mutable_start_date();
}
inline void Drill::set_allocated_start_date(PROTOBUF_NAMESPACE_ID::Timestamp* start_date) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(start_date_);
  }
  if (start_date) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(start_date)->GetArena();
    if (message_arena != submessage_arena) {
      start_date = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, start_date, submessage_arena);
    }
    
  } else {
    
  }
  start_date_ = start_date;
  // @@protoc_insertion_point(field_set_allocated:smart3dmap.v1.Drill.start_date)
}

// .google.protobuf.Timestamp end_date = 14;
inline bool Drill::_internal_has_end_date() const {
  return this != internal_default_instance() && end_date_ != nullptr;
}
inline bool Drill::has_end_date() const {
  return _internal_has_end_date();
}
inline const PROTOBUF_NAMESPACE_ID::Timestamp& Drill::_internal_end_date() const {
  const PROTOBUF_NAMESPACE_ID::Timestamp* p = end_date_;
  return p != nullptr ? *p : reinterpret_cast<const PROTOBUF_NAMESPACE_ID::Timestamp&>(
      PROTOBUF_NAMESPACE_ID::_Timestamp_default_instance_);
}
inline const PROTOBUF_NAMESPACE_ID::Timestamp& Drill::end_date() const {
  // @@protoc_insertion_point(field_get:smart3dmap.v1.Drill.end_date)
  return _internal_end_date();
}
inline void Drill::unsafe_arena_set_allocated_end_date(
    PROTOBUF_NAMESPACE_ID::Timestamp* end_date) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(end_date_);
  }
  end_date_ = end_date;
  if (end_date) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:smart3dmap.v1.Drill.end_date)
}
inline PROTOBUF_NAMESPACE_ID::Timestamp* Drill::release_end_date() {
  
  PROTOBUF_NAMESPACE_ID::Timestamp* temp = end_date_;
  end_date_ = nullptr;
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline PROTOBUF_NAMESPACE_ID::Timestamp* Drill::unsafe_arena_release_end_date() {
  // @@protoc_insertion_point(field_release:smart3dmap.v1.Drill.end_date)
  
  PROTOBUF_NAMESPACE_ID::Timestamp* temp = end_date_;
  end_date_ = nullptr;
  return temp;
}
inline PROTOBUF_NAMESPACE_ID::Timestamp* Drill::_internal_mutable_end_date() {
  
  if (end_date_ == nullptr) {
    auto* p = CreateMaybeMessage<PROTOBUF_NAMESPACE_ID::Timestamp>(GetArena());
    end_date_ = p;
  }
  return end_date_;
}
inline PROTOBUF_NAMESPACE_ID::Timestamp* Drill::mutable_end_date() {
  // @@protoc_insertion_point(field_mutable:smart3dmap.v1.Drill.end_date)
  return _internal_mutable_end_date();
}
inline void Drill::set_allocated_end_date(PROTOBUF_NAMESPACE_ID::Timestamp* end_date) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(end_date_);
  }
  if (end_date) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(end_date)->GetArena();
    if (message_arena != submessage_arena) {
      end_date = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, end_date, submessage_arena);
    }
    
  } else {
    
  }
  end_date_ = end_date;
  // @@protoc_insertion_point(field_set_allocated:smart3dmap.v1.Drill.end_date)
}

// bool is_virtual_drill = 15;
inline void Drill::clear_is_virtual_drill() {
  is_virtual_drill_ = false;
}
inline bool Drill::_internal_is_virtual_drill() const {
  return is_virtual_drill_;
}
inline bool Drill::is_virtual_drill() const {
  // @@protoc_insertion_point(field_get:smart3dmap.v1.Drill.is_virtual_drill)
  return _internal_is_virtual_drill();
}
inline void Drill::_internal_set_is_virtual_drill(bool value) {
  
  is_virtual_drill_ = value;
}
inline void Drill::set_is_virtual_drill(bool value) {
  _internal_set_is_virtual_drill(value);
  // @@protoc_insertion_point(field_set:smart3dmap.v1.Drill.is_virtual_drill)
}

// .google.protobuf.DoubleValue longitude = 16;
inline bool Drill::_internal_has_longitude() const {
  return this != internal_default_instance() && longitude_ != nullptr;
}
inline bool Drill::has_longitude() const {
  return _internal_has_longitude();
}
inline const PROTOBUF_NAMESPACE_ID::DoubleValue& Drill::_internal_longitude() const {
  const PROTOBUF_NAMESPACE_ID::DoubleValue* p = longitude_;
  return p != nullptr ? *p : reinterpret_cast<const PROTOBUF_NAMESPACE_ID::DoubleValue&>(
      PROTOBUF_NAMESPACE_ID::_DoubleValue_default_instance_);
}
inline const PROTOBUF_NAMESPACE_ID::DoubleValue& Drill::longitude() const {
  // @@protoc_insertion_point(field_get:smart3dmap.v1.Drill.longitude)
  return _internal_longitude();
}
inline void Drill::unsafe_arena_set_allocated_longitude(
    PROTOBUF_NAMESPACE_ID::DoubleValue* longitude) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(longitude_);
  }
  longitude_ = longitude;
  if (longitude) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:smart3dmap.v1.Drill.longitude)
}
inline PROTOBUF_NAMESPACE_ID::DoubleValue* Drill::release_longitude() {
  
  PROTOBUF_NAMESPACE_ID::DoubleValue* temp = longitude_;
  longitude_ = nullptr;
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline PROTOBUF_NAMESPACE_ID::DoubleValue* Drill::unsafe_arena_release_longitude() {
  // @@protoc_insertion_point(field_release:smart3dmap.v1.Drill.longitude)
  
  PROTOBUF_NAMESPACE_ID::DoubleValue* temp = longitude_;
  longitude_ = nullptr;
  return temp;
}
inline PROTOBUF_NAMESPACE_ID::DoubleValue* Drill::_internal_mutable_longitude() {
  
  if (longitude_ == nullptr) {
    auto* p = CreateMaybeMessage<PROTOBUF_NAMESPACE_ID::DoubleValue>(GetArena());
    longitude_ = p;
  }
  return longitude_;
}
inline PROTOBUF_NAMESPACE_ID::DoubleValue* Drill::mutable_longitude() {
  // @@protoc_insertion_point(field_mutable:smart3dmap.v1.Drill.longitude)
  return _internal_mutable_longitude();
}
inline void Drill::set_allocated_longitude(PROTOBUF_NAMESPACE_ID::DoubleValue* longitude) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(longitude_);
  }
  if (longitude) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(longitude)->GetArena();
    if (message_arena != submessage_arena) {
      longitude = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, longitude, submessage_arena);
    }
    
  } else {
    
  }
  longitude_ = longitude;
  // @@protoc_insertion_point(field_set_allocated:smart3dmap.v1.Drill.longitude)
}

// .google.protobuf.DoubleValue latitude = 17;
inline bool Drill::_internal_has_latitude() const {
  return this != internal_default_instance() && latitude_ != nullptr;
}
inline bool Drill::has_latitude() const {
  return _internal_has_latitude();
}
inline const PROTOBUF_NAMESPACE_ID::DoubleValue& Drill::_internal_latitude() const {
  const PROTOBUF_NAMESPACE_ID::DoubleValue* p = latitude_;
  return p != nullptr ? *p : reinterpret_cast<const PROTOBUF_NAMESPACE_ID::DoubleValue&>(
      PROTOBUF_NAMESPACE_ID::_DoubleValue_default_instance_);
}
inline const PROTOBUF_NAMESPACE_ID::DoubleValue& Drill::latitude() const {
  // @@protoc_insertion_point(field_get:smart3dmap.v1.Drill.latitude)
  return _internal_latitude();
}
inline void Drill::unsafe_arena_set_allocated_latitude(
    PROTOBUF_NAMESPACE_ID::DoubleValue* latitude) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(latitude_);
  }
  latitude_ = latitude;
  if (latitude) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:smart3dmap.v1.Drill.latitude)
}
inline PROTOBUF_NAMESPACE_ID::DoubleValue* Drill::release_latitude() {
  
  PROTOBUF_NAMESPACE_ID::DoubleValue* temp = latitude_;
  latitude_ = nullptr;
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline PROTOBUF_NAMESPACE_ID::DoubleValue* Drill::unsafe_arena_release_latitude() {
  // @@protoc_insertion_point(field_release:smart3dmap.v1.Drill.latitude)
  
  PROTOBUF_NAMESPACE_ID::DoubleValue* temp = latitude_;
  latitude_ = nullptr;
  return temp;
}
inline PROTOBUF_NAMESPACE_ID::DoubleValue* Drill::_internal_mutable_latitude() {
  
  if (latitude_ == nullptr) {
    auto* p = CreateMaybeMessage<PROTOBUF_NAMESPACE_ID::DoubleValue>(GetArena());
    latitude_ = p;
  }
  return latitude_;
}
inline PROTOBUF_NAMESPACE_ID::DoubleValue* Drill::mutable_latitude() {
  // @@protoc_insertion_point(field_mutable:smart3dmap.v1.Drill.latitude)
  return _internal_mutable_latitude();
}
inline void Drill::set_allocated_latitude(PROTOBUF_NAMESPACE_ID::DoubleValue* latitude) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(latitude_);
  }
  if (latitude) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(latitude)->GetArena();
    if (message_arena != submessage_arena) {
      latitude = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, latitude, submessage_arena);
    }
    
  } else {
    
  }
  latitude_ = latitude;
  // @@protoc_insertion_point(field_set_allocated:smart3dmap.v1.Drill.latitude)
}

// -------------------------------------------------------------------

// ImportDrillStatus

// bool status = 1;
inline void ImportDrillStatus::clear_status() {
  status_ = false;
}
inline bool ImportDrillStatus::_internal_status() const {
  return status_;
}
inline bool ImportDrillStatus::status() const {
  // @@protoc_insertion_point(field_get:smart3dmap.v1.ImportDrillStatus.status)
  return _internal_status();
}
inline void ImportDrillStatus::_internal_set_status(bool value) {
  
  status_ = value;
}
inline void ImportDrillStatus::set_status(bool value) {
  _internal_set_status(value);
  // @@protoc_insertion_point(field_set:smart3dmap.v1.ImportDrillStatus.status)
}

// string error = 2;
inline void ImportDrillStatus::clear_error() {
  error_.ClearToEmpty();
}
inline const std::string& ImportDrillStatus::error() const {
  // @@protoc_insertion_point(field_get:smart3dmap.v1.ImportDrillStatus.error)
  return _internal_error();
}
inline void ImportDrillStatus::set_error(const std::string& value) {
  _internal_set_error(value);
  // @@protoc_insertion_point(field_set:smart3dmap.v1.ImportDrillStatus.error)
}
inline std::string* ImportDrillStatus::mutable_error() {
  // @@protoc_insertion_point(field_mutable:smart3dmap.v1.ImportDrillStatus.error)
  return _internal_mutable_error();
}
inline const std::string& ImportDrillStatus::_internal_error() const {
  return error_.Get();
}
inline void ImportDrillStatus::_internal_set_error(const std::string& value) {
  
  error_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArena());
}
inline void ImportDrillStatus::set_error(std::string&& value) {
  
  error_.Set(
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:smart3dmap.v1.ImportDrillStatus.error)
}
inline void ImportDrillStatus::set_error(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  error_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(value), GetArena());
  // @@protoc_insertion_point(field_set_char:smart3dmap.v1.ImportDrillStatus.error)
}
inline void ImportDrillStatus::set_error(const char* value,
    size_t size) {
  
  error_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:smart3dmap.v1.ImportDrillStatus.error)
}
inline std::string* ImportDrillStatus::_internal_mutable_error() {
  
  return error_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArena());
}
inline std::string* ImportDrillStatus::release_error() {
  // @@protoc_insertion_point(field_release:smart3dmap.v1.ImportDrillStatus.error)
  return error_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void ImportDrillStatus::set_allocated_error(std::string* error) {
  if (error != nullptr) {
    
  } else {
    
  }
  error_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), error,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:smart3dmap.v1.ImportDrillStatus.error)
}

// int32 db_id = 3;
inline void ImportDrillStatus::clear_db_id() {
  db_id_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 ImportDrillStatus::_internal_db_id() const {
  return db_id_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 ImportDrillStatus::db_id() const {
  // @@protoc_insertion_point(field_get:smart3dmap.v1.ImportDrillStatus.db_id)
  return _internal_db_id();
}
inline void ImportDrillStatus::_internal_set_db_id(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  db_id_ = value;
}
inline void ImportDrillStatus::set_db_id(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_db_id(value);
  // @@protoc_insertion_point(field_set:smart3dmap.v1.ImportDrillStatus.db_id)
}

// int32 drill_id = 4;
inline void ImportDrillStatus::clear_drill_id() {
  drill_id_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 ImportDrillStatus::_internal_drill_id() const {
  return drill_id_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 ImportDrillStatus::drill_id() const {
  // @@protoc_insertion_point(field_get:smart3dmap.v1.ImportDrillStatus.drill_id)
  return _internal_drill_id();
}
inline void ImportDrillStatus::_internal_set_drill_id(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  drill_id_ = value;
}
inline void ImportDrillStatus::set_drill_id(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_drill_id(value);
  // @@protoc_insertion_point(field_set:smart3dmap.v1.ImportDrillStatus.drill_id)
}

// string drill_code = 5;
inline void ImportDrillStatus::clear_drill_code() {
  drill_code_.ClearToEmpty();
}
inline const std::string& ImportDrillStatus::drill_code() const {
  // @@protoc_insertion_point(field_get:smart3dmap.v1.ImportDrillStatus.drill_code)
  return _internal_drill_code();
}
inline void ImportDrillStatus::set_drill_code(const std::string& value) {
  _internal_set_drill_code(value);
  // @@protoc_insertion_point(field_set:smart3dmap.v1.ImportDrillStatus.drill_code)
}
inline std::string* ImportDrillStatus::mutable_drill_code() {
  // @@protoc_insertion_point(field_mutable:smart3dmap.v1.ImportDrillStatus.drill_code)
  return _internal_mutable_drill_code();
}
inline const std::string& ImportDrillStatus::_internal_drill_code() const {
  return drill_code_.Get();
}
inline void ImportDrillStatus::_internal_set_drill_code(const std::string& value) {
  
  drill_code_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArena());
}
inline void ImportDrillStatus::set_drill_code(std::string&& value) {
  
  drill_code_.Set(
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:smart3dmap.v1.ImportDrillStatus.drill_code)
}
inline void ImportDrillStatus::set_drill_code(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  drill_code_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(value), GetArena());
  // @@protoc_insertion_point(field_set_char:smart3dmap.v1.ImportDrillStatus.drill_code)
}
inline void ImportDrillStatus::set_drill_code(const char* value,
    size_t size) {
  
  drill_code_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:smart3dmap.v1.ImportDrillStatus.drill_code)
}
inline std::string* ImportDrillStatus::_internal_mutable_drill_code() {
  
  return drill_code_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArena());
}
inline std::string* ImportDrillStatus::release_drill_code() {
  // @@protoc_insertion_point(field_release:smart3dmap.v1.ImportDrillStatus.drill_code)
  return drill_code_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void ImportDrillStatus::set_allocated_drill_code(std::string* drill_code) {
  if (drill_code != nullptr) {
    
  } else {
    
  }
  drill_code_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), drill_code,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:smart3dmap.v1.ImportDrillStatus.drill_code)
}

// -------------------------------------------------------------------

// ImportDrillsRequest

// int32 db_id = 1;
inline void ImportDrillsRequest::clear_db_id() {
  db_id_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 ImportDrillsRequest::_internal_db_id() const {
  return db_id_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 ImportDrillsRequest::db_id() const {
  // @@protoc_insertion_point(field_get:smart3dmap.v1.ImportDrillsRequest.db_id)
  return _internal_db_id();
}
inline void ImportDrillsRequest::_internal_set_db_id(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  db_id_ = value;
}
inline void ImportDrillsRequest::set_db_id(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_db_id(value);
  // @@protoc_insertion_point(field_set:smart3dmap.v1.ImportDrillsRequest.db_id)
}

// repeated .smart3dmap.v1.Drill drills = 2;
inline int ImportDrillsRequest::_internal_drills_size() const {
  return drills_.size();
}
inline int ImportDrillsRequest::drills_size() const {
  return _internal_drills_size();
}
inline void ImportDrillsRequest::clear_drills() {
  drills_.Clear();
}
inline ::smart3dmap::v1::Drill* ImportDrillsRequest::mutable_drills(int index) {
  // @@protoc_insertion_point(field_mutable:smart3dmap.v1.ImportDrillsRequest.drills)
  return drills_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::smart3dmap::v1::Drill >*
ImportDrillsRequest::mutable_drills() {
  // @@protoc_insertion_point(field_mutable_list:smart3dmap.v1.ImportDrillsRequest.drills)
  return &drills_;
}
inline const ::smart3dmap::v1::Drill& ImportDrillsRequest::_internal_drills(int index) const {
  return drills_.Get(index);
}
inline const ::smart3dmap::v1::Drill& ImportDrillsRequest::drills(int index) const {
  // @@protoc_insertion_point(field_get:smart3dmap.v1.ImportDrillsRequest.drills)
  return _internal_drills(index);
}
inline ::smart3dmap::v1::Drill* ImportDrillsRequest::_internal_add_drills() {
  return drills_.Add();
}
inline ::smart3dmap::v1::Drill* ImportDrillsRequest::add_drills() {
  // @@protoc_insertion_point(field_add:smart3dmap.v1.ImportDrillsRequest.drills)
  return _internal_add_drills();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::smart3dmap::v1::Drill >&
ImportDrillsRequest::drills() const {
  // @@protoc_insertion_point(field_list:smart3dmap.v1.ImportDrillsRequest.drills)
  return drills_;
}

// -------------------------------------------------------------------

// ImportDrillsResponse

// bool status = 1;
inline void ImportDrillsResponse::clear_status() {
  status_ = false;
}
inline bool ImportDrillsResponse::_internal_status() const {
  return status_;
}
inline bool ImportDrillsResponse::status() const {
  // @@protoc_insertion_point(field_get:smart3dmap.v1.ImportDrillsResponse.status)
  return _internal_status();
}
inline void ImportDrillsResponse::_internal_set_status(bool value) {
  
  status_ = value;
}
inline void ImportDrillsResponse::set_status(bool value) {
  _internal_set_status(value);
  // @@protoc_insertion_point(field_set:smart3dmap.v1.ImportDrillsResponse.status)
}

// string error = 2;
inline void ImportDrillsResponse::clear_error() {
  error_.ClearToEmpty();
}
inline const std::string& ImportDrillsResponse::error() const {
  // @@protoc_insertion_point(field_get:smart3dmap.v1.ImportDrillsResponse.error)
  return _internal_error();
}
inline void ImportDrillsResponse::set_error(const std::string& value) {
  _internal_set_error(value);
  // @@protoc_insertion_point(field_set:smart3dmap.v1.ImportDrillsResponse.error)
}
inline std::string* ImportDrillsResponse::mutable_error() {
  // @@protoc_insertion_point(field_mutable:smart3dmap.v1.ImportDrillsResponse.error)
  return _internal_mutable_error();
}
inline const std::string& ImportDrillsResponse::_internal_error() const {
  return error_.Get();
}
inline void ImportDrillsResponse::_internal_set_error(const std::string& value) {
  
  error_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArena());
}
inline void ImportDrillsResponse::set_error(std::string&& value) {
  
  error_.Set(
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:smart3dmap.v1.ImportDrillsResponse.error)
}
inline void ImportDrillsResponse::set_error(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  error_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(value), GetArena());
  // @@protoc_insertion_point(field_set_char:smart3dmap.v1.ImportDrillsResponse.error)
}
inline void ImportDrillsResponse::set_error(const char* value,
    size_t size) {
  
  error_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:smart3dmap.v1.ImportDrillsResponse.error)
}
inline std::string* ImportDrillsResponse::_internal_mutable_error() {
  
  return error_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArena());
}
inline std::string* ImportDrillsResponse::release_error() {
  // @@protoc_insertion_point(field_release:smart3dmap.v1.ImportDrillsResponse.error)
  return error_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void ImportDrillsResponse::set_allocated_error(std::string* error) {
  if (error != nullptr) {
    
  } else {
    
  }
  error_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), error,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:smart3dmap.v1.ImportDrillsResponse.error)
}

// -------------------------------------------------------------------

// DrillOriginalLayers_Layer

// string geologica_age = 1;
inline void DrillOriginalLayers_Layer::clear_geologica_age() {
  geologica_age_.ClearToEmpty();
}
inline const std::string& DrillOriginalLayers_Layer::geologica_age() const {
  // @@protoc_insertion_point(field_get:smart3dmap.v1.DrillOriginalLayers.Layer.geologica_age)
  return _internal_geologica_age();
}
inline void DrillOriginalLayers_Layer::set_geologica_age(const std::string& value) {
  _internal_set_geologica_age(value);
  // @@protoc_insertion_point(field_set:smart3dmap.v1.DrillOriginalLayers.Layer.geologica_age)
}
inline std::string* DrillOriginalLayers_Layer::mutable_geologica_age() {
  // @@protoc_insertion_point(field_mutable:smart3dmap.v1.DrillOriginalLayers.Layer.geologica_age)
  return _internal_mutable_geologica_age();
}
inline const std::string& DrillOriginalLayers_Layer::_internal_geologica_age() const {
  return geologica_age_.Get();
}
inline void DrillOriginalLayers_Layer::_internal_set_geologica_age(const std::string& value) {
  
  geologica_age_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArena());
}
inline void DrillOriginalLayers_Layer::set_geologica_age(std::string&& value) {
  
  geologica_age_.Set(
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:smart3dmap.v1.DrillOriginalLayers.Layer.geologica_age)
}
inline void DrillOriginalLayers_Layer::set_geologica_age(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  geologica_age_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(value), GetArena());
  // @@protoc_insertion_point(field_set_char:smart3dmap.v1.DrillOriginalLayers.Layer.geologica_age)
}
inline void DrillOriginalLayers_Layer::set_geologica_age(const char* value,
    size_t size) {
  
  geologica_age_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:smart3dmap.v1.DrillOriginalLayers.Layer.geologica_age)
}
inline std::string* DrillOriginalLayers_Layer::_internal_mutable_geologica_age() {
  
  return geologica_age_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArena());
}
inline std::string* DrillOriginalLayers_Layer::release_geologica_age() {
  // @@protoc_insertion_point(field_release:smart3dmap.v1.DrillOriginalLayers.Layer.geologica_age)
  return geologica_age_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void DrillOriginalLayers_Layer::set_allocated_geologica_age(std::string* geologica_age) {
  if (geologica_age != nullptr) {
    
  } else {
    
  }
  geologica_age_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), geologica_age,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:smart3dmap.v1.DrillOriginalLayers.Layer.geologica_age)
}

// string formating_cause = 2;
inline void DrillOriginalLayers_Layer::clear_formating_cause() {
  formating_cause_.ClearToEmpty();
}
inline const std::string& DrillOriginalLayers_Layer::formating_cause() const {
  // @@protoc_insertion_point(field_get:smart3dmap.v1.DrillOriginalLayers.Layer.formating_cause)
  return _internal_formating_cause();
}
inline void DrillOriginalLayers_Layer::set_formating_cause(const std::string& value) {
  _internal_set_formating_cause(value);
  // @@protoc_insertion_point(field_set:smart3dmap.v1.DrillOriginalLayers.Layer.formating_cause)
}
inline std::string* DrillOriginalLayers_Layer::mutable_formating_cause() {
  // @@protoc_insertion_point(field_mutable:smart3dmap.v1.DrillOriginalLayers.Layer.formating_cause)
  return _internal_mutable_formating_cause();
}
inline const std::string& DrillOriginalLayers_Layer::_internal_formating_cause() const {
  return formating_cause_.Get();
}
inline void DrillOriginalLayers_Layer::_internal_set_formating_cause(const std::string& value) {
  
  formating_cause_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArena());
}
inline void DrillOriginalLayers_Layer::set_formating_cause(std::string&& value) {
  
  formating_cause_.Set(
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:smart3dmap.v1.DrillOriginalLayers.Layer.formating_cause)
}
inline void DrillOriginalLayers_Layer::set_formating_cause(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  formating_cause_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(value), GetArena());
  // @@protoc_insertion_point(field_set_char:smart3dmap.v1.DrillOriginalLayers.Layer.formating_cause)
}
inline void DrillOriginalLayers_Layer::set_formating_cause(const char* value,
    size_t size) {
  
  formating_cause_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:smart3dmap.v1.DrillOriginalLayers.Layer.formating_cause)
}
inline std::string* DrillOriginalLayers_Layer::_internal_mutable_formating_cause() {
  
  return formating_cause_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArena());
}
inline std::string* DrillOriginalLayers_Layer::release_formating_cause() {
  // @@protoc_insertion_point(field_release:smart3dmap.v1.DrillOriginalLayers.Layer.formating_cause)
  return formating_cause_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void DrillOriginalLayers_Layer::set_allocated_formating_cause(std::string* formating_cause) {
  if (formating_cause != nullptr) {
    
  } else {
    
  }
  formating_cause_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), formating_cause,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:smart3dmap.v1.DrillOriginalLayers.Layer.formating_cause)
}

// double bottom_z = 3;
inline void DrillOriginalLayers_Layer::clear_bottom_z() {
  bottom_z_ = 0;
}
inline double DrillOriginalLayers_Layer::_internal_bottom_z() const {
  return bottom_z_;
}
inline double DrillOriginalLayers_Layer::bottom_z() const {
  // @@protoc_insertion_point(field_get:smart3dmap.v1.DrillOriginalLayers.Layer.bottom_z)
  return _internal_bottom_z();
}
inline void DrillOriginalLayers_Layer::_internal_set_bottom_z(double value) {
  
  bottom_z_ = value;
}
inline void DrillOriginalLayers_Layer::set_bottom_z(double value) {
  _internal_set_bottom_z(value);
  // @@protoc_insertion_point(field_set:smart3dmap.v1.DrillOriginalLayers.Layer.bottom_z)
}

// double bottom_depth = 4;
inline void DrillOriginalLayers_Layer::clear_bottom_depth() {
  bottom_depth_ = 0;
}
inline double DrillOriginalLayers_Layer::_internal_bottom_depth() const {
  return bottom_depth_;
}
inline double DrillOriginalLayers_Layer::bottom_depth() const {
  // @@protoc_insertion_point(field_get:smart3dmap.v1.DrillOriginalLayers.Layer.bottom_depth)
  return _internal_bottom_depth();
}
inline void DrillOriginalLayers_Layer::_internal_set_bottom_depth(double value) {
  
  bottom_depth_ = value;
}
inline void DrillOriginalLayers_Layer::set_bottom_depth(double value) {
  _internal_set_bottom_depth(value);
  // @@protoc_insertion_point(field_set:smart3dmap.v1.DrillOriginalLayers.Layer.bottom_depth)
}

// double thickness = 5;
inline void DrillOriginalLayers_Layer::clear_thickness() {
  thickness_ = 0;
}
inline double DrillOriginalLayers_Layer::_internal_thickness() const {
  return thickness_;
}
inline double DrillOriginalLayers_Layer::thickness() const {
  // @@protoc_insertion_point(field_get:smart3dmap.v1.DrillOriginalLayers.Layer.thickness)
  return _internal_thickness();
}
inline void DrillOriginalLayers_Layer::_internal_set_thickness(double value) {
  
  thickness_ = value;
}
inline void DrillOriginalLayers_Layer::set_thickness(double value) {
  _internal_set_thickness(value);
  // @@protoc_insertion_point(field_set:smart3dmap.v1.DrillOriginalLayers.Layer.thickness)
}

// string name = 6;
inline void DrillOriginalLayers_Layer::clear_name() {
  name_.ClearToEmpty();
}
inline const std::string& DrillOriginalLayers_Layer::name() const {
  // @@protoc_insertion_point(field_get:smart3dmap.v1.DrillOriginalLayers.Layer.name)
  return _internal_name();
}
inline void DrillOriginalLayers_Layer::set_name(const std::string& value) {
  _internal_set_name(value);
  // @@protoc_insertion_point(field_set:smart3dmap.v1.DrillOriginalLayers.Layer.name)
}
inline std::string* DrillOriginalLayers_Layer::mutable_name() {
  // @@protoc_insertion_point(field_mutable:smart3dmap.v1.DrillOriginalLayers.Layer.name)
  return _internal_mutable_name();
}
inline const std::string& DrillOriginalLayers_Layer::_internal_name() const {
  return name_.Get();
}
inline void DrillOriginalLayers_Layer::_internal_set_name(const std::string& value) {
  
  name_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArena());
}
inline void DrillOriginalLayers_Layer::set_name(std::string&& value) {
  
  name_.Set(
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:smart3dmap.v1.DrillOriginalLayers.Layer.name)
}
inline void DrillOriginalLayers_Layer::set_name(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  name_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(value), GetArena());
  // @@protoc_insertion_point(field_set_char:smart3dmap.v1.DrillOriginalLayers.Layer.name)
}
inline void DrillOriginalLayers_Layer::set_name(const char* value,
    size_t size) {
  
  name_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:smart3dmap.v1.DrillOriginalLayers.Layer.name)
}
inline std::string* DrillOriginalLayers_Layer::_internal_mutable_name() {
  
  return name_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArena());
}
inline std::string* DrillOriginalLayers_Layer::release_name() {
  // @@protoc_insertion_point(field_release:smart3dmap.v1.DrillOriginalLayers.Layer.name)
  return name_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void DrillOriginalLayers_Layer::set_allocated_name(std::string* name) {
  if (name != nullptr) {
    
  } else {
    
  }
  name_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), name,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:smart3dmap.v1.DrillOriginalLayers.Layer.name)
}

// string color = 7;
inline void DrillOriginalLayers_Layer::clear_color() {
  color_.ClearToEmpty();
}
inline const std::string& DrillOriginalLayers_Layer::color() const {
  // @@protoc_insertion_point(field_get:smart3dmap.v1.DrillOriginalLayers.Layer.color)
  return _internal_color();
}
inline void DrillOriginalLayers_Layer::set_color(const std::string& value) {
  _internal_set_color(value);
  // @@protoc_insertion_point(field_set:smart3dmap.v1.DrillOriginalLayers.Layer.color)
}
inline std::string* DrillOriginalLayers_Layer::mutable_color() {
  // @@protoc_insertion_point(field_mutable:smart3dmap.v1.DrillOriginalLayers.Layer.color)
  return _internal_mutable_color();
}
inline const std::string& DrillOriginalLayers_Layer::_internal_color() const {
  return color_.Get();
}
inline void DrillOriginalLayers_Layer::_internal_set_color(const std::string& value) {
  
  color_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArena());
}
inline void DrillOriginalLayers_Layer::set_color(std::string&& value) {
  
  color_.Set(
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:smart3dmap.v1.DrillOriginalLayers.Layer.color)
}
inline void DrillOriginalLayers_Layer::set_color(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  color_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(value), GetArena());
  // @@protoc_insertion_point(field_set_char:smart3dmap.v1.DrillOriginalLayers.Layer.color)
}
inline void DrillOriginalLayers_Layer::set_color(const char* value,
    size_t size) {
  
  color_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:smart3dmap.v1.DrillOriginalLayers.Layer.color)
}
inline std::string* DrillOriginalLayers_Layer::_internal_mutable_color() {
  
  return color_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArena());
}
inline std::string* DrillOriginalLayers_Layer::release_color() {
  // @@protoc_insertion_point(field_release:smart3dmap.v1.DrillOriginalLayers.Layer.color)
  return color_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void DrillOriginalLayers_Layer::set_allocated_color(std::string* color) {
  if (color != nullptr) {
    
  } else {
    
  }
  color_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), color,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:smart3dmap.v1.DrillOriginalLayers.Layer.color)
}

// string description = 8;
inline void DrillOriginalLayers_Layer::clear_description() {
  description_.ClearToEmpty();
}
inline const std::string& DrillOriginalLayers_Layer::description() const {
  // @@protoc_insertion_point(field_get:smart3dmap.v1.DrillOriginalLayers.Layer.description)
  return _internal_description();
}
inline void DrillOriginalLayers_Layer::set_description(const std::string& value) {
  _internal_set_description(value);
  // @@protoc_insertion_point(field_set:smart3dmap.v1.DrillOriginalLayers.Layer.description)
}
inline std::string* DrillOriginalLayers_Layer::mutable_description() {
  // @@protoc_insertion_point(field_mutable:smart3dmap.v1.DrillOriginalLayers.Layer.description)
  return _internal_mutable_description();
}
inline const std::string& DrillOriginalLayers_Layer::_internal_description() const {
  return description_.Get();
}
inline void DrillOriginalLayers_Layer::_internal_set_description(const std::string& value) {
  
  description_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArena());
}
inline void DrillOriginalLayers_Layer::set_description(std::string&& value) {
  
  description_.Set(
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:smart3dmap.v1.DrillOriginalLayers.Layer.description)
}
inline void DrillOriginalLayers_Layer::set_description(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  description_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(value), GetArena());
  // @@protoc_insertion_point(field_set_char:smart3dmap.v1.DrillOriginalLayers.Layer.description)
}
inline void DrillOriginalLayers_Layer::set_description(const char* value,
    size_t size) {
  
  description_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:smart3dmap.v1.DrillOriginalLayers.Layer.description)
}
inline std::string* DrillOriginalLayers_Layer::_internal_mutable_description() {
  
  return description_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArena());
}
inline std::string* DrillOriginalLayers_Layer::release_description() {
  // @@protoc_insertion_point(field_release:smart3dmap.v1.DrillOriginalLayers.Layer.description)
  return description_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void DrillOriginalLayers_Layer::set_allocated_description(std::string* description) {
  if (description != nullptr) {
    
  } else {
    
  }
  description_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), description,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:smart3dmap.v1.DrillOriginalLayers.Layer.description)
}

// -------------------------------------------------------------------

// DrillOriginalLayers

// int32 db_id = 1;
inline void DrillOriginalLayers::clear_db_id() {
  db_id_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 DrillOriginalLayers::_internal_db_id() const {
  return db_id_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 DrillOriginalLayers::db_id() const {
  // @@protoc_insertion_point(field_get:smart3dmap.v1.DrillOriginalLayers.db_id)
  return _internal_db_id();
}
inline void DrillOriginalLayers::_internal_set_db_id(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  db_id_ = value;
}
inline void DrillOriginalLayers::set_db_id(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_db_id(value);
  // @@protoc_insertion_point(field_set:smart3dmap.v1.DrillOriginalLayers.db_id)
}

// int32 drill_id = 2;
inline void DrillOriginalLayers::clear_drill_id() {
  drill_id_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 DrillOriginalLayers::_internal_drill_id() const {
  return drill_id_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 DrillOriginalLayers::drill_id() const {
  // @@protoc_insertion_point(field_get:smart3dmap.v1.DrillOriginalLayers.drill_id)
  return _internal_drill_id();
}
inline void DrillOriginalLayers::_internal_set_drill_id(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  drill_id_ = value;
}
inline void DrillOriginalLayers::set_drill_id(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_drill_id(value);
  // @@protoc_insertion_point(field_set:smart3dmap.v1.DrillOriginalLayers.drill_id)
}

// repeated .smart3dmap.v1.DrillOriginalLayers.Layer layers = 3;
inline int DrillOriginalLayers::_internal_layers_size() const {
  return layers_.size();
}
inline int DrillOriginalLayers::layers_size() const {
  return _internal_layers_size();
}
inline void DrillOriginalLayers::clear_layers() {
  layers_.Clear();
}
inline ::smart3dmap::v1::DrillOriginalLayers_Layer* DrillOriginalLayers::mutable_layers(int index) {
  // @@protoc_insertion_point(field_mutable:smart3dmap.v1.DrillOriginalLayers.layers)
  return layers_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::smart3dmap::v1::DrillOriginalLayers_Layer >*
DrillOriginalLayers::mutable_layers() {
  // @@protoc_insertion_point(field_mutable_list:smart3dmap.v1.DrillOriginalLayers.layers)
  return &layers_;
}
inline const ::smart3dmap::v1::DrillOriginalLayers_Layer& DrillOriginalLayers::_internal_layers(int index) const {
  return layers_.Get(index);
}
inline const ::smart3dmap::v1::DrillOriginalLayers_Layer& DrillOriginalLayers::layers(int index) const {
  // @@protoc_insertion_point(field_get:smart3dmap.v1.DrillOriginalLayers.layers)
  return _internal_layers(index);
}
inline ::smart3dmap::v1::DrillOriginalLayers_Layer* DrillOriginalLayers::_internal_add_layers() {
  return layers_.Add();
}
inline ::smart3dmap::v1::DrillOriginalLayers_Layer* DrillOriginalLayers::add_layers() {
  // @@protoc_insertion_point(field_add:smart3dmap.v1.DrillOriginalLayers.layers)
  return _internal_add_layers();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::smart3dmap::v1::DrillOriginalLayers_Layer >&
DrillOriginalLayers::layers() const {
  // @@protoc_insertion_point(field_list:smart3dmap.v1.DrillOriginalLayers.layers)
  return layers_;
}

// -------------------------------------------------------------------

// DrillStdLayers_Layer

// string strat_code = 1;
inline void DrillStdLayers_Layer::clear_strat_code() {
  strat_code_.ClearToEmpty();
}
inline const std::string& DrillStdLayers_Layer::strat_code() const {
  // @@protoc_insertion_point(field_get:smart3dmap.v1.DrillStdLayers.Layer.strat_code)
  return _internal_strat_code();
}
inline void DrillStdLayers_Layer::set_strat_code(const std::string& value) {
  _internal_set_strat_code(value);
  // @@protoc_insertion_point(field_set:smart3dmap.v1.DrillStdLayers.Layer.strat_code)
}
inline std::string* DrillStdLayers_Layer::mutable_strat_code() {
  // @@protoc_insertion_point(field_mutable:smart3dmap.v1.DrillStdLayers.Layer.strat_code)
  return _internal_mutable_strat_code();
}
inline const std::string& DrillStdLayers_Layer::_internal_strat_code() const {
  return strat_code_.Get();
}
inline void DrillStdLayers_Layer::_internal_set_strat_code(const std::string& value) {
  
  strat_code_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArena());
}
inline void DrillStdLayers_Layer::set_strat_code(std::string&& value) {
  
  strat_code_.Set(
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:smart3dmap.v1.DrillStdLayers.Layer.strat_code)
}
inline void DrillStdLayers_Layer::set_strat_code(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  strat_code_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(value), GetArena());
  // @@protoc_insertion_point(field_set_char:smart3dmap.v1.DrillStdLayers.Layer.strat_code)
}
inline void DrillStdLayers_Layer::set_strat_code(const char* value,
    size_t size) {
  
  strat_code_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:smart3dmap.v1.DrillStdLayers.Layer.strat_code)
}
inline std::string* DrillStdLayers_Layer::_internal_mutable_strat_code() {
  
  return strat_code_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArena());
}
inline std::string* DrillStdLayers_Layer::release_strat_code() {
  // @@protoc_insertion_point(field_release:smart3dmap.v1.DrillStdLayers.Layer.strat_code)
  return strat_code_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void DrillStdLayers_Layer::set_allocated_strat_code(std::string* strat_code) {
  if (strat_code != nullptr) {
    
  } else {
    
  }
  strat_code_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), strat_code,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:smart3dmap.v1.DrillStdLayers.Layer.strat_code)
}

// string strat_item_level = 2;
inline void DrillStdLayers_Layer::clear_strat_item_level() {
  strat_item_level_.ClearToEmpty();
}
inline const std::string& DrillStdLayers_Layer::strat_item_level() const {
  // @@protoc_insertion_point(field_get:smart3dmap.v1.DrillStdLayers.Layer.strat_item_level)
  return _internal_strat_item_level();
}
inline void DrillStdLayers_Layer::set_strat_item_level(const std::string& value) {
  _internal_set_strat_item_level(value);
  // @@protoc_insertion_point(field_set:smart3dmap.v1.DrillStdLayers.Layer.strat_item_level)
}
inline std::string* DrillStdLayers_Layer::mutable_strat_item_level() {
  // @@protoc_insertion_point(field_mutable:smart3dmap.v1.DrillStdLayers.Layer.strat_item_level)
  return _internal_mutable_strat_item_level();
}
inline const std::string& DrillStdLayers_Layer::_internal_strat_item_level() const {
  return strat_item_level_.Get();
}
inline void DrillStdLayers_Layer::_internal_set_strat_item_level(const std::string& value) {
  
  strat_item_level_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArena());
}
inline void DrillStdLayers_Layer::set_strat_item_level(std::string&& value) {
  
  strat_item_level_.Set(
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:smart3dmap.v1.DrillStdLayers.Layer.strat_item_level)
}
inline void DrillStdLayers_Layer::set_strat_item_level(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  strat_item_level_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(value), GetArena());
  // @@protoc_insertion_point(field_set_char:smart3dmap.v1.DrillStdLayers.Layer.strat_item_level)
}
inline void DrillStdLayers_Layer::set_strat_item_level(const char* value,
    size_t size) {
  
  strat_item_level_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:smart3dmap.v1.DrillStdLayers.Layer.strat_item_level)
}
inline std::string* DrillStdLayers_Layer::_internal_mutable_strat_item_level() {
  
  return strat_item_level_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArena());
}
inline std::string* DrillStdLayers_Layer::release_strat_item_level() {
  // @@protoc_insertion_point(field_release:smart3dmap.v1.DrillStdLayers.Layer.strat_item_level)
  return strat_item_level_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void DrillStdLayers_Layer::set_allocated_strat_item_level(std::string* strat_item_level) {
  if (strat_item_level != nullptr) {
    
  } else {
    
  }
  strat_item_level_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), strat_item_level,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:smart3dmap.v1.DrillStdLayers.Layer.strat_item_level)
}

// double top_depth = 3;
inline void DrillStdLayers_Layer::clear_top_depth() {
  top_depth_ = 0;
}
inline double DrillStdLayers_Layer::_internal_top_depth() const {
  return top_depth_;
}
inline double DrillStdLayers_Layer::top_depth() const {
  // @@protoc_insertion_point(field_get:smart3dmap.v1.DrillStdLayers.Layer.top_depth)
  return _internal_top_depth();
}
inline void DrillStdLayers_Layer::_internal_set_top_depth(double value) {
  
  top_depth_ = value;
}
inline void DrillStdLayers_Layer::set_top_depth(double value) {
  _internal_set_top_depth(value);
  // @@protoc_insertion_point(field_set:smart3dmap.v1.DrillStdLayers.Layer.top_depth)
}

// double bottom_depth = 4;
inline void DrillStdLayers_Layer::clear_bottom_depth() {
  bottom_depth_ = 0;
}
inline double DrillStdLayers_Layer::_internal_bottom_depth() const {
  return bottom_depth_;
}
inline double DrillStdLayers_Layer::bottom_depth() const {
  // @@protoc_insertion_point(field_get:smart3dmap.v1.DrillStdLayers.Layer.bottom_depth)
  return _internal_bottom_depth();
}
inline void DrillStdLayers_Layer::_internal_set_bottom_depth(double value) {
  
  bottom_depth_ = value;
}
inline void DrillStdLayers_Layer::set_bottom_depth(double value) {
  _internal_set_bottom_depth(value);
  // @@protoc_insertion_point(field_set:smart3dmap.v1.DrillStdLayers.Layer.bottom_depth)
}

// -------------------------------------------------------------------

// DrillStdLayers

// int32 db_id = 1;
inline void DrillStdLayers::clear_db_id() {
  db_id_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 DrillStdLayers::_internal_db_id() const {
  return db_id_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 DrillStdLayers::db_id() const {
  // @@protoc_insertion_point(field_get:smart3dmap.v1.DrillStdLayers.db_id)
  return _internal_db_id();
}
inline void DrillStdLayers::_internal_set_db_id(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  db_id_ = value;
}
inline void DrillStdLayers::set_db_id(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_db_id(value);
  // @@protoc_insertion_point(field_set:smart3dmap.v1.DrillStdLayers.db_id)
}

// int32 drill_id = 2;
inline void DrillStdLayers::clear_drill_id() {
  drill_id_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 DrillStdLayers::_internal_drill_id() const {
  return drill_id_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 DrillStdLayers::drill_id() const {
  // @@protoc_insertion_point(field_get:smart3dmap.v1.DrillStdLayers.drill_id)
  return _internal_drill_id();
}
inline void DrillStdLayers::_internal_set_drill_id(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  drill_id_ = value;
}
inline void DrillStdLayers::set_drill_id(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_drill_id(value);
  // @@protoc_insertion_point(field_set:smart3dmap.v1.DrillStdLayers.drill_id)
}

// int32 std_strat_id = 3;
inline void DrillStdLayers::clear_std_strat_id() {
  std_strat_id_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 DrillStdLayers::_internal_std_strat_id() const {
  return std_strat_id_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 DrillStdLayers::std_strat_id() const {
  // @@protoc_insertion_point(field_get:smart3dmap.v1.DrillStdLayers.std_strat_id)
  return _internal_std_strat_id();
}
inline void DrillStdLayers::_internal_set_std_strat_id(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  std_strat_id_ = value;
}
inline void DrillStdLayers::set_std_strat_id(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_std_strat_id(value);
  // @@protoc_insertion_point(field_set:smart3dmap.v1.DrillStdLayers.std_strat_id)
}

// repeated .smart3dmap.v1.DrillStdLayers.Layer layers = 4;
inline int DrillStdLayers::_internal_layers_size() const {
  return layers_.size();
}
inline int DrillStdLayers::layers_size() const {
  return _internal_layers_size();
}
inline void DrillStdLayers::clear_layers() {
  layers_.Clear();
}
inline ::smart3dmap::v1::DrillStdLayers_Layer* DrillStdLayers::mutable_layers(int index) {
  // @@protoc_insertion_point(field_mutable:smart3dmap.v1.DrillStdLayers.layers)
  return layers_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::smart3dmap::v1::DrillStdLayers_Layer >*
DrillStdLayers::mutable_layers() {
  // @@protoc_insertion_point(field_mutable_list:smart3dmap.v1.DrillStdLayers.layers)
  return &layers_;
}
inline const ::smart3dmap::v1::DrillStdLayers_Layer& DrillStdLayers::_internal_layers(int index) const {
  return layers_.Get(index);
}
inline const ::smart3dmap::v1::DrillStdLayers_Layer& DrillStdLayers::layers(int index) const {
  // @@protoc_insertion_point(field_get:smart3dmap.v1.DrillStdLayers.layers)
  return _internal_layers(index);
}
inline ::smart3dmap::v1::DrillStdLayers_Layer* DrillStdLayers::_internal_add_layers() {
  return layers_.Add();
}
inline ::smart3dmap::v1::DrillStdLayers_Layer* DrillStdLayers::add_layers() {
  // @@protoc_insertion_point(field_add:smart3dmap.v1.DrillStdLayers.layers)
  return _internal_add_layers();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::smart3dmap::v1::DrillStdLayers_Layer >&
DrillStdLayers::layers() const {
  // @@protoc_insertion_point(field_list:smart3dmap.v1.DrillStdLayers.layers)
  return layers_;
}

// -------------------------------------------------------------------

// ImportDrillDataStatus

// bool status = 1;
inline void ImportDrillDataStatus::clear_status() {
  status_ = false;
}
inline bool ImportDrillDataStatus::_internal_status() const {
  return status_;
}
inline bool ImportDrillDataStatus::status() const {
  // @@protoc_insertion_point(field_get:smart3dmap.v1.ImportDrillDataStatus.status)
  return _internal_status();
}
inline void ImportDrillDataStatus::_internal_set_status(bool value) {
  
  status_ = value;
}
inline void ImportDrillDataStatus::set_status(bool value) {
  _internal_set_status(value);
  // @@protoc_insertion_point(field_set:smart3dmap.v1.ImportDrillDataStatus.status)
}

// string error = 2;
inline void ImportDrillDataStatus::clear_error() {
  error_.ClearToEmpty();
}
inline const std::string& ImportDrillDataStatus::error() const {
  // @@protoc_insertion_point(field_get:smart3dmap.v1.ImportDrillDataStatus.error)
  return _internal_error();
}
inline void ImportDrillDataStatus::set_error(const std::string& value) {
  _internal_set_error(value);
  // @@protoc_insertion_point(field_set:smart3dmap.v1.ImportDrillDataStatus.error)
}
inline std::string* ImportDrillDataStatus::mutable_error() {
  // @@protoc_insertion_point(field_mutable:smart3dmap.v1.ImportDrillDataStatus.error)
  return _internal_mutable_error();
}
inline const std::string& ImportDrillDataStatus::_internal_error() const {
  return error_.Get();
}
inline void ImportDrillDataStatus::_internal_set_error(const std::string& value) {
  
  error_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArena());
}
inline void ImportDrillDataStatus::set_error(std::string&& value) {
  
  error_.Set(
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:smart3dmap.v1.ImportDrillDataStatus.error)
}
inline void ImportDrillDataStatus::set_error(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  error_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(value), GetArena());
  // @@protoc_insertion_point(field_set_char:smart3dmap.v1.ImportDrillDataStatus.error)
}
inline void ImportDrillDataStatus::set_error(const char* value,
    size_t size) {
  
  error_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:smart3dmap.v1.ImportDrillDataStatus.error)
}
inline std::string* ImportDrillDataStatus::_internal_mutable_error() {
  
  return error_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArena());
}
inline std::string* ImportDrillDataStatus::release_error() {
  // @@protoc_insertion_point(field_release:smart3dmap.v1.ImportDrillDataStatus.error)
  return error_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void ImportDrillDataStatus::set_allocated_error(std::string* error) {
  if (error != nullptr) {
    
  } else {
    
  }
  error_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), error,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:smart3dmap.v1.ImportDrillDataStatus.error)
}

// -------------------------------------------------------------------

// DrillWaterCorrosivity

// int32 db_id = 1;
inline void DrillWaterCorrosivity::clear_db_id() {
  db_id_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 DrillWaterCorrosivity::_internal_db_id() const {
  return db_id_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 DrillWaterCorrosivity::db_id() const {
  // @@protoc_insertion_point(field_get:smart3dmap.v1.DrillWaterCorrosivity.db_id)
  return _internal_db_id();
}
inline void DrillWaterCorrosivity::_internal_set_db_id(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  db_id_ = value;
}
inline void DrillWaterCorrosivity::set_db_id(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_db_id(value);
  // @@protoc_insertion_point(field_set:smart3dmap.v1.DrillWaterCorrosivity.db_id)
}

// int32 drill_id = 2;
inline void DrillWaterCorrosivity::clear_drill_id() {
  drill_id_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 DrillWaterCorrosivity::_internal_drill_id() const {
  return drill_id_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 DrillWaterCorrosivity::drill_id() const {
  // @@protoc_insertion_point(field_get:smart3dmap.v1.DrillWaterCorrosivity.drill_id)
  return _internal_drill_id();
}
inline void DrillWaterCorrosivity::_internal_set_drill_id(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  drill_id_ = value;
}
inline void DrillWaterCorrosivity::set_drill_id(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_drill_id(value);
  // @@protoc_insertion_point(field_set:smart3dmap.v1.DrillWaterCorrosivity.drill_id)
}

// double ph = 3;
inline void DrillWaterCorrosivity::clear_ph() {
  ph_ = 0;
}
inline double DrillWaterCorrosivity::_internal_ph() const {
  return ph_;
}
inline double DrillWaterCorrosivity::ph() const {
  // @@protoc_insertion_point(field_get:smart3dmap.v1.DrillWaterCorrosivity.ph)
  return _internal_ph();
}
inline void DrillWaterCorrosivity::_internal_set_ph(double value) {
  
  ph_ = value;
}
inline void DrillWaterCorrosivity::set_ph(double value) {
  _internal_set_ph(value);
  // @@protoc_insertion_point(field_set:smart3dmap.v1.DrillWaterCorrosivity.ph)
}

// double co2 = 4;
inline void DrillWaterCorrosivity::clear_co2() {
  co2_ = 0;
}
inline double DrillWaterCorrosivity::_internal_co2() const {
  return co2_;
}
inline double DrillWaterCorrosivity::co2() const {
  // @@protoc_insertion_point(field_get:smart3dmap.v1.DrillWaterCorrosivity.co2)
  return _internal_co2();
}
inline void DrillWaterCorrosivity::_internal_set_co2(double value) {
  
  co2_ = value;
}
inline void DrillWaterCorrosivity::set_co2(double value) {
  _internal_set_co2(value);
  // @@protoc_insertion_point(field_set:smart3dmap.v1.DrillWaterCorrosivity.co2)
}

// double soluble_solid = 5;
inline void DrillWaterCorrosivity::clear_soluble_solid() {
  soluble_solid_ = 0;
}
inline double DrillWaterCorrosivity::_internal_soluble_solid() const {
  return soluble_solid_;
}
inline double DrillWaterCorrosivity::soluble_solid() const {
  // @@protoc_insertion_point(field_get:smart3dmap.v1.DrillWaterCorrosivity.soluble_solid)
  return _internal_soluble_solid();
}
inline void DrillWaterCorrosivity::_internal_set_soluble_solid(double value) {
  
  soluble_solid_ = value;
}
inline void DrillWaterCorrosivity::set_soluble_solid(double value) {
  _internal_set_soluble_solid(value);
  // @@protoc_insertion_point(field_set:smart3dmap.v1.DrillWaterCorrosivity.soluble_solid)
}

// double hco3 = 6;
inline void DrillWaterCorrosivity::clear_hco3() {
  hco3_ = 0;
}
inline double DrillWaterCorrosivity::_internal_hco3() const {
  return hco3_;
}
inline double DrillWaterCorrosivity::hco3() const {
  // @@protoc_insertion_point(field_get:smart3dmap.v1.DrillWaterCorrosivity.hco3)
  return _internal_hco3();
}
inline void DrillWaterCorrosivity::_internal_set_hco3(double value) {
  
  hco3_ = value;
}
inline void DrillWaterCorrosivity::set_hco3(double value) {
  _internal_set_hco3(value);
  // @@protoc_insertion_point(field_set:smart3dmap.v1.DrillWaterCorrosivity.hco3)
}

// double cl = 7;
inline void DrillWaterCorrosivity::clear_cl() {
  cl_ = 0;
}
inline double DrillWaterCorrosivity::_internal_cl() const {
  return cl_;
}
inline double DrillWaterCorrosivity::cl() const {
  // @@protoc_insertion_point(field_get:smart3dmap.v1.DrillWaterCorrosivity.cl)
  return _internal_cl();
}
inline void DrillWaterCorrosivity::_internal_set_cl(double value) {
  
  cl_ = value;
}
inline void DrillWaterCorrosivity::set_cl(double value) {
  _internal_set_cl(value);
  // @@protoc_insertion_point(field_set:smart3dmap.v1.DrillWaterCorrosivity.cl)
}

// double so4 = 8;
inline void DrillWaterCorrosivity::clear_so4() {
  so4_ = 0;
}
inline double DrillWaterCorrosivity::_internal_so4() const {
  return so4_;
}
inline double DrillWaterCorrosivity::so4() const {
  // @@protoc_insertion_point(field_get:smart3dmap.v1.DrillWaterCorrosivity.so4)
  return _internal_so4();
}
inline void DrillWaterCorrosivity::_internal_set_so4(double value) {
  
  so4_ = value;
}
inline void DrillWaterCorrosivity::set_so4(double value) {
  _internal_set_so4(value);
  // @@protoc_insertion_point(field_set:smart3dmap.v1.DrillWaterCorrosivity.so4)
}

// double mg = 9;
inline void DrillWaterCorrosivity::clear_mg() {
  mg_ = 0;
}
inline double DrillWaterCorrosivity::_internal_mg() const {
  return mg_;
}
inline double DrillWaterCorrosivity::mg() const {
  // @@protoc_insertion_point(field_get:smart3dmap.v1.DrillWaterCorrosivity.mg)
  return _internal_mg();
}
inline void DrillWaterCorrosivity::_internal_set_mg(double value) {
  
  mg_ = value;
}
inline void DrillWaterCorrosivity::set_mg(double value) {
  _internal_set_mg(value);
  // @@protoc_insertion_point(field_set:smart3dmap.v1.DrillWaterCorrosivity.mg)
}

// double nh4 = 10;
inline void DrillWaterCorrosivity::clear_nh4() {
  nh4_ = 0;
}
inline double DrillWaterCorrosivity::_internal_nh4() const {
  return nh4_;
}
inline double DrillWaterCorrosivity::nh4() const {
  // @@protoc_insertion_point(field_get:smart3dmap.v1.DrillWaterCorrosivity.nh4)
  return _internal_nh4();
}
inline void DrillWaterCorrosivity::_internal_set_nh4(double value) {
  
  nh4_ = value;
}
inline void DrillWaterCorrosivity::set_nh4(double value) {
  _internal_set_nh4(value);
  // @@protoc_insertion_point(field_set:smart3dmap.v1.DrillWaterCorrosivity.nh4)
}

// double k_na = 11;
inline void DrillWaterCorrosivity::clear_k_na() {
  k_na_ = 0;
}
inline double DrillWaterCorrosivity::_internal_k_na() const {
  return k_na_;
}
inline double DrillWaterCorrosivity::k_na() const {
  // @@protoc_insertion_point(field_get:smart3dmap.v1.DrillWaterCorrosivity.k_na)
  return _internal_k_na();
}
inline void DrillWaterCorrosivity::_internal_set_k_na(double value) {
  
  k_na_ = value;
}
inline void DrillWaterCorrosivity::set_k_na(double value) {
  _internal_set_k_na(value);
  // @@protoc_insertion_point(field_set:smart3dmap.v1.DrillWaterCorrosivity.k_na)
}

// double ca = 12;
inline void DrillWaterCorrosivity::clear_ca() {
  ca_ = 0;
}
inline double DrillWaterCorrosivity::_internal_ca() const {
  return ca_;
}
inline double DrillWaterCorrosivity::ca() const {
  // @@protoc_insertion_point(field_get:smart3dmap.v1.DrillWaterCorrosivity.ca)
  return _internal_ca();
}
inline void DrillWaterCorrosivity::_internal_set_ca(double value) {
  
  ca_ = value;
}
inline void DrillWaterCorrosivity::set_ca(double value) {
  _internal_set_ca(value);
  // @@protoc_insertion_point(field_set:smart3dmap.v1.DrillWaterCorrosivity.ca)
}

// double co3 = 13;
inline void DrillWaterCorrosivity::clear_co3() {
  co3_ = 0;
}
inline double DrillWaterCorrosivity::_internal_co3() const {
  return co3_;
}
inline double DrillWaterCorrosivity::co3() const {
  // @@protoc_insertion_point(field_get:smart3dmap.v1.DrillWaterCorrosivity.co3)
  return _internal_co3();
}
inline void DrillWaterCorrosivity::_internal_set_co3(double value) {
  
  co3_ = value;
}
inline void DrillWaterCorrosivity::set_co3(double value) {
  _internal_set_co3(value);
  // @@protoc_insertion_point(field_set:smart3dmap.v1.DrillWaterCorrosivity.co3)
}

// string concrete = 14;
inline void DrillWaterCorrosivity::clear_concrete() {
  concrete_.ClearToEmpty();
}
inline const std::string& DrillWaterCorrosivity::concrete() const {
  // @@protoc_insertion_point(field_get:smart3dmap.v1.DrillWaterCorrosivity.concrete)
  return _internal_concrete();
}
inline void DrillWaterCorrosivity::set_concrete(const std::string& value) {
  _internal_set_concrete(value);
  // @@protoc_insertion_point(field_set:smart3dmap.v1.DrillWaterCorrosivity.concrete)
}
inline std::string* DrillWaterCorrosivity::mutable_concrete() {
  // @@protoc_insertion_point(field_mutable:smart3dmap.v1.DrillWaterCorrosivity.concrete)
  return _internal_mutable_concrete();
}
inline const std::string& DrillWaterCorrosivity::_internal_concrete() const {
  return concrete_.Get();
}
inline void DrillWaterCorrosivity::_internal_set_concrete(const std::string& value) {
  
  concrete_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArena());
}
inline void DrillWaterCorrosivity::set_concrete(std::string&& value) {
  
  concrete_.Set(
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:smart3dmap.v1.DrillWaterCorrosivity.concrete)
}
inline void DrillWaterCorrosivity::set_concrete(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  concrete_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(value), GetArena());
  // @@protoc_insertion_point(field_set_char:smart3dmap.v1.DrillWaterCorrosivity.concrete)
}
inline void DrillWaterCorrosivity::set_concrete(const char* value,
    size_t size) {
  
  concrete_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:smart3dmap.v1.DrillWaterCorrosivity.concrete)
}
inline std::string* DrillWaterCorrosivity::_internal_mutable_concrete() {
  
  return concrete_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArena());
}
inline std::string* DrillWaterCorrosivity::release_concrete() {
  // @@protoc_insertion_point(field_release:smart3dmap.v1.DrillWaterCorrosivity.concrete)
  return concrete_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void DrillWaterCorrosivity::set_allocated_concrete(std::string* concrete) {
  if (concrete != nullptr) {
    
  } else {
    
  }
  concrete_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), concrete,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:smart3dmap.v1.DrillWaterCorrosivity.concrete)
}

// string steel_bar = 15;
inline void DrillWaterCorrosivity::clear_steel_bar() {
  steel_bar_.ClearToEmpty();
}
inline const std::string& DrillWaterCorrosivity::steel_bar() const {
  // @@protoc_insertion_point(field_get:smart3dmap.v1.DrillWaterCorrosivity.steel_bar)
  return _internal_steel_bar();
}
inline void DrillWaterCorrosivity::set_steel_bar(const std::string& value) {
  _internal_set_steel_bar(value);
  // @@protoc_insertion_point(field_set:smart3dmap.v1.DrillWaterCorrosivity.steel_bar)
}
inline std::string* DrillWaterCorrosivity::mutable_steel_bar() {
  // @@protoc_insertion_point(field_mutable:smart3dmap.v1.DrillWaterCorrosivity.steel_bar)
  return _internal_mutable_steel_bar();
}
inline const std::string& DrillWaterCorrosivity::_internal_steel_bar() const {
  return steel_bar_.Get();
}
inline void DrillWaterCorrosivity::_internal_set_steel_bar(const std::string& value) {
  
  steel_bar_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArena());
}
inline void DrillWaterCorrosivity::set_steel_bar(std::string&& value) {
  
  steel_bar_.Set(
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:smart3dmap.v1.DrillWaterCorrosivity.steel_bar)
}
inline void DrillWaterCorrosivity::set_steel_bar(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  steel_bar_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(value), GetArena());
  // @@protoc_insertion_point(field_set_char:smart3dmap.v1.DrillWaterCorrosivity.steel_bar)
}
inline void DrillWaterCorrosivity::set_steel_bar(const char* value,
    size_t size) {
  
  steel_bar_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:smart3dmap.v1.DrillWaterCorrosivity.steel_bar)
}
inline std::string* DrillWaterCorrosivity::_internal_mutable_steel_bar() {
  
  return steel_bar_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArena());
}
inline std::string* DrillWaterCorrosivity::release_steel_bar() {
  // @@protoc_insertion_point(field_release:smart3dmap.v1.DrillWaterCorrosivity.steel_bar)
  return steel_bar_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void DrillWaterCorrosivity::set_allocated_steel_bar(std::string* steel_bar) {
  if (steel_bar != nullptr) {
    
  } else {
    
  }
  steel_bar_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), steel_bar,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:smart3dmap.v1.DrillWaterCorrosivity.steel_bar)
}

// -------------------------------------------------------------------

// ImportDrillWaterCorrosivityRequest

// int32 db_id = 1;
inline void ImportDrillWaterCorrosivityRequest::clear_db_id() {
  db_id_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 ImportDrillWaterCorrosivityRequest::_internal_db_id() const {
  return db_id_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 ImportDrillWaterCorrosivityRequest::db_id() const {
  // @@protoc_insertion_point(field_get:smart3dmap.v1.ImportDrillWaterCorrosivityRequest.db_id)
  return _internal_db_id();
}
inline void ImportDrillWaterCorrosivityRequest::_internal_set_db_id(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  db_id_ = value;
}
inline void ImportDrillWaterCorrosivityRequest::set_db_id(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_db_id(value);
  // @@protoc_insertion_point(field_set:smart3dmap.v1.ImportDrillWaterCorrosivityRequest.db_id)
}

// int32 drill_id = 2;
inline void ImportDrillWaterCorrosivityRequest::clear_drill_id() {
  drill_id_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 ImportDrillWaterCorrosivityRequest::_internal_drill_id() const {
  return drill_id_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 ImportDrillWaterCorrosivityRequest::drill_id() const {
  // @@protoc_insertion_point(field_get:smart3dmap.v1.ImportDrillWaterCorrosivityRequest.drill_id)
  return _internal_drill_id();
}
inline void ImportDrillWaterCorrosivityRequest::_internal_set_drill_id(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  drill_id_ = value;
}
inline void ImportDrillWaterCorrosivityRequest::set_drill_id(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_drill_id(value);
  // @@protoc_insertion_point(field_set:smart3dmap.v1.ImportDrillWaterCorrosivityRequest.drill_id)
}

// repeated .smart3dmap.v1.DrillWaterCorrosivity records = 3;
inline int ImportDrillWaterCorrosivityRequest::_internal_records_size() const {
  return records_.size();
}
inline int ImportDrillWaterCorrosivityRequest::records_size() const {
  return _internal_records_size();
}
inline void ImportDrillWaterCorrosivityRequest::clear_records() {
  records_.Clear();
}
inline ::smart3dmap::v1::DrillWaterCorrosivity* ImportDrillWaterCorrosivityRequest::mutable_records(int index) {
  // @@protoc_insertion_point(field_mutable:smart3dmap.v1.ImportDrillWaterCorrosivityRequest.records)
  return records_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::smart3dmap::v1::DrillWaterCorrosivity >*
ImportDrillWaterCorrosivityRequest::mutable_records() {
  // @@protoc_insertion_point(field_mutable_list:smart3dmap.v1.ImportDrillWaterCorrosivityRequest.records)
  return &records_;
}
inline const ::smart3dmap::v1::DrillWaterCorrosivity& ImportDrillWaterCorrosivityRequest::_internal_records(int index) const {
  return records_.Get(index);
}
inline const ::smart3dmap::v1::DrillWaterCorrosivity& ImportDrillWaterCorrosivityRequest::records(int index) const {
  // @@protoc_insertion_point(field_get:smart3dmap.v1.ImportDrillWaterCorrosivityRequest.records)
  return _internal_records(index);
}
inline ::smart3dmap::v1::DrillWaterCorrosivity* ImportDrillWaterCorrosivityRequest::_internal_add_records() {
  return records_.Add();
}
inline ::smart3dmap::v1::DrillWaterCorrosivity* ImportDrillWaterCorrosivityRequest::add_records() {
  // @@protoc_insertion_point(field_add:smart3dmap.v1.ImportDrillWaterCorrosivityRequest.records)
  return _internal_add_records();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::smart3dmap::v1::DrillWaterCorrosivity >&
ImportDrillWaterCorrosivityRequest::records() const {
  // @@protoc_insertion_point(field_list:smart3dmap.v1.ImportDrillWaterCorrosivityRequest.records)
  return records_;
}

// -------------------------------------------------------------------

// DrillSoilCorrosivity

// int32 db_id = 1;
inline void DrillSoilCorrosivity::clear_db_id() {
  db_id_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 DrillSoilCorrosivity::_internal_db_id() const {
  return db_id_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 DrillSoilCorrosivity::db_id() const {
  // @@protoc_insertion_point(field_get:smart3dmap.v1.DrillSoilCorrosivity.db_id)
  return _internal_db_id();
}
inline void DrillSoilCorrosivity::_internal_set_db_id(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  db_id_ = value;
}
inline void DrillSoilCorrosivity::set_db_id(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_db_id(value);
  // @@protoc_insertion_point(field_set:smart3dmap.v1.DrillSoilCorrosivity.db_id)
}

// int32 drill_id = 2;
inline void DrillSoilCorrosivity::clear_drill_id() {
  drill_id_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 DrillSoilCorrosivity::_internal_drill_id() const {
  return drill_id_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 DrillSoilCorrosivity::drill_id() const {
  // @@protoc_insertion_point(field_get:smart3dmap.v1.DrillSoilCorrosivity.drill_id)
  return _internal_drill_id();
}
inline void DrillSoilCorrosivity::_internal_set_drill_id(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  drill_id_ = value;
}
inline void DrillSoilCorrosivity::set_drill_id(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_drill_id(value);
  // @@protoc_insertion_point(field_set:smart3dmap.v1.DrillSoilCorrosivity.drill_id)
}

// double ph = 3;
inline void DrillSoilCorrosivity::clear_ph() {
  ph_ = 0;
}
inline double DrillSoilCorrosivity::_internal_ph() const {
  return ph_;
}
inline double DrillSoilCorrosivity::ph() const {
  // @@protoc_insertion_point(field_get:smart3dmap.v1.DrillSoilCorrosivity.ph)
  return _internal_ph();
}
inline void DrillSoilCorrosivity::_internal_set_ph(double value) {
  
  ph_ = value;
}
inline void DrillSoilCorrosivity::set_ph(double value) {
  _internal_set_ph(value);
  // @@protoc_insertion_point(field_set:smart3dmap.v1.DrillSoilCorrosivity.ph)
}

// double hco3 = 4;
inline void DrillSoilCorrosivity::clear_hco3() {
  hco3_ = 0;
}
inline double DrillSoilCorrosivity::_internal_hco3() const {
  return hco3_;
}
inline double DrillSoilCorrosivity::hco3() const {
  // @@protoc_insertion_point(field_get:smart3dmap.v1.DrillSoilCorrosivity.hco3)
  return _internal_hco3();
}
inline void DrillSoilCorrosivity::_internal_set_hco3(double value) {
  
  hco3_ = value;
}
inline void DrillSoilCorrosivity::set_hco3(double value) {
  _internal_set_hco3(value);
  // @@protoc_insertion_point(field_set:smart3dmap.v1.DrillSoilCorrosivity.hco3)
}

// double cl = 5;
inline void DrillSoilCorrosivity::clear_cl() {
  cl_ = 0;
}
inline double DrillSoilCorrosivity::_internal_cl() const {
  return cl_;
}
inline double DrillSoilCorrosivity::cl() const {
  // @@protoc_insertion_point(field_get:smart3dmap.v1.DrillSoilCorrosivity.cl)
  return _internal_cl();
}
inline void DrillSoilCorrosivity::_internal_set_cl(double value) {
  
  cl_ = value;
}
inline void DrillSoilCorrosivity::set_cl(double value) {
  _internal_set_cl(value);
  // @@protoc_insertion_point(field_set:smart3dmap.v1.DrillSoilCorrosivity.cl)
}

// double so4 = 6;
inline void DrillSoilCorrosivity::clear_so4() {
  so4_ = 0;
}
inline double DrillSoilCorrosivity::_internal_so4() const {
  return so4_;
}
inline double DrillSoilCorrosivity::so4() const {
  // @@protoc_insertion_point(field_get:smart3dmap.v1.DrillSoilCorrosivity.so4)
  return _internal_so4();
}
inline void DrillSoilCorrosivity::_internal_set_so4(double value) {
  
  so4_ = value;
}
inline void DrillSoilCorrosivity::set_so4(double value) {
  _internal_set_so4(value);
  // @@protoc_insertion_point(field_set:smart3dmap.v1.DrillSoilCorrosivity.so4)
}

// double mg = 7;
inline void DrillSoilCorrosivity::clear_mg() {
  mg_ = 0;
}
inline double DrillSoilCorrosivity::_internal_mg() const {
  return mg_;
}
inline double DrillSoilCorrosivity::mg() const {
  // @@protoc_insertion_point(field_get:smart3dmap.v1.DrillSoilCorrosivity.mg)
  return _internal_mg();
}
inline void DrillSoilCorrosivity::_internal_set_mg(double value) {
  
  mg_ = value;
}
inline void DrillSoilCorrosivity::set_mg(double value) {
  _internal_set_mg(value);
  // @@protoc_insertion_point(field_set:smart3dmap.v1.DrillSoilCorrosivity.mg)
}

// double nh4 = 8;
inline void DrillSoilCorrosivity::clear_nh4() {
  nh4_ = 0;
}
inline double DrillSoilCorrosivity::_internal_nh4() const {
  return nh4_;
}
inline double DrillSoilCorrosivity::nh4() const {
  // @@protoc_insertion_point(field_get:smart3dmap.v1.DrillSoilCorrosivity.nh4)
  return _internal_nh4();
}
inline void DrillSoilCorrosivity::_internal_set_nh4(double value) {
  
  nh4_ = value;
}
inline void DrillSoilCorrosivity::set_nh4(double value) {
  _internal_set_nh4(value);
  // @@protoc_insertion_point(field_set:smart3dmap.v1.DrillSoilCorrosivity.nh4)
}

// double ca = 9;
inline void DrillSoilCorrosivity::clear_ca() {
  ca_ = 0;
}
inline double DrillSoilCorrosivity::_internal_ca() const {
  return ca_;
}
inline double DrillSoilCorrosivity::ca() const {
  // @@protoc_insertion_point(field_get:smart3dmap.v1.DrillSoilCorrosivity.ca)
  return _internal_ca();
}
inline void DrillSoilCorrosivity::_internal_set_ca(double value) {
  
  ca_ = value;
}
inline void DrillSoilCorrosivity::set_ca(double value) {
  _internal_set_ca(value);
  // @@protoc_insertion_point(field_set:smart3dmap.v1.DrillSoilCorrosivity.ca)
}

// string concrete = 10;
inline void DrillSoilCorrosivity::clear_concrete() {
  concrete_.ClearToEmpty();
}
inline const std::string& DrillSoilCorrosivity::concrete() const {
  // @@protoc_insertion_point(field_get:smart3dmap.v1.DrillSoilCorrosivity.concrete)
  return _internal_concrete();
}
inline void DrillSoilCorrosivity::set_concrete(const std::string& value) {
  _internal_set_concrete(value);
  // @@protoc_insertion_point(field_set:smart3dmap.v1.DrillSoilCorrosivity.concrete)
}
inline std::string* DrillSoilCorrosivity::mutable_concrete() {
  // @@protoc_insertion_point(field_mutable:smart3dmap.v1.DrillSoilCorrosivity.concrete)
  return _internal_mutable_concrete();
}
inline const std::string& DrillSoilCorrosivity::_internal_concrete() const {
  return concrete_.Get();
}
inline void DrillSoilCorrosivity::_internal_set_concrete(const std::string& value) {
  
  concrete_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArena());
}
inline void DrillSoilCorrosivity::set_concrete(std::string&& value) {
  
  concrete_.Set(
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:smart3dmap.v1.DrillSoilCorrosivity.concrete)
}
inline void DrillSoilCorrosivity::set_concrete(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  concrete_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(value), GetArena());
  // @@protoc_insertion_point(field_set_char:smart3dmap.v1.DrillSoilCorrosivity.concrete)
}
inline void DrillSoilCorrosivity::set_concrete(const char* value,
    size_t size) {
  
  concrete_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:smart3dmap.v1.DrillSoilCorrosivity.concrete)
}
inline std::string* DrillSoilCorrosivity::_internal_mutable_concrete() {
  
  return concrete_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArena());
}
inline std::string* DrillSoilCorrosivity::release_concrete() {
  // @@protoc_insertion_point(field_release:smart3dmap.v1.DrillSoilCorrosivity.concrete)
  return concrete_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void DrillSoilCorrosivity::set_allocated_concrete(std::string* concrete) {
  if (concrete != nullptr) {
    
  } else {
    
  }
  concrete_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), concrete,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:smart3dmap.v1.DrillSoilCorrosivity.concrete)
}

// string steel_bar = 11;
inline void DrillSoilCorrosivity::clear_steel_bar() {
  steel_bar_.ClearToEmpty();
}
inline const std::string& DrillSoilCorrosivity::steel_bar() const {
  // @@protoc_insertion_point(field_get:smart3dmap.v1.DrillSoilCorrosivity.steel_bar)
  return _internal_steel_bar();
}
inline void DrillSoilCorrosivity::set_steel_bar(const std::string& value) {
  _internal_set_steel_bar(value);
  // @@protoc_insertion_point(field_set:smart3dmap.v1.DrillSoilCorrosivity.steel_bar)
}
inline std::string* DrillSoilCorrosivity::mutable_steel_bar() {
  // @@protoc_insertion_point(field_mutable:smart3dmap.v1.DrillSoilCorrosivity.steel_bar)
  return _internal_mutable_steel_bar();
}
inline const std::string& DrillSoilCorrosivity::_internal_steel_bar() const {
  return steel_bar_.Get();
}
inline void DrillSoilCorrosivity::_internal_set_steel_bar(const std::string& value) {
  
  steel_bar_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArena());
}
inline void DrillSoilCorrosivity::set_steel_bar(std::string&& value) {
  
  steel_bar_.Set(
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:smart3dmap.v1.DrillSoilCorrosivity.steel_bar)
}
inline void DrillSoilCorrosivity::set_steel_bar(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  steel_bar_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(value), GetArena());
  // @@protoc_insertion_point(field_set_char:smart3dmap.v1.DrillSoilCorrosivity.steel_bar)
}
inline void DrillSoilCorrosivity::set_steel_bar(const char* value,
    size_t size) {
  
  steel_bar_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:smart3dmap.v1.DrillSoilCorrosivity.steel_bar)
}
inline std::string* DrillSoilCorrosivity::_internal_mutable_steel_bar() {
  
  return steel_bar_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArena());
}
inline std::string* DrillSoilCorrosivity::release_steel_bar() {
  // @@protoc_insertion_point(field_release:smart3dmap.v1.DrillSoilCorrosivity.steel_bar)
  return steel_bar_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void DrillSoilCorrosivity::set_allocated_steel_bar(std::string* steel_bar) {
  if (steel_bar != nullptr) {
    
  } else {
    
  }
  steel_bar_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), steel_bar,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:smart3dmap.v1.DrillSoilCorrosivity.steel_bar)
}

// string steel_construction = 12;
inline void DrillSoilCorrosivity::clear_steel_construction() {
  steel_construction_.ClearToEmpty();
}
inline const std::string& DrillSoilCorrosivity::steel_construction() const {
  // @@protoc_insertion_point(field_get:smart3dmap.v1.DrillSoilCorrosivity.steel_construction)
  return _internal_steel_construction();
}
inline void DrillSoilCorrosivity::set_steel_construction(const std::string& value) {
  _internal_set_steel_construction(value);
  // @@protoc_insertion_point(field_set:smart3dmap.v1.DrillSoilCorrosivity.steel_construction)
}
inline std::string* DrillSoilCorrosivity::mutable_steel_construction() {
  // @@protoc_insertion_point(field_mutable:smart3dmap.v1.DrillSoilCorrosivity.steel_construction)
  return _internal_mutable_steel_construction();
}
inline const std::string& DrillSoilCorrosivity::_internal_steel_construction() const {
  return steel_construction_.Get();
}
inline void DrillSoilCorrosivity::_internal_set_steel_construction(const std::string& value) {
  
  steel_construction_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArena());
}
inline void DrillSoilCorrosivity::set_steel_construction(std::string&& value) {
  
  steel_construction_.Set(
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:smart3dmap.v1.DrillSoilCorrosivity.steel_construction)
}
inline void DrillSoilCorrosivity::set_steel_construction(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  steel_construction_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(value), GetArena());
  // @@protoc_insertion_point(field_set_char:smart3dmap.v1.DrillSoilCorrosivity.steel_construction)
}
inline void DrillSoilCorrosivity::set_steel_construction(const char* value,
    size_t size) {
  
  steel_construction_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:smart3dmap.v1.DrillSoilCorrosivity.steel_construction)
}
inline std::string* DrillSoilCorrosivity::_internal_mutable_steel_construction() {
  
  return steel_construction_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArena());
}
inline std::string* DrillSoilCorrosivity::release_steel_construction() {
  // @@protoc_insertion_point(field_release:smart3dmap.v1.DrillSoilCorrosivity.steel_construction)
  return steel_construction_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void DrillSoilCorrosivity::set_allocated_steel_construction(std::string* steel_construction) {
  if (steel_construction != nullptr) {
    
  } else {
    
  }
  steel_construction_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), steel_construction,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:smart3dmap.v1.DrillSoilCorrosivity.steel_construction)
}

// -------------------------------------------------------------------

// ImportDrillSoilCorrosivityRequest

// int32 db_id = 1;
inline void ImportDrillSoilCorrosivityRequest::clear_db_id() {
  db_id_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 ImportDrillSoilCorrosivityRequest::_internal_db_id() const {
  return db_id_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 ImportDrillSoilCorrosivityRequest::db_id() const {
  // @@protoc_insertion_point(field_get:smart3dmap.v1.ImportDrillSoilCorrosivityRequest.db_id)
  return _internal_db_id();
}
inline void ImportDrillSoilCorrosivityRequest::_internal_set_db_id(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  db_id_ = value;
}
inline void ImportDrillSoilCorrosivityRequest::set_db_id(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_db_id(value);
  // @@protoc_insertion_point(field_set:smart3dmap.v1.ImportDrillSoilCorrosivityRequest.db_id)
}

// int32 drill_id = 2;
inline void ImportDrillSoilCorrosivityRequest::clear_drill_id() {
  drill_id_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 ImportDrillSoilCorrosivityRequest::_internal_drill_id() const {
  return drill_id_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 ImportDrillSoilCorrosivityRequest::drill_id() const {
  // @@protoc_insertion_point(field_get:smart3dmap.v1.ImportDrillSoilCorrosivityRequest.drill_id)
  return _internal_drill_id();
}
inline void ImportDrillSoilCorrosivityRequest::_internal_set_drill_id(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  drill_id_ = value;
}
inline void ImportDrillSoilCorrosivityRequest::set_drill_id(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_drill_id(value);
  // @@protoc_insertion_point(field_set:smart3dmap.v1.ImportDrillSoilCorrosivityRequest.drill_id)
}

// repeated .smart3dmap.v1.DrillSoilCorrosivity records = 3;
inline int ImportDrillSoilCorrosivityRequest::_internal_records_size() const {
  return records_.size();
}
inline int ImportDrillSoilCorrosivityRequest::records_size() const {
  return _internal_records_size();
}
inline void ImportDrillSoilCorrosivityRequest::clear_records() {
  records_.Clear();
}
inline ::smart3dmap::v1::DrillSoilCorrosivity* ImportDrillSoilCorrosivityRequest::mutable_records(int index) {
  // @@protoc_insertion_point(field_mutable:smart3dmap.v1.ImportDrillSoilCorrosivityRequest.records)
  return records_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::smart3dmap::v1::DrillSoilCorrosivity >*
ImportDrillSoilCorrosivityRequest::mutable_records() {
  // @@protoc_insertion_point(field_mutable_list:smart3dmap.v1.ImportDrillSoilCorrosivityRequest.records)
  return &records_;
}
inline const ::smart3dmap::v1::DrillSoilCorrosivity& ImportDrillSoilCorrosivityRequest::_internal_records(int index) const {
  return records_.Get(index);
}
inline const ::smart3dmap::v1::DrillSoilCorrosivity& ImportDrillSoilCorrosivityRequest::records(int index) const {
  // @@protoc_insertion_point(field_get:smart3dmap.v1.ImportDrillSoilCorrosivityRequest.records)
  return _internal_records(index);
}
inline ::smart3dmap::v1::DrillSoilCorrosivity* ImportDrillSoilCorrosivityRequest::_internal_add_records() {
  return records_.Add();
}
inline ::smart3dmap::v1::DrillSoilCorrosivity* ImportDrillSoilCorrosivityRequest::add_records() {
  // @@protoc_insertion_point(field_add:smart3dmap.v1.ImportDrillSoilCorrosivityRequest.records)
  return _internal_add_records();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::smart3dmap::v1::DrillSoilCorrosivity >&
ImportDrillSoilCorrosivityRequest::records() const {
  // @@protoc_insertion_point(field_list:smart3dmap.v1.ImportDrillSoilCorrosivityRequest.records)
  return records_;
}

// -------------------------------------------------------------------

// GeotechnicalRecord

// int32 db_id = 1;
inline void GeotechnicalRecord::clear_db_id() {
  db_id_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 GeotechnicalRecord::_internal_db_id() const {
  return db_id_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 GeotechnicalRecord::db_id() const {
  // @@protoc_insertion_point(field_get:smart3dmap.v1.GeotechnicalRecord.db_id)
  return _internal_db_id();
}
inline void GeotechnicalRecord::_internal_set_db_id(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  db_id_ = value;
}
inline void GeotechnicalRecord::set_db_id(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_db_id(value);
  // @@protoc_insertion_point(field_set:smart3dmap.v1.GeotechnicalRecord.db_id)
}

// int32 drill_id = 2;
inline void GeotechnicalRecord::clear_drill_id() {
  drill_id_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 GeotechnicalRecord::_internal_drill_id() const {
  return drill_id_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 GeotechnicalRecord::drill_id() const {
  // @@protoc_insertion_point(field_get:smart3dmap.v1.GeotechnicalRecord.drill_id)
  return _internal_drill_id();
}
inline void GeotechnicalRecord::_internal_set_drill_id(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  drill_id_ = value;
}
inline void GeotechnicalRecord::set_drill_id(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_drill_id(value);
  // @@protoc_insertion_point(field_set:smart3dmap.v1.GeotechnicalRecord.drill_id)
}

// double top_depth = 3;
inline void GeotechnicalRecord::clear_top_depth() {
  top_depth_ = 0;
}
inline double GeotechnicalRecord::_internal_top_depth() const {
  return top_depth_;
}
inline double GeotechnicalRecord::top_depth() const {
  // @@protoc_insertion_point(field_get:smart3dmap.v1.GeotechnicalRecord.top_depth)
  return _internal_top_depth();
}
inline void GeotechnicalRecord::_internal_set_top_depth(double value) {
  
  top_depth_ = value;
}
inline void GeotechnicalRecord::set_top_depth(double value) {
  _internal_set_top_depth(value);
  // @@protoc_insertion_point(field_set:smart3dmap.v1.GeotechnicalRecord.top_depth)
}

// double bottom_depth = 4;
inline void GeotechnicalRecord::clear_bottom_depth() {
  bottom_depth_ = 0;
}
inline double GeotechnicalRecord::_internal_bottom_depth() const {
  return bottom_depth_;
}
inline double GeotechnicalRecord::bottom_depth() const {
  // @@protoc_insertion_point(field_get:smart3dmap.v1.GeotechnicalRecord.bottom_depth)
  return _internal_bottom_depth();
}
inline void GeotechnicalRecord::_internal_set_bottom_depth(double value) {
  
  bottom_depth_ = value;
}
inline void GeotechnicalRecord::set_bottom_depth(double value) {
  _internal_set_bottom_depth(value);
  // @@protoc_insertion_point(field_set:smart3dmap.v1.GeotechnicalRecord.bottom_depth)
}

// string sample_name = 5;
inline void GeotechnicalRecord::clear_sample_name() {
  sample_name_.ClearToEmpty();
}
inline const std::string& GeotechnicalRecord::sample_name() const {
  // @@protoc_insertion_point(field_get:smart3dmap.v1.GeotechnicalRecord.sample_name)
  return _internal_sample_name();
}
inline void GeotechnicalRecord::set_sample_name(const std::string& value) {
  _internal_set_sample_name(value);
  // @@protoc_insertion_point(field_set:smart3dmap.v1.GeotechnicalRecord.sample_name)
}
inline std::string* GeotechnicalRecord::mutable_sample_name() {
  // @@protoc_insertion_point(field_mutable:smart3dmap.v1.GeotechnicalRecord.sample_name)
  return _internal_mutable_sample_name();
}
inline const std::string& GeotechnicalRecord::_internal_sample_name() const {
  return sample_name_.Get();
}
inline void GeotechnicalRecord::_internal_set_sample_name(const std::string& value) {
  
  sample_name_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArena());
}
inline void GeotechnicalRecord::set_sample_name(std::string&& value) {
  
  sample_name_.Set(
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:smart3dmap.v1.GeotechnicalRecord.sample_name)
}
inline void GeotechnicalRecord::set_sample_name(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  sample_name_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(value), GetArena());
  // @@protoc_insertion_point(field_set_char:smart3dmap.v1.GeotechnicalRecord.sample_name)
}
inline void GeotechnicalRecord::set_sample_name(const char* value,
    size_t size) {
  
  sample_name_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:smart3dmap.v1.GeotechnicalRecord.sample_name)
}
inline std::string* GeotechnicalRecord::_internal_mutable_sample_name() {
  
  return sample_name_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArena());
}
inline std::string* GeotechnicalRecord::release_sample_name() {
  // @@protoc_insertion_point(field_release:smart3dmap.v1.GeotechnicalRecord.sample_name)
  return sample_name_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void GeotechnicalRecord::set_allocated_sample_name(std::string* sample_name) {
  if (sample_name != nullptr) {
    
  } else {
    
  }
  sample_name_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), sample_name,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:smart3dmap.v1.GeotechnicalRecord.sample_name)
}

// double water_content = 6;
inline void GeotechnicalRecord::clear_water_content() {
  water_content_ = 0;
}
inline double GeotechnicalRecord::_internal_water_content() const {
  return water_content_;
}
inline double GeotechnicalRecord::water_content() const {
  // @@protoc_insertion_point(field_get:smart3dmap.v1.GeotechnicalRecord.water_content)
  return _internal_water_content();
}
inline void GeotechnicalRecord::_internal_set_water_content(double value) {
  
  water_content_ = value;
}
inline void GeotechnicalRecord::set_water_content(double value) {
  _internal_set_water_content(value);
  // @@protoc_insertion_point(field_set:smart3dmap.v1.GeotechnicalRecord.water_content)
}

// double wet_density = 7;
inline void GeotechnicalRecord::clear_wet_density() {
  wet_density_ = 0;
}
inline double GeotechnicalRecord::_internal_wet_density() const {
  return wet_density_;
}
inline double GeotechnicalRecord::wet_density() const {
  // @@protoc_insertion_point(field_get:smart3dmap.v1.GeotechnicalRecord.wet_density)
  return _internal_wet_density();
}
inline void GeotechnicalRecord::_internal_set_wet_density(double value) {
  
  wet_density_ = value;
}
inline void GeotechnicalRecord::set_wet_density(double value) {
  _internal_set_wet_density(value);
  // @@protoc_insertion_point(field_set:smart3dmap.v1.GeotechnicalRecord.wet_density)
}

// double dry_density = 8;
inline void GeotechnicalRecord::clear_dry_density() {
  dry_density_ = 0;
}
inline double GeotechnicalRecord::_internal_dry_density() const {
  return dry_density_;
}
inline double GeotechnicalRecord::dry_density() const {
  // @@protoc_insertion_point(field_get:smart3dmap.v1.GeotechnicalRecord.dry_density)
  return _internal_dry_density();
}
inline void GeotechnicalRecord::_internal_set_dry_density(double value) {
  
  dry_density_ = value;
}
inline void GeotechnicalRecord::set_dry_density(double value) {
  _internal_set_dry_density(value);
  // @@protoc_insertion_point(field_set:smart3dmap.v1.GeotechnicalRecord.dry_density)
}

// double specific_gravity = 9;
inline void GeotechnicalRecord::clear_specific_gravity() {
  specific_gravity_ = 0;
}
inline double GeotechnicalRecord::_internal_specific_gravity() const {
  return specific_gravity_;
}
inline double GeotechnicalRecord::specific_gravity() const {
  // @@protoc_insertion_point(field_get:smart3dmap.v1.GeotechnicalRecord.specific_gravity)
  return _internal_specific_gravity();
}
inline void GeotechnicalRecord::_internal_set_specific_gravity(double value) {
  
  specific_gravity_ = value;
}
inline void GeotechnicalRecord::set_specific_gravity(double value) {
  _internal_set_specific_gravity(value);
  // @@protoc_insertion_point(field_set:smart3dmap.v1.GeotechnicalRecord.specific_gravity)
}

// double void_ratio = 10;
inline void GeotechnicalRecord::clear_void_ratio() {
  void_ratio_ = 0;
}
inline double GeotechnicalRecord::_internal_void_ratio() const {
  return void_ratio_;
}
inline double GeotechnicalRecord::void_ratio() const {
  // @@protoc_insertion_point(field_get:smart3dmap.v1.GeotechnicalRecord.void_ratio)
  return _internal_void_ratio();
}
inline void GeotechnicalRecord::_internal_set_void_ratio(double value) {
  
  void_ratio_ = value;
}
inline void GeotechnicalRecord::set_void_ratio(double value) {
  _internal_set_void_ratio(value);
  // @@protoc_insertion_point(field_set:smart3dmap.v1.GeotechnicalRecord.void_ratio)
}

// double saturation = 11;
inline void GeotechnicalRecord::clear_saturation() {
  saturation_ = 0;
}
inline double GeotechnicalRecord::_internal_saturation() const {
  return saturation_;
}
inline double GeotechnicalRecord::saturation() const {
  // @@protoc_insertion_point(field_get:smart3dmap.v1.GeotechnicalRecord.saturation)
  return _internal_saturation();
}
inline void GeotechnicalRecord::_internal_set_saturation(double value) {
  
  saturation_ = value;
}
inline void GeotechnicalRecord::set_saturation(double value) {
  _internal_set_saturation(value);
  // @@protoc_insertion_point(field_set:smart3dmap.v1.GeotechnicalRecord.saturation)
}

// double wl = 12;
inline void GeotechnicalRecord::clear_wl() {
  wl_ = 0;
}
inline double GeotechnicalRecord::_internal_wl() const {
  return wl_;
}
inline double GeotechnicalRecord::wl() const {
  // @@protoc_insertion_point(field_get:smart3dmap.v1.GeotechnicalRecord.wl)
  return _internal_wl();
}
inline void GeotechnicalRecord::_internal_set_wl(double value) {
  
  wl_ = value;
}
inline void GeotechnicalRecord::set_wl(double value) {
  _internal_set_wl(value);
  // @@protoc_insertion_point(field_set:smart3dmap.v1.GeotechnicalRecord.wl)
}

// double wp = 13;
inline void GeotechnicalRecord::clear_wp() {
  wp_ = 0;
}
inline double GeotechnicalRecord::_internal_wp() const {
  return wp_;
}
inline double GeotechnicalRecord::wp() const {
  // @@protoc_insertion_point(field_get:smart3dmap.v1.GeotechnicalRecord.wp)
  return _internal_wp();
}
inline void GeotechnicalRecord::_internal_set_wp(double value) {
  
  wp_ = value;
}
inline void GeotechnicalRecord::set_wp(double value) {
  _internal_set_wp(value);
  // @@protoc_insertion_point(field_set:smart3dmap.v1.GeotechnicalRecord.wp)
}

// double ip = 14;
inline void GeotechnicalRecord::clear_ip() {
  ip_ = 0;
}
inline double GeotechnicalRecord::_internal_ip() const {
  return ip_;
}
inline double GeotechnicalRecord::ip() const {
  // @@protoc_insertion_point(field_get:smart3dmap.v1.GeotechnicalRecord.ip)
  return _internal_ip();
}
inline void GeotechnicalRecord::_internal_set_ip(double value) {
  
  ip_ = value;
}
inline void GeotechnicalRecord::set_ip(double value) {
  _internal_set_ip(value);
  // @@protoc_insertion_point(field_set:smart3dmap.v1.GeotechnicalRecord.ip)
}

// double il = 15;
inline void GeotechnicalRecord::clear_il() {
  il_ = 0;
}
inline double GeotechnicalRecord::_internal_il() const {
  return il_;
}
inline double GeotechnicalRecord::il() const {
  // @@protoc_insertion_point(field_get:smart3dmap.v1.GeotechnicalRecord.il)
  return _internal_il();
}
inline void GeotechnicalRecord::_internal_set_il(double value) {
  
  il_ = value;
}
inline void GeotechnicalRecord::set_il(double value) {
  _internal_set_il(value);
  // @@protoc_insertion_point(field_set:smart3dmap.v1.GeotechnicalRecord.il)
}

// double mpa_1 = 16;
inline void GeotechnicalRecord::clear_mpa_1() {
  mpa_1_ = 0;
}
inline double GeotechnicalRecord::_internal_mpa_1() const {
  return mpa_1_;
}
inline double GeotechnicalRecord::mpa_1() const {
  // @@protoc_insertion_point(field_get:smart3dmap.v1.GeotechnicalRecord.mpa_1)
  return _internal_mpa_1();
}
inline void GeotechnicalRecord::_internal_set_mpa_1(double value) {
  
  mpa_1_ = value;
}
inline void GeotechnicalRecord::set_mpa_1(double value) {
  _internal_set_mpa_1(value);
  // @@protoc_insertion_point(field_set:smart3dmap.v1.GeotechnicalRecord.mpa_1)
}

// double mpa = 17;
inline void GeotechnicalRecord::clear_mpa() {
  mpa_ = 0;
}
inline double GeotechnicalRecord::_internal_mpa() const {
  return mpa_;
}
inline double GeotechnicalRecord::mpa() const {
  // @@protoc_insertion_point(field_get:smart3dmap.v1.GeotechnicalRecord.mpa)
  return _internal_mpa();
}
inline void GeotechnicalRecord::_internal_set_mpa(double value) {
  
  mpa_ = value;
}
inline void GeotechnicalRecord::set_mpa(double value) {
  _internal_set_mpa(value);
  // @@protoc_insertion_point(field_set:smart3dmap.v1.GeotechnicalRecord.mpa)
}

// double kpa = 18;
inline void GeotechnicalRecord::clear_kpa() {
  kpa_ = 0;
}
inline double GeotechnicalRecord::_internal_kpa() const {
  return kpa_;
}
inline double GeotechnicalRecord::kpa() const {
  // @@protoc_insertion_point(field_get:smart3dmap.v1.GeotechnicalRecord.kpa)
  return _internal_kpa();
}
inline void GeotechnicalRecord::_internal_set_kpa(double value) {
  
  kpa_ = value;
}
inline void GeotechnicalRecord::set_kpa(double value) {
  _internal_set_kpa(value);
  // @@protoc_insertion_point(field_set:smart3dmap.v1.GeotechnicalRecord.kpa)
}

// double fai_degree = 19;
inline void GeotechnicalRecord::clear_fai_degree() {
  fai_degree_ = 0;
}
inline double GeotechnicalRecord::_internal_fai_degree() const {
  return fai_degree_;
}
inline double GeotechnicalRecord::fai_degree() const {
  // @@protoc_insertion_point(field_get:smart3dmap.v1.GeotechnicalRecord.fai_degree)
  return _internal_fai_degree();
}
inline void GeotechnicalRecord::_internal_set_fai_degree(double value) {
  
  fai_degree_ = value;
}
inline void GeotechnicalRecord::set_fai_degree(double value) {
  _internal_set_fai_degree(value);
  // @@protoc_insertion_point(field_set:smart3dmap.v1.GeotechnicalRecord.fai_degree)
}

// -------------------------------------------------------------------

// ImportGeotechnicalRecordsRequest

// int32 db_id = 1;
inline void ImportGeotechnicalRecordsRequest::clear_db_id() {
  db_id_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 ImportGeotechnicalRecordsRequest::_internal_db_id() const {
  return db_id_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 ImportGeotechnicalRecordsRequest::db_id() const {
  // @@protoc_insertion_point(field_get:smart3dmap.v1.ImportGeotechnicalRecordsRequest.db_id)
  return _internal_db_id();
}
inline void ImportGeotechnicalRecordsRequest::_internal_set_db_id(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  db_id_ = value;
}
inline void ImportGeotechnicalRecordsRequest::set_db_id(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_db_id(value);
  // @@protoc_insertion_point(field_set:smart3dmap.v1.ImportGeotechnicalRecordsRequest.db_id)
}

// int32 drill_id = 2;
inline void ImportGeotechnicalRecordsRequest::clear_drill_id() {
  drill_id_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 ImportGeotechnicalRecordsRequest::_internal_drill_id() const {
  return drill_id_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 ImportGeotechnicalRecordsRequest::drill_id() const {
  // @@protoc_insertion_point(field_get:smart3dmap.v1.ImportGeotechnicalRecordsRequest.drill_id)
  return _internal_drill_id();
}
inline void ImportGeotechnicalRecordsRequest::_internal_set_drill_id(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  drill_id_ = value;
}
inline void ImportGeotechnicalRecordsRequest::set_drill_id(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_drill_id(value);
  // @@protoc_insertion_point(field_set:smart3dmap.v1.ImportGeotechnicalRecordsRequest.drill_id)
}

// repeated .smart3dmap.v1.GeotechnicalRecord records = 3;
inline int ImportGeotechnicalRecordsRequest::_internal_records_size() const {
  return records_.size();
}
inline int ImportGeotechnicalRecordsRequest::records_size() const {
  return _internal_records_size();
}
inline void ImportGeotechnicalRecordsRequest::clear_records() {
  records_.Clear();
}
inline ::smart3dmap::v1::GeotechnicalRecord* ImportGeotechnicalRecordsRequest::mutable_records(int index) {
  // @@protoc_insertion_point(field_mutable:smart3dmap.v1.ImportGeotechnicalRecordsRequest.records)
  return records_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::smart3dmap::v1::GeotechnicalRecord >*
ImportGeotechnicalRecordsRequest::mutable_records() {
  // @@protoc_insertion_point(field_mutable_list:smart3dmap.v1.ImportGeotechnicalRecordsRequest.records)
  return &records_;
}
inline const ::smart3dmap::v1::GeotechnicalRecord& ImportGeotechnicalRecordsRequest::_internal_records(int index) const {
  return records_.Get(index);
}
inline const ::smart3dmap::v1::GeotechnicalRecord& ImportGeotechnicalRecordsRequest::records(int index) const {
  // @@protoc_insertion_point(field_get:smart3dmap.v1.ImportGeotechnicalRecordsRequest.records)
  return _internal_records(index);
}
inline ::smart3dmap::v1::GeotechnicalRecord* ImportGeotechnicalRecordsRequest::_internal_add_records() {
  return records_.Add();
}
inline ::smart3dmap::v1::GeotechnicalRecord* ImportGeotechnicalRecordsRequest::add_records() {
  // @@protoc_insertion_point(field_add:smart3dmap.v1.ImportGeotechnicalRecordsRequest.records)
  return _internal_add_records();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::smart3dmap::v1::GeotechnicalRecord >&
ImportGeotechnicalRecordsRequest::records() const {
  // @@protoc_insertion_point(field_list:smart3dmap.v1.ImportGeotechnicalRecordsRequest.records)
  return records_;
}

// -------------------------------------------------------------------

// StdPenetrationRecord

// int32 db_id = 1;
inline void StdPenetrationRecord::clear_db_id() {
  db_id_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 StdPenetrationRecord::_internal_db_id() const {
  return db_id_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 StdPenetrationRecord::db_id() const {
  // @@protoc_insertion_point(field_get:smart3dmap.v1.StdPenetrationRecord.db_id)
  return _internal_db_id();
}
inline void StdPenetrationRecord::_internal_set_db_id(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  db_id_ = value;
}
inline void StdPenetrationRecord::set_db_id(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_db_id(value);
  // @@protoc_insertion_point(field_set:smart3dmap.v1.StdPenetrationRecord.db_id)
}

// int32 drill_id = 2;
inline void StdPenetrationRecord::clear_drill_id() {
  drill_id_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 StdPenetrationRecord::_internal_drill_id() const {
  return drill_id_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 StdPenetrationRecord::drill_id() const {
  // @@protoc_insertion_point(field_get:smart3dmap.v1.StdPenetrationRecord.drill_id)
  return _internal_drill_id();
}
inline void StdPenetrationRecord::_internal_set_drill_id(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  drill_id_ = value;
}
inline void StdPenetrationRecord::set_drill_id(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_drill_id(value);
  // @@protoc_insertion_point(field_set:smart3dmap.v1.StdPenetrationRecord.drill_id)
}

// double start_depth = 3;
inline void StdPenetrationRecord::clear_start_depth() {
  start_depth_ = 0;
}
inline double StdPenetrationRecord::_internal_start_depth() const {
  return start_depth_;
}
inline double StdPenetrationRecord::start_depth() const {
  // @@protoc_insertion_point(field_get:smart3dmap.v1.StdPenetrationRecord.start_depth)
  return _internal_start_depth();
}
inline void StdPenetrationRecord::_internal_set_start_depth(double value) {
  
  start_depth_ = value;
}
inline void StdPenetrationRecord::set_start_depth(double value) {
  _internal_set_start_depth(value);
  // @@protoc_insertion_point(field_set:smart3dmap.v1.StdPenetrationRecord.start_depth)
}

// double end_depth = 4;
inline void StdPenetrationRecord::clear_end_depth() {
  end_depth_ = 0;
}
inline double StdPenetrationRecord::_internal_end_depth() const {
  return end_depth_;
}
inline double StdPenetrationRecord::end_depth() const {
  // @@protoc_insertion_point(field_get:smart3dmap.v1.StdPenetrationRecord.end_depth)
  return _internal_end_depth();
}
inline void StdPenetrationRecord::_internal_set_end_depth(double value) {
  
  end_depth_ = value;
}
inline void StdPenetrationRecord::set_end_depth(double value) {
  _internal_set_end_depth(value);
  // @@protoc_insertion_point(field_set:smart3dmap.v1.StdPenetrationRecord.end_depth)
}

// int32 hit_number = 5;
inline void StdPenetrationRecord::clear_hit_number() {
  hit_number_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 StdPenetrationRecord::_internal_hit_number() const {
  return hit_number_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 StdPenetrationRecord::hit_number() const {
  // @@protoc_insertion_point(field_get:smart3dmap.v1.StdPenetrationRecord.hit_number)
  return _internal_hit_number();
}
inline void StdPenetrationRecord::_internal_set_hit_number(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  hit_number_ = value;
}
inline void StdPenetrationRecord::set_hit_number(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_hit_number(value);
  // @@protoc_insertion_point(field_set:smart3dmap.v1.StdPenetrationRecord.hit_number)
}

// double corrected_hit_number = 6;
inline void StdPenetrationRecord::clear_corrected_hit_number() {
  corrected_hit_number_ = 0;
}
inline double StdPenetrationRecord::_internal_corrected_hit_number() const {
  return corrected_hit_number_;
}
inline double StdPenetrationRecord::corrected_hit_number() const {
  // @@protoc_insertion_point(field_get:smart3dmap.v1.StdPenetrationRecord.corrected_hit_number)
  return _internal_corrected_hit_number();
}
inline void StdPenetrationRecord::_internal_set_corrected_hit_number(double value) {
  
  corrected_hit_number_ = value;
}
inline void StdPenetrationRecord::set_corrected_hit_number(double value) {
  _internal_set_corrected_hit_number(value);
  // @@protoc_insertion_point(field_set:smart3dmap.v1.StdPenetrationRecord.corrected_hit_number)
}

// double pole_length = 7;
inline void StdPenetrationRecord::clear_pole_length() {
  pole_length_ = 0;
}
inline double StdPenetrationRecord::_internal_pole_length() const {
  return pole_length_;
}
inline double StdPenetrationRecord::pole_length() const {
  // @@protoc_insertion_point(field_get:smart3dmap.v1.StdPenetrationRecord.pole_length)
  return _internal_pole_length();
}
inline void StdPenetrationRecord::_internal_set_pole_length(double value) {
  
  pole_length_ = value;
}
inline void StdPenetrationRecord::set_pole_length(double value) {
  _internal_set_pole_length(value);
  // @@protoc_insertion_point(field_set:smart3dmap.v1.StdPenetrationRecord.pole_length)
}

// double pole_length_correction_factor = 8;
inline void StdPenetrationRecord::clear_pole_length_correction_factor() {
  pole_length_correction_factor_ = 0;
}
inline double StdPenetrationRecord::_internal_pole_length_correction_factor() const {
  return pole_length_correction_factor_;
}
inline double StdPenetrationRecord::pole_length_correction_factor() const {
  // @@protoc_insertion_point(field_get:smart3dmap.v1.StdPenetrationRecord.pole_length_correction_factor)
  return _internal_pole_length_correction_factor();
}
inline void StdPenetrationRecord::_internal_set_pole_length_correction_factor(double value) {
  
  pole_length_correction_factor_ = value;
}
inline void StdPenetrationRecord::set_pole_length_correction_factor(double value) {
  _internal_set_pole_length_correction_factor(value);
  // @@protoc_insertion_point(field_set:smart3dmap.v1.StdPenetrationRecord.pole_length_correction_factor)
}

// string layer_code = 9;
inline void StdPenetrationRecord::clear_layer_code() {
  layer_code_.ClearToEmpty();
}
inline const std::string& StdPenetrationRecord::layer_code() const {
  // @@protoc_insertion_point(field_get:smart3dmap.v1.StdPenetrationRecord.layer_code)
  return _internal_layer_code();
}
inline void StdPenetrationRecord::set_layer_code(const std::string& value) {
  _internal_set_layer_code(value);
  // @@protoc_insertion_point(field_set:smart3dmap.v1.StdPenetrationRecord.layer_code)
}
inline std::string* StdPenetrationRecord::mutable_layer_code() {
  // @@protoc_insertion_point(field_mutable:smart3dmap.v1.StdPenetrationRecord.layer_code)
  return _internal_mutable_layer_code();
}
inline const std::string& StdPenetrationRecord::_internal_layer_code() const {
  return layer_code_.Get();
}
inline void StdPenetrationRecord::_internal_set_layer_code(const std::string& value) {
  
  layer_code_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArena());
}
inline void StdPenetrationRecord::set_layer_code(std::string&& value) {
  
  layer_code_.Set(
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:smart3dmap.v1.StdPenetrationRecord.layer_code)
}
inline void StdPenetrationRecord::set_layer_code(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  layer_code_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(value), GetArena());
  // @@protoc_insertion_point(field_set_char:smart3dmap.v1.StdPenetrationRecord.layer_code)
}
inline void StdPenetrationRecord::set_layer_code(const char* value,
    size_t size) {
  
  layer_code_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:smart3dmap.v1.StdPenetrationRecord.layer_code)
}
inline std::string* StdPenetrationRecord::_internal_mutable_layer_code() {
  
  return layer_code_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArena());
}
inline std::string* StdPenetrationRecord::release_layer_code() {
  // @@protoc_insertion_point(field_release:smart3dmap.v1.StdPenetrationRecord.layer_code)
  return layer_code_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void StdPenetrationRecord::set_allocated_layer_code(std::string* layer_code) {
  if (layer_code != nullptr) {
    
  } else {
    
  }
  layer_code_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), layer_code,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:smart3dmap.v1.StdPenetrationRecord.layer_code)
}

// string layer_name = 10;
inline void StdPenetrationRecord::clear_layer_name() {
  layer_name_.ClearToEmpty();
}
inline const std::string& StdPenetrationRecord::layer_name() const {
  // @@protoc_insertion_point(field_get:smart3dmap.v1.StdPenetrationRecord.layer_name)
  return _internal_layer_name();
}
inline void StdPenetrationRecord::set_layer_name(const std::string& value) {
  _internal_set_layer_name(value);
  // @@protoc_insertion_point(field_set:smart3dmap.v1.StdPenetrationRecord.layer_name)
}
inline std::string* StdPenetrationRecord::mutable_layer_name() {
  // @@protoc_insertion_point(field_mutable:smart3dmap.v1.StdPenetrationRecord.layer_name)
  return _internal_mutable_layer_name();
}
inline const std::string& StdPenetrationRecord::_internal_layer_name() const {
  return layer_name_.Get();
}
inline void StdPenetrationRecord::_internal_set_layer_name(const std::string& value) {
  
  layer_name_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArena());
}
inline void StdPenetrationRecord::set_layer_name(std::string&& value) {
  
  layer_name_.Set(
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:smart3dmap.v1.StdPenetrationRecord.layer_name)
}
inline void StdPenetrationRecord::set_layer_name(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  layer_name_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(value), GetArena());
  // @@protoc_insertion_point(field_set_char:smart3dmap.v1.StdPenetrationRecord.layer_name)
}
inline void StdPenetrationRecord::set_layer_name(const char* value,
    size_t size) {
  
  layer_name_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:smart3dmap.v1.StdPenetrationRecord.layer_name)
}
inline std::string* StdPenetrationRecord::_internal_mutable_layer_name() {
  
  return layer_name_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArena());
}
inline std::string* StdPenetrationRecord::release_layer_name() {
  // @@protoc_insertion_point(field_release:smart3dmap.v1.StdPenetrationRecord.layer_name)
  return layer_name_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void StdPenetrationRecord::set_allocated_layer_name(std::string* layer_name) {
  if (layer_name != nullptr) {
    
  } else {
    
  }
  layer_name_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), layer_name,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:smart3dmap.v1.StdPenetrationRecord.layer_name)
}

// -------------------------------------------------------------------

// ImportStdPenetrationRecordRequest

// int32 db_id = 1;
inline void ImportStdPenetrationRecordRequest::clear_db_id() {
  db_id_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 ImportStdPenetrationRecordRequest::_internal_db_id() const {
  return db_id_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 ImportStdPenetrationRecordRequest::db_id() const {
  // @@protoc_insertion_point(field_get:smart3dmap.v1.ImportStdPenetrationRecordRequest.db_id)
  return _internal_db_id();
}
inline void ImportStdPenetrationRecordRequest::_internal_set_db_id(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  db_id_ = value;
}
inline void ImportStdPenetrationRecordRequest::set_db_id(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_db_id(value);
  // @@protoc_insertion_point(field_set:smart3dmap.v1.ImportStdPenetrationRecordRequest.db_id)
}

// int32 drill_id = 2;
inline void ImportStdPenetrationRecordRequest::clear_drill_id() {
  drill_id_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 ImportStdPenetrationRecordRequest::_internal_drill_id() const {
  return drill_id_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 ImportStdPenetrationRecordRequest::drill_id() const {
  // @@protoc_insertion_point(field_get:smart3dmap.v1.ImportStdPenetrationRecordRequest.drill_id)
  return _internal_drill_id();
}
inline void ImportStdPenetrationRecordRequest::_internal_set_drill_id(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  drill_id_ = value;
}
inline void ImportStdPenetrationRecordRequest::set_drill_id(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_drill_id(value);
  // @@protoc_insertion_point(field_set:smart3dmap.v1.ImportStdPenetrationRecordRequest.drill_id)
}

// repeated .smart3dmap.v1.StdPenetrationRecord records = 3;
inline int ImportStdPenetrationRecordRequest::_internal_records_size() const {
  return records_.size();
}
inline int ImportStdPenetrationRecordRequest::records_size() const {
  return _internal_records_size();
}
inline void ImportStdPenetrationRecordRequest::clear_records() {
  records_.Clear();
}
inline ::smart3dmap::v1::StdPenetrationRecord* ImportStdPenetrationRecordRequest::mutable_records(int index) {
  // @@protoc_insertion_point(field_mutable:smart3dmap.v1.ImportStdPenetrationRecordRequest.records)
  return records_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::smart3dmap::v1::StdPenetrationRecord >*
ImportStdPenetrationRecordRequest::mutable_records() {
  // @@protoc_insertion_point(field_mutable_list:smart3dmap.v1.ImportStdPenetrationRecordRequest.records)
  return &records_;
}
inline const ::smart3dmap::v1::StdPenetrationRecord& ImportStdPenetrationRecordRequest::_internal_records(int index) const {
  return records_.Get(index);
}
inline const ::smart3dmap::v1::StdPenetrationRecord& ImportStdPenetrationRecordRequest::records(int index) const {
  // @@protoc_insertion_point(field_get:smart3dmap.v1.ImportStdPenetrationRecordRequest.records)
  return _internal_records(index);
}
inline ::smart3dmap::v1::StdPenetrationRecord* ImportStdPenetrationRecordRequest::_internal_add_records() {
  return records_.Add();
}
inline ::smart3dmap::v1::StdPenetrationRecord* ImportStdPenetrationRecordRequest::add_records() {
  // @@protoc_insertion_point(field_add:smart3dmap.v1.ImportStdPenetrationRecordRequest.records)
  return _internal_add_records();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::smart3dmap::v1::StdPenetrationRecord >&
ImportStdPenetrationRecordRequest::records() const {
  // @@protoc_insertion_point(field_list:smart3dmap.v1.ImportStdPenetrationRecordRequest.records)
  return records_;
}

// -------------------------------------------------------------------

// CompressiveResistanceRecord

// int32 db_id = 1;
inline void CompressiveResistanceRecord::clear_db_id() {
  db_id_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 CompressiveResistanceRecord::_internal_db_id() const {
  return db_id_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 CompressiveResistanceRecord::db_id() const {
  // @@protoc_insertion_point(field_get:smart3dmap.v1.CompressiveResistanceRecord.db_id)
  return _internal_db_id();
}
inline void CompressiveResistanceRecord::_internal_set_db_id(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  db_id_ = value;
}
inline void CompressiveResistanceRecord::set_db_id(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_db_id(value);
  // @@protoc_insertion_point(field_set:smart3dmap.v1.CompressiveResistanceRecord.db_id)
}

// int32 drill_id = 2;
inline void CompressiveResistanceRecord::clear_drill_id() {
  drill_id_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 CompressiveResistanceRecord::_internal_drill_id() const {
  return drill_id_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 CompressiveResistanceRecord::drill_id() const {
  // @@protoc_insertion_point(field_get:smart3dmap.v1.CompressiveResistanceRecord.drill_id)
  return _internal_drill_id();
}
inline void CompressiveResistanceRecord::_internal_set_drill_id(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  drill_id_ = value;
}
inline void CompressiveResistanceRecord::set_drill_id(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_drill_id(value);
  // @@protoc_insertion_point(field_set:smart3dmap.v1.CompressiveResistanceRecord.drill_id)
}

// double top_depth = 3;
inline void CompressiveResistanceRecord::clear_top_depth() {
  top_depth_ = 0;
}
inline double CompressiveResistanceRecord::_internal_top_depth() const {
  return top_depth_;
}
inline double CompressiveResistanceRecord::top_depth() const {
  // @@protoc_insertion_point(field_get:smart3dmap.v1.CompressiveResistanceRecord.top_depth)
  return _internal_top_depth();
}
inline void CompressiveResistanceRecord::_internal_set_top_depth(double value) {
  
  top_depth_ = value;
}
inline void CompressiveResistanceRecord::set_top_depth(double value) {
  _internal_set_top_depth(value);
  // @@protoc_insertion_point(field_set:smart3dmap.v1.CompressiveResistanceRecord.top_depth)
}

// double bottom_depth = 4;
inline void CompressiveResistanceRecord::clear_bottom_depth() {
  bottom_depth_ = 0;
}
inline double CompressiveResistanceRecord::_internal_bottom_depth() const {
  return bottom_depth_;
}
inline double CompressiveResistanceRecord::bottom_depth() const {
  // @@protoc_insertion_point(field_get:smart3dmap.v1.CompressiveResistanceRecord.bottom_depth)
  return _internal_bottom_depth();
}
inline void CompressiveResistanceRecord::_internal_set_bottom_depth(double value) {
  
  bottom_depth_ = value;
}
inline void CompressiveResistanceRecord::set_bottom_depth(double value) {
  _internal_set_bottom_depth(value);
  // @@protoc_insertion_point(field_set:smart3dmap.v1.CompressiveResistanceRecord.bottom_depth)
}

// string sample_status = 5;
inline void CompressiveResistanceRecord::clear_sample_status() {
  sample_status_.ClearToEmpty();
}
inline const std::string& CompressiveResistanceRecord::sample_status() const {
  // @@protoc_insertion_point(field_get:smart3dmap.v1.CompressiveResistanceRecord.sample_status)
  return _internal_sample_status();
}
inline void CompressiveResistanceRecord::set_sample_status(const std::string& value) {
  _internal_set_sample_status(value);
  // @@protoc_insertion_point(field_set:smart3dmap.v1.CompressiveResistanceRecord.sample_status)
}
inline std::string* CompressiveResistanceRecord::mutable_sample_status() {
  // @@protoc_insertion_point(field_mutable:smart3dmap.v1.CompressiveResistanceRecord.sample_status)
  return _internal_mutable_sample_status();
}
inline const std::string& CompressiveResistanceRecord::_internal_sample_status() const {
  return sample_status_.Get();
}
inline void CompressiveResistanceRecord::_internal_set_sample_status(const std::string& value) {
  
  sample_status_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArena());
}
inline void CompressiveResistanceRecord::set_sample_status(std::string&& value) {
  
  sample_status_.Set(
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:smart3dmap.v1.CompressiveResistanceRecord.sample_status)
}
inline void CompressiveResistanceRecord::set_sample_status(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  sample_status_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(value), GetArena());
  // @@protoc_insertion_point(field_set_char:smart3dmap.v1.CompressiveResistanceRecord.sample_status)
}
inline void CompressiveResistanceRecord::set_sample_status(const char* value,
    size_t size) {
  
  sample_status_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:smart3dmap.v1.CompressiveResistanceRecord.sample_status)
}
inline std::string* CompressiveResistanceRecord::_internal_mutable_sample_status() {
  
  return sample_status_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArena());
}
inline std::string* CompressiveResistanceRecord::release_sample_status() {
  // @@protoc_insertion_point(field_release:smart3dmap.v1.CompressiveResistanceRecord.sample_status)
  return sample_status_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void CompressiveResistanceRecord::set_allocated_sample_status(std::string* sample_status) {
  if (sample_status != nullptr) {
    
  } else {
    
  }
  sample_status_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), sample_status,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:smart3dmap.v1.CompressiveResistanceRecord.sample_status)
}

// string sample_dimension = 6;
inline void CompressiveResistanceRecord::clear_sample_dimension() {
  sample_dimension_.ClearToEmpty();
}
inline const std::string& CompressiveResistanceRecord::sample_dimension() const {
  // @@protoc_insertion_point(field_get:smart3dmap.v1.CompressiveResistanceRecord.sample_dimension)
  return _internal_sample_dimension();
}
inline void CompressiveResistanceRecord::set_sample_dimension(const std::string& value) {
  _internal_set_sample_dimension(value);
  // @@protoc_insertion_point(field_set:smart3dmap.v1.CompressiveResistanceRecord.sample_dimension)
}
inline std::string* CompressiveResistanceRecord::mutable_sample_dimension() {
  // @@protoc_insertion_point(field_mutable:smart3dmap.v1.CompressiveResistanceRecord.sample_dimension)
  return _internal_mutable_sample_dimension();
}
inline const std::string& CompressiveResistanceRecord::_internal_sample_dimension() const {
  return sample_dimension_.Get();
}
inline void CompressiveResistanceRecord::_internal_set_sample_dimension(const std::string& value) {
  
  sample_dimension_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArena());
}
inline void CompressiveResistanceRecord::set_sample_dimension(std::string&& value) {
  
  sample_dimension_.Set(
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:smart3dmap.v1.CompressiveResistanceRecord.sample_dimension)
}
inline void CompressiveResistanceRecord::set_sample_dimension(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  sample_dimension_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(value), GetArena());
  // @@protoc_insertion_point(field_set_char:smart3dmap.v1.CompressiveResistanceRecord.sample_dimension)
}
inline void CompressiveResistanceRecord::set_sample_dimension(const char* value,
    size_t size) {
  
  sample_dimension_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:smart3dmap.v1.CompressiveResistanceRecord.sample_dimension)
}
inline std::string* CompressiveResistanceRecord::_internal_mutable_sample_dimension() {
  
  return sample_dimension_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArena());
}
inline std::string* CompressiveResistanceRecord::release_sample_dimension() {
  // @@protoc_insertion_point(field_release:smart3dmap.v1.CompressiveResistanceRecord.sample_dimension)
  return sample_dimension_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void CompressiveResistanceRecord::set_allocated_sample_dimension(std::string* sample_dimension) {
  if (sample_dimension != nullptr) {
    
  } else {
    
  }
  sample_dimension_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), sample_dimension,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:smart3dmap.v1.CompressiveResistanceRecord.sample_dimension)
}

// double sample_area = 7;
inline void CompressiveResistanceRecord::clear_sample_area() {
  sample_area_ = 0;
}
inline double CompressiveResistanceRecord::_internal_sample_area() const {
  return sample_area_;
}
inline double CompressiveResistanceRecord::sample_area() const {
  // @@protoc_insertion_point(field_get:smart3dmap.v1.CompressiveResistanceRecord.sample_area)
  return _internal_sample_area();
}
inline void CompressiveResistanceRecord::_internal_set_sample_area(double value) {
  
  sample_area_ = value;
}
inline void CompressiveResistanceRecord::set_sample_area(double value) {
  _internal_set_sample_area(value);
  // @@protoc_insertion_point(field_set:smart3dmap.v1.CompressiveResistanceRecord.sample_area)
}

// double broken_force = 8;
inline void CompressiveResistanceRecord::clear_broken_force() {
  broken_force_ = 0;
}
inline double CompressiveResistanceRecord::_internal_broken_force() const {
  return broken_force_;
}
inline double CompressiveResistanceRecord::broken_force() const {
  // @@protoc_insertion_point(field_get:smart3dmap.v1.CompressiveResistanceRecord.broken_force)
  return _internal_broken_force();
}
inline void CompressiveResistanceRecord::_internal_set_broken_force(double value) {
  
  broken_force_ = value;
}
inline void CompressiveResistanceRecord::set_broken_force(double value) {
  _internal_set_broken_force(value);
  // @@protoc_insertion_point(field_set:smart3dmap.v1.CompressiveResistanceRecord.broken_force)
}

// double compressive_resistance = 9;
inline void CompressiveResistanceRecord::clear_compressive_resistance() {
  compressive_resistance_ = 0;
}
inline double CompressiveResistanceRecord::_internal_compressive_resistance() const {
  return compressive_resistance_;
}
inline double CompressiveResistanceRecord::compressive_resistance() const {
  // @@protoc_insertion_point(field_get:smart3dmap.v1.CompressiveResistanceRecord.compressive_resistance)
  return _internal_compressive_resistance();
}
inline void CompressiveResistanceRecord::_internal_set_compressive_resistance(double value) {
  
  compressive_resistance_ = value;
}
inline void CompressiveResistanceRecord::set_compressive_resistance(double value) {
  _internal_set_compressive_resistance(value);
  // @@protoc_insertion_point(field_set:smart3dmap.v1.CompressiveResistanceRecord.compressive_resistance)
}

// double corrected_compressive_resistance = 10;
inline void CompressiveResistanceRecord::clear_corrected_compressive_resistance() {
  corrected_compressive_resistance_ = 0;
}
inline double CompressiveResistanceRecord::_internal_corrected_compressive_resistance() const {
  return corrected_compressive_resistance_;
}
inline double CompressiveResistanceRecord::corrected_compressive_resistance() const {
  // @@protoc_insertion_point(field_get:smart3dmap.v1.CompressiveResistanceRecord.corrected_compressive_resistance)
  return _internal_corrected_compressive_resistance();
}
inline void CompressiveResistanceRecord::_internal_set_corrected_compressive_resistance(double value) {
  
  corrected_compressive_resistance_ = value;
}
inline void CompressiveResistanceRecord::set_corrected_compressive_resistance(double value) {
  _internal_set_corrected_compressive_resistance(value);
  // @@protoc_insertion_point(field_set:smart3dmap.v1.CompressiveResistanceRecord.corrected_compressive_resistance)
}

// double hd_ration = 11;
inline void CompressiveResistanceRecord::clear_hd_ration() {
  hd_ration_ = 0;
}
inline double CompressiveResistanceRecord::_internal_hd_ration() const {
  return hd_ration_;
}
inline double CompressiveResistanceRecord::hd_ration() const {
  // @@protoc_insertion_point(field_get:smart3dmap.v1.CompressiveResistanceRecord.hd_ration)
  return _internal_hd_ration();
}
inline void CompressiveResistanceRecord::_internal_set_hd_ration(double value) {
  
  hd_ration_ = value;
}
inline void CompressiveResistanceRecord::set_hd_ration(double value) {
  _internal_set_hd_ration(value);
  // @@protoc_insertion_point(field_set:smart3dmap.v1.CompressiveResistanceRecord.hd_ration)
}

// string note = 12;
inline void CompressiveResistanceRecord::clear_note() {
  note_.ClearToEmpty();
}
inline const std::string& CompressiveResistanceRecord::note() const {
  // @@protoc_insertion_point(field_get:smart3dmap.v1.CompressiveResistanceRecord.note)
  return _internal_note();
}
inline void CompressiveResistanceRecord::set_note(const std::string& value) {
  _internal_set_note(value);
  // @@protoc_insertion_point(field_set:smart3dmap.v1.CompressiveResistanceRecord.note)
}
inline std::string* CompressiveResistanceRecord::mutable_note() {
  // @@protoc_insertion_point(field_mutable:smart3dmap.v1.CompressiveResistanceRecord.note)
  return _internal_mutable_note();
}
inline const std::string& CompressiveResistanceRecord::_internal_note() const {
  return note_.Get();
}
inline void CompressiveResistanceRecord::_internal_set_note(const std::string& value) {
  
  note_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArena());
}
inline void CompressiveResistanceRecord::set_note(std::string&& value) {
  
  note_.Set(
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:smart3dmap.v1.CompressiveResistanceRecord.note)
}
inline void CompressiveResistanceRecord::set_note(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  note_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(value), GetArena());
  // @@protoc_insertion_point(field_set_char:smart3dmap.v1.CompressiveResistanceRecord.note)
}
inline void CompressiveResistanceRecord::set_note(const char* value,
    size_t size) {
  
  note_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:smart3dmap.v1.CompressiveResistanceRecord.note)
}
inline std::string* CompressiveResistanceRecord::_internal_mutable_note() {
  
  return note_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArena());
}
inline std::string* CompressiveResistanceRecord::release_note() {
  // @@protoc_insertion_point(field_release:smart3dmap.v1.CompressiveResistanceRecord.note)
  return note_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void CompressiveResistanceRecord::set_allocated_note(std::string* note) {
  if (note != nullptr) {
    
  } else {
    
  }
  note_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), note,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:smart3dmap.v1.CompressiveResistanceRecord.note)
}

// -------------------------------------------------------------------

// ImportCompressiveResistanceRecordRequest

// int32 db_id = 1;
inline void ImportCompressiveResistanceRecordRequest::clear_db_id() {
  db_id_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 ImportCompressiveResistanceRecordRequest::_internal_db_id() const {
  return db_id_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 ImportCompressiveResistanceRecordRequest::db_id() const {
  // @@protoc_insertion_point(field_get:smart3dmap.v1.ImportCompressiveResistanceRecordRequest.db_id)
  return _internal_db_id();
}
inline void ImportCompressiveResistanceRecordRequest::_internal_set_db_id(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  db_id_ = value;
}
inline void ImportCompressiveResistanceRecordRequest::set_db_id(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_db_id(value);
  // @@protoc_insertion_point(field_set:smart3dmap.v1.ImportCompressiveResistanceRecordRequest.db_id)
}

// int32 drill_id = 2;
inline void ImportCompressiveResistanceRecordRequest::clear_drill_id() {
  drill_id_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 ImportCompressiveResistanceRecordRequest::_internal_drill_id() const {
  return drill_id_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 ImportCompressiveResistanceRecordRequest::drill_id() const {
  // @@protoc_insertion_point(field_get:smart3dmap.v1.ImportCompressiveResistanceRecordRequest.drill_id)
  return _internal_drill_id();
}
inline void ImportCompressiveResistanceRecordRequest::_internal_set_drill_id(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  drill_id_ = value;
}
inline void ImportCompressiveResistanceRecordRequest::set_drill_id(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_drill_id(value);
  // @@protoc_insertion_point(field_set:smart3dmap.v1.ImportCompressiveResistanceRecordRequest.drill_id)
}

// repeated .smart3dmap.v1.CompressiveResistanceRecord records = 3;
inline int ImportCompressiveResistanceRecordRequest::_internal_records_size() const {
  return records_.size();
}
inline int ImportCompressiveResistanceRecordRequest::records_size() const {
  return _internal_records_size();
}
inline void ImportCompressiveResistanceRecordRequest::clear_records() {
  records_.Clear();
}
inline ::smart3dmap::v1::CompressiveResistanceRecord* ImportCompressiveResistanceRecordRequest::mutable_records(int index) {
  // @@protoc_insertion_point(field_mutable:smart3dmap.v1.ImportCompressiveResistanceRecordRequest.records)
  return records_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::smart3dmap::v1::CompressiveResistanceRecord >*
ImportCompressiveResistanceRecordRequest::mutable_records() {
  // @@protoc_insertion_point(field_mutable_list:smart3dmap.v1.ImportCompressiveResistanceRecordRequest.records)
  return &records_;
}
inline const ::smart3dmap::v1::CompressiveResistanceRecord& ImportCompressiveResistanceRecordRequest::_internal_records(int index) const {
  return records_.Get(index);
}
inline const ::smart3dmap::v1::CompressiveResistanceRecord& ImportCompressiveResistanceRecordRequest::records(int index) const {
  // @@protoc_insertion_point(field_get:smart3dmap.v1.ImportCompressiveResistanceRecordRequest.records)
  return _internal_records(index);
}
inline ::smart3dmap::v1::CompressiveResistanceRecord* ImportCompressiveResistanceRecordRequest::_internal_add_records() {
  return records_.Add();
}
inline ::smart3dmap::v1::CompressiveResistanceRecord* ImportCompressiveResistanceRecordRequest::add_records() {
  // @@protoc_insertion_point(field_add:smart3dmap.v1.ImportCompressiveResistanceRecordRequest.records)
  return _internal_add_records();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::smart3dmap::v1::CompressiveResistanceRecord >&
ImportCompressiveResistanceRecordRequest::records() const {
  // @@protoc_insertion_point(field_list:smart3dmap.v1.ImportCompressiveResistanceRecordRequest.records)
  return records_;
}

// -------------------------------------------------------------------

// ListGeoSurveyProjectsRequest

// .smart3dmap.v1.Pagination pagination = 1;
inline bool ListGeoSurveyProjectsRequest::_internal_has_pagination() const {
  return this != internal_default_instance() && pagination_ != nullptr;
}
inline bool ListGeoSurveyProjectsRequest::has_pagination() const {
  return _internal_has_pagination();
}
inline const ::smart3dmap::v1::Pagination& ListGeoSurveyProjectsRequest::_internal_pagination() const {
  const ::smart3dmap::v1::Pagination* p = pagination_;
  return p != nullptr ? *p : reinterpret_cast<const ::smart3dmap::v1::Pagination&>(
      ::smart3dmap::v1::_Pagination_default_instance_);
}
inline const ::smart3dmap::v1::Pagination& ListGeoSurveyProjectsRequest::pagination() const {
  // @@protoc_insertion_point(field_get:smart3dmap.v1.ListGeoSurveyProjectsRequest.pagination)
  return _internal_pagination();
}
inline void ListGeoSurveyProjectsRequest::unsafe_arena_set_allocated_pagination(
    ::smart3dmap::v1::Pagination* pagination) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(pagination_);
  }
  pagination_ = pagination;
  if (pagination) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:smart3dmap.v1.ListGeoSurveyProjectsRequest.pagination)
}
inline ::smart3dmap::v1::Pagination* ListGeoSurveyProjectsRequest::release_pagination() {
  
  ::smart3dmap::v1::Pagination* temp = pagination_;
  pagination_ = nullptr;
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::smart3dmap::v1::Pagination* ListGeoSurveyProjectsRequest::unsafe_arena_release_pagination() {
  // @@protoc_insertion_point(field_release:smart3dmap.v1.ListGeoSurveyProjectsRequest.pagination)
  
  ::smart3dmap::v1::Pagination* temp = pagination_;
  pagination_ = nullptr;
  return temp;
}
inline ::smart3dmap::v1::Pagination* ListGeoSurveyProjectsRequest::_internal_mutable_pagination() {
  
  if (pagination_ == nullptr) {
    auto* p = CreateMaybeMessage<::smart3dmap::v1::Pagination>(GetArena());
    pagination_ = p;
  }
  return pagination_;
}
inline ::smart3dmap::v1::Pagination* ListGeoSurveyProjectsRequest::mutable_pagination() {
  // @@protoc_insertion_point(field_mutable:smart3dmap.v1.ListGeoSurveyProjectsRequest.pagination)
  return _internal_mutable_pagination();
}
inline void ListGeoSurveyProjectsRequest::set_allocated_pagination(::smart3dmap::v1::Pagination* pagination) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(pagination_);
  }
  if (pagination) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(pagination)->GetArena();
    if (message_arena != submessage_arena) {
      pagination = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, pagination, submessage_arena);
    }
    
  } else {
    
  }
  pagination_ = pagination;
  // @@protoc_insertion_point(field_set_allocated:smart3dmap.v1.ListGeoSurveyProjectsRequest.pagination)
}

// int32 db_id = 2;
inline void ListGeoSurveyProjectsRequest::clear_db_id() {
  db_id_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 ListGeoSurveyProjectsRequest::_internal_db_id() const {
  return db_id_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 ListGeoSurveyProjectsRequest::db_id() const {
  // @@protoc_insertion_point(field_get:smart3dmap.v1.ListGeoSurveyProjectsRequest.db_id)
  return _internal_db_id();
}
inline void ListGeoSurveyProjectsRequest::_internal_set_db_id(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  db_id_ = value;
}
inline void ListGeoSurveyProjectsRequest::set_db_id(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_db_id(value);
  // @@protoc_insertion_point(field_set:smart3dmap.v1.ListGeoSurveyProjectsRequest.db_id)
}

// string name = 3;
inline void ListGeoSurveyProjectsRequest::clear_name() {
  name_.ClearToEmpty();
}
inline const std::string& ListGeoSurveyProjectsRequest::name() const {
  // @@protoc_insertion_point(field_get:smart3dmap.v1.ListGeoSurveyProjectsRequest.name)
  return _internal_name();
}
inline void ListGeoSurveyProjectsRequest::set_name(const std::string& value) {
  _internal_set_name(value);
  // @@protoc_insertion_point(field_set:smart3dmap.v1.ListGeoSurveyProjectsRequest.name)
}
inline std::string* ListGeoSurveyProjectsRequest::mutable_name() {
  // @@protoc_insertion_point(field_mutable:smart3dmap.v1.ListGeoSurveyProjectsRequest.name)
  return _internal_mutable_name();
}
inline const std::string& ListGeoSurveyProjectsRequest::_internal_name() const {
  return name_.Get();
}
inline void ListGeoSurveyProjectsRequest::_internal_set_name(const std::string& value) {
  
  name_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArena());
}
inline void ListGeoSurveyProjectsRequest::set_name(std::string&& value) {
  
  name_.Set(
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:smart3dmap.v1.ListGeoSurveyProjectsRequest.name)
}
inline void ListGeoSurveyProjectsRequest::set_name(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  name_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(value), GetArena());
  // @@protoc_insertion_point(field_set_char:smart3dmap.v1.ListGeoSurveyProjectsRequest.name)
}
inline void ListGeoSurveyProjectsRequest::set_name(const char* value,
    size_t size) {
  
  name_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:smart3dmap.v1.ListGeoSurveyProjectsRequest.name)
}
inline std::string* ListGeoSurveyProjectsRequest::_internal_mutable_name() {
  
  return name_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArena());
}
inline std::string* ListGeoSurveyProjectsRequest::release_name() {
  // @@protoc_insertion_point(field_release:smart3dmap.v1.ListGeoSurveyProjectsRequest.name)
  return name_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void ListGeoSurveyProjectsRequest::set_allocated_name(std::string* name) {
  if (name != nullptr) {
    
  } else {
    
  }
  name_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), name,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:smart3dmap.v1.ListGeoSurveyProjectsRequest.name)
}

// -------------------------------------------------------------------

// ListGeoSurveyProjectsResponse

// int32 total_count = 1;
inline void ListGeoSurveyProjectsResponse::clear_total_count() {
  total_count_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 ListGeoSurveyProjectsResponse::_internal_total_count() const {
  return total_count_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 ListGeoSurveyProjectsResponse::total_count() const {
  // @@protoc_insertion_point(field_get:smart3dmap.v1.ListGeoSurveyProjectsResponse.total_count)
  return _internal_total_count();
}
inline void ListGeoSurveyProjectsResponse::_internal_set_total_count(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  total_count_ = value;
}
inline void ListGeoSurveyProjectsResponse::set_total_count(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_total_count(value);
  // @@protoc_insertion_point(field_set:smart3dmap.v1.ListGeoSurveyProjectsResponse.total_count)
}

// repeated .smart3dmap.v1.GeoSurveyProject projects = 2;
inline int ListGeoSurveyProjectsResponse::_internal_projects_size() const {
  return projects_.size();
}
inline int ListGeoSurveyProjectsResponse::projects_size() const {
  return _internal_projects_size();
}
inline void ListGeoSurveyProjectsResponse::clear_projects() {
  projects_.Clear();
}
inline ::smart3dmap::v1::GeoSurveyProject* ListGeoSurveyProjectsResponse::mutable_projects(int index) {
  // @@protoc_insertion_point(field_mutable:smart3dmap.v1.ListGeoSurveyProjectsResponse.projects)
  return projects_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::smart3dmap::v1::GeoSurveyProject >*
ListGeoSurveyProjectsResponse::mutable_projects() {
  // @@protoc_insertion_point(field_mutable_list:smart3dmap.v1.ListGeoSurveyProjectsResponse.projects)
  return &projects_;
}
inline const ::smart3dmap::v1::GeoSurveyProject& ListGeoSurveyProjectsResponse::_internal_projects(int index) const {
  return projects_.Get(index);
}
inline const ::smart3dmap::v1::GeoSurveyProject& ListGeoSurveyProjectsResponse::projects(int index) const {
  // @@protoc_insertion_point(field_get:smart3dmap.v1.ListGeoSurveyProjectsResponse.projects)
  return _internal_projects(index);
}
inline ::smart3dmap::v1::GeoSurveyProject* ListGeoSurveyProjectsResponse::_internal_add_projects() {
  return projects_.Add();
}
inline ::smart3dmap::v1::GeoSurveyProject* ListGeoSurveyProjectsResponse::add_projects() {
  // @@protoc_insertion_point(field_add:smart3dmap.v1.ListGeoSurveyProjectsResponse.projects)
  return _internal_add_projects();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::smart3dmap::v1::GeoSurveyProject >&
ListGeoSurveyProjectsResponse::projects() const {
  // @@protoc_insertion_point(field_list:smart3dmap.v1.ListGeoSurveyProjectsResponse.projects)
  return projects_;
}

// -------------------------------------------------------------------

// GetGeoSurveyProjectRequest

// int32 db_id = 1;
inline void GetGeoSurveyProjectRequest::clear_db_id() {
  db_id_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 GetGeoSurveyProjectRequest::_internal_db_id() const {
  return db_id_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 GetGeoSurveyProjectRequest::db_id() const {
  // @@protoc_insertion_point(field_get:smart3dmap.v1.GetGeoSurveyProjectRequest.db_id)
  return _internal_db_id();
}
inline void GetGeoSurveyProjectRequest::_internal_set_db_id(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  db_id_ = value;
}
inline void GetGeoSurveyProjectRequest::set_db_id(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_db_id(value);
  // @@protoc_insertion_point(field_set:smart3dmap.v1.GetGeoSurveyProjectRequest.db_id)
}

// int32 project_id = 2;
inline void GetGeoSurveyProjectRequest::clear_project_id() {
  project_id_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 GetGeoSurveyProjectRequest::_internal_project_id() const {
  return project_id_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 GetGeoSurveyProjectRequest::project_id() const {
  // @@protoc_insertion_point(field_get:smart3dmap.v1.GetGeoSurveyProjectRequest.project_id)
  return _internal_project_id();
}
inline void GetGeoSurveyProjectRequest::_internal_set_project_id(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  project_id_ = value;
}
inline void GetGeoSurveyProjectRequest::set_project_id(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_project_id(value);
  // @@protoc_insertion_point(field_set:smart3dmap.v1.GetGeoSurveyProjectRequest.project_id)
}

// -------------------------------------------------------------------

// GetDrillDataRequest

// int32 db_id = 1;
inline void GetDrillDataRequest::clear_db_id() {
  db_id_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 GetDrillDataRequest::_internal_db_id() const {
  return db_id_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 GetDrillDataRequest::db_id() const {
  // @@protoc_insertion_point(field_get:smart3dmap.v1.GetDrillDataRequest.db_id)
  return _internal_db_id();
}
inline void GetDrillDataRequest::_internal_set_db_id(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  db_id_ = value;
}
inline void GetDrillDataRequest::set_db_id(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_db_id(value);
  // @@protoc_insertion_point(field_set:smart3dmap.v1.GetDrillDataRequest.db_id)
}

// int32 drill_id = 2;
inline void GetDrillDataRequest::clear_drill_id() {
  drill_id_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 GetDrillDataRequest::_internal_drill_id() const {
  return drill_id_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 GetDrillDataRequest::drill_id() const {
  // @@protoc_insertion_point(field_get:smart3dmap.v1.GetDrillDataRequest.drill_id)
  return _internal_drill_id();
}
inline void GetDrillDataRequest::_internal_set_drill_id(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  drill_id_ = value;
}
inline void GetDrillDataRequest::set_drill_id(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_drill_id(value);
  // @@protoc_insertion_point(field_set:smart3dmap.v1.GetDrillDataRequest.drill_id)
}

// -------------------------------------------------------------------

// DeleteDrillDataRequest

// int32 db_id = 1;
inline void DeleteDrillDataRequest::clear_db_id() {
  db_id_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 DeleteDrillDataRequest::_internal_db_id() const {
  return db_id_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 DeleteDrillDataRequest::db_id() const {
  // @@protoc_insertion_point(field_get:smart3dmap.v1.DeleteDrillDataRequest.db_id)
  return _internal_db_id();
}
inline void DeleteDrillDataRequest::_internal_set_db_id(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  db_id_ = value;
}
inline void DeleteDrillDataRequest::set_db_id(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_db_id(value);
  // @@protoc_insertion_point(field_set:smart3dmap.v1.DeleteDrillDataRequest.db_id)
}

// int32 drill_id = 2;
inline void DeleteDrillDataRequest::clear_drill_id() {
  drill_id_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 DeleteDrillDataRequest::_internal_drill_id() const {
  return drill_id_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 DeleteDrillDataRequest::drill_id() const {
  // @@protoc_insertion_point(field_get:smart3dmap.v1.DeleteDrillDataRequest.drill_id)
  return _internal_drill_id();
}
inline void DeleteDrillDataRequest::_internal_set_drill_id(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  drill_id_ = value;
}
inline void DeleteDrillDataRequest::set_drill_id(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_drill_id(value);
  // @@protoc_insertion_point(field_set:smart3dmap.v1.DeleteDrillDataRequest.drill_id)
}

// -------------------------------------------------------------------

// DeleteDrillDataResponse

// bool status = 1;
inline void DeleteDrillDataResponse::clear_status() {
  status_ = false;
}
inline bool DeleteDrillDataResponse::_internal_status() const {
  return status_;
}
inline bool DeleteDrillDataResponse::status() const {
  // @@protoc_insertion_point(field_get:smart3dmap.v1.DeleteDrillDataResponse.status)
  return _internal_status();
}
inline void DeleteDrillDataResponse::_internal_set_status(bool value) {
  
  status_ = value;
}
inline void DeleteDrillDataResponse::set_status(bool value) {
  _internal_set_status(value);
  // @@protoc_insertion_point(field_set:smart3dmap.v1.DeleteDrillDataResponse.status)
}

// string error = 2;
inline void DeleteDrillDataResponse::clear_error() {
  error_.ClearToEmpty();
}
inline const std::string& DeleteDrillDataResponse::error() const {
  // @@protoc_insertion_point(field_get:smart3dmap.v1.DeleteDrillDataResponse.error)
  return _internal_error();
}
inline void DeleteDrillDataResponse::set_error(const std::string& value) {
  _internal_set_error(value);
  // @@protoc_insertion_point(field_set:smart3dmap.v1.DeleteDrillDataResponse.error)
}
inline std::string* DeleteDrillDataResponse::mutable_error() {
  // @@protoc_insertion_point(field_mutable:smart3dmap.v1.DeleteDrillDataResponse.error)
  return _internal_mutable_error();
}
inline const std::string& DeleteDrillDataResponse::_internal_error() const {
  return error_.Get();
}
inline void DeleteDrillDataResponse::_internal_set_error(const std::string& value) {
  
  error_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArena());
}
inline void DeleteDrillDataResponse::set_error(std::string&& value) {
  
  error_.Set(
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:smart3dmap.v1.DeleteDrillDataResponse.error)
}
inline void DeleteDrillDataResponse::set_error(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  error_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(value), GetArena());
  // @@protoc_insertion_point(field_set_char:smart3dmap.v1.DeleteDrillDataResponse.error)
}
inline void DeleteDrillDataResponse::set_error(const char* value,
    size_t size) {
  
  error_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:smart3dmap.v1.DeleteDrillDataResponse.error)
}
inline std::string* DeleteDrillDataResponse::_internal_mutable_error() {
  
  return error_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArena());
}
inline std::string* DeleteDrillDataResponse::release_error() {
  // @@protoc_insertion_point(field_release:smart3dmap.v1.DeleteDrillDataResponse.error)
  return error_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void DeleteDrillDataResponse::set_allocated_error(std::string* error) {
  if (error != nullptr) {
    
  } else {
    
  }
  error_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), error,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:smart3dmap.v1.DeleteDrillDataResponse.error)
}

// -------------------------------------------------------------------

// GetDrillRequest

// int32 db_id = 1;
inline void GetDrillRequest::clear_db_id() {
  db_id_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 GetDrillRequest::_internal_db_id() const {
  return db_id_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 GetDrillRequest::db_id() const {
  // @@protoc_insertion_point(field_get:smart3dmap.v1.GetDrillRequest.db_id)
  return _internal_db_id();
}
inline void GetDrillRequest::_internal_set_db_id(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  db_id_ = value;
}
inline void GetDrillRequest::set_db_id(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_db_id(value);
  // @@protoc_insertion_point(field_set:smart3dmap.v1.GetDrillRequest.db_id)
}

// int32 drill_id = 2;
inline bool GetDrillRequest::_internal_has_drill_id() const {
  return drill_identity_case() == kDrillId;
}
inline bool GetDrillRequest::has_drill_id() const {
  return _internal_has_drill_id();
}
inline void GetDrillRequest::set_has_drill_id() {
  _oneof_case_[0] = kDrillId;
}
inline void GetDrillRequest::clear_drill_id() {
  if (_internal_has_drill_id()) {
    drill_identity_.drill_id_ = 0;
    clear_has_drill_identity();
  }
}
inline ::PROTOBUF_NAMESPACE_ID::int32 GetDrillRequest::_internal_drill_id() const {
  if (_internal_has_drill_id()) {
    return drill_identity_.drill_id_;
  }
  return 0;
}
inline void GetDrillRequest::_internal_set_drill_id(::PROTOBUF_NAMESPACE_ID::int32 value) {
  if (!_internal_has_drill_id()) {
    clear_drill_identity();
    set_has_drill_id();
  }
  drill_identity_.drill_id_ = value;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 GetDrillRequest::drill_id() const {
  // @@protoc_insertion_point(field_get:smart3dmap.v1.GetDrillRequest.drill_id)
  return _internal_drill_id();
}
inline void GetDrillRequest::set_drill_id(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_drill_id(value);
  // @@protoc_insertion_point(field_set:smart3dmap.v1.GetDrillRequest.drill_id)
}

// string drill_code = 3;
inline bool GetDrillRequest::_internal_has_drill_code() const {
  return drill_identity_case() == kDrillCode;
}
inline bool GetDrillRequest::has_drill_code() const {
  return _internal_has_drill_code();
}
inline void GetDrillRequest::set_has_drill_code() {
  _oneof_case_[0] = kDrillCode;
}
inline void GetDrillRequest::clear_drill_code() {
  if (_internal_has_drill_code()) {
    drill_identity_.drill_code_.Destroy(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArena());
    clear_has_drill_identity();
  }
}
inline const std::string& GetDrillRequest::drill_code() const {
  // @@protoc_insertion_point(field_get:smart3dmap.v1.GetDrillRequest.drill_code)
  return _internal_drill_code();
}
inline void GetDrillRequest::set_drill_code(const std::string& value) {
  _internal_set_drill_code(value);
  // @@protoc_insertion_point(field_set:smart3dmap.v1.GetDrillRequest.drill_code)
}
inline std::string* GetDrillRequest::mutable_drill_code() {
  // @@protoc_insertion_point(field_mutable:smart3dmap.v1.GetDrillRequest.drill_code)
  return _internal_mutable_drill_code();
}
inline const std::string& GetDrillRequest::_internal_drill_code() const {
  if (_internal_has_drill_code()) {
    return drill_identity_.drill_code_.Get();
  }
  return ::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited();
}
inline void GetDrillRequest::_internal_set_drill_code(const std::string& value) {
  if (!_internal_has_drill_code()) {
    clear_drill_identity();
    set_has_drill_code();
    drill_identity_.drill_code_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  }
  drill_identity_.drill_code_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArena());
}
inline void GetDrillRequest::set_drill_code(std::string&& value) {
  // @@protoc_insertion_point(field_set:smart3dmap.v1.GetDrillRequest.drill_code)
  if (!_internal_has_drill_code()) {
    clear_drill_identity();
    set_has_drill_code();
    drill_identity_.drill_code_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  }
  drill_identity_.drill_code_.Set(
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:smart3dmap.v1.GetDrillRequest.drill_code)
}
inline void GetDrillRequest::set_drill_code(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  if (!_internal_has_drill_code()) {
    clear_drill_identity();
    set_has_drill_code();
    drill_identity_.drill_code_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  }
  drill_identity_.drill_code_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{},
      ::std::string(value), GetArena());
  // @@protoc_insertion_point(field_set_char:smart3dmap.v1.GetDrillRequest.drill_code)
}
inline void GetDrillRequest::set_drill_code(const char* value,
                             size_t size) {
  if (!_internal_has_drill_code()) {
    clear_drill_identity();
    set_has_drill_code();
    drill_identity_.drill_code_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  }
  drill_identity_.drill_code_.Set(
      ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(
      reinterpret_cast<const char*>(value), size),
      GetArena());
  // @@protoc_insertion_point(field_set_pointer:smart3dmap.v1.GetDrillRequest.drill_code)
}
inline std::string* GetDrillRequest::_internal_mutable_drill_code() {
  if (!_internal_has_drill_code()) {
    clear_drill_identity();
    set_has_drill_code();
    drill_identity_.drill_code_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  }
  return drill_identity_.drill_code_.Mutable(
      ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArena());
}
inline std::string* GetDrillRequest::release_drill_code() {
  // @@protoc_insertion_point(field_release:smart3dmap.v1.GetDrillRequest.drill_code)
  if (_internal_has_drill_code()) {
    clear_has_drill_identity();
    return drill_identity_.drill_code_.ReleaseNonDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  } else {
    return nullptr;
  }
}
inline void GetDrillRequest::set_allocated_drill_code(std::string* drill_code) {
  if (has_drill_identity()) {
    clear_drill_identity();
  }
  if (drill_code != nullptr) {
    set_has_drill_code();
    drill_identity_.drill_code_.UnsafeSetDefault(drill_code);
    ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena();
    if (arena != nullptr) {
      arena->Own(drill_code);
    }
  }
  // @@protoc_insertion_point(field_set_allocated:smart3dmap.v1.GetDrillRequest.drill_code)
}

inline bool GetDrillRequest::has_drill_identity() const {
  return drill_identity_case() != DRILL_IDENTITY_NOT_SET;
}
inline void GetDrillRequest::clear_has_drill_identity() {
  _oneof_case_[0] = DRILL_IDENTITY_NOT_SET;
}
inline GetDrillRequest::DrillIdentityCase GetDrillRequest::drill_identity_case() const {
  return GetDrillRequest::DrillIdentityCase(_oneof_case_[0]);
}
// -------------------------------------------------------------------

// GetDrillStdLayersRequest

// int32 db_id = 1;
inline void GetDrillStdLayersRequest::clear_db_id() {
  db_id_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 GetDrillStdLayersRequest::_internal_db_id() const {
  return db_id_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 GetDrillStdLayersRequest::db_id() const {
  // @@protoc_insertion_point(field_get:smart3dmap.v1.GetDrillStdLayersRequest.db_id)
  return _internal_db_id();
}
inline void GetDrillStdLayersRequest::_internal_set_db_id(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  db_id_ = value;
}
inline void GetDrillStdLayersRequest::set_db_id(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_db_id(value);
  // @@protoc_insertion_point(field_set:smart3dmap.v1.GetDrillStdLayersRequest.db_id)
}

// int32 drill_id = 2;
inline void GetDrillStdLayersRequest::clear_drill_id() {
  drill_id_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 GetDrillStdLayersRequest::_internal_drill_id() const {
  return drill_id_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 GetDrillStdLayersRequest::drill_id() const {
  // @@protoc_insertion_point(field_get:smart3dmap.v1.GetDrillStdLayersRequest.drill_id)
  return _internal_drill_id();
}
inline void GetDrillStdLayersRequest::_internal_set_drill_id(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  drill_id_ = value;
}
inline void GetDrillStdLayersRequest::set_drill_id(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_drill_id(value);
  // @@protoc_insertion_point(field_set:smart3dmap.v1.GetDrillStdLayersRequest.drill_id)
}

// int32 std_strat_id = 3;
inline void GetDrillStdLayersRequest::clear_std_strat_id() {
  std_strat_id_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 GetDrillStdLayersRequest::_internal_std_strat_id() const {
  return std_strat_id_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 GetDrillStdLayersRequest::std_strat_id() const {
  // @@protoc_insertion_point(field_get:smart3dmap.v1.GetDrillStdLayersRequest.std_strat_id)
  return _internal_std_strat_id();
}
inline void GetDrillStdLayersRequest::_internal_set_std_strat_id(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  std_strat_id_ = value;
}
inline void GetDrillStdLayersRequest::set_std_strat_id(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_std_strat_id(value);
  // @@protoc_insertion_point(field_set:smart3dmap.v1.GetDrillStdLayersRequest.std_strat_id)
}

// -------------------------------------------------------------------

// DeleteModelRequest

// int32 db_id = 1;
inline void DeleteModelRequest::clear_db_id() {
  db_id_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 DeleteModelRequest::_internal_db_id() const {
  return db_id_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 DeleteModelRequest::db_id() const {
  // @@protoc_insertion_point(field_get:smart3dmap.v1.DeleteModelRequest.db_id)
  return _internal_db_id();
}
inline void DeleteModelRequest::_internal_set_db_id(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  db_id_ = value;
}
inline void DeleteModelRequest::set_db_id(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_db_id(value);
  // @@protoc_insertion_point(field_set:smart3dmap.v1.DeleteModelRequest.db_id)
}

// int32 model_id = 2;
inline void DeleteModelRequest::clear_model_id() {
  model_id_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 DeleteModelRequest::_internal_model_id() const {
  return model_id_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 DeleteModelRequest::model_id() const {
  // @@protoc_insertion_point(field_get:smart3dmap.v1.DeleteModelRequest.model_id)
  return _internal_model_id();
}
inline void DeleteModelRequest::_internal_set_model_id(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  model_id_ = value;
}
inline void DeleteModelRequest::set_model_id(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_model_id(value);
  // @@protoc_insertion_point(field_set:smart3dmap.v1.DeleteModelRequest.model_id)
}

// -------------------------------------------------------------------

// DeleteModelResponse

// bool status = 1;
inline void DeleteModelResponse::clear_status() {
  status_ = false;
}
inline bool DeleteModelResponse::_internal_status() const {
  return status_;
}
inline bool DeleteModelResponse::status() const {
  // @@protoc_insertion_point(field_get:smart3dmap.v1.DeleteModelResponse.status)
  return _internal_status();
}
inline void DeleteModelResponse::_internal_set_status(bool value) {
  
  status_ = value;
}
inline void DeleteModelResponse::set_status(bool value) {
  _internal_set_status(value);
  // @@protoc_insertion_point(field_set:smart3dmap.v1.DeleteModelResponse.status)
}

// string error = 2;
inline void DeleteModelResponse::clear_error() {
  error_.ClearToEmpty();
}
inline const std::string& DeleteModelResponse::error() const {
  // @@protoc_insertion_point(field_get:smart3dmap.v1.DeleteModelResponse.error)
  return _internal_error();
}
inline void DeleteModelResponse::set_error(const std::string& value) {
  _internal_set_error(value);
  // @@protoc_insertion_point(field_set:smart3dmap.v1.DeleteModelResponse.error)
}
inline std::string* DeleteModelResponse::mutable_error() {
  // @@protoc_insertion_point(field_mutable:smart3dmap.v1.DeleteModelResponse.error)
  return _internal_mutable_error();
}
inline const std::string& DeleteModelResponse::_internal_error() const {
  return error_.Get();
}
inline void DeleteModelResponse::_internal_set_error(const std::string& value) {
  
  error_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArena());
}
inline void DeleteModelResponse::set_error(std::string&& value) {
  
  error_.Set(
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:smart3dmap.v1.DeleteModelResponse.error)
}
inline void DeleteModelResponse::set_error(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  error_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(value), GetArena());
  // @@protoc_insertion_point(field_set_char:smart3dmap.v1.DeleteModelResponse.error)
}
inline void DeleteModelResponse::set_error(const char* value,
    size_t size) {
  
  error_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:smart3dmap.v1.DeleteModelResponse.error)
}
inline std::string* DeleteModelResponse::_internal_mutable_error() {
  
  return error_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArena());
}
inline std::string* DeleteModelResponse::release_error() {
  // @@protoc_insertion_point(field_release:smart3dmap.v1.DeleteModelResponse.error)
  return error_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void DeleteModelResponse::set_allocated_error(std::string* error) {
  if (error != nullptr) {
    
  } else {
    
  }
  error_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), error,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:smart3dmap.v1.DeleteModelResponse.error)
}

// -------------------------------------------------------------------

// ExportModelMetadataRequest

// int32 db_id = 1;
inline void ExportModelMetadataRequest::clear_db_id() {
  db_id_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 ExportModelMetadataRequest::_internal_db_id() const {
  return db_id_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 ExportModelMetadataRequest::db_id() const {
  // @@protoc_insertion_point(field_get:smart3dmap.v1.ExportModelMetadataRequest.db_id)
  return _internal_db_id();
}
inline void ExportModelMetadataRequest::_internal_set_db_id(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  db_id_ = value;
}
inline void ExportModelMetadataRequest::set_db_id(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_db_id(value);
  // @@protoc_insertion_point(field_set:smart3dmap.v1.ExportModelMetadataRequest.db_id)
}

// int32 model_id = 2;
inline void ExportModelMetadataRequest::clear_model_id() {
  model_id_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 ExportModelMetadataRequest::_internal_model_id() const {
  return model_id_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 ExportModelMetadataRequest::model_id() const {
  // @@protoc_insertion_point(field_get:smart3dmap.v1.ExportModelMetadataRequest.model_id)
  return _internal_model_id();
}
inline void ExportModelMetadataRequest::_internal_set_model_id(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  model_id_ = value;
}
inline void ExportModelMetadataRequest::set_model_id(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_model_id(value);
  // @@protoc_insertion_point(field_set:smart3dmap.v1.ExportModelMetadataRequest.model_id)
}

// -------------------------------------------------------------------

// ExportModelMetadataResponse

// int32 db_id = 1;
inline void ExportModelMetadataResponse::clear_db_id() {
  db_id_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 ExportModelMetadataResponse::_internal_db_id() const {
  return db_id_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 ExportModelMetadataResponse::db_id() const {
  // @@protoc_insertion_point(field_get:smart3dmap.v1.ExportModelMetadataResponse.db_id)
  return _internal_db_id();
}
inline void ExportModelMetadataResponse::_internal_set_db_id(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  db_id_ = value;
}
inline void ExportModelMetadataResponse::set_db_id(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_db_id(value);
  // @@protoc_insertion_point(field_set:smart3dmap.v1.ExportModelMetadataResponse.db_id)
}

// int32 model_id = 2;
inline void ExportModelMetadataResponse::clear_model_id() {
  model_id_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 ExportModelMetadataResponse::_internal_model_id() const {
  return model_id_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 ExportModelMetadataResponse::model_id() const {
  // @@protoc_insertion_point(field_get:smart3dmap.v1.ExportModelMetadataResponse.model_id)
  return _internal_model_id();
}
inline void ExportModelMetadataResponse::_internal_set_model_id(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  model_id_ = value;
}
inline void ExportModelMetadataResponse::set_model_id(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_model_id(value);
  // @@protoc_insertion_point(field_set:smart3dmap.v1.ExportModelMetadataResponse.model_id)
}

// bytes metadata_xml = 4;
inline void ExportModelMetadataResponse::clear_metadata_xml() {
  metadata_xml_.ClearToEmpty();
}
inline const std::string& ExportModelMetadataResponse::metadata_xml() const {
  // @@protoc_insertion_point(field_get:smart3dmap.v1.ExportModelMetadataResponse.metadata_xml)
  return _internal_metadata_xml();
}
inline void ExportModelMetadataResponse::set_metadata_xml(const std::string& value) {
  _internal_set_metadata_xml(value);
  // @@protoc_insertion_point(field_set:smart3dmap.v1.ExportModelMetadataResponse.metadata_xml)
}
inline std::string* ExportModelMetadataResponse::mutable_metadata_xml() {
  // @@protoc_insertion_point(field_mutable:smart3dmap.v1.ExportModelMetadataResponse.metadata_xml)
  return _internal_mutable_metadata_xml();
}
inline const std::string& ExportModelMetadataResponse::_internal_metadata_xml() const {
  return metadata_xml_.Get();
}
inline void ExportModelMetadataResponse::_internal_set_metadata_xml(const std::string& value) {
  
  metadata_xml_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArena());
}
inline void ExportModelMetadataResponse::set_metadata_xml(std::string&& value) {
  
  metadata_xml_.Set(
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:smart3dmap.v1.ExportModelMetadataResponse.metadata_xml)
}
inline void ExportModelMetadataResponse::set_metadata_xml(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  metadata_xml_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(value), GetArena());
  // @@protoc_insertion_point(field_set_char:smart3dmap.v1.ExportModelMetadataResponse.metadata_xml)
}
inline void ExportModelMetadataResponse::set_metadata_xml(const void* value,
    size_t size) {
  
  metadata_xml_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:smart3dmap.v1.ExportModelMetadataResponse.metadata_xml)
}
inline std::string* ExportModelMetadataResponse::_internal_mutable_metadata_xml() {
  
  return metadata_xml_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArena());
}
inline std::string* ExportModelMetadataResponse::release_metadata_xml() {
  // @@protoc_insertion_point(field_release:smart3dmap.v1.ExportModelMetadataResponse.metadata_xml)
  return metadata_xml_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void ExportModelMetadataResponse::set_allocated_metadata_xml(std::string* metadata_xml) {
  if (metadata_xml != nullptr) {
    
  } else {
    
  }
  metadata_xml_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), metadata_xml,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:smart3dmap.v1.ExportModelMetadataResponse.metadata_xml)
}

// -------------------------------------------------------------------

// ImportModelMetadataRequest

// int32 db_id = 1;
inline void ImportModelMetadataRequest::clear_db_id() {
  db_id_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 ImportModelMetadataRequest::_internal_db_id() const {
  return db_id_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 ImportModelMetadataRequest::db_id() const {
  // @@protoc_insertion_point(field_get:smart3dmap.v1.ImportModelMetadataRequest.db_id)
  return _internal_db_id();
}
inline void ImportModelMetadataRequest::_internal_set_db_id(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  db_id_ = value;
}
inline void ImportModelMetadataRequest::set_db_id(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_db_id(value);
  // @@protoc_insertion_point(field_set:smart3dmap.v1.ImportModelMetadataRequest.db_id)
}

// int32 model_id = 2;
inline void ImportModelMetadataRequest::clear_model_id() {
  model_id_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 ImportModelMetadataRequest::_internal_model_id() const {
  return model_id_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 ImportModelMetadataRequest::model_id() const {
  // @@protoc_insertion_point(field_get:smart3dmap.v1.ImportModelMetadataRequest.model_id)
  return _internal_model_id();
}
inline void ImportModelMetadataRequest::_internal_set_model_id(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  model_id_ = value;
}
inline void ImportModelMetadataRequest::set_model_id(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_model_id(value);
  // @@protoc_insertion_point(field_set:smart3dmap.v1.ImportModelMetadataRequest.model_id)
}

// bytes metadata_xml = 3;
inline void ImportModelMetadataRequest::clear_metadata_xml() {
  metadata_xml_.ClearToEmpty();
}
inline const std::string& ImportModelMetadataRequest::metadata_xml() const {
  // @@protoc_insertion_point(field_get:smart3dmap.v1.ImportModelMetadataRequest.metadata_xml)
  return _internal_metadata_xml();
}
inline void ImportModelMetadataRequest::set_metadata_xml(const std::string& value) {
  _internal_set_metadata_xml(value);
  // @@protoc_insertion_point(field_set:smart3dmap.v1.ImportModelMetadataRequest.metadata_xml)
}
inline std::string* ImportModelMetadataRequest::mutable_metadata_xml() {
  // @@protoc_insertion_point(field_mutable:smart3dmap.v1.ImportModelMetadataRequest.metadata_xml)
  return _internal_mutable_metadata_xml();
}
inline const std::string& ImportModelMetadataRequest::_internal_metadata_xml() const {
  return metadata_xml_.Get();
}
inline void ImportModelMetadataRequest::_internal_set_metadata_xml(const std::string& value) {
  
  metadata_xml_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArena());
}
inline void ImportModelMetadataRequest::set_metadata_xml(std::string&& value) {
  
  metadata_xml_.Set(
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:smart3dmap.v1.ImportModelMetadataRequest.metadata_xml)
}
inline void ImportModelMetadataRequest::set_metadata_xml(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  metadata_xml_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(value), GetArena());
  // @@protoc_insertion_point(field_set_char:smart3dmap.v1.ImportModelMetadataRequest.metadata_xml)
}
inline void ImportModelMetadataRequest::set_metadata_xml(const void* value,
    size_t size) {
  
  metadata_xml_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:smart3dmap.v1.ImportModelMetadataRequest.metadata_xml)
}
inline std::string* ImportModelMetadataRequest::_internal_mutable_metadata_xml() {
  
  return metadata_xml_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArena());
}
inline std::string* ImportModelMetadataRequest::release_metadata_xml() {
  // @@protoc_insertion_point(field_release:smart3dmap.v1.ImportModelMetadataRequest.metadata_xml)
  return metadata_xml_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void ImportModelMetadataRequest::set_allocated_metadata_xml(std::string* metadata_xml) {
  if (metadata_xml != nullptr) {
    
  } else {
    
  }
  metadata_xml_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), metadata_xml,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:smart3dmap.v1.ImportModelMetadataRequest.metadata_xml)
}

// -------------------------------------------------------------------

// ImportModelMetadataResponse

// bool status = 1;
inline void ImportModelMetadataResponse::clear_status() {
  status_ = false;
}
inline bool ImportModelMetadataResponse::_internal_status() const {
  return status_;
}
inline bool ImportModelMetadataResponse::status() const {
  // @@protoc_insertion_point(field_get:smart3dmap.v1.ImportModelMetadataResponse.status)
  return _internal_status();
}
inline void ImportModelMetadataResponse::_internal_set_status(bool value) {
  
  status_ = value;
}
inline void ImportModelMetadataResponse::set_status(bool value) {
  _internal_set_status(value);
  // @@protoc_insertion_point(field_set:smart3dmap.v1.ImportModelMetadataResponse.status)
}

// string error = 2;
inline void ImportModelMetadataResponse::clear_error() {
  error_.ClearToEmpty();
}
inline const std::string& ImportModelMetadataResponse::error() const {
  // @@protoc_insertion_point(field_get:smart3dmap.v1.ImportModelMetadataResponse.error)
  return _internal_error();
}
inline void ImportModelMetadataResponse::set_error(const std::string& value) {
  _internal_set_error(value);
  // @@protoc_insertion_point(field_set:smart3dmap.v1.ImportModelMetadataResponse.error)
}
inline std::string* ImportModelMetadataResponse::mutable_error() {
  // @@protoc_insertion_point(field_mutable:smart3dmap.v1.ImportModelMetadataResponse.error)
  return _internal_mutable_error();
}
inline const std::string& ImportModelMetadataResponse::_internal_error() const {
  return error_.Get();
}
inline void ImportModelMetadataResponse::_internal_set_error(const std::string& value) {
  
  error_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArena());
}
inline void ImportModelMetadataResponse::set_error(std::string&& value) {
  
  error_.Set(
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:smart3dmap.v1.ImportModelMetadataResponse.error)
}
inline void ImportModelMetadataResponse::set_error(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  error_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(value), GetArena());
  // @@protoc_insertion_point(field_set_char:smart3dmap.v1.ImportModelMetadataResponse.error)
}
inline void ImportModelMetadataResponse::set_error(const char* value,
    size_t size) {
  
  error_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:smart3dmap.v1.ImportModelMetadataResponse.error)
}
inline std::string* ImportModelMetadataResponse::_internal_mutable_error() {
  
  return error_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArena());
}
inline std::string* ImportModelMetadataResponse::release_error() {
  // @@protoc_insertion_point(field_release:smart3dmap.v1.ImportModelMetadataResponse.error)
  return error_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void ImportModelMetadataResponse::set_allocated_error(std::string* error) {
  if (error != nullptr) {
    
  } else {
    
  }
  error_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), error,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:smart3dmap.v1.ImportModelMetadataResponse.error)
}

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__
// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------


// @@protoc_insertion_point(namespace_scope)

}  // namespace v1
}  // namespace smart3dmap

PROTOBUF_NAMESPACE_OPEN

template <> struct is_proto_enum< ::smart3dmap::v1::Layer_Type> : ::std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::smart3dmap::v1::Layer_Type>() {
  return ::smart3dmap::v1::Layer_Type_descriptor();
}
template <> struct is_proto_enum< ::smart3dmap::v1::StdStrat_Item_Type> : ::std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::smart3dmap::v1::StdStrat_Item_Type>() {
  return ::smart3dmap::v1::StdStrat_Item_Type_descriptor();
}
template <> struct is_proto_enum< ::smart3dmap::v1::DBServerType> : ::std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::smart3dmap::v1::DBServerType>() {
  return ::smart3dmap::v1::DBServerType_descriptor();
}
template <> struct is_proto_enum< ::smart3dmap::v1::DBAppType> : ::std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::smart3dmap::v1::DBAppType>() {
  return ::smart3dmap::v1::DBAppType_descriptor();
}
template <> struct is_proto_enum< ::smart3dmap::v1::DataResourceType> : ::std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::smart3dmap::v1::DataResourceType>() {
  return ::smart3dmap::v1::DataResourceType_descriptor();
}
template <> struct is_proto_enum< ::smart3dmap::v1::DataPreviewMode> : ::std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::smart3dmap::v1::DataPreviewMode>() {
  return ::smart3dmap::v1::DataPreviewMode_descriptor();
}

PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)

#include <google/protobuf/port_undef.inc>
#endif  // GOOGLE_PROTOBUF_INCLUDED_GOOGLE_PROTOBUF_INCLUDED_data_5fengine_2fdata_5fengine_2eproto
