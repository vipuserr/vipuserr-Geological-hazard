// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: sessions/sessions.proto

#ifndef GOOGLE_PROTOBUF_INCLUDED_sessions_2fsessions_2eproto
#define GOOGLE_PROTOBUF_INCLUDED_sessions_2fsessions_2eproto

#include <limits>
#include <string>

#include <google/protobuf/port_def.inc>
#if PROTOBUF_VERSION < 3015000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers. Please update
#error your headers.
#endif
#if 3015008 < PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers. Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/port_undef.inc>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_table_driven.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/metadata_lite.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/unknown_field_set.h>
#include <google/protobuf/timestamp.pb.h>
#include <google/protobuf/wrappers.pb.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
#define PROTOBUF_INTERNAL_EXPORT_sessions_2fsessions_2eproto LIBS3DMGRPC_API
PROTOBUF_NAMESPACE_OPEN
namespace internal {
class AnyMetadata;
}  // namespace internal
PROTOBUF_NAMESPACE_CLOSE

// Internal implementation detail -- do not use these members.
struct LIBS3DMGRPC_API TableStruct_sessions_2fsessions_2eproto {
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTableField entries[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::AuxiliaryParseTableField aux[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTable schema[4]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::FieldMetadata field_metadata[];
  static const ::PROTOBUF_NAMESPACE_ID::internal::SerializationTable serialization_table[];
  static const ::PROTOBUF_NAMESPACE_ID::uint32 offsets[];
};
extern LIBS3DMGRPC_API const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_sessions_2fsessions_2eproto;
LIBS3DMGRPC_API ::PROTOBUF_NAMESPACE_ID::Metadata descriptor_table_sessions_2fsessions_2eproto_metadata_getter(int index);
namespace smart3dmap {
namespace v1 {
class CreateSessionRequest;
struct CreateSessionRequestDefaultTypeInternal;
LIBS3DMGRPC_API extern CreateSessionRequestDefaultTypeInternal _CreateSessionRequest_default_instance_;
class DeleteSessionRequest;
struct DeleteSessionRequestDefaultTypeInternal;
LIBS3DMGRPC_API extern DeleteSessionRequestDefaultTypeInternal _DeleteSessionRequest_default_instance_;
class GetSessionRequest;
struct GetSessionRequestDefaultTypeInternal;
LIBS3DMGRPC_API extern GetSessionRequestDefaultTypeInternal _GetSessionRequest_default_instance_;
class Session;
struct SessionDefaultTypeInternal;
LIBS3DMGRPC_API extern SessionDefaultTypeInternal _Session_default_instance_;
}  // namespace v1
}  // namespace smart3dmap
PROTOBUF_NAMESPACE_OPEN
template<> LIBS3DMGRPC_API ::smart3dmap::v1::CreateSessionRequest* Arena::CreateMaybeMessage<::smart3dmap::v1::CreateSessionRequest>(Arena*);
template<> LIBS3DMGRPC_API ::smart3dmap::v1::DeleteSessionRequest* Arena::CreateMaybeMessage<::smart3dmap::v1::DeleteSessionRequest>(Arena*);
template<> LIBS3DMGRPC_API ::smart3dmap::v1::GetSessionRequest* Arena::CreateMaybeMessage<::smart3dmap::v1::GetSessionRequest>(Arena*);
template<> LIBS3DMGRPC_API ::smart3dmap::v1::Session* Arena::CreateMaybeMessage<::smart3dmap::v1::Session>(Arena*);
PROTOBUF_NAMESPACE_CLOSE
namespace smart3dmap {
namespace v1 {

// ===================================================================

class LIBS3DMGRPC_API Session PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:smart3dmap.v1.Session) */ {
 public:
  inline Session() : Session(nullptr) {}
  virtual ~Session();
  explicit constexpr Session(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  Session(const Session& from);
  Session(Session&& from) noexcept
    : Session() {
    *this = ::std::move(from);
  }

  inline Session& operator=(const Session& from) {
    CopyFrom(from);
    return *this;
  }
  inline Session& operator=(Session&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const Session& default_instance() {
    return *internal_default_instance();
  }
  static inline const Session* internal_default_instance() {
    return reinterpret_cast<const Session*>(
               &_Session_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  friend void swap(Session& a, Session& b) {
    a.Swap(&b);
  }
  inline void Swap(Session* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(Session* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline Session* New() const final {
    return CreateMaybeMessage<Session>(nullptr);
  }

  Session* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<Session>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const Session& from);
  void MergeFrom(const Session& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Session* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "smart3dmap.v1.Session";
  }
  protected:
  explicit Session(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    return ::descriptor_table_sessions_2fsessions_2eproto_metadata_getter(kIndexInFileMessages);
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kTokenFieldNumber = 1,
    kClientIdFieldNumber = 3,
    kCreatedAtFieldNumber = 4,
    kUpdatedAtFieldNumber = 5,
    kUserIdFieldNumber = 2,
  };
  // string token = 1;
  void clear_token();
  const std::string& token() const;
  void set_token(const std::string& value);
  void set_token(std::string&& value);
  void set_token(const char* value);
  void set_token(const char* value, size_t size);
  std::string* mutable_token();
  std::string* release_token();
  void set_allocated_token(std::string* token);
  private:
  const std::string& _internal_token() const;
  void _internal_set_token(const std::string& value);
  std::string* _internal_mutable_token();
  public:

  // string client_id = 3;
  void clear_client_id();
  const std::string& client_id() const;
  void set_client_id(const std::string& value);
  void set_client_id(std::string&& value);
  void set_client_id(const char* value);
  void set_client_id(const char* value, size_t size);
  std::string* mutable_client_id();
  std::string* release_client_id();
  void set_allocated_client_id(std::string* client_id);
  private:
  const std::string& _internal_client_id() const;
  void _internal_set_client_id(const std::string& value);
  std::string* _internal_mutable_client_id();
  public:

  // .google.protobuf.Timestamp createdAt = 4;
  bool has_createdat() const;
  private:
  bool _internal_has_createdat() const;
  public:
  void clear_createdat();
  const PROTOBUF_NAMESPACE_ID::Timestamp& createdat() const;
  PROTOBUF_NAMESPACE_ID::Timestamp* release_createdat();
  PROTOBUF_NAMESPACE_ID::Timestamp* mutable_createdat();
  void set_allocated_createdat(PROTOBUF_NAMESPACE_ID::Timestamp* createdat);
  private:
  const PROTOBUF_NAMESPACE_ID::Timestamp& _internal_createdat() const;
  PROTOBUF_NAMESPACE_ID::Timestamp* _internal_mutable_createdat();
  public:
  void unsafe_arena_set_allocated_createdat(
      PROTOBUF_NAMESPACE_ID::Timestamp* createdat);
  PROTOBUF_NAMESPACE_ID::Timestamp* unsafe_arena_release_createdat();

  // .google.protobuf.Timestamp updatedAt = 5;
  bool has_updatedat() const;
  private:
  bool _internal_has_updatedat() const;
  public:
  void clear_updatedat();
  const PROTOBUF_NAMESPACE_ID::Timestamp& updatedat() const;
  PROTOBUF_NAMESPACE_ID::Timestamp* release_updatedat();
  PROTOBUF_NAMESPACE_ID::Timestamp* mutable_updatedat();
  void set_allocated_updatedat(PROTOBUF_NAMESPACE_ID::Timestamp* updatedat);
  private:
  const PROTOBUF_NAMESPACE_ID::Timestamp& _internal_updatedat() const;
  PROTOBUF_NAMESPACE_ID::Timestamp* _internal_mutable_updatedat();
  public:
  void unsafe_arena_set_allocated_updatedat(
      PROTOBUF_NAMESPACE_ID::Timestamp* updatedat);
  PROTOBUF_NAMESPACE_ID::Timestamp* unsafe_arena_release_updatedat();

  // int32 user_id = 2;
  void clear_user_id();
  ::PROTOBUF_NAMESPACE_ID::int32 user_id() const;
  void set_user_id(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_user_id() const;
  void _internal_set_user_id(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // @@protoc_insertion_point(class_scope:smart3dmap.v1.Session)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr token_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr client_id_;
  PROTOBUF_NAMESPACE_ID::Timestamp* createdat_;
  PROTOBUF_NAMESPACE_ID::Timestamp* updatedat_;
  ::PROTOBUF_NAMESPACE_ID::int32 user_id_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_sessions_2fsessions_2eproto;
};
// -------------------------------------------------------------------

class LIBS3DMGRPC_API CreateSessionRequest PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:smart3dmap.v1.CreateSessionRequest) */ {
 public:
  inline CreateSessionRequest() : CreateSessionRequest(nullptr) {}
  virtual ~CreateSessionRequest();
  explicit constexpr CreateSessionRequest(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  CreateSessionRequest(const CreateSessionRequest& from);
  CreateSessionRequest(CreateSessionRequest&& from) noexcept
    : CreateSessionRequest() {
    *this = ::std::move(from);
  }

  inline CreateSessionRequest& operator=(const CreateSessionRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline CreateSessionRequest& operator=(CreateSessionRequest&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const CreateSessionRequest& default_instance() {
    return *internal_default_instance();
  }
  static inline const CreateSessionRequest* internal_default_instance() {
    return reinterpret_cast<const CreateSessionRequest*>(
               &_CreateSessionRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    1;

  friend void swap(CreateSessionRequest& a, CreateSessionRequest& b) {
    a.Swap(&b);
  }
  inline void Swap(CreateSessionRequest* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(CreateSessionRequest* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline CreateSessionRequest* New() const final {
    return CreateMaybeMessage<CreateSessionRequest>(nullptr);
  }

  CreateSessionRequest* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<CreateSessionRequest>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const CreateSessionRequest& from);
  void MergeFrom(const CreateSessionRequest& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(CreateSessionRequest* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "smart3dmap.v1.CreateSessionRequest";
  }
  protected:
  explicit CreateSessionRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    return ::descriptor_table_sessions_2fsessions_2eproto_metadata_getter(kIndexInFileMessages);
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kEmailFieldNumber = 1,
    kPasswordFieldNumber = 2,
    kClientIdFieldNumber = 3,
  };
  // string email = 1;
  void clear_email();
  const std::string& email() const;
  void set_email(const std::string& value);
  void set_email(std::string&& value);
  void set_email(const char* value);
  void set_email(const char* value, size_t size);
  std::string* mutable_email();
  std::string* release_email();
  void set_allocated_email(std::string* email);
  private:
  const std::string& _internal_email() const;
  void _internal_set_email(const std::string& value);
  std::string* _internal_mutable_email();
  public:

  // string password = 2;
  void clear_password();
  const std::string& password() const;
  void set_password(const std::string& value);
  void set_password(std::string&& value);
  void set_password(const char* value);
  void set_password(const char* value, size_t size);
  std::string* mutable_password();
  std::string* release_password();
  void set_allocated_password(std::string* password);
  private:
  const std::string& _internal_password() const;
  void _internal_set_password(const std::string& value);
  std::string* _internal_mutable_password();
  public:

  // string client_id = 3;
  void clear_client_id();
  const std::string& client_id() const;
  void set_client_id(const std::string& value);
  void set_client_id(std::string&& value);
  void set_client_id(const char* value);
  void set_client_id(const char* value, size_t size);
  std::string* mutable_client_id();
  std::string* release_client_id();
  void set_allocated_client_id(std::string* client_id);
  private:
  const std::string& _internal_client_id() const;
  void _internal_set_client_id(const std::string& value);
  std::string* _internal_mutable_client_id();
  public:

  // @@protoc_insertion_point(class_scope:smart3dmap.v1.CreateSessionRequest)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr email_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr password_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr client_id_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_sessions_2fsessions_2eproto;
};
// -------------------------------------------------------------------

class LIBS3DMGRPC_API GetSessionRequest PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:smart3dmap.v1.GetSessionRequest) */ {
 public:
  inline GetSessionRequest() : GetSessionRequest(nullptr) {}
  virtual ~GetSessionRequest();
  explicit constexpr GetSessionRequest(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  GetSessionRequest(const GetSessionRequest& from);
  GetSessionRequest(GetSessionRequest&& from) noexcept
    : GetSessionRequest() {
    *this = ::std::move(from);
  }

  inline GetSessionRequest& operator=(const GetSessionRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline GetSessionRequest& operator=(GetSessionRequest&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const GetSessionRequest& default_instance() {
    return *internal_default_instance();
  }
  static inline const GetSessionRequest* internal_default_instance() {
    return reinterpret_cast<const GetSessionRequest*>(
               &_GetSessionRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    2;

  friend void swap(GetSessionRequest& a, GetSessionRequest& b) {
    a.Swap(&b);
  }
  inline void Swap(GetSessionRequest* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(GetSessionRequest* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline GetSessionRequest* New() const final {
    return CreateMaybeMessage<GetSessionRequest>(nullptr);
  }

  GetSessionRequest* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<GetSessionRequest>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const GetSessionRequest& from);
  void MergeFrom(const GetSessionRequest& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(GetSessionRequest* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "smart3dmap.v1.GetSessionRequest";
  }
  protected:
  explicit GetSessionRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    return ::descriptor_table_sessions_2fsessions_2eproto_metadata_getter(kIndexInFileMessages);
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kTokenFieldNumber = 1,
  };
  // string token = 1;
  void clear_token();
  const std::string& token() const;
  void set_token(const std::string& value);
  void set_token(std::string&& value);
  void set_token(const char* value);
  void set_token(const char* value, size_t size);
  std::string* mutable_token();
  std::string* release_token();
  void set_allocated_token(std::string* token);
  private:
  const std::string& _internal_token() const;
  void _internal_set_token(const std::string& value);
  std::string* _internal_mutable_token();
  public:

  // @@protoc_insertion_point(class_scope:smart3dmap.v1.GetSessionRequest)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr token_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_sessions_2fsessions_2eproto;
};
// -------------------------------------------------------------------

class LIBS3DMGRPC_API DeleteSessionRequest PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:smart3dmap.v1.DeleteSessionRequest) */ {
 public:
  inline DeleteSessionRequest() : DeleteSessionRequest(nullptr) {}
  virtual ~DeleteSessionRequest();
  explicit constexpr DeleteSessionRequest(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  DeleteSessionRequest(const DeleteSessionRequest& from);
  DeleteSessionRequest(DeleteSessionRequest&& from) noexcept
    : DeleteSessionRequest() {
    *this = ::std::move(from);
  }

  inline DeleteSessionRequest& operator=(const DeleteSessionRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline DeleteSessionRequest& operator=(DeleteSessionRequest&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const DeleteSessionRequest& default_instance() {
    return *internal_default_instance();
  }
  static inline const DeleteSessionRequest* internal_default_instance() {
    return reinterpret_cast<const DeleteSessionRequest*>(
               &_DeleteSessionRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    3;

  friend void swap(DeleteSessionRequest& a, DeleteSessionRequest& b) {
    a.Swap(&b);
  }
  inline void Swap(DeleteSessionRequest* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(DeleteSessionRequest* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline DeleteSessionRequest* New() const final {
    return CreateMaybeMessage<DeleteSessionRequest>(nullptr);
  }

  DeleteSessionRequest* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<DeleteSessionRequest>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const DeleteSessionRequest& from);
  void MergeFrom(const DeleteSessionRequest& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(DeleteSessionRequest* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "smart3dmap.v1.DeleteSessionRequest";
  }
  protected:
  explicit DeleteSessionRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    return ::descriptor_table_sessions_2fsessions_2eproto_metadata_getter(kIndexInFileMessages);
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kTokenFieldNumber = 1,
  };
  // string token = 1;
  void clear_token();
  const std::string& token() const;
  void set_token(const std::string& value);
  void set_token(std::string&& value);
  void set_token(const char* value);
  void set_token(const char* value, size_t size);
  std::string* mutable_token();
  std::string* release_token();
  void set_allocated_token(std::string* token);
  private:
  const std::string& _internal_token() const;
  void _internal_set_token(const std::string& value);
  std::string* _internal_mutable_token();
  public:

  // @@protoc_insertion_point(class_scope:smart3dmap.v1.DeleteSessionRequest)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr token_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_sessions_2fsessions_2eproto;
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// Session

// string token = 1;
inline void Session::clear_token() {
  token_.ClearToEmpty();
}
inline const std::string& Session::token() const {
  // @@protoc_insertion_point(field_get:smart3dmap.v1.Session.token)
  return _internal_token();
}
inline void Session::set_token(const std::string& value) {
  _internal_set_token(value);
  // @@protoc_insertion_point(field_set:smart3dmap.v1.Session.token)
}
inline std::string* Session::mutable_token() {
  // @@protoc_insertion_point(field_mutable:smart3dmap.v1.Session.token)
  return _internal_mutable_token();
}
inline const std::string& Session::_internal_token() const {
  return token_.Get();
}
inline void Session::_internal_set_token(const std::string& value) {
  
  token_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArena());
}
inline void Session::set_token(std::string&& value) {
  
  token_.Set(
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:smart3dmap.v1.Session.token)
}
inline void Session::set_token(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  token_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(value), GetArena());
  // @@protoc_insertion_point(field_set_char:smart3dmap.v1.Session.token)
}
inline void Session::set_token(const char* value,
    size_t size) {
  
  token_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:smart3dmap.v1.Session.token)
}
inline std::string* Session::_internal_mutable_token() {
  
  return token_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArena());
}
inline std::string* Session::release_token() {
  // @@protoc_insertion_point(field_release:smart3dmap.v1.Session.token)
  return token_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void Session::set_allocated_token(std::string* token) {
  if (token != nullptr) {
    
  } else {
    
  }
  token_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), token,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:smart3dmap.v1.Session.token)
}

// int32 user_id = 2;
inline void Session::clear_user_id() {
  user_id_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 Session::_internal_user_id() const {
  return user_id_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 Session::user_id() const {
  // @@protoc_insertion_point(field_get:smart3dmap.v1.Session.user_id)
  return _internal_user_id();
}
inline void Session::_internal_set_user_id(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  user_id_ = value;
}
inline void Session::set_user_id(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_user_id(value);
  // @@protoc_insertion_point(field_set:smart3dmap.v1.Session.user_id)
}

// string client_id = 3;
inline void Session::clear_client_id() {
  client_id_.ClearToEmpty();
}
inline const std::string& Session::client_id() const {
  // @@protoc_insertion_point(field_get:smart3dmap.v1.Session.client_id)
  return _internal_client_id();
}
inline void Session::set_client_id(const std::string& value) {
  _internal_set_client_id(value);
  // @@protoc_insertion_point(field_set:smart3dmap.v1.Session.client_id)
}
inline std::string* Session::mutable_client_id() {
  // @@protoc_insertion_point(field_mutable:smart3dmap.v1.Session.client_id)
  return _internal_mutable_client_id();
}
inline const std::string& Session::_internal_client_id() const {
  return client_id_.Get();
}
inline void Session::_internal_set_client_id(const std::string& value) {
  
  client_id_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArena());
}
inline void Session::set_client_id(std::string&& value) {
  
  client_id_.Set(
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:smart3dmap.v1.Session.client_id)
}
inline void Session::set_client_id(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  client_id_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(value), GetArena());
  // @@protoc_insertion_point(field_set_char:smart3dmap.v1.Session.client_id)
}
inline void Session::set_client_id(const char* value,
    size_t size) {
  
  client_id_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:smart3dmap.v1.Session.client_id)
}
inline std::string* Session::_internal_mutable_client_id() {
  
  return client_id_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArena());
}
inline std::string* Session::release_client_id() {
  // @@protoc_insertion_point(field_release:smart3dmap.v1.Session.client_id)
  return client_id_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void Session::set_allocated_client_id(std::string* client_id) {
  if (client_id != nullptr) {
    
  } else {
    
  }
  client_id_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), client_id,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:smart3dmap.v1.Session.client_id)
}

// .google.protobuf.Timestamp createdAt = 4;
inline bool Session::_internal_has_createdat() const {
  return this != internal_default_instance() && createdat_ != nullptr;
}
inline bool Session::has_createdat() const {
  return _internal_has_createdat();
}
inline const PROTOBUF_NAMESPACE_ID::Timestamp& Session::_internal_createdat() const {
  const PROTOBUF_NAMESPACE_ID::Timestamp* p = createdat_;
  return p != nullptr ? *p : reinterpret_cast<const PROTOBUF_NAMESPACE_ID::Timestamp&>(
      PROTOBUF_NAMESPACE_ID::_Timestamp_default_instance_);
}
inline const PROTOBUF_NAMESPACE_ID::Timestamp& Session::createdat() const {
  // @@protoc_insertion_point(field_get:smart3dmap.v1.Session.createdAt)
  return _internal_createdat();
}
inline void Session::unsafe_arena_set_allocated_createdat(
    PROTOBUF_NAMESPACE_ID::Timestamp* createdat) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(createdat_);
  }
  createdat_ = createdat;
  if (createdat) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:smart3dmap.v1.Session.createdAt)
}
inline PROTOBUF_NAMESPACE_ID::Timestamp* Session::release_createdat() {
  
  PROTOBUF_NAMESPACE_ID::Timestamp* temp = createdat_;
  createdat_ = nullptr;
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline PROTOBUF_NAMESPACE_ID::Timestamp* Session::unsafe_arena_release_createdat() {
  // @@protoc_insertion_point(field_release:smart3dmap.v1.Session.createdAt)
  
  PROTOBUF_NAMESPACE_ID::Timestamp* temp = createdat_;
  createdat_ = nullptr;
  return temp;
}
inline PROTOBUF_NAMESPACE_ID::Timestamp* Session::_internal_mutable_createdat() {
  
  if (createdat_ == nullptr) {
    auto* p = CreateMaybeMessage<PROTOBUF_NAMESPACE_ID::Timestamp>(GetArena());
    createdat_ = p;
  }
  return createdat_;
}
inline PROTOBUF_NAMESPACE_ID::Timestamp* Session::mutable_createdat() {
  // @@protoc_insertion_point(field_mutable:smart3dmap.v1.Session.createdAt)
  return _internal_mutable_createdat();
}
inline void Session::set_allocated_createdat(PROTOBUF_NAMESPACE_ID::Timestamp* createdat) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(createdat_);
  }
  if (createdat) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(createdat)->GetArena();
    if (message_arena != submessage_arena) {
      createdat = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, createdat, submessage_arena);
    }
    
  } else {
    
  }
  createdat_ = createdat;
  // @@protoc_insertion_point(field_set_allocated:smart3dmap.v1.Session.createdAt)
}

// .google.protobuf.Timestamp updatedAt = 5;
inline bool Session::_internal_has_updatedat() const {
  return this != internal_default_instance() && updatedat_ != nullptr;
}
inline bool Session::has_updatedat() const {
  return _internal_has_updatedat();
}
inline const PROTOBUF_NAMESPACE_ID::Timestamp& Session::_internal_updatedat() const {
  const PROTOBUF_NAMESPACE_ID::Timestamp* p = updatedat_;
  return p != nullptr ? *p : reinterpret_cast<const PROTOBUF_NAMESPACE_ID::Timestamp&>(
      PROTOBUF_NAMESPACE_ID::_Timestamp_default_instance_);
}
inline const PROTOBUF_NAMESPACE_ID::Timestamp& Session::updatedat() const {
  // @@protoc_insertion_point(field_get:smart3dmap.v1.Session.updatedAt)
  return _internal_updatedat();
}
inline void Session::unsafe_arena_set_allocated_updatedat(
    PROTOBUF_NAMESPACE_ID::Timestamp* updatedat) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(updatedat_);
  }
  updatedat_ = updatedat;
  if (updatedat) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:smart3dmap.v1.Session.updatedAt)
}
inline PROTOBUF_NAMESPACE_ID::Timestamp* Session::release_updatedat() {
  
  PROTOBUF_NAMESPACE_ID::Timestamp* temp = updatedat_;
  updatedat_ = nullptr;
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline PROTOBUF_NAMESPACE_ID::Timestamp* Session::unsafe_arena_release_updatedat() {
  // @@protoc_insertion_point(field_release:smart3dmap.v1.Session.updatedAt)
  
  PROTOBUF_NAMESPACE_ID::Timestamp* temp = updatedat_;
  updatedat_ = nullptr;
  return temp;
}
inline PROTOBUF_NAMESPACE_ID::Timestamp* Session::_internal_mutable_updatedat() {
  
  if (updatedat_ == nullptr) {
    auto* p = CreateMaybeMessage<PROTOBUF_NAMESPACE_ID::Timestamp>(GetArena());
    updatedat_ = p;
  }
  return updatedat_;
}
inline PROTOBUF_NAMESPACE_ID::Timestamp* Session::mutable_updatedat() {
  // @@protoc_insertion_point(field_mutable:smart3dmap.v1.Session.updatedAt)
  return _internal_mutable_updatedat();
}
inline void Session::set_allocated_updatedat(PROTOBUF_NAMESPACE_ID::Timestamp* updatedat) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(updatedat_);
  }
  if (updatedat) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(updatedat)->GetArena();
    if (message_arena != submessage_arena) {
      updatedat = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, updatedat, submessage_arena);
    }
    
  } else {
    
  }
  updatedat_ = updatedat;
  // @@protoc_insertion_point(field_set_allocated:smart3dmap.v1.Session.updatedAt)
}

// -------------------------------------------------------------------

// CreateSessionRequest

// string email = 1;
inline void CreateSessionRequest::clear_email() {
  email_.ClearToEmpty();
}
inline const std::string& CreateSessionRequest::email() const {
  // @@protoc_insertion_point(field_get:smart3dmap.v1.CreateSessionRequest.email)
  return _internal_email();
}
inline void CreateSessionRequest::set_email(const std::string& value) {
  _internal_set_email(value);
  // @@protoc_insertion_point(field_set:smart3dmap.v1.CreateSessionRequest.email)
}
inline std::string* CreateSessionRequest::mutable_email() {
  // @@protoc_insertion_point(field_mutable:smart3dmap.v1.CreateSessionRequest.email)
  return _internal_mutable_email();
}
inline const std::string& CreateSessionRequest::_internal_email() const {
  return email_.Get();
}
inline void CreateSessionRequest::_internal_set_email(const std::string& value) {
  
  email_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArena());
}
inline void CreateSessionRequest::set_email(std::string&& value) {
  
  email_.Set(
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:smart3dmap.v1.CreateSessionRequest.email)
}
inline void CreateSessionRequest::set_email(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  email_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(value), GetArena());
  // @@protoc_insertion_point(field_set_char:smart3dmap.v1.CreateSessionRequest.email)
}
inline void CreateSessionRequest::set_email(const char* value,
    size_t size) {
  
  email_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:smart3dmap.v1.CreateSessionRequest.email)
}
inline std::string* CreateSessionRequest::_internal_mutable_email() {
  
  return email_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArena());
}
inline std::string* CreateSessionRequest::release_email() {
  // @@protoc_insertion_point(field_release:smart3dmap.v1.CreateSessionRequest.email)
  return email_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void CreateSessionRequest::set_allocated_email(std::string* email) {
  if (email != nullptr) {
    
  } else {
    
  }
  email_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), email,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:smart3dmap.v1.CreateSessionRequest.email)
}

// string password = 2;
inline void CreateSessionRequest::clear_password() {
  password_.ClearToEmpty();
}
inline const std::string& CreateSessionRequest::password() const {
  // @@protoc_insertion_point(field_get:smart3dmap.v1.CreateSessionRequest.password)
  return _internal_password();
}
inline void CreateSessionRequest::set_password(const std::string& value) {
  _internal_set_password(value);
  // @@protoc_insertion_point(field_set:smart3dmap.v1.CreateSessionRequest.password)
}
inline std::string* CreateSessionRequest::mutable_password() {
  // @@protoc_insertion_point(field_mutable:smart3dmap.v1.CreateSessionRequest.password)
  return _internal_mutable_password();
}
inline const std::string& CreateSessionRequest::_internal_password() const {
  return password_.Get();
}
inline void CreateSessionRequest::_internal_set_password(const std::string& value) {
  
  password_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArena());
}
inline void CreateSessionRequest::set_password(std::string&& value) {
  
  password_.Set(
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:smart3dmap.v1.CreateSessionRequest.password)
}
inline void CreateSessionRequest::set_password(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  password_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(value), GetArena());
  // @@protoc_insertion_point(field_set_char:smart3dmap.v1.CreateSessionRequest.password)
}
inline void CreateSessionRequest::set_password(const char* value,
    size_t size) {
  
  password_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:smart3dmap.v1.CreateSessionRequest.password)
}
inline std::string* CreateSessionRequest::_internal_mutable_password() {
  
  return password_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArena());
}
inline std::string* CreateSessionRequest::release_password() {
  // @@protoc_insertion_point(field_release:smart3dmap.v1.CreateSessionRequest.password)
  return password_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void CreateSessionRequest::set_allocated_password(std::string* password) {
  if (password != nullptr) {
    
  } else {
    
  }
  password_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), password,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:smart3dmap.v1.CreateSessionRequest.password)
}

// string client_id = 3;
inline void CreateSessionRequest::clear_client_id() {
  client_id_.ClearToEmpty();
}
inline const std::string& CreateSessionRequest::client_id() const {
  // @@protoc_insertion_point(field_get:smart3dmap.v1.CreateSessionRequest.client_id)
  return _internal_client_id();
}
inline void CreateSessionRequest::set_client_id(const std::string& value) {
  _internal_set_client_id(value);
  // @@protoc_insertion_point(field_set:smart3dmap.v1.CreateSessionRequest.client_id)
}
inline std::string* CreateSessionRequest::mutable_client_id() {
  // @@protoc_insertion_point(field_mutable:smart3dmap.v1.CreateSessionRequest.client_id)
  return _internal_mutable_client_id();
}
inline const std::string& CreateSessionRequest::_internal_client_id() const {
  return client_id_.Get();
}
inline void CreateSessionRequest::_internal_set_client_id(const std::string& value) {
  
  client_id_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArena());
}
inline void CreateSessionRequest::set_client_id(std::string&& value) {
  
  client_id_.Set(
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:smart3dmap.v1.CreateSessionRequest.client_id)
}
inline void CreateSessionRequest::set_client_id(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  client_id_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(value), GetArena());
  // @@protoc_insertion_point(field_set_char:smart3dmap.v1.CreateSessionRequest.client_id)
}
inline void CreateSessionRequest::set_client_id(const char* value,
    size_t size) {
  
  client_id_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:smart3dmap.v1.CreateSessionRequest.client_id)
}
inline std::string* CreateSessionRequest::_internal_mutable_client_id() {
  
  return client_id_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArena());
}
inline std::string* CreateSessionRequest::release_client_id() {
  // @@protoc_insertion_point(field_release:smart3dmap.v1.CreateSessionRequest.client_id)
  return client_id_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void CreateSessionRequest::set_allocated_client_id(std::string* client_id) {
  if (client_id != nullptr) {
    
  } else {
    
  }
  client_id_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), client_id,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:smart3dmap.v1.CreateSessionRequest.client_id)
}

// -------------------------------------------------------------------

// GetSessionRequest

// string token = 1;
inline void GetSessionRequest::clear_token() {
  token_.ClearToEmpty();
}
inline const std::string& GetSessionRequest::token() const {
  // @@protoc_insertion_point(field_get:smart3dmap.v1.GetSessionRequest.token)
  return _internal_token();
}
inline void GetSessionRequest::set_token(const std::string& value) {
  _internal_set_token(value);
  // @@protoc_insertion_point(field_set:smart3dmap.v1.GetSessionRequest.token)
}
inline std::string* GetSessionRequest::mutable_token() {
  // @@protoc_insertion_point(field_mutable:smart3dmap.v1.GetSessionRequest.token)
  return _internal_mutable_token();
}
inline const std::string& GetSessionRequest::_internal_token() const {
  return token_.Get();
}
inline void GetSessionRequest::_internal_set_token(const std::string& value) {
  
  token_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArena());
}
inline void GetSessionRequest::set_token(std::string&& value) {
  
  token_.Set(
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:smart3dmap.v1.GetSessionRequest.token)
}
inline void GetSessionRequest::set_token(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  token_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(value), GetArena());
  // @@protoc_insertion_point(field_set_char:smart3dmap.v1.GetSessionRequest.token)
}
inline void GetSessionRequest::set_token(const char* value,
    size_t size) {
  
  token_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:smart3dmap.v1.GetSessionRequest.token)
}
inline std::string* GetSessionRequest::_internal_mutable_token() {
  
  return token_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArena());
}
inline std::string* GetSessionRequest::release_token() {
  // @@protoc_insertion_point(field_release:smart3dmap.v1.GetSessionRequest.token)
  return token_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void GetSessionRequest::set_allocated_token(std::string* token) {
  if (token != nullptr) {
    
  } else {
    
  }
  token_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), token,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:smart3dmap.v1.GetSessionRequest.token)
}

// -------------------------------------------------------------------

// DeleteSessionRequest

// string token = 1;
inline void DeleteSessionRequest::clear_token() {
  token_.ClearToEmpty();
}
inline const std::string& DeleteSessionRequest::token() const {
  // @@protoc_insertion_point(field_get:smart3dmap.v1.DeleteSessionRequest.token)
  return _internal_token();
}
inline void DeleteSessionRequest::set_token(const std::string& value) {
  _internal_set_token(value);
  // @@protoc_insertion_point(field_set:smart3dmap.v1.DeleteSessionRequest.token)
}
inline std::string* DeleteSessionRequest::mutable_token() {
  // @@protoc_insertion_point(field_mutable:smart3dmap.v1.DeleteSessionRequest.token)
  return _internal_mutable_token();
}
inline const std::string& DeleteSessionRequest::_internal_token() const {
  return token_.Get();
}
inline void DeleteSessionRequest::_internal_set_token(const std::string& value) {
  
  token_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArena());
}
inline void DeleteSessionRequest::set_token(std::string&& value) {
  
  token_.Set(
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:smart3dmap.v1.DeleteSessionRequest.token)
}
inline void DeleteSessionRequest::set_token(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  token_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(value), GetArena());
  // @@protoc_insertion_point(field_set_char:smart3dmap.v1.DeleteSessionRequest.token)
}
inline void DeleteSessionRequest::set_token(const char* value,
    size_t size) {
  
  token_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:smart3dmap.v1.DeleteSessionRequest.token)
}
inline std::string* DeleteSessionRequest::_internal_mutable_token() {
  
  return token_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArena());
}
inline std::string* DeleteSessionRequest::release_token() {
  // @@protoc_insertion_point(field_release:smart3dmap.v1.DeleteSessionRequest.token)
  return token_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void DeleteSessionRequest::set_allocated_token(std::string* token) {
  if (token != nullptr) {
    
  } else {
    
  }
  token_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), token,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:smart3dmap.v1.DeleteSessionRequest.token)
}

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__
// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------


// @@protoc_insertion_point(namespace_scope)

}  // namespace v1
}  // namespace smart3dmap

// @@protoc_insertion_point(global_scope)

#include <google/protobuf/port_undef.inc>
#endif  // GOOGLE_PROTOBUF_INCLUDED_GOOGLE_PROTOBUF_INCLUDED_sessions_2fsessions_2eproto
