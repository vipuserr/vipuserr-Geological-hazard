// Generated by the gRPC C++ plugin.
// If you make any local change, they will be lost.
// source: sessions/sessions.proto
#ifndef GRPC_sessions_2fsessions_2eproto__INCLUDED
#define GRPC_sessions_2fsessions_2eproto__INCLUDED

#include "sessions/sessions.pb.h"

#include <functional>
#include <grpc/impl/codegen/port_platform.h>
#include <grpcpp/impl/codegen/async_generic_service.h>
#include <grpcpp/impl/codegen/async_stream.h>
#include <grpcpp/impl/codegen/async_unary_call.h>
#include <grpcpp/impl/codegen/client_callback.h>
#include <grpcpp/impl/codegen/client_context.h>
#include <grpcpp/impl/codegen/completion_queue.h>
#include <grpcpp/impl/codegen/message_allocator.h>
#include <grpcpp/impl/codegen/method_handler.h>
#include <grpcpp/impl/codegen/proto_utils.h>
#include <grpcpp/impl/codegen/rpc_method.h>
#include <grpcpp/impl/codegen/server_callback.h>
#include <grpcpp/impl/codegen/server_callback_handlers.h>
#include <grpcpp/impl/codegen/server_context.h>
#include <grpcpp/impl/codegen/service_type.h>
#include <grpcpp/impl/codegen/status.h>
#include <grpcpp/impl/codegen/stub_options.h>
#include <grpcpp/impl/codegen/sync_stream.h>

namespace smart3dmap {
namespace v1 {

class SessionsManager final {
 public:
  static constexpr char const* service_full_name() {
    return "smart3dmap.v1.SessionsManager";
  }
  class StubInterface {
   public:
    virtual ~StubInterface() {}
    // 通过用户邮件(email)和密码(password)执行登录验证，通过验证时为该用户创建会话。用户重新登录则覆盖之前的会话。
    virtual ::grpc::Status CreateSession(::grpc::ClientContext* context, const ::smart3dmap::v1::CreateSessionRequest& request, ::smart3dmap::v1::Session* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::smart3dmap::v1::Session>> AsyncCreateSession(::grpc::ClientContext* context, const ::smart3dmap::v1::CreateSessionRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::smart3dmap::v1::Session>>(AsyncCreateSessionRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::smart3dmap::v1::Session>> PrepareAsyncCreateSession(::grpc::ClientContext* context, const ::smart3dmap::v1::CreateSessionRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::smart3dmap::v1::Session>>(PrepareAsyncCreateSessionRaw(context, request, cq));
    }
    // 根据Token查询对应的会话。
    virtual ::grpc::Status GetSession(::grpc::ClientContext* context, const ::smart3dmap::v1::GetSessionRequest& request, ::smart3dmap::v1::Session* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::smart3dmap::v1::Session>> AsyncGetSession(::grpc::ClientContext* context, const ::smart3dmap::v1::GetSessionRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::smart3dmap::v1::Session>>(AsyncGetSessionRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::smart3dmap::v1::Session>> PrepareAsyncGetSession(::grpc::ClientContext* context, const ::smart3dmap::v1::GetSessionRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::smart3dmap::v1::Session>>(PrepareAsyncGetSessionRaw(context, request, cq));
    }
    // 指定会话的Token，删除对应的会话。
    virtual ::grpc::Status DeleteSession(::grpc::ClientContext* context, const ::smart3dmap::v1::DeleteSessionRequest& request, ::google::protobuf::BoolValue* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::google::protobuf::BoolValue>> AsyncDeleteSession(::grpc::ClientContext* context, const ::smart3dmap::v1::DeleteSessionRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::google::protobuf::BoolValue>>(AsyncDeleteSessionRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::google::protobuf::BoolValue>> PrepareAsyncDeleteSession(::grpc::ClientContext* context, const ::smart3dmap::v1::DeleteSessionRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::google::protobuf::BoolValue>>(PrepareAsyncDeleteSessionRaw(context, request, cq));
    }
    class experimental_async_interface {
     public:
      virtual ~experimental_async_interface() {}
      // 通过用户邮件(email)和密码(password)执行登录验证，通过验证时为该用户创建会话。用户重新登录则覆盖之前的会话。
      virtual void CreateSession(::grpc::ClientContext* context, const ::smart3dmap::v1::CreateSessionRequest* request, ::smart3dmap::v1::Session* response, std::function<void(::grpc::Status)>) = 0;
      #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      virtual void CreateSession(::grpc::ClientContext* context, const ::smart3dmap::v1::CreateSessionRequest* request, ::smart3dmap::v1::Session* response, ::grpc::ClientUnaryReactor* reactor) = 0;
      #else
      virtual void CreateSession(::grpc::ClientContext* context, const ::smart3dmap::v1::CreateSessionRequest* request, ::smart3dmap::v1::Session* response, ::grpc::experimental::ClientUnaryReactor* reactor) = 0;
      #endif
      // 根据Token查询对应的会话。
      virtual void GetSession(::grpc::ClientContext* context, const ::smart3dmap::v1::GetSessionRequest* request, ::smart3dmap::v1::Session* response, std::function<void(::grpc::Status)>) = 0;
      #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      virtual void GetSession(::grpc::ClientContext* context, const ::smart3dmap::v1::GetSessionRequest* request, ::smart3dmap::v1::Session* response, ::grpc::ClientUnaryReactor* reactor) = 0;
      #else
      virtual void GetSession(::grpc::ClientContext* context, const ::smart3dmap::v1::GetSessionRequest* request, ::smart3dmap::v1::Session* response, ::grpc::experimental::ClientUnaryReactor* reactor) = 0;
      #endif
      // 指定会话的Token，删除对应的会话。
      virtual void DeleteSession(::grpc::ClientContext* context, const ::smart3dmap::v1::DeleteSessionRequest* request, ::google::protobuf::BoolValue* response, std::function<void(::grpc::Status)>) = 0;
      #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      virtual void DeleteSession(::grpc::ClientContext* context, const ::smart3dmap::v1::DeleteSessionRequest* request, ::google::protobuf::BoolValue* response, ::grpc::ClientUnaryReactor* reactor) = 0;
      #else
      virtual void DeleteSession(::grpc::ClientContext* context, const ::smart3dmap::v1::DeleteSessionRequest* request, ::google::protobuf::BoolValue* response, ::grpc::experimental::ClientUnaryReactor* reactor) = 0;
      #endif
    };
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
    typedef class experimental_async_interface async_interface;
    #endif
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
    async_interface* async() { return experimental_async(); }
    #endif
    virtual class experimental_async_interface* experimental_async() { return nullptr; }
  private:
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::smart3dmap::v1::Session>* AsyncCreateSessionRaw(::grpc::ClientContext* context, const ::smart3dmap::v1::CreateSessionRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::smart3dmap::v1::Session>* PrepareAsyncCreateSessionRaw(::grpc::ClientContext* context, const ::smart3dmap::v1::CreateSessionRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::smart3dmap::v1::Session>* AsyncGetSessionRaw(::grpc::ClientContext* context, const ::smart3dmap::v1::GetSessionRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::smart3dmap::v1::Session>* PrepareAsyncGetSessionRaw(::grpc::ClientContext* context, const ::smart3dmap::v1::GetSessionRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::google::protobuf::BoolValue>* AsyncDeleteSessionRaw(::grpc::ClientContext* context, const ::smart3dmap::v1::DeleteSessionRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::google::protobuf::BoolValue>* PrepareAsyncDeleteSessionRaw(::grpc::ClientContext* context, const ::smart3dmap::v1::DeleteSessionRequest& request, ::grpc::CompletionQueue* cq) = 0;
  };
  class Stub final : public StubInterface {
   public:
    Stub(const std::shared_ptr< ::grpc::ChannelInterface>& channel);
    ::grpc::Status CreateSession(::grpc::ClientContext* context, const ::smart3dmap::v1::CreateSessionRequest& request, ::smart3dmap::v1::Session* response) override;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::smart3dmap::v1::Session>> AsyncCreateSession(::grpc::ClientContext* context, const ::smart3dmap::v1::CreateSessionRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::smart3dmap::v1::Session>>(AsyncCreateSessionRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::smart3dmap::v1::Session>> PrepareAsyncCreateSession(::grpc::ClientContext* context, const ::smart3dmap::v1::CreateSessionRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::smart3dmap::v1::Session>>(PrepareAsyncCreateSessionRaw(context, request, cq));
    }
    ::grpc::Status GetSession(::grpc::ClientContext* context, const ::smart3dmap::v1::GetSessionRequest& request, ::smart3dmap::v1::Session* response) override;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::smart3dmap::v1::Session>> AsyncGetSession(::grpc::ClientContext* context, const ::smart3dmap::v1::GetSessionRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::smart3dmap::v1::Session>>(AsyncGetSessionRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::smart3dmap::v1::Session>> PrepareAsyncGetSession(::grpc::ClientContext* context, const ::smart3dmap::v1::GetSessionRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::smart3dmap::v1::Session>>(PrepareAsyncGetSessionRaw(context, request, cq));
    }
    ::grpc::Status DeleteSession(::grpc::ClientContext* context, const ::smart3dmap::v1::DeleteSessionRequest& request, ::google::protobuf::BoolValue* response) override;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::google::protobuf::BoolValue>> AsyncDeleteSession(::grpc::ClientContext* context, const ::smart3dmap::v1::DeleteSessionRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::google::protobuf::BoolValue>>(AsyncDeleteSessionRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::google::protobuf::BoolValue>> PrepareAsyncDeleteSession(::grpc::ClientContext* context, const ::smart3dmap::v1::DeleteSessionRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::google::protobuf::BoolValue>>(PrepareAsyncDeleteSessionRaw(context, request, cq));
    }
    class experimental_async final :
      public StubInterface::experimental_async_interface {
     public:
      void CreateSession(::grpc::ClientContext* context, const ::smart3dmap::v1::CreateSessionRequest* request, ::smart3dmap::v1::Session* response, std::function<void(::grpc::Status)>) override;
      #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      void CreateSession(::grpc::ClientContext* context, const ::smart3dmap::v1::CreateSessionRequest* request, ::smart3dmap::v1::Session* response, ::grpc::ClientUnaryReactor* reactor) override;
      #else
      void CreateSession(::grpc::ClientContext* context, const ::smart3dmap::v1::CreateSessionRequest* request, ::smart3dmap::v1::Session* response, ::grpc::experimental::ClientUnaryReactor* reactor) override;
      #endif
      void GetSession(::grpc::ClientContext* context, const ::smart3dmap::v1::GetSessionRequest* request, ::smart3dmap::v1::Session* response, std::function<void(::grpc::Status)>) override;
      #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      void GetSession(::grpc::ClientContext* context, const ::smart3dmap::v1::GetSessionRequest* request, ::smart3dmap::v1::Session* response, ::grpc::ClientUnaryReactor* reactor) override;
      #else
      void GetSession(::grpc::ClientContext* context, const ::smart3dmap::v1::GetSessionRequest* request, ::smart3dmap::v1::Session* response, ::grpc::experimental::ClientUnaryReactor* reactor) override;
      #endif
      void DeleteSession(::grpc::ClientContext* context, const ::smart3dmap::v1::DeleteSessionRequest* request, ::google::protobuf::BoolValue* response, std::function<void(::grpc::Status)>) override;
      #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      void DeleteSession(::grpc::ClientContext* context, const ::smart3dmap::v1::DeleteSessionRequest* request, ::google::protobuf::BoolValue* response, ::grpc::ClientUnaryReactor* reactor) override;
      #else
      void DeleteSession(::grpc::ClientContext* context, const ::smart3dmap::v1::DeleteSessionRequest* request, ::google::protobuf::BoolValue* response, ::grpc::experimental::ClientUnaryReactor* reactor) override;
      #endif
     private:
      friend class Stub;
      explicit experimental_async(Stub* stub): stub_(stub) { }
      Stub* stub() { return stub_; }
      Stub* stub_;
    };
    class experimental_async_interface* experimental_async() override { return &async_stub_; }

   private:
    std::shared_ptr< ::grpc::ChannelInterface> channel_;
    class experimental_async async_stub_{this};
    ::grpc::ClientAsyncResponseReader< ::smart3dmap::v1::Session>* AsyncCreateSessionRaw(::grpc::ClientContext* context, const ::smart3dmap::v1::CreateSessionRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::smart3dmap::v1::Session>* PrepareAsyncCreateSessionRaw(::grpc::ClientContext* context, const ::smart3dmap::v1::CreateSessionRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::smart3dmap::v1::Session>* AsyncGetSessionRaw(::grpc::ClientContext* context, const ::smart3dmap::v1::GetSessionRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::smart3dmap::v1::Session>* PrepareAsyncGetSessionRaw(::grpc::ClientContext* context, const ::smart3dmap::v1::GetSessionRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::google::protobuf::BoolValue>* AsyncDeleteSessionRaw(::grpc::ClientContext* context, const ::smart3dmap::v1::DeleteSessionRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::google::protobuf::BoolValue>* PrepareAsyncDeleteSessionRaw(::grpc::ClientContext* context, const ::smart3dmap::v1::DeleteSessionRequest& request, ::grpc::CompletionQueue* cq) override;
    const ::grpc::internal::RpcMethod rpcmethod_CreateSession_;
    const ::grpc::internal::RpcMethod rpcmethod_GetSession_;
    const ::grpc::internal::RpcMethod rpcmethod_DeleteSession_;
  };
  static std::unique_ptr<Stub> NewStub(const std::shared_ptr< ::grpc::ChannelInterface>& channel, const ::grpc::StubOptions& options = ::grpc::StubOptions());

  class Service : public ::grpc::Service {
   public:
    Service();
    virtual ~Service();
    // 通过用户邮件(email)和密码(password)执行登录验证，通过验证时为该用户创建会话。用户重新登录则覆盖之前的会话。
    virtual ::grpc::Status CreateSession(::grpc::ServerContext* context, const ::smart3dmap::v1::CreateSessionRequest* request, ::smart3dmap::v1::Session* response);
    // 根据Token查询对应的会话。
    virtual ::grpc::Status GetSession(::grpc::ServerContext* context, const ::smart3dmap::v1::GetSessionRequest* request, ::smart3dmap::v1::Session* response);
    // 指定会话的Token，删除对应的会话。
    virtual ::grpc::Status DeleteSession(::grpc::ServerContext* context, const ::smart3dmap::v1::DeleteSessionRequest* request, ::google::protobuf::BoolValue* response);
  };
  template <class BaseClass>
  class WithAsyncMethod_CreateSession : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithAsyncMethod_CreateSession() {
      ::grpc::Service::MarkMethodAsync(0);
    }
    ~WithAsyncMethod_CreateSession() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status CreateSession(::grpc::ServerContext* /*context*/, const ::smart3dmap::v1::CreateSessionRequest* /*request*/, ::smart3dmap::v1::Session* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestCreateSession(::grpc::ServerContext* context, ::smart3dmap::v1::CreateSessionRequest* request, ::grpc::ServerAsyncResponseWriter< ::smart3dmap::v1::Session>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(0, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithAsyncMethod_GetSession : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithAsyncMethod_GetSession() {
      ::grpc::Service::MarkMethodAsync(1);
    }
    ~WithAsyncMethod_GetSession() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status GetSession(::grpc::ServerContext* /*context*/, const ::smart3dmap::v1::GetSessionRequest* /*request*/, ::smart3dmap::v1::Session* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestGetSession(::grpc::ServerContext* context, ::smart3dmap::v1::GetSessionRequest* request, ::grpc::ServerAsyncResponseWriter< ::smart3dmap::v1::Session>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(1, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithAsyncMethod_DeleteSession : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithAsyncMethod_DeleteSession() {
      ::grpc::Service::MarkMethodAsync(2);
    }
    ~WithAsyncMethod_DeleteSession() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status DeleteSession(::grpc::ServerContext* /*context*/, const ::smart3dmap::v1::DeleteSessionRequest* /*request*/, ::google::protobuf::BoolValue* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestDeleteSession(::grpc::ServerContext* context, ::smart3dmap::v1::DeleteSessionRequest* request, ::grpc::ServerAsyncResponseWriter< ::google::protobuf::BoolValue>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(2, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  typedef WithAsyncMethod_CreateSession<WithAsyncMethod_GetSession<WithAsyncMethod_DeleteSession<Service > > > AsyncService;
  template <class BaseClass>
  class ExperimentalWithCallbackMethod_CreateSession : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    ExperimentalWithCallbackMethod_CreateSession() {
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      ::grpc::Service::
    #else
      ::grpc::Service::experimental().
    #endif
        MarkMethodCallback(0,
          new ::grpc::internal::CallbackUnaryHandler< ::smart3dmap::v1::CreateSessionRequest, ::smart3dmap::v1::Session>(
            [this](
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
                   ::grpc::CallbackServerContext*
    #else
                   ::grpc::experimental::CallbackServerContext*
    #endif
                     context, const ::smart3dmap::v1::CreateSessionRequest* request, ::smart3dmap::v1::Session* response) { return this->CreateSession(context, request, response); }));}
    void SetMessageAllocatorFor_CreateSession(
        ::grpc::experimental::MessageAllocator< ::smart3dmap::v1::CreateSessionRequest, ::smart3dmap::v1::Session>* allocator) {
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      ::grpc::internal::MethodHandler* const handler = ::grpc::Service::GetHandler(0);
    #else
      ::grpc::internal::MethodHandler* const handler = ::grpc::Service::experimental().GetHandler(0);
    #endif
      static_cast<::grpc::internal::CallbackUnaryHandler< ::smart3dmap::v1::CreateSessionRequest, ::smart3dmap::v1::Session>*>(handler)
              ->SetMessageAllocator(allocator);
    }
    ~ExperimentalWithCallbackMethod_CreateSession() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status CreateSession(::grpc::ServerContext* /*context*/, const ::smart3dmap::v1::CreateSessionRequest* /*request*/, ::smart3dmap::v1::Session* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
    virtual ::grpc::ServerUnaryReactor* CreateSession(
      ::grpc::CallbackServerContext* /*context*/, const ::smart3dmap::v1::CreateSessionRequest* /*request*/, ::smart3dmap::v1::Session* /*response*/)
    #else
    virtual ::grpc::experimental::ServerUnaryReactor* CreateSession(
      ::grpc::experimental::CallbackServerContext* /*context*/, const ::smart3dmap::v1::CreateSessionRequest* /*request*/, ::smart3dmap::v1::Session* /*response*/)
    #endif
      { return nullptr; }
  };
  template <class BaseClass>
  class ExperimentalWithCallbackMethod_GetSession : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    ExperimentalWithCallbackMethod_GetSession() {
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      ::grpc::Service::
    #else
      ::grpc::Service::experimental().
    #endif
        MarkMethodCallback(1,
          new ::grpc::internal::CallbackUnaryHandler< ::smart3dmap::v1::GetSessionRequest, ::smart3dmap::v1::Session>(
            [this](
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
                   ::grpc::CallbackServerContext*
    #else
                   ::grpc::experimental::CallbackServerContext*
    #endif
                     context, const ::smart3dmap::v1::GetSessionRequest* request, ::smart3dmap::v1::Session* response) { return this->GetSession(context, request, response); }));}
    void SetMessageAllocatorFor_GetSession(
        ::grpc::experimental::MessageAllocator< ::smart3dmap::v1::GetSessionRequest, ::smart3dmap::v1::Session>* allocator) {
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      ::grpc::internal::MethodHandler* const handler = ::grpc::Service::GetHandler(1);
    #else
      ::grpc::internal::MethodHandler* const handler = ::grpc::Service::experimental().GetHandler(1);
    #endif
      static_cast<::grpc::internal::CallbackUnaryHandler< ::smart3dmap::v1::GetSessionRequest, ::smart3dmap::v1::Session>*>(handler)
              ->SetMessageAllocator(allocator);
    }
    ~ExperimentalWithCallbackMethod_GetSession() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status GetSession(::grpc::ServerContext* /*context*/, const ::smart3dmap::v1::GetSessionRequest* /*request*/, ::smart3dmap::v1::Session* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
    virtual ::grpc::ServerUnaryReactor* GetSession(
      ::grpc::CallbackServerContext* /*context*/, const ::smart3dmap::v1::GetSessionRequest* /*request*/, ::smart3dmap::v1::Session* /*response*/)
    #else
    virtual ::grpc::experimental::ServerUnaryReactor* GetSession(
      ::grpc::experimental::CallbackServerContext* /*context*/, const ::smart3dmap::v1::GetSessionRequest* /*request*/, ::smart3dmap::v1::Session* /*response*/)
    #endif
      { return nullptr; }
  };
  template <class BaseClass>
  class ExperimentalWithCallbackMethod_DeleteSession : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    ExperimentalWithCallbackMethod_DeleteSession() {
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      ::grpc::Service::
    #else
      ::grpc::Service::experimental().
    #endif
        MarkMethodCallback(2,
          new ::grpc::internal::CallbackUnaryHandler< ::smart3dmap::v1::DeleteSessionRequest, ::google::protobuf::BoolValue>(
            [this](
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
                   ::grpc::CallbackServerContext*
    #else
                   ::grpc::experimental::CallbackServerContext*
    #endif
                     context, const ::smart3dmap::v1::DeleteSessionRequest* request, ::google::protobuf::BoolValue* response) { return this->DeleteSession(context, request, response); }));}
    void SetMessageAllocatorFor_DeleteSession(
        ::grpc::experimental::MessageAllocator< ::smart3dmap::v1::DeleteSessionRequest, ::google::protobuf::BoolValue>* allocator) {
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      ::grpc::internal::MethodHandler* const handler = ::grpc::Service::GetHandler(2);
    #else
      ::grpc::internal::MethodHandler* const handler = ::grpc::Service::experimental().GetHandler(2);
    #endif
      static_cast<::grpc::internal::CallbackUnaryHandler< ::smart3dmap::v1::DeleteSessionRequest, ::google::protobuf::BoolValue>*>(handler)
              ->SetMessageAllocator(allocator);
    }
    ~ExperimentalWithCallbackMethod_DeleteSession() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status DeleteSession(::grpc::ServerContext* /*context*/, const ::smart3dmap::v1::DeleteSessionRequest* /*request*/, ::google::protobuf::BoolValue* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
    virtual ::grpc::ServerUnaryReactor* DeleteSession(
      ::grpc::CallbackServerContext* /*context*/, const ::smart3dmap::v1::DeleteSessionRequest* /*request*/, ::google::protobuf::BoolValue* /*response*/)
    #else
    virtual ::grpc::experimental::ServerUnaryReactor* DeleteSession(
      ::grpc::experimental::CallbackServerContext* /*context*/, const ::smart3dmap::v1::DeleteSessionRequest* /*request*/, ::google::protobuf::BoolValue* /*response*/)
    #endif
      { return nullptr; }
  };
  #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
  typedef ExperimentalWithCallbackMethod_CreateSession<ExperimentalWithCallbackMethod_GetSession<ExperimentalWithCallbackMethod_DeleteSession<Service > > > CallbackService;
  #endif

  typedef ExperimentalWithCallbackMethod_CreateSession<ExperimentalWithCallbackMethod_GetSession<ExperimentalWithCallbackMethod_DeleteSession<Service > > > ExperimentalCallbackService;
  template <class BaseClass>
  class WithGenericMethod_CreateSession : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithGenericMethod_CreateSession() {
      ::grpc::Service::MarkMethodGeneric(0);
    }
    ~WithGenericMethod_CreateSession() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status CreateSession(::grpc::ServerContext* /*context*/, const ::smart3dmap::v1::CreateSessionRequest* /*request*/, ::smart3dmap::v1::Session* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithGenericMethod_GetSession : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithGenericMethod_GetSession() {
      ::grpc::Service::MarkMethodGeneric(1);
    }
    ~WithGenericMethod_GetSession() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status GetSession(::grpc::ServerContext* /*context*/, const ::smart3dmap::v1::GetSessionRequest* /*request*/, ::smart3dmap::v1::Session* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithGenericMethod_DeleteSession : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithGenericMethod_DeleteSession() {
      ::grpc::Service::MarkMethodGeneric(2);
    }
    ~WithGenericMethod_DeleteSession() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status DeleteSession(::grpc::ServerContext* /*context*/, const ::smart3dmap::v1::DeleteSessionRequest* /*request*/, ::google::protobuf::BoolValue* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithRawMethod_CreateSession : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawMethod_CreateSession() {
      ::grpc::Service::MarkMethodRaw(0);
    }
    ~WithRawMethod_CreateSession() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status CreateSession(::grpc::ServerContext* /*context*/, const ::smart3dmap::v1::CreateSessionRequest* /*request*/, ::smart3dmap::v1::Session* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestCreateSession(::grpc::ServerContext* context, ::grpc::ByteBuffer* request, ::grpc::ServerAsyncResponseWriter< ::grpc::ByteBuffer>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(0, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithRawMethod_GetSession : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawMethod_GetSession() {
      ::grpc::Service::MarkMethodRaw(1);
    }
    ~WithRawMethod_GetSession() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status GetSession(::grpc::ServerContext* /*context*/, const ::smart3dmap::v1::GetSessionRequest* /*request*/, ::smart3dmap::v1::Session* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestGetSession(::grpc::ServerContext* context, ::grpc::ByteBuffer* request, ::grpc::ServerAsyncResponseWriter< ::grpc::ByteBuffer>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(1, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithRawMethod_DeleteSession : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawMethod_DeleteSession() {
      ::grpc::Service::MarkMethodRaw(2);
    }
    ~WithRawMethod_DeleteSession() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status DeleteSession(::grpc::ServerContext* /*context*/, const ::smart3dmap::v1::DeleteSessionRequest* /*request*/, ::google::protobuf::BoolValue* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestDeleteSession(::grpc::ServerContext* context, ::grpc::ByteBuffer* request, ::grpc::ServerAsyncResponseWriter< ::grpc::ByteBuffer>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(2, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class ExperimentalWithRawCallbackMethod_CreateSession : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    ExperimentalWithRawCallbackMethod_CreateSession() {
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      ::grpc::Service::
    #else
      ::grpc::Service::experimental().
    #endif
        MarkMethodRawCallback(0,
          new ::grpc::internal::CallbackUnaryHandler< ::grpc::ByteBuffer, ::grpc::ByteBuffer>(
            [this](
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
                   ::grpc::CallbackServerContext*
    #else
                   ::grpc::experimental::CallbackServerContext*
    #endif
                     context, const ::grpc::ByteBuffer* request, ::grpc::ByteBuffer* response) { return this->CreateSession(context, request, response); }));
    }
    ~ExperimentalWithRawCallbackMethod_CreateSession() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status CreateSession(::grpc::ServerContext* /*context*/, const ::smart3dmap::v1::CreateSessionRequest* /*request*/, ::smart3dmap::v1::Session* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
    virtual ::grpc::ServerUnaryReactor* CreateSession(
      ::grpc::CallbackServerContext* /*context*/, const ::grpc::ByteBuffer* /*request*/, ::grpc::ByteBuffer* /*response*/)
    #else
    virtual ::grpc::experimental::ServerUnaryReactor* CreateSession(
      ::grpc::experimental::CallbackServerContext* /*context*/, const ::grpc::ByteBuffer* /*request*/, ::grpc::ByteBuffer* /*response*/)
    #endif
      { return nullptr; }
  };
  template <class BaseClass>
  class ExperimentalWithRawCallbackMethod_GetSession : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    ExperimentalWithRawCallbackMethod_GetSession() {
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      ::grpc::Service::
    #else
      ::grpc::Service::experimental().
    #endif
        MarkMethodRawCallback(1,
          new ::grpc::internal::CallbackUnaryHandler< ::grpc::ByteBuffer, ::grpc::ByteBuffer>(
            [this](
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
                   ::grpc::CallbackServerContext*
    #else
                   ::grpc::experimental::CallbackServerContext*
    #endif
                     context, const ::grpc::ByteBuffer* request, ::grpc::ByteBuffer* response) { return this->GetSession(context, request, response); }));
    }
    ~ExperimentalWithRawCallbackMethod_GetSession() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status GetSession(::grpc::ServerContext* /*context*/, const ::smart3dmap::v1::GetSessionRequest* /*request*/, ::smart3dmap::v1::Session* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
    virtual ::grpc::ServerUnaryReactor* GetSession(
      ::grpc::CallbackServerContext* /*context*/, const ::grpc::ByteBuffer* /*request*/, ::grpc::ByteBuffer* /*response*/)
    #else
    virtual ::grpc::experimental::ServerUnaryReactor* GetSession(
      ::grpc::experimental::CallbackServerContext* /*context*/, const ::grpc::ByteBuffer* /*request*/, ::grpc::ByteBuffer* /*response*/)
    #endif
      { return nullptr; }
  };
  template <class BaseClass>
  class ExperimentalWithRawCallbackMethod_DeleteSession : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    ExperimentalWithRawCallbackMethod_DeleteSession() {
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      ::grpc::Service::
    #else
      ::grpc::Service::experimental().
    #endif
        MarkMethodRawCallback(2,
          new ::grpc::internal::CallbackUnaryHandler< ::grpc::ByteBuffer, ::grpc::ByteBuffer>(
            [this](
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
                   ::grpc::CallbackServerContext*
    #else
                   ::grpc::experimental::CallbackServerContext*
    #endif
                     context, const ::grpc::ByteBuffer* request, ::grpc::ByteBuffer* response) { return this->DeleteSession(context, request, response); }));
    }
    ~ExperimentalWithRawCallbackMethod_DeleteSession() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status DeleteSession(::grpc::ServerContext* /*context*/, const ::smart3dmap::v1::DeleteSessionRequest* /*request*/, ::google::protobuf::BoolValue* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
    virtual ::grpc::ServerUnaryReactor* DeleteSession(
      ::grpc::CallbackServerContext* /*context*/, const ::grpc::ByteBuffer* /*request*/, ::grpc::ByteBuffer* /*response*/)
    #else
    virtual ::grpc::experimental::ServerUnaryReactor* DeleteSession(
      ::grpc::experimental::CallbackServerContext* /*context*/, const ::grpc::ByteBuffer* /*request*/, ::grpc::ByteBuffer* /*response*/)
    #endif
      { return nullptr; }
  };
  template <class BaseClass>
  class WithStreamedUnaryMethod_CreateSession : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithStreamedUnaryMethod_CreateSession() {
      ::grpc::Service::MarkMethodStreamed(0,
        new ::grpc::internal::StreamedUnaryHandler<
          ::smart3dmap::v1::CreateSessionRequest, ::smart3dmap::v1::Session>(
            [this](::grpc::ServerContext* context,
                   ::grpc::ServerUnaryStreamer<
                     ::smart3dmap::v1::CreateSessionRequest, ::smart3dmap::v1::Session>* streamer) {
                       return this->StreamedCreateSession(context,
                         streamer);
                  }));
    }
    ~WithStreamedUnaryMethod_CreateSession() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status CreateSession(::grpc::ServerContext* /*context*/, const ::smart3dmap::v1::CreateSessionRequest* /*request*/, ::smart3dmap::v1::Session* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with streamed unary
    virtual ::grpc::Status StreamedCreateSession(::grpc::ServerContext* context, ::grpc::ServerUnaryStreamer< ::smart3dmap::v1::CreateSessionRequest,::smart3dmap::v1::Session>* server_unary_streamer) = 0;
  };
  template <class BaseClass>
  class WithStreamedUnaryMethod_GetSession : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithStreamedUnaryMethod_GetSession() {
      ::grpc::Service::MarkMethodStreamed(1,
        new ::grpc::internal::StreamedUnaryHandler<
          ::smart3dmap::v1::GetSessionRequest, ::smart3dmap::v1::Session>(
            [this](::grpc::ServerContext* context,
                   ::grpc::ServerUnaryStreamer<
                     ::smart3dmap::v1::GetSessionRequest, ::smart3dmap::v1::Session>* streamer) {
                       return this->StreamedGetSession(context,
                         streamer);
                  }));
    }
    ~WithStreamedUnaryMethod_GetSession() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status GetSession(::grpc::ServerContext* /*context*/, const ::smart3dmap::v1::GetSessionRequest* /*request*/, ::smart3dmap::v1::Session* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with streamed unary
    virtual ::grpc::Status StreamedGetSession(::grpc::ServerContext* context, ::grpc::ServerUnaryStreamer< ::smart3dmap::v1::GetSessionRequest,::smart3dmap::v1::Session>* server_unary_streamer) = 0;
  };
  template <class BaseClass>
  class WithStreamedUnaryMethod_DeleteSession : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithStreamedUnaryMethod_DeleteSession() {
      ::grpc::Service::MarkMethodStreamed(2,
        new ::grpc::internal::StreamedUnaryHandler<
          ::smart3dmap::v1::DeleteSessionRequest, ::google::protobuf::BoolValue>(
            [this](::grpc::ServerContext* context,
                   ::grpc::ServerUnaryStreamer<
                     ::smart3dmap::v1::DeleteSessionRequest, ::google::protobuf::BoolValue>* streamer) {
                       return this->StreamedDeleteSession(context,
                         streamer);
                  }));
    }
    ~WithStreamedUnaryMethod_DeleteSession() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status DeleteSession(::grpc::ServerContext* /*context*/, const ::smart3dmap::v1::DeleteSessionRequest* /*request*/, ::google::protobuf::BoolValue* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with streamed unary
    virtual ::grpc::Status StreamedDeleteSession(::grpc::ServerContext* context, ::grpc::ServerUnaryStreamer< ::smart3dmap::v1::DeleteSessionRequest,::google::protobuf::BoolValue>* server_unary_streamer) = 0;
  };
  typedef WithStreamedUnaryMethod_CreateSession<WithStreamedUnaryMethod_GetSession<WithStreamedUnaryMethod_DeleteSession<Service > > > StreamedUnaryService;
  typedef Service SplitStreamedService;
  typedef WithStreamedUnaryMethod_CreateSession<WithStreamedUnaryMethod_GetSession<WithStreamedUnaryMethod_DeleteSession<Service > > > StreamedService;
};

}  // namespace v1
}  // namespace smart3dmap


#endif  // GRPC_sessions_2fsessions_2eproto__INCLUDED
