// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: map_service/map_service.proto

#ifndef GOOGLE_PROTOBUF_INCLUDED_map_5fservice_2fmap_5fservice_2eproto
#define GOOGLE_PROTOBUF_INCLUDED_map_5fservice_2fmap_5fservice_2eproto

#include <limits>
#include <string>

#include <google/protobuf/port_def.inc>
#if PROTOBUF_VERSION < 3015000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers. Please update
#error your headers.
#endif
#if 3015008 < PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers. Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/port_undef.inc>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_table_driven.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/metadata_lite.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/unknown_field_set.h>
#include <google/protobuf/wrappers.pb.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
#define PROTOBUF_INTERNAL_EXPORT_map_5fservice_2fmap_5fservice_2eproto LIBS3DMGRPC_API
PROTOBUF_NAMESPACE_OPEN
namespace internal {
class AnyMetadata;
}  // namespace internal
PROTOBUF_NAMESPACE_CLOSE

// Internal implementation detail -- do not use these members.
struct LIBS3DMGRPC_API TableStruct_map_5fservice_2fmap_5fservice_2eproto {
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTableField entries[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::AuxiliaryParseTableField aux[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTable schema[12]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::FieldMetadata field_metadata[];
  static const ::PROTOBUF_NAMESPACE_ID::internal::SerializationTable serialization_table[];
  static const ::PROTOBUF_NAMESPACE_ID::uint32 offsets[];
};
extern LIBS3DMGRPC_API const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_map_5fservice_2fmap_5fservice_2eproto;
LIBS3DMGRPC_API ::PROTOBUF_NAMESPACE_ID::Metadata descriptor_table_map_5fservice_2fmap_5fservice_2eproto_metadata_getter(int index);
namespace smart3dmap {
namespace v1 {
class GetWMSLayerRequest;
struct GetWMSLayerRequestDefaultTypeInternal;
LIBS3DMGRPC_API extern GetWMSLayerRequestDefaultTypeInternal _GetWMSLayerRequest_default_instance_;
class GetWMSMapRequest;
struct GetWMSMapRequestDefaultTypeInternal;
LIBS3DMGRPC_API extern GetWMSMapRequestDefaultTypeInternal _GetWMSMapRequest_default_instance_;
class IsMapPublishedRequest;
struct IsMapPublishedRequestDefaultTypeInternal;
LIBS3DMGRPC_API extern IsMapPublishedRequestDefaultTypeInternal _IsMapPublishedRequest_default_instance_;
class PublishMapRequest;
struct PublishMapRequestDefaultTypeInternal;
LIBS3DMGRPC_API extern PublishMapRequestDefaultTypeInternal _PublishMapRequest_default_instance_;
class RegisterSDBRequest;
struct RegisterSDBRequestDefaultTypeInternal;
LIBS3DMGRPC_API extern RegisterSDBRequestDefaultTypeInternal _RegisterSDBRequest_default_instance_;
class RegisterSDBResponse;
struct RegisterSDBResponseDefaultTypeInternal;
LIBS3DMGRPC_API extern RegisterSDBResponseDefaultTypeInternal _RegisterSDBResponse_default_instance_;
class UnpublishMapRequest;
struct UnpublishMapRequestDefaultTypeInternal;
LIBS3DMGRPC_API extern UnpublishMapRequestDefaultTypeInternal _UnpublishMapRequest_default_instance_;
class UnpublishMapResponse;
struct UnpublishMapResponseDefaultTypeInternal;
LIBS3DMGRPC_API extern UnpublishMapResponseDefaultTypeInternal _UnpublishMapResponse_default_instance_;
class UploadLegendPictureRequest;
struct UploadLegendPictureRequestDefaultTypeInternal;
LIBS3DMGRPC_API extern UploadLegendPictureRequestDefaultTypeInternal _UploadLegendPictureRequest_default_instance_;
class UploadLegendPictureResponse;
struct UploadLegendPictureResponseDefaultTypeInternal;
LIBS3DMGRPC_API extern UploadLegendPictureResponseDefaultTypeInternal _UploadLegendPictureResponse_default_instance_;
class WMSLayer;
struct WMSLayerDefaultTypeInternal;
LIBS3DMGRPC_API extern WMSLayerDefaultTypeInternal _WMSLayer_default_instance_;
class WMSMap;
struct WMSMapDefaultTypeInternal;
LIBS3DMGRPC_API extern WMSMapDefaultTypeInternal _WMSMap_default_instance_;
}  // namespace v1
}  // namespace smart3dmap
PROTOBUF_NAMESPACE_OPEN
template<> LIBS3DMGRPC_API ::smart3dmap::v1::GetWMSLayerRequest* Arena::CreateMaybeMessage<::smart3dmap::v1::GetWMSLayerRequest>(Arena*);
template<> LIBS3DMGRPC_API ::smart3dmap::v1::GetWMSMapRequest* Arena::CreateMaybeMessage<::smart3dmap::v1::GetWMSMapRequest>(Arena*);
template<> LIBS3DMGRPC_API ::smart3dmap::v1::IsMapPublishedRequest* Arena::CreateMaybeMessage<::smart3dmap::v1::IsMapPublishedRequest>(Arena*);
template<> LIBS3DMGRPC_API ::smart3dmap::v1::PublishMapRequest* Arena::CreateMaybeMessage<::smart3dmap::v1::PublishMapRequest>(Arena*);
template<> LIBS3DMGRPC_API ::smart3dmap::v1::RegisterSDBRequest* Arena::CreateMaybeMessage<::smart3dmap::v1::RegisterSDBRequest>(Arena*);
template<> LIBS3DMGRPC_API ::smart3dmap::v1::RegisterSDBResponse* Arena::CreateMaybeMessage<::smart3dmap::v1::RegisterSDBResponse>(Arena*);
template<> LIBS3DMGRPC_API ::smart3dmap::v1::UnpublishMapRequest* Arena::CreateMaybeMessage<::smart3dmap::v1::UnpublishMapRequest>(Arena*);
template<> LIBS3DMGRPC_API ::smart3dmap::v1::UnpublishMapResponse* Arena::CreateMaybeMessage<::smart3dmap::v1::UnpublishMapResponse>(Arena*);
template<> LIBS3DMGRPC_API ::smart3dmap::v1::UploadLegendPictureRequest* Arena::CreateMaybeMessage<::smart3dmap::v1::UploadLegendPictureRequest>(Arena*);
template<> LIBS3DMGRPC_API ::smart3dmap::v1::UploadLegendPictureResponse* Arena::CreateMaybeMessage<::smart3dmap::v1::UploadLegendPictureResponse>(Arena*);
template<> LIBS3DMGRPC_API ::smart3dmap::v1::WMSLayer* Arena::CreateMaybeMessage<::smart3dmap::v1::WMSLayer>(Arena*);
template<> LIBS3DMGRPC_API ::smart3dmap::v1::WMSMap* Arena::CreateMaybeMessage<::smart3dmap::v1::WMSMap>(Arena*);
PROTOBUF_NAMESPACE_CLOSE
namespace smart3dmap {
namespace v1 {

// ===================================================================

class LIBS3DMGRPC_API RegisterSDBRequest PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:smart3dmap.v1.RegisterSDBRequest) */ {
 public:
  inline RegisterSDBRequest() : RegisterSDBRequest(nullptr) {}
  virtual ~RegisterSDBRequest();
  explicit constexpr RegisterSDBRequest(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  RegisterSDBRequest(const RegisterSDBRequest& from);
  RegisterSDBRequest(RegisterSDBRequest&& from) noexcept
    : RegisterSDBRequest() {
    *this = ::std::move(from);
  }

  inline RegisterSDBRequest& operator=(const RegisterSDBRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline RegisterSDBRequest& operator=(RegisterSDBRequest&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const RegisterSDBRequest& default_instance() {
    return *internal_default_instance();
  }
  static inline const RegisterSDBRequest* internal_default_instance() {
    return reinterpret_cast<const RegisterSDBRequest*>(
               &_RegisterSDBRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  friend void swap(RegisterSDBRequest& a, RegisterSDBRequest& b) {
    a.Swap(&b);
  }
  inline void Swap(RegisterSDBRequest* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(RegisterSDBRequest* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline RegisterSDBRequest* New() const final {
    return CreateMaybeMessage<RegisterSDBRequest>(nullptr);
  }

  RegisterSDBRequest* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<RegisterSDBRequest>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const RegisterSDBRequest& from);
  void MergeFrom(const RegisterSDBRequest& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(RegisterSDBRequest* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "smart3dmap.v1.RegisterSDBRequest";
  }
  protected:
  explicit RegisterSDBRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    return ::descriptor_table_map_5fservice_2fmap_5fservice_2eproto_metadata_getter(kIndexInFileMessages);
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kDbIdFieldNumber = 1,
  };
  // int32 db_id = 1;
  void clear_db_id();
  ::PROTOBUF_NAMESPACE_ID::int32 db_id() const;
  void set_db_id(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_db_id() const;
  void _internal_set_db_id(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // @@protoc_insertion_point(class_scope:smart3dmap.v1.RegisterSDBRequest)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::int32 db_id_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_map_5fservice_2fmap_5fservice_2eproto;
};
// -------------------------------------------------------------------

class LIBS3DMGRPC_API RegisterSDBResponse PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:smart3dmap.v1.RegisterSDBResponse) */ {
 public:
  inline RegisterSDBResponse() : RegisterSDBResponse(nullptr) {}
  virtual ~RegisterSDBResponse();
  explicit constexpr RegisterSDBResponse(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  RegisterSDBResponse(const RegisterSDBResponse& from);
  RegisterSDBResponse(RegisterSDBResponse&& from) noexcept
    : RegisterSDBResponse() {
    *this = ::std::move(from);
  }

  inline RegisterSDBResponse& operator=(const RegisterSDBResponse& from) {
    CopyFrom(from);
    return *this;
  }
  inline RegisterSDBResponse& operator=(RegisterSDBResponse&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const RegisterSDBResponse& default_instance() {
    return *internal_default_instance();
  }
  static inline const RegisterSDBResponse* internal_default_instance() {
    return reinterpret_cast<const RegisterSDBResponse*>(
               &_RegisterSDBResponse_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    1;

  friend void swap(RegisterSDBResponse& a, RegisterSDBResponse& b) {
    a.Swap(&b);
  }
  inline void Swap(RegisterSDBResponse* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(RegisterSDBResponse* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline RegisterSDBResponse* New() const final {
    return CreateMaybeMessage<RegisterSDBResponse>(nullptr);
  }

  RegisterSDBResponse* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<RegisterSDBResponse>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const RegisterSDBResponse& from);
  void MergeFrom(const RegisterSDBResponse& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(RegisterSDBResponse* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "smart3dmap.v1.RegisterSDBResponse";
  }
  protected:
  explicit RegisterSDBResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    return ::descriptor_table_map_5fservice_2fmap_5fservice_2eproto_metadata_getter(kIndexInFileMessages);
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kErrorFieldNumber = 2,
    kStatusFieldNumber = 1,
  };
  // string error = 2;
  void clear_error();
  const std::string& error() const;
  void set_error(const std::string& value);
  void set_error(std::string&& value);
  void set_error(const char* value);
  void set_error(const char* value, size_t size);
  std::string* mutable_error();
  std::string* release_error();
  void set_allocated_error(std::string* error);
  private:
  const std::string& _internal_error() const;
  void _internal_set_error(const std::string& value);
  std::string* _internal_mutable_error();
  public:

  // bool status = 1;
  void clear_status();
  bool status() const;
  void set_status(bool value);
  private:
  bool _internal_status() const;
  void _internal_set_status(bool value);
  public:

  // @@protoc_insertion_point(class_scope:smart3dmap.v1.RegisterSDBResponse)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr error_;
  bool status_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_map_5fservice_2fmap_5fservice_2eproto;
};
// -------------------------------------------------------------------

class LIBS3DMGRPC_API PublishMapRequest PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:smart3dmap.v1.PublishMapRequest) */ {
 public:
  inline PublishMapRequest() : PublishMapRequest(nullptr) {}
  virtual ~PublishMapRequest();
  explicit constexpr PublishMapRequest(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  PublishMapRequest(const PublishMapRequest& from);
  PublishMapRequest(PublishMapRequest&& from) noexcept
    : PublishMapRequest() {
    *this = ::std::move(from);
  }

  inline PublishMapRequest& operator=(const PublishMapRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline PublishMapRequest& operator=(PublishMapRequest&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const PublishMapRequest& default_instance() {
    return *internal_default_instance();
  }
  static inline const PublishMapRequest* internal_default_instance() {
    return reinterpret_cast<const PublishMapRequest*>(
               &_PublishMapRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    2;

  friend void swap(PublishMapRequest& a, PublishMapRequest& b) {
    a.Swap(&b);
  }
  inline void Swap(PublishMapRequest* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(PublishMapRequest* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline PublishMapRequest* New() const final {
    return CreateMaybeMessage<PublishMapRequest>(nullptr);
  }

  PublishMapRequest* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<PublishMapRequest>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const PublishMapRequest& from);
  void MergeFrom(const PublishMapRequest& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(PublishMapRequest* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "smart3dmap.v1.PublishMapRequest";
  }
  protected:
  explicit PublishMapRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    return ::descriptor_table_map_5fservice_2fmap_5fservice_2eproto_metadata_getter(kIndexInFileMessages);
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kDbIdFieldNumber = 1,
    kMapIdFieldNumber = 2,
  };
  // int32 db_id = 1;
  void clear_db_id();
  ::PROTOBUF_NAMESPACE_ID::int32 db_id() const;
  void set_db_id(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_db_id() const;
  void _internal_set_db_id(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // int32 map_id = 2;
  void clear_map_id();
  ::PROTOBUF_NAMESPACE_ID::int32 map_id() const;
  void set_map_id(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_map_id() const;
  void _internal_set_map_id(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // @@protoc_insertion_point(class_scope:smart3dmap.v1.PublishMapRequest)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::int32 db_id_;
  ::PROTOBUF_NAMESPACE_ID::int32 map_id_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_map_5fservice_2fmap_5fservice_2eproto;
};
// -------------------------------------------------------------------

class LIBS3DMGRPC_API GetWMSMapRequest PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:smart3dmap.v1.GetWMSMapRequest) */ {
 public:
  inline GetWMSMapRequest() : GetWMSMapRequest(nullptr) {}
  virtual ~GetWMSMapRequest();
  explicit constexpr GetWMSMapRequest(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  GetWMSMapRequest(const GetWMSMapRequest& from);
  GetWMSMapRequest(GetWMSMapRequest&& from) noexcept
    : GetWMSMapRequest() {
    *this = ::std::move(from);
  }

  inline GetWMSMapRequest& operator=(const GetWMSMapRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline GetWMSMapRequest& operator=(GetWMSMapRequest&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const GetWMSMapRequest& default_instance() {
    return *internal_default_instance();
  }
  static inline const GetWMSMapRequest* internal_default_instance() {
    return reinterpret_cast<const GetWMSMapRequest*>(
               &_GetWMSMapRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    3;

  friend void swap(GetWMSMapRequest& a, GetWMSMapRequest& b) {
    a.Swap(&b);
  }
  inline void Swap(GetWMSMapRequest* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(GetWMSMapRequest* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline GetWMSMapRequest* New() const final {
    return CreateMaybeMessage<GetWMSMapRequest>(nullptr);
  }

  GetWMSMapRequest* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<GetWMSMapRequest>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const GetWMSMapRequest& from);
  void MergeFrom(const GetWMSMapRequest& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(GetWMSMapRequest* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "smart3dmap.v1.GetWMSMapRequest";
  }
  protected:
  explicit GetWMSMapRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    return ::descriptor_table_map_5fservice_2fmap_5fservice_2eproto_metadata_getter(kIndexInFileMessages);
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kDbIdFieldNumber = 1,
    kMapIdFieldNumber = 2,
    kIncludingLayersFieldNumber = 3,
  };
  // int32 db_id = 1;
  void clear_db_id();
  ::PROTOBUF_NAMESPACE_ID::int32 db_id() const;
  void set_db_id(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_db_id() const;
  void _internal_set_db_id(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // int32 map_id = 2;
  void clear_map_id();
  ::PROTOBUF_NAMESPACE_ID::int32 map_id() const;
  void set_map_id(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_map_id() const;
  void _internal_set_map_id(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // bool including_layers = 3;
  void clear_including_layers();
  bool including_layers() const;
  void set_including_layers(bool value);
  private:
  bool _internal_including_layers() const;
  void _internal_set_including_layers(bool value);
  public:

  // @@protoc_insertion_point(class_scope:smart3dmap.v1.GetWMSMapRequest)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::int32 db_id_;
  ::PROTOBUF_NAMESPACE_ID::int32 map_id_;
  bool including_layers_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_map_5fservice_2fmap_5fservice_2eproto;
};
// -------------------------------------------------------------------

class LIBS3DMGRPC_API WMSLayer PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:smart3dmap.v1.WMSLayer) */ {
 public:
  inline WMSLayer() : WMSLayer(nullptr) {}
  virtual ~WMSLayer();
  explicit constexpr WMSLayer(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  WMSLayer(const WMSLayer& from);
  WMSLayer(WMSLayer&& from) noexcept
    : WMSLayer() {
    *this = ::std::move(from);
  }

  inline WMSLayer& operator=(const WMSLayer& from) {
    CopyFrom(from);
    return *this;
  }
  inline WMSLayer& operator=(WMSLayer&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const WMSLayer& default_instance() {
    return *internal_default_instance();
  }
  static inline const WMSLayer* internal_default_instance() {
    return reinterpret_cast<const WMSLayer*>(
               &_WMSLayer_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    4;

  friend void swap(WMSLayer& a, WMSLayer& b) {
    a.Swap(&b);
  }
  inline void Swap(WMSLayer* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(WMSLayer* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline WMSLayer* New() const final {
    return CreateMaybeMessage<WMSLayer>(nullptr);
  }

  WMSLayer* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<WMSLayer>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const WMSLayer& from);
  void MergeFrom(const WMSLayer& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(WMSLayer* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "smart3dmap.v1.WMSLayer";
  }
  protected:
  explicit WMSLayer(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    return ::descriptor_table_map_5fservice_2fmap_5fservice_2eproto_metadata_getter(kIndexInFileMessages);
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kBaseUrlFieldNumber = 1,
    kWorkspaceFieldNumber = 2,
    kNameFieldNumber = 3,
    kTitleFieldNumber = 4,
  };
  // string base_url = 1;
  void clear_base_url();
  const std::string& base_url() const;
  void set_base_url(const std::string& value);
  void set_base_url(std::string&& value);
  void set_base_url(const char* value);
  void set_base_url(const char* value, size_t size);
  std::string* mutable_base_url();
  std::string* release_base_url();
  void set_allocated_base_url(std::string* base_url);
  private:
  const std::string& _internal_base_url() const;
  void _internal_set_base_url(const std::string& value);
  std::string* _internal_mutable_base_url();
  public:

  // string workspace = 2;
  void clear_workspace();
  const std::string& workspace() const;
  void set_workspace(const std::string& value);
  void set_workspace(std::string&& value);
  void set_workspace(const char* value);
  void set_workspace(const char* value, size_t size);
  std::string* mutable_workspace();
  std::string* release_workspace();
  void set_allocated_workspace(std::string* workspace);
  private:
  const std::string& _internal_workspace() const;
  void _internal_set_workspace(const std::string& value);
  std::string* _internal_mutable_workspace();
  public:

  // string name = 3;
  void clear_name();
  const std::string& name() const;
  void set_name(const std::string& value);
  void set_name(std::string&& value);
  void set_name(const char* value);
  void set_name(const char* value, size_t size);
  std::string* mutable_name();
  std::string* release_name();
  void set_allocated_name(std::string* name);
  private:
  const std::string& _internal_name() const;
  void _internal_set_name(const std::string& value);
  std::string* _internal_mutable_name();
  public:

  // string title = 4;
  void clear_title();
  const std::string& title() const;
  void set_title(const std::string& value);
  void set_title(std::string&& value);
  void set_title(const char* value);
  void set_title(const char* value, size_t size);
  std::string* mutable_title();
  std::string* release_title();
  void set_allocated_title(std::string* title);
  private:
  const std::string& _internal_title() const;
  void _internal_set_title(const std::string& value);
  std::string* _internal_mutable_title();
  public:

  // @@protoc_insertion_point(class_scope:smart3dmap.v1.WMSLayer)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr base_url_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr workspace_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr name_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr title_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_map_5fservice_2fmap_5fservice_2eproto;
};
// -------------------------------------------------------------------

class LIBS3DMGRPC_API WMSMap PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:smart3dmap.v1.WMSMap) */ {
 public:
  inline WMSMap() : WMSMap(nullptr) {}
  virtual ~WMSMap();
  explicit constexpr WMSMap(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  WMSMap(const WMSMap& from);
  WMSMap(WMSMap&& from) noexcept
    : WMSMap() {
    *this = ::std::move(from);
  }

  inline WMSMap& operator=(const WMSMap& from) {
    CopyFrom(from);
    return *this;
  }
  inline WMSMap& operator=(WMSMap&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const WMSMap& default_instance() {
    return *internal_default_instance();
  }
  static inline const WMSMap* internal_default_instance() {
    return reinterpret_cast<const WMSMap*>(
               &_WMSMap_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    5;

  friend void swap(WMSMap& a, WMSMap& b) {
    a.Swap(&b);
  }
  inline void Swap(WMSMap* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(WMSMap* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline WMSMap* New() const final {
    return CreateMaybeMessage<WMSMap>(nullptr);
  }

  WMSMap* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<WMSMap>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const WMSMap& from);
  void MergeFrom(const WMSMap& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(WMSMap* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "smart3dmap.v1.WMSMap";
  }
  protected:
  explicit WMSMap(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    return ::descriptor_table_map_5fservice_2fmap_5fservice_2eproto_metadata_getter(kIndexInFileMessages);
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kLayersFieldNumber = 5,
    kBaseUrlFieldNumber = 1,
    kWorkspaceFieldNumber = 2,
    kNameFieldNumber = 3,
    kTitleFieldNumber = 4,
    kLegendUrlFieldNumber = 6,
  };
  // repeated .smart3dmap.v1.WMSLayer layers = 5;
  int layers_size() const;
  private:
  int _internal_layers_size() const;
  public:
  void clear_layers();
  ::smart3dmap::v1::WMSLayer* mutable_layers(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::smart3dmap::v1::WMSLayer >*
      mutable_layers();
  private:
  const ::smart3dmap::v1::WMSLayer& _internal_layers(int index) const;
  ::smart3dmap::v1::WMSLayer* _internal_add_layers();
  public:
  const ::smart3dmap::v1::WMSLayer& layers(int index) const;
  ::smart3dmap::v1::WMSLayer* add_layers();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::smart3dmap::v1::WMSLayer >&
      layers() const;

  // string base_url = 1;
  void clear_base_url();
  const std::string& base_url() const;
  void set_base_url(const std::string& value);
  void set_base_url(std::string&& value);
  void set_base_url(const char* value);
  void set_base_url(const char* value, size_t size);
  std::string* mutable_base_url();
  std::string* release_base_url();
  void set_allocated_base_url(std::string* base_url);
  private:
  const std::string& _internal_base_url() const;
  void _internal_set_base_url(const std::string& value);
  std::string* _internal_mutable_base_url();
  public:

  // string workspace = 2;
  void clear_workspace();
  const std::string& workspace() const;
  void set_workspace(const std::string& value);
  void set_workspace(std::string&& value);
  void set_workspace(const char* value);
  void set_workspace(const char* value, size_t size);
  std::string* mutable_workspace();
  std::string* release_workspace();
  void set_allocated_workspace(std::string* workspace);
  private:
  const std::string& _internal_workspace() const;
  void _internal_set_workspace(const std::string& value);
  std::string* _internal_mutable_workspace();
  public:

  // string name = 3;
  void clear_name();
  const std::string& name() const;
  void set_name(const std::string& value);
  void set_name(std::string&& value);
  void set_name(const char* value);
  void set_name(const char* value, size_t size);
  std::string* mutable_name();
  std::string* release_name();
  void set_allocated_name(std::string* name);
  private:
  const std::string& _internal_name() const;
  void _internal_set_name(const std::string& value);
  std::string* _internal_mutable_name();
  public:

  // string title = 4;
  void clear_title();
  const std::string& title() const;
  void set_title(const std::string& value);
  void set_title(std::string&& value);
  void set_title(const char* value);
  void set_title(const char* value, size_t size);
  std::string* mutable_title();
  std::string* release_title();
  void set_allocated_title(std::string* title);
  private:
  const std::string& _internal_title() const;
  void _internal_set_title(const std::string& value);
  std::string* _internal_mutable_title();
  public:

  // string legend_url = 6;
  void clear_legend_url();
  const std::string& legend_url() const;
  void set_legend_url(const std::string& value);
  void set_legend_url(std::string&& value);
  void set_legend_url(const char* value);
  void set_legend_url(const char* value, size_t size);
  std::string* mutable_legend_url();
  std::string* release_legend_url();
  void set_allocated_legend_url(std::string* legend_url);
  private:
  const std::string& _internal_legend_url() const;
  void _internal_set_legend_url(const std::string& value);
  std::string* _internal_mutable_legend_url();
  public:

  // @@protoc_insertion_point(class_scope:smart3dmap.v1.WMSMap)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::smart3dmap::v1::WMSLayer > layers_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr base_url_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr workspace_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr name_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr title_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr legend_url_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_map_5fservice_2fmap_5fservice_2eproto;
};
// -------------------------------------------------------------------

class LIBS3DMGRPC_API GetWMSLayerRequest PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:smart3dmap.v1.GetWMSLayerRequest) */ {
 public:
  inline GetWMSLayerRequest() : GetWMSLayerRequest(nullptr) {}
  virtual ~GetWMSLayerRequest();
  explicit constexpr GetWMSLayerRequest(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  GetWMSLayerRequest(const GetWMSLayerRequest& from);
  GetWMSLayerRequest(GetWMSLayerRequest&& from) noexcept
    : GetWMSLayerRequest() {
    *this = ::std::move(from);
  }

  inline GetWMSLayerRequest& operator=(const GetWMSLayerRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline GetWMSLayerRequest& operator=(GetWMSLayerRequest&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const GetWMSLayerRequest& default_instance() {
    return *internal_default_instance();
  }
  static inline const GetWMSLayerRequest* internal_default_instance() {
    return reinterpret_cast<const GetWMSLayerRequest*>(
               &_GetWMSLayerRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    6;

  friend void swap(GetWMSLayerRequest& a, GetWMSLayerRequest& b) {
    a.Swap(&b);
  }
  inline void Swap(GetWMSLayerRequest* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(GetWMSLayerRequest* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline GetWMSLayerRequest* New() const final {
    return CreateMaybeMessage<GetWMSLayerRequest>(nullptr);
  }

  GetWMSLayerRequest* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<GetWMSLayerRequest>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const GetWMSLayerRequest& from);
  void MergeFrom(const GetWMSLayerRequest& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(GetWMSLayerRequest* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "smart3dmap.v1.GetWMSLayerRequest";
  }
  protected:
  explicit GetWMSLayerRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    return ::descriptor_table_map_5fservice_2fmap_5fservice_2eproto_metadata_getter(kIndexInFileMessages);
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kDbIdFieldNumber = 1,
    kMapIdFieldNumber = 2,
    kLayerOrderFieldNumber = 3,
  };
  // int32 db_id = 1;
  void clear_db_id();
  ::PROTOBUF_NAMESPACE_ID::int32 db_id() const;
  void set_db_id(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_db_id() const;
  void _internal_set_db_id(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // int32 map_id = 2;
  void clear_map_id();
  ::PROTOBUF_NAMESPACE_ID::int32 map_id() const;
  void set_map_id(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_map_id() const;
  void _internal_set_map_id(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // int32 layer_order = 3;
  void clear_layer_order();
  ::PROTOBUF_NAMESPACE_ID::int32 layer_order() const;
  void set_layer_order(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_layer_order() const;
  void _internal_set_layer_order(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // @@protoc_insertion_point(class_scope:smart3dmap.v1.GetWMSLayerRequest)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::int32 db_id_;
  ::PROTOBUF_NAMESPACE_ID::int32 map_id_;
  ::PROTOBUF_NAMESPACE_ID::int32 layer_order_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_map_5fservice_2fmap_5fservice_2eproto;
};
// -------------------------------------------------------------------

class LIBS3DMGRPC_API IsMapPublishedRequest PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:smart3dmap.v1.IsMapPublishedRequest) */ {
 public:
  inline IsMapPublishedRequest() : IsMapPublishedRequest(nullptr) {}
  virtual ~IsMapPublishedRequest();
  explicit constexpr IsMapPublishedRequest(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  IsMapPublishedRequest(const IsMapPublishedRequest& from);
  IsMapPublishedRequest(IsMapPublishedRequest&& from) noexcept
    : IsMapPublishedRequest() {
    *this = ::std::move(from);
  }

  inline IsMapPublishedRequest& operator=(const IsMapPublishedRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline IsMapPublishedRequest& operator=(IsMapPublishedRequest&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const IsMapPublishedRequest& default_instance() {
    return *internal_default_instance();
  }
  static inline const IsMapPublishedRequest* internal_default_instance() {
    return reinterpret_cast<const IsMapPublishedRequest*>(
               &_IsMapPublishedRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    7;

  friend void swap(IsMapPublishedRequest& a, IsMapPublishedRequest& b) {
    a.Swap(&b);
  }
  inline void Swap(IsMapPublishedRequest* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(IsMapPublishedRequest* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline IsMapPublishedRequest* New() const final {
    return CreateMaybeMessage<IsMapPublishedRequest>(nullptr);
  }

  IsMapPublishedRequest* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<IsMapPublishedRequest>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const IsMapPublishedRequest& from);
  void MergeFrom(const IsMapPublishedRequest& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(IsMapPublishedRequest* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "smart3dmap.v1.IsMapPublishedRequest";
  }
  protected:
  explicit IsMapPublishedRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    return ::descriptor_table_map_5fservice_2fmap_5fservice_2eproto_metadata_getter(kIndexInFileMessages);
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kDbIdFieldNumber = 1,
    kMapIdFieldNumber = 2,
  };
  // int32 db_id = 1;
  void clear_db_id();
  ::PROTOBUF_NAMESPACE_ID::int32 db_id() const;
  void set_db_id(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_db_id() const;
  void _internal_set_db_id(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // int32 map_id = 2;
  void clear_map_id();
  ::PROTOBUF_NAMESPACE_ID::int32 map_id() const;
  void set_map_id(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_map_id() const;
  void _internal_set_map_id(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // @@protoc_insertion_point(class_scope:smart3dmap.v1.IsMapPublishedRequest)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::int32 db_id_;
  ::PROTOBUF_NAMESPACE_ID::int32 map_id_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_map_5fservice_2fmap_5fservice_2eproto;
};
// -------------------------------------------------------------------

class LIBS3DMGRPC_API UnpublishMapRequest PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:smart3dmap.v1.UnpublishMapRequest) */ {
 public:
  inline UnpublishMapRequest() : UnpublishMapRequest(nullptr) {}
  virtual ~UnpublishMapRequest();
  explicit constexpr UnpublishMapRequest(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  UnpublishMapRequest(const UnpublishMapRequest& from);
  UnpublishMapRequest(UnpublishMapRequest&& from) noexcept
    : UnpublishMapRequest() {
    *this = ::std::move(from);
  }

  inline UnpublishMapRequest& operator=(const UnpublishMapRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline UnpublishMapRequest& operator=(UnpublishMapRequest&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const UnpublishMapRequest& default_instance() {
    return *internal_default_instance();
  }
  static inline const UnpublishMapRequest* internal_default_instance() {
    return reinterpret_cast<const UnpublishMapRequest*>(
               &_UnpublishMapRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    8;

  friend void swap(UnpublishMapRequest& a, UnpublishMapRequest& b) {
    a.Swap(&b);
  }
  inline void Swap(UnpublishMapRequest* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(UnpublishMapRequest* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline UnpublishMapRequest* New() const final {
    return CreateMaybeMessage<UnpublishMapRequest>(nullptr);
  }

  UnpublishMapRequest* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<UnpublishMapRequest>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const UnpublishMapRequest& from);
  void MergeFrom(const UnpublishMapRequest& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(UnpublishMapRequest* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "smart3dmap.v1.UnpublishMapRequest";
  }
  protected:
  explicit UnpublishMapRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    return ::descriptor_table_map_5fservice_2fmap_5fservice_2eproto_metadata_getter(kIndexInFileMessages);
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kDbIdFieldNumber = 1,
    kMapIdFieldNumber = 2,
  };
  // int32 db_id = 1;
  void clear_db_id();
  ::PROTOBUF_NAMESPACE_ID::int32 db_id() const;
  void set_db_id(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_db_id() const;
  void _internal_set_db_id(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // int32 map_id = 2;
  void clear_map_id();
  ::PROTOBUF_NAMESPACE_ID::int32 map_id() const;
  void set_map_id(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_map_id() const;
  void _internal_set_map_id(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // @@protoc_insertion_point(class_scope:smart3dmap.v1.UnpublishMapRequest)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::int32 db_id_;
  ::PROTOBUF_NAMESPACE_ID::int32 map_id_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_map_5fservice_2fmap_5fservice_2eproto;
};
// -------------------------------------------------------------------

class LIBS3DMGRPC_API UnpublishMapResponse PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:smart3dmap.v1.UnpublishMapResponse) */ {
 public:
  inline UnpublishMapResponse() : UnpublishMapResponse(nullptr) {}
  virtual ~UnpublishMapResponse();
  explicit constexpr UnpublishMapResponse(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  UnpublishMapResponse(const UnpublishMapResponse& from);
  UnpublishMapResponse(UnpublishMapResponse&& from) noexcept
    : UnpublishMapResponse() {
    *this = ::std::move(from);
  }

  inline UnpublishMapResponse& operator=(const UnpublishMapResponse& from) {
    CopyFrom(from);
    return *this;
  }
  inline UnpublishMapResponse& operator=(UnpublishMapResponse&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const UnpublishMapResponse& default_instance() {
    return *internal_default_instance();
  }
  static inline const UnpublishMapResponse* internal_default_instance() {
    return reinterpret_cast<const UnpublishMapResponse*>(
               &_UnpublishMapResponse_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    9;

  friend void swap(UnpublishMapResponse& a, UnpublishMapResponse& b) {
    a.Swap(&b);
  }
  inline void Swap(UnpublishMapResponse* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(UnpublishMapResponse* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline UnpublishMapResponse* New() const final {
    return CreateMaybeMessage<UnpublishMapResponse>(nullptr);
  }

  UnpublishMapResponse* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<UnpublishMapResponse>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const UnpublishMapResponse& from);
  void MergeFrom(const UnpublishMapResponse& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(UnpublishMapResponse* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "smart3dmap.v1.UnpublishMapResponse";
  }
  protected:
  explicit UnpublishMapResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    return ::descriptor_table_map_5fservice_2fmap_5fservice_2eproto_metadata_getter(kIndexInFileMessages);
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kErrorFieldNumber = 2,
    kStatusFieldNumber = 1,
  };
  // string error = 2;
  void clear_error();
  const std::string& error() const;
  void set_error(const std::string& value);
  void set_error(std::string&& value);
  void set_error(const char* value);
  void set_error(const char* value, size_t size);
  std::string* mutable_error();
  std::string* release_error();
  void set_allocated_error(std::string* error);
  private:
  const std::string& _internal_error() const;
  void _internal_set_error(const std::string& value);
  std::string* _internal_mutable_error();
  public:

  // bool status = 1;
  void clear_status();
  bool status() const;
  void set_status(bool value);
  private:
  bool _internal_status() const;
  void _internal_set_status(bool value);
  public:

  // @@protoc_insertion_point(class_scope:smart3dmap.v1.UnpublishMapResponse)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr error_;
  bool status_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_map_5fservice_2fmap_5fservice_2eproto;
};
// -------------------------------------------------------------------

class LIBS3DMGRPC_API UploadLegendPictureRequest PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:smart3dmap.v1.UploadLegendPictureRequest) */ {
 public:
  inline UploadLegendPictureRequest() : UploadLegendPictureRequest(nullptr) {}
  virtual ~UploadLegendPictureRequest();
  explicit constexpr UploadLegendPictureRequest(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  UploadLegendPictureRequest(const UploadLegendPictureRequest& from);
  UploadLegendPictureRequest(UploadLegendPictureRequest&& from) noexcept
    : UploadLegendPictureRequest() {
    *this = ::std::move(from);
  }

  inline UploadLegendPictureRequest& operator=(const UploadLegendPictureRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline UploadLegendPictureRequest& operator=(UploadLegendPictureRequest&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const UploadLegendPictureRequest& default_instance() {
    return *internal_default_instance();
  }
  static inline const UploadLegendPictureRequest* internal_default_instance() {
    return reinterpret_cast<const UploadLegendPictureRequest*>(
               &_UploadLegendPictureRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    10;

  friend void swap(UploadLegendPictureRequest& a, UploadLegendPictureRequest& b) {
    a.Swap(&b);
  }
  inline void Swap(UploadLegendPictureRequest* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(UploadLegendPictureRequest* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline UploadLegendPictureRequest* New() const final {
    return CreateMaybeMessage<UploadLegendPictureRequest>(nullptr);
  }

  UploadLegendPictureRequest* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<UploadLegendPictureRequest>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const UploadLegendPictureRequest& from);
  void MergeFrom(const UploadLegendPictureRequest& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(UploadLegendPictureRequest* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "smart3dmap.v1.UploadLegendPictureRequest";
  }
  protected:
  explicit UploadLegendPictureRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    return ::descriptor_table_map_5fservice_2fmap_5fservice_2eproto_metadata_getter(kIndexInFileMessages);
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kPicDataFieldNumber = 3,
    kDbIdFieldNumber = 1,
    kMapIdFieldNumber = 2,
  };
  // bytes pic_data = 3;
  void clear_pic_data();
  const std::string& pic_data() const;
  void set_pic_data(const std::string& value);
  void set_pic_data(std::string&& value);
  void set_pic_data(const char* value);
  void set_pic_data(const void* value, size_t size);
  std::string* mutable_pic_data();
  std::string* release_pic_data();
  void set_allocated_pic_data(std::string* pic_data);
  private:
  const std::string& _internal_pic_data() const;
  void _internal_set_pic_data(const std::string& value);
  std::string* _internal_mutable_pic_data();
  public:

  // int32 db_id = 1;
  void clear_db_id();
  ::PROTOBUF_NAMESPACE_ID::int32 db_id() const;
  void set_db_id(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_db_id() const;
  void _internal_set_db_id(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // int32 map_id = 2;
  void clear_map_id();
  ::PROTOBUF_NAMESPACE_ID::int32 map_id() const;
  void set_map_id(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_map_id() const;
  void _internal_set_map_id(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // @@protoc_insertion_point(class_scope:smart3dmap.v1.UploadLegendPictureRequest)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr pic_data_;
  ::PROTOBUF_NAMESPACE_ID::int32 db_id_;
  ::PROTOBUF_NAMESPACE_ID::int32 map_id_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_map_5fservice_2fmap_5fservice_2eproto;
};
// -------------------------------------------------------------------

class LIBS3DMGRPC_API UploadLegendPictureResponse PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:smart3dmap.v1.UploadLegendPictureResponse) */ {
 public:
  inline UploadLegendPictureResponse() : UploadLegendPictureResponse(nullptr) {}
  virtual ~UploadLegendPictureResponse();
  explicit constexpr UploadLegendPictureResponse(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  UploadLegendPictureResponse(const UploadLegendPictureResponse& from);
  UploadLegendPictureResponse(UploadLegendPictureResponse&& from) noexcept
    : UploadLegendPictureResponse() {
    *this = ::std::move(from);
  }

  inline UploadLegendPictureResponse& operator=(const UploadLegendPictureResponse& from) {
    CopyFrom(from);
    return *this;
  }
  inline UploadLegendPictureResponse& operator=(UploadLegendPictureResponse&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const UploadLegendPictureResponse& default_instance() {
    return *internal_default_instance();
  }
  static inline const UploadLegendPictureResponse* internal_default_instance() {
    return reinterpret_cast<const UploadLegendPictureResponse*>(
               &_UploadLegendPictureResponse_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    11;

  friend void swap(UploadLegendPictureResponse& a, UploadLegendPictureResponse& b) {
    a.Swap(&b);
  }
  inline void Swap(UploadLegendPictureResponse* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(UploadLegendPictureResponse* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline UploadLegendPictureResponse* New() const final {
    return CreateMaybeMessage<UploadLegendPictureResponse>(nullptr);
  }

  UploadLegendPictureResponse* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<UploadLegendPictureResponse>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const UploadLegendPictureResponse& from);
  void MergeFrom(const UploadLegendPictureResponse& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(UploadLegendPictureResponse* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "smart3dmap.v1.UploadLegendPictureResponse";
  }
  protected:
  explicit UploadLegendPictureResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    return ::descriptor_table_map_5fservice_2fmap_5fservice_2eproto_metadata_getter(kIndexInFileMessages);
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kLegendUrlFieldNumber = 1,
  };
  // string legend_url = 1;
  void clear_legend_url();
  const std::string& legend_url() const;
  void set_legend_url(const std::string& value);
  void set_legend_url(std::string&& value);
  void set_legend_url(const char* value);
  void set_legend_url(const char* value, size_t size);
  std::string* mutable_legend_url();
  std::string* release_legend_url();
  void set_allocated_legend_url(std::string* legend_url);
  private:
  const std::string& _internal_legend_url() const;
  void _internal_set_legend_url(const std::string& value);
  std::string* _internal_mutable_legend_url();
  public:

  // @@protoc_insertion_point(class_scope:smart3dmap.v1.UploadLegendPictureResponse)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr legend_url_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_map_5fservice_2fmap_5fservice_2eproto;
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// RegisterSDBRequest

// int32 db_id = 1;
inline void RegisterSDBRequest::clear_db_id() {
  db_id_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 RegisterSDBRequest::_internal_db_id() const {
  return db_id_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 RegisterSDBRequest::db_id() const {
  // @@protoc_insertion_point(field_get:smart3dmap.v1.RegisterSDBRequest.db_id)
  return _internal_db_id();
}
inline void RegisterSDBRequest::_internal_set_db_id(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  db_id_ = value;
}
inline void RegisterSDBRequest::set_db_id(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_db_id(value);
  // @@protoc_insertion_point(field_set:smart3dmap.v1.RegisterSDBRequest.db_id)
}

// -------------------------------------------------------------------

// RegisterSDBResponse

// bool status = 1;
inline void RegisterSDBResponse::clear_status() {
  status_ = false;
}
inline bool RegisterSDBResponse::_internal_status() const {
  return status_;
}
inline bool RegisterSDBResponse::status() const {
  // @@protoc_insertion_point(field_get:smart3dmap.v1.RegisterSDBResponse.status)
  return _internal_status();
}
inline void RegisterSDBResponse::_internal_set_status(bool value) {
  
  status_ = value;
}
inline void RegisterSDBResponse::set_status(bool value) {
  _internal_set_status(value);
  // @@protoc_insertion_point(field_set:smart3dmap.v1.RegisterSDBResponse.status)
}

// string error = 2;
inline void RegisterSDBResponse::clear_error() {
  error_.ClearToEmpty();
}
inline const std::string& RegisterSDBResponse::error() const {
  // @@protoc_insertion_point(field_get:smart3dmap.v1.RegisterSDBResponse.error)
  return _internal_error();
}
inline void RegisterSDBResponse::set_error(const std::string& value) {
  _internal_set_error(value);
  // @@protoc_insertion_point(field_set:smart3dmap.v1.RegisterSDBResponse.error)
}
inline std::string* RegisterSDBResponse::mutable_error() {
  // @@protoc_insertion_point(field_mutable:smart3dmap.v1.RegisterSDBResponse.error)
  return _internal_mutable_error();
}
inline const std::string& RegisterSDBResponse::_internal_error() const {
  return error_.Get();
}
inline void RegisterSDBResponse::_internal_set_error(const std::string& value) {
  
  error_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArena());
}
inline void RegisterSDBResponse::set_error(std::string&& value) {
  
  error_.Set(
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:smart3dmap.v1.RegisterSDBResponse.error)
}
inline void RegisterSDBResponse::set_error(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  error_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(value), GetArena());
  // @@protoc_insertion_point(field_set_char:smart3dmap.v1.RegisterSDBResponse.error)
}
inline void RegisterSDBResponse::set_error(const char* value,
    size_t size) {
  
  error_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:smart3dmap.v1.RegisterSDBResponse.error)
}
inline std::string* RegisterSDBResponse::_internal_mutable_error() {
  
  return error_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArena());
}
inline std::string* RegisterSDBResponse::release_error() {
  // @@protoc_insertion_point(field_release:smart3dmap.v1.RegisterSDBResponse.error)
  return error_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void RegisterSDBResponse::set_allocated_error(std::string* error) {
  if (error != nullptr) {
    
  } else {
    
  }
  error_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), error,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:smart3dmap.v1.RegisterSDBResponse.error)
}

// -------------------------------------------------------------------

// PublishMapRequest

// int32 db_id = 1;
inline void PublishMapRequest::clear_db_id() {
  db_id_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 PublishMapRequest::_internal_db_id() const {
  return db_id_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 PublishMapRequest::db_id() const {
  // @@protoc_insertion_point(field_get:smart3dmap.v1.PublishMapRequest.db_id)
  return _internal_db_id();
}
inline void PublishMapRequest::_internal_set_db_id(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  db_id_ = value;
}
inline void PublishMapRequest::set_db_id(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_db_id(value);
  // @@protoc_insertion_point(field_set:smart3dmap.v1.PublishMapRequest.db_id)
}

// int32 map_id = 2;
inline void PublishMapRequest::clear_map_id() {
  map_id_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 PublishMapRequest::_internal_map_id() const {
  return map_id_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 PublishMapRequest::map_id() const {
  // @@protoc_insertion_point(field_get:smart3dmap.v1.PublishMapRequest.map_id)
  return _internal_map_id();
}
inline void PublishMapRequest::_internal_set_map_id(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  map_id_ = value;
}
inline void PublishMapRequest::set_map_id(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_map_id(value);
  // @@protoc_insertion_point(field_set:smart3dmap.v1.PublishMapRequest.map_id)
}

// -------------------------------------------------------------------

// GetWMSMapRequest

// int32 db_id = 1;
inline void GetWMSMapRequest::clear_db_id() {
  db_id_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 GetWMSMapRequest::_internal_db_id() const {
  return db_id_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 GetWMSMapRequest::db_id() const {
  // @@protoc_insertion_point(field_get:smart3dmap.v1.GetWMSMapRequest.db_id)
  return _internal_db_id();
}
inline void GetWMSMapRequest::_internal_set_db_id(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  db_id_ = value;
}
inline void GetWMSMapRequest::set_db_id(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_db_id(value);
  // @@protoc_insertion_point(field_set:smart3dmap.v1.GetWMSMapRequest.db_id)
}

// int32 map_id = 2;
inline void GetWMSMapRequest::clear_map_id() {
  map_id_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 GetWMSMapRequest::_internal_map_id() const {
  return map_id_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 GetWMSMapRequest::map_id() const {
  // @@protoc_insertion_point(field_get:smart3dmap.v1.GetWMSMapRequest.map_id)
  return _internal_map_id();
}
inline void GetWMSMapRequest::_internal_set_map_id(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  map_id_ = value;
}
inline void GetWMSMapRequest::set_map_id(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_map_id(value);
  // @@protoc_insertion_point(field_set:smart3dmap.v1.GetWMSMapRequest.map_id)
}

// bool including_layers = 3;
inline void GetWMSMapRequest::clear_including_layers() {
  including_layers_ = false;
}
inline bool GetWMSMapRequest::_internal_including_layers() const {
  return including_layers_;
}
inline bool GetWMSMapRequest::including_layers() const {
  // @@protoc_insertion_point(field_get:smart3dmap.v1.GetWMSMapRequest.including_layers)
  return _internal_including_layers();
}
inline void GetWMSMapRequest::_internal_set_including_layers(bool value) {
  
  including_layers_ = value;
}
inline void GetWMSMapRequest::set_including_layers(bool value) {
  _internal_set_including_layers(value);
  // @@protoc_insertion_point(field_set:smart3dmap.v1.GetWMSMapRequest.including_layers)
}

// -------------------------------------------------------------------

// WMSLayer

// string base_url = 1;
inline void WMSLayer::clear_base_url() {
  base_url_.ClearToEmpty();
}
inline const std::string& WMSLayer::base_url() const {
  // @@protoc_insertion_point(field_get:smart3dmap.v1.WMSLayer.base_url)
  return _internal_base_url();
}
inline void WMSLayer::set_base_url(const std::string& value) {
  _internal_set_base_url(value);
  // @@protoc_insertion_point(field_set:smart3dmap.v1.WMSLayer.base_url)
}
inline std::string* WMSLayer::mutable_base_url() {
  // @@protoc_insertion_point(field_mutable:smart3dmap.v1.WMSLayer.base_url)
  return _internal_mutable_base_url();
}
inline const std::string& WMSLayer::_internal_base_url() const {
  return base_url_.Get();
}
inline void WMSLayer::_internal_set_base_url(const std::string& value) {
  
  base_url_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArena());
}
inline void WMSLayer::set_base_url(std::string&& value) {
  
  base_url_.Set(
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:smart3dmap.v1.WMSLayer.base_url)
}
inline void WMSLayer::set_base_url(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  base_url_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(value), GetArena());
  // @@protoc_insertion_point(field_set_char:smart3dmap.v1.WMSLayer.base_url)
}
inline void WMSLayer::set_base_url(const char* value,
    size_t size) {
  
  base_url_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:smart3dmap.v1.WMSLayer.base_url)
}
inline std::string* WMSLayer::_internal_mutable_base_url() {
  
  return base_url_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArena());
}
inline std::string* WMSLayer::release_base_url() {
  // @@protoc_insertion_point(field_release:smart3dmap.v1.WMSLayer.base_url)
  return base_url_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void WMSLayer::set_allocated_base_url(std::string* base_url) {
  if (base_url != nullptr) {
    
  } else {
    
  }
  base_url_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), base_url,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:smart3dmap.v1.WMSLayer.base_url)
}

// string workspace = 2;
inline void WMSLayer::clear_workspace() {
  workspace_.ClearToEmpty();
}
inline const std::string& WMSLayer::workspace() const {
  // @@protoc_insertion_point(field_get:smart3dmap.v1.WMSLayer.workspace)
  return _internal_workspace();
}
inline void WMSLayer::set_workspace(const std::string& value) {
  _internal_set_workspace(value);
  // @@protoc_insertion_point(field_set:smart3dmap.v1.WMSLayer.workspace)
}
inline std::string* WMSLayer::mutable_workspace() {
  // @@protoc_insertion_point(field_mutable:smart3dmap.v1.WMSLayer.workspace)
  return _internal_mutable_workspace();
}
inline const std::string& WMSLayer::_internal_workspace() const {
  return workspace_.Get();
}
inline void WMSLayer::_internal_set_workspace(const std::string& value) {
  
  workspace_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArena());
}
inline void WMSLayer::set_workspace(std::string&& value) {
  
  workspace_.Set(
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:smart3dmap.v1.WMSLayer.workspace)
}
inline void WMSLayer::set_workspace(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  workspace_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(value), GetArena());
  // @@protoc_insertion_point(field_set_char:smart3dmap.v1.WMSLayer.workspace)
}
inline void WMSLayer::set_workspace(const char* value,
    size_t size) {
  
  workspace_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:smart3dmap.v1.WMSLayer.workspace)
}
inline std::string* WMSLayer::_internal_mutable_workspace() {
  
  return workspace_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArena());
}
inline std::string* WMSLayer::release_workspace() {
  // @@protoc_insertion_point(field_release:smart3dmap.v1.WMSLayer.workspace)
  return workspace_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void WMSLayer::set_allocated_workspace(std::string* workspace) {
  if (workspace != nullptr) {
    
  } else {
    
  }
  workspace_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), workspace,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:smart3dmap.v1.WMSLayer.workspace)
}

// string name = 3;
inline void WMSLayer::clear_name() {
  name_.ClearToEmpty();
}
inline const std::string& WMSLayer::name() const {
  // @@protoc_insertion_point(field_get:smart3dmap.v1.WMSLayer.name)
  return _internal_name();
}
inline void WMSLayer::set_name(const std::string& value) {
  _internal_set_name(value);
  // @@protoc_insertion_point(field_set:smart3dmap.v1.WMSLayer.name)
}
inline std::string* WMSLayer::mutable_name() {
  // @@protoc_insertion_point(field_mutable:smart3dmap.v1.WMSLayer.name)
  return _internal_mutable_name();
}
inline const std::string& WMSLayer::_internal_name() const {
  return name_.Get();
}
inline void WMSLayer::_internal_set_name(const std::string& value) {
  
  name_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArena());
}
inline void WMSLayer::set_name(std::string&& value) {
  
  name_.Set(
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:smart3dmap.v1.WMSLayer.name)
}
inline void WMSLayer::set_name(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  name_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(value), GetArena());
  // @@protoc_insertion_point(field_set_char:smart3dmap.v1.WMSLayer.name)
}
inline void WMSLayer::set_name(const char* value,
    size_t size) {
  
  name_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:smart3dmap.v1.WMSLayer.name)
}
inline std::string* WMSLayer::_internal_mutable_name() {
  
  return name_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArena());
}
inline std::string* WMSLayer::release_name() {
  // @@protoc_insertion_point(field_release:smart3dmap.v1.WMSLayer.name)
  return name_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void WMSLayer::set_allocated_name(std::string* name) {
  if (name != nullptr) {
    
  } else {
    
  }
  name_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), name,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:smart3dmap.v1.WMSLayer.name)
}

// string title = 4;
inline void WMSLayer::clear_title() {
  title_.ClearToEmpty();
}
inline const std::string& WMSLayer::title() const {
  // @@protoc_insertion_point(field_get:smart3dmap.v1.WMSLayer.title)
  return _internal_title();
}
inline void WMSLayer::set_title(const std::string& value) {
  _internal_set_title(value);
  // @@protoc_insertion_point(field_set:smart3dmap.v1.WMSLayer.title)
}
inline std::string* WMSLayer::mutable_title() {
  // @@protoc_insertion_point(field_mutable:smart3dmap.v1.WMSLayer.title)
  return _internal_mutable_title();
}
inline const std::string& WMSLayer::_internal_title() const {
  return title_.Get();
}
inline void WMSLayer::_internal_set_title(const std::string& value) {
  
  title_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArena());
}
inline void WMSLayer::set_title(std::string&& value) {
  
  title_.Set(
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:smart3dmap.v1.WMSLayer.title)
}
inline void WMSLayer::set_title(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  title_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(value), GetArena());
  // @@protoc_insertion_point(field_set_char:smart3dmap.v1.WMSLayer.title)
}
inline void WMSLayer::set_title(const char* value,
    size_t size) {
  
  title_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:smart3dmap.v1.WMSLayer.title)
}
inline std::string* WMSLayer::_internal_mutable_title() {
  
  return title_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArena());
}
inline std::string* WMSLayer::release_title() {
  // @@protoc_insertion_point(field_release:smart3dmap.v1.WMSLayer.title)
  return title_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void WMSLayer::set_allocated_title(std::string* title) {
  if (title != nullptr) {
    
  } else {
    
  }
  title_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), title,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:smart3dmap.v1.WMSLayer.title)
}

// -------------------------------------------------------------------

// WMSMap

// string base_url = 1;
inline void WMSMap::clear_base_url() {
  base_url_.ClearToEmpty();
}
inline const std::string& WMSMap::base_url() const {
  // @@protoc_insertion_point(field_get:smart3dmap.v1.WMSMap.base_url)
  return _internal_base_url();
}
inline void WMSMap::set_base_url(const std::string& value) {
  _internal_set_base_url(value);
  // @@protoc_insertion_point(field_set:smart3dmap.v1.WMSMap.base_url)
}
inline std::string* WMSMap::mutable_base_url() {
  // @@protoc_insertion_point(field_mutable:smart3dmap.v1.WMSMap.base_url)
  return _internal_mutable_base_url();
}
inline const std::string& WMSMap::_internal_base_url() const {
  return base_url_.Get();
}
inline void WMSMap::_internal_set_base_url(const std::string& value) {
  
  base_url_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArena());
}
inline void WMSMap::set_base_url(std::string&& value) {
  
  base_url_.Set(
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:smart3dmap.v1.WMSMap.base_url)
}
inline void WMSMap::set_base_url(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  base_url_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(value), GetArena());
  // @@protoc_insertion_point(field_set_char:smart3dmap.v1.WMSMap.base_url)
}
inline void WMSMap::set_base_url(const char* value,
    size_t size) {
  
  base_url_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:smart3dmap.v1.WMSMap.base_url)
}
inline std::string* WMSMap::_internal_mutable_base_url() {
  
  return base_url_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArena());
}
inline std::string* WMSMap::release_base_url() {
  // @@protoc_insertion_point(field_release:smart3dmap.v1.WMSMap.base_url)
  return base_url_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void WMSMap::set_allocated_base_url(std::string* base_url) {
  if (base_url != nullptr) {
    
  } else {
    
  }
  base_url_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), base_url,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:smart3dmap.v1.WMSMap.base_url)
}

// string workspace = 2;
inline void WMSMap::clear_workspace() {
  workspace_.ClearToEmpty();
}
inline const std::string& WMSMap::workspace() const {
  // @@protoc_insertion_point(field_get:smart3dmap.v1.WMSMap.workspace)
  return _internal_workspace();
}
inline void WMSMap::set_workspace(const std::string& value) {
  _internal_set_workspace(value);
  // @@protoc_insertion_point(field_set:smart3dmap.v1.WMSMap.workspace)
}
inline std::string* WMSMap::mutable_workspace() {
  // @@protoc_insertion_point(field_mutable:smart3dmap.v1.WMSMap.workspace)
  return _internal_mutable_workspace();
}
inline const std::string& WMSMap::_internal_workspace() const {
  return workspace_.Get();
}
inline void WMSMap::_internal_set_workspace(const std::string& value) {
  
  workspace_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArena());
}
inline void WMSMap::set_workspace(std::string&& value) {
  
  workspace_.Set(
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:smart3dmap.v1.WMSMap.workspace)
}
inline void WMSMap::set_workspace(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  workspace_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(value), GetArena());
  // @@protoc_insertion_point(field_set_char:smart3dmap.v1.WMSMap.workspace)
}
inline void WMSMap::set_workspace(const char* value,
    size_t size) {
  
  workspace_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:smart3dmap.v1.WMSMap.workspace)
}
inline std::string* WMSMap::_internal_mutable_workspace() {
  
  return workspace_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArena());
}
inline std::string* WMSMap::release_workspace() {
  // @@protoc_insertion_point(field_release:smart3dmap.v1.WMSMap.workspace)
  return workspace_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void WMSMap::set_allocated_workspace(std::string* workspace) {
  if (workspace != nullptr) {
    
  } else {
    
  }
  workspace_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), workspace,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:smart3dmap.v1.WMSMap.workspace)
}

// string name = 3;
inline void WMSMap::clear_name() {
  name_.ClearToEmpty();
}
inline const std::string& WMSMap::name() const {
  // @@protoc_insertion_point(field_get:smart3dmap.v1.WMSMap.name)
  return _internal_name();
}
inline void WMSMap::set_name(const std::string& value) {
  _internal_set_name(value);
  // @@protoc_insertion_point(field_set:smart3dmap.v1.WMSMap.name)
}
inline std::string* WMSMap::mutable_name() {
  // @@protoc_insertion_point(field_mutable:smart3dmap.v1.WMSMap.name)
  return _internal_mutable_name();
}
inline const std::string& WMSMap::_internal_name() const {
  return name_.Get();
}
inline void WMSMap::_internal_set_name(const std::string& value) {
  
  name_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArena());
}
inline void WMSMap::set_name(std::string&& value) {
  
  name_.Set(
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:smart3dmap.v1.WMSMap.name)
}
inline void WMSMap::set_name(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  name_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(value), GetArena());
  // @@protoc_insertion_point(field_set_char:smart3dmap.v1.WMSMap.name)
}
inline void WMSMap::set_name(const char* value,
    size_t size) {
  
  name_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:smart3dmap.v1.WMSMap.name)
}
inline std::string* WMSMap::_internal_mutable_name() {
  
  return name_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArena());
}
inline std::string* WMSMap::release_name() {
  // @@protoc_insertion_point(field_release:smart3dmap.v1.WMSMap.name)
  return name_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void WMSMap::set_allocated_name(std::string* name) {
  if (name != nullptr) {
    
  } else {
    
  }
  name_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), name,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:smart3dmap.v1.WMSMap.name)
}

// string title = 4;
inline void WMSMap::clear_title() {
  title_.ClearToEmpty();
}
inline const std::string& WMSMap::title() const {
  // @@protoc_insertion_point(field_get:smart3dmap.v1.WMSMap.title)
  return _internal_title();
}
inline void WMSMap::set_title(const std::string& value) {
  _internal_set_title(value);
  // @@protoc_insertion_point(field_set:smart3dmap.v1.WMSMap.title)
}
inline std::string* WMSMap::mutable_title() {
  // @@protoc_insertion_point(field_mutable:smart3dmap.v1.WMSMap.title)
  return _internal_mutable_title();
}
inline const std::string& WMSMap::_internal_title() const {
  return title_.Get();
}
inline void WMSMap::_internal_set_title(const std::string& value) {
  
  title_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArena());
}
inline void WMSMap::set_title(std::string&& value) {
  
  title_.Set(
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:smart3dmap.v1.WMSMap.title)
}
inline void WMSMap::set_title(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  title_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(value), GetArena());
  // @@protoc_insertion_point(field_set_char:smart3dmap.v1.WMSMap.title)
}
inline void WMSMap::set_title(const char* value,
    size_t size) {
  
  title_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:smart3dmap.v1.WMSMap.title)
}
inline std::string* WMSMap::_internal_mutable_title() {
  
  return title_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArena());
}
inline std::string* WMSMap::release_title() {
  // @@protoc_insertion_point(field_release:smart3dmap.v1.WMSMap.title)
  return title_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void WMSMap::set_allocated_title(std::string* title) {
  if (title != nullptr) {
    
  } else {
    
  }
  title_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), title,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:smart3dmap.v1.WMSMap.title)
}

// repeated .smart3dmap.v1.WMSLayer layers = 5;
inline int WMSMap::_internal_layers_size() const {
  return layers_.size();
}
inline int WMSMap::layers_size() const {
  return _internal_layers_size();
}
inline void WMSMap::clear_layers() {
  layers_.Clear();
}
inline ::smart3dmap::v1::WMSLayer* WMSMap::mutable_layers(int index) {
  // @@protoc_insertion_point(field_mutable:smart3dmap.v1.WMSMap.layers)
  return layers_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::smart3dmap::v1::WMSLayer >*
WMSMap::mutable_layers() {
  // @@protoc_insertion_point(field_mutable_list:smart3dmap.v1.WMSMap.layers)
  return &layers_;
}
inline const ::smart3dmap::v1::WMSLayer& WMSMap::_internal_layers(int index) const {
  return layers_.Get(index);
}
inline const ::smart3dmap::v1::WMSLayer& WMSMap::layers(int index) const {
  // @@protoc_insertion_point(field_get:smart3dmap.v1.WMSMap.layers)
  return _internal_layers(index);
}
inline ::smart3dmap::v1::WMSLayer* WMSMap::_internal_add_layers() {
  return layers_.Add();
}
inline ::smart3dmap::v1::WMSLayer* WMSMap::add_layers() {
  // @@protoc_insertion_point(field_add:smart3dmap.v1.WMSMap.layers)
  return _internal_add_layers();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::smart3dmap::v1::WMSLayer >&
WMSMap::layers() const {
  // @@protoc_insertion_point(field_list:smart3dmap.v1.WMSMap.layers)
  return layers_;
}

// string legend_url = 6;
inline void WMSMap::clear_legend_url() {
  legend_url_.ClearToEmpty();
}
inline const std::string& WMSMap::legend_url() const {
  // @@protoc_insertion_point(field_get:smart3dmap.v1.WMSMap.legend_url)
  return _internal_legend_url();
}
inline void WMSMap::set_legend_url(const std::string& value) {
  _internal_set_legend_url(value);
  // @@protoc_insertion_point(field_set:smart3dmap.v1.WMSMap.legend_url)
}
inline std::string* WMSMap::mutable_legend_url() {
  // @@protoc_insertion_point(field_mutable:smart3dmap.v1.WMSMap.legend_url)
  return _internal_mutable_legend_url();
}
inline const std::string& WMSMap::_internal_legend_url() const {
  return legend_url_.Get();
}
inline void WMSMap::_internal_set_legend_url(const std::string& value) {
  
  legend_url_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArena());
}
inline void WMSMap::set_legend_url(std::string&& value) {
  
  legend_url_.Set(
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:smart3dmap.v1.WMSMap.legend_url)
}
inline void WMSMap::set_legend_url(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  legend_url_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(value), GetArena());
  // @@protoc_insertion_point(field_set_char:smart3dmap.v1.WMSMap.legend_url)
}
inline void WMSMap::set_legend_url(const char* value,
    size_t size) {
  
  legend_url_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:smart3dmap.v1.WMSMap.legend_url)
}
inline std::string* WMSMap::_internal_mutable_legend_url() {
  
  return legend_url_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArena());
}
inline std::string* WMSMap::release_legend_url() {
  // @@protoc_insertion_point(field_release:smart3dmap.v1.WMSMap.legend_url)
  return legend_url_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void WMSMap::set_allocated_legend_url(std::string* legend_url) {
  if (legend_url != nullptr) {
    
  } else {
    
  }
  legend_url_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), legend_url,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:smart3dmap.v1.WMSMap.legend_url)
}

// -------------------------------------------------------------------

// GetWMSLayerRequest

// int32 db_id = 1;
inline void GetWMSLayerRequest::clear_db_id() {
  db_id_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 GetWMSLayerRequest::_internal_db_id() const {
  return db_id_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 GetWMSLayerRequest::db_id() const {
  // @@protoc_insertion_point(field_get:smart3dmap.v1.GetWMSLayerRequest.db_id)
  return _internal_db_id();
}
inline void GetWMSLayerRequest::_internal_set_db_id(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  db_id_ = value;
}
inline void GetWMSLayerRequest::set_db_id(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_db_id(value);
  // @@protoc_insertion_point(field_set:smart3dmap.v1.GetWMSLayerRequest.db_id)
}

// int32 map_id = 2;
inline void GetWMSLayerRequest::clear_map_id() {
  map_id_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 GetWMSLayerRequest::_internal_map_id() const {
  return map_id_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 GetWMSLayerRequest::map_id() const {
  // @@protoc_insertion_point(field_get:smart3dmap.v1.GetWMSLayerRequest.map_id)
  return _internal_map_id();
}
inline void GetWMSLayerRequest::_internal_set_map_id(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  map_id_ = value;
}
inline void GetWMSLayerRequest::set_map_id(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_map_id(value);
  // @@protoc_insertion_point(field_set:smart3dmap.v1.GetWMSLayerRequest.map_id)
}

// int32 layer_order = 3;
inline void GetWMSLayerRequest::clear_layer_order() {
  layer_order_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 GetWMSLayerRequest::_internal_layer_order() const {
  return layer_order_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 GetWMSLayerRequest::layer_order() const {
  // @@protoc_insertion_point(field_get:smart3dmap.v1.GetWMSLayerRequest.layer_order)
  return _internal_layer_order();
}
inline void GetWMSLayerRequest::_internal_set_layer_order(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  layer_order_ = value;
}
inline void GetWMSLayerRequest::set_layer_order(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_layer_order(value);
  // @@protoc_insertion_point(field_set:smart3dmap.v1.GetWMSLayerRequest.layer_order)
}

// -------------------------------------------------------------------

// IsMapPublishedRequest

// int32 db_id = 1;
inline void IsMapPublishedRequest::clear_db_id() {
  db_id_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 IsMapPublishedRequest::_internal_db_id() const {
  return db_id_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 IsMapPublishedRequest::db_id() const {
  // @@protoc_insertion_point(field_get:smart3dmap.v1.IsMapPublishedRequest.db_id)
  return _internal_db_id();
}
inline void IsMapPublishedRequest::_internal_set_db_id(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  db_id_ = value;
}
inline void IsMapPublishedRequest::set_db_id(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_db_id(value);
  // @@protoc_insertion_point(field_set:smart3dmap.v1.IsMapPublishedRequest.db_id)
}

// int32 map_id = 2;
inline void IsMapPublishedRequest::clear_map_id() {
  map_id_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 IsMapPublishedRequest::_internal_map_id() const {
  return map_id_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 IsMapPublishedRequest::map_id() const {
  // @@protoc_insertion_point(field_get:smart3dmap.v1.IsMapPublishedRequest.map_id)
  return _internal_map_id();
}
inline void IsMapPublishedRequest::_internal_set_map_id(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  map_id_ = value;
}
inline void IsMapPublishedRequest::set_map_id(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_map_id(value);
  // @@protoc_insertion_point(field_set:smart3dmap.v1.IsMapPublishedRequest.map_id)
}

// -------------------------------------------------------------------

// UnpublishMapRequest

// int32 db_id = 1;
inline void UnpublishMapRequest::clear_db_id() {
  db_id_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 UnpublishMapRequest::_internal_db_id() const {
  return db_id_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 UnpublishMapRequest::db_id() const {
  // @@protoc_insertion_point(field_get:smart3dmap.v1.UnpublishMapRequest.db_id)
  return _internal_db_id();
}
inline void UnpublishMapRequest::_internal_set_db_id(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  db_id_ = value;
}
inline void UnpublishMapRequest::set_db_id(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_db_id(value);
  // @@protoc_insertion_point(field_set:smart3dmap.v1.UnpublishMapRequest.db_id)
}

// int32 map_id = 2;
inline void UnpublishMapRequest::clear_map_id() {
  map_id_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 UnpublishMapRequest::_internal_map_id() const {
  return map_id_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 UnpublishMapRequest::map_id() const {
  // @@protoc_insertion_point(field_get:smart3dmap.v1.UnpublishMapRequest.map_id)
  return _internal_map_id();
}
inline void UnpublishMapRequest::_internal_set_map_id(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  map_id_ = value;
}
inline void UnpublishMapRequest::set_map_id(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_map_id(value);
  // @@protoc_insertion_point(field_set:smart3dmap.v1.UnpublishMapRequest.map_id)
}

// -------------------------------------------------------------------

// UnpublishMapResponse

// bool status = 1;
inline void UnpublishMapResponse::clear_status() {
  status_ = false;
}
inline bool UnpublishMapResponse::_internal_status() const {
  return status_;
}
inline bool UnpublishMapResponse::status() const {
  // @@protoc_insertion_point(field_get:smart3dmap.v1.UnpublishMapResponse.status)
  return _internal_status();
}
inline void UnpublishMapResponse::_internal_set_status(bool value) {
  
  status_ = value;
}
inline void UnpublishMapResponse::set_status(bool value) {
  _internal_set_status(value);
  // @@protoc_insertion_point(field_set:smart3dmap.v1.UnpublishMapResponse.status)
}

// string error = 2;
inline void UnpublishMapResponse::clear_error() {
  error_.ClearToEmpty();
}
inline const std::string& UnpublishMapResponse::error() const {
  // @@protoc_insertion_point(field_get:smart3dmap.v1.UnpublishMapResponse.error)
  return _internal_error();
}
inline void UnpublishMapResponse::set_error(const std::string& value) {
  _internal_set_error(value);
  // @@protoc_insertion_point(field_set:smart3dmap.v1.UnpublishMapResponse.error)
}
inline std::string* UnpublishMapResponse::mutable_error() {
  // @@protoc_insertion_point(field_mutable:smart3dmap.v1.UnpublishMapResponse.error)
  return _internal_mutable_error();
}
inline const std::string& UnpublishMapResponse::_internal_error() const {
  return error_.Get();
}
inline void UnpublishMapResponse::_internal_set_error(const std::string& value) {
  
  error_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArena());
}
inline void UnpublishMapResponse::set_error(std::string&& value) {
  
  error_.Set(
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:smart3dmap.v1.UnpublishMapResponse.error)
}
inline void UnpublishMapResponse::set_error(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  error_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(value), GetArena());
  // @@protoc_insertion_point(field_set_char:smart3dmap.v1.UnpublishMapResponse.error)
}
inline void UnpublishMapResponse::set_error(const char* value,
    size_t size) {
  
  error_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:smart3dmap.v1.UnpublishMapResponse.error)
}
inline std::string* UnpublishMapResponse::_internal_mutable_error() {
  
  return error_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArena());
}
inline std::string* UnpublishMapResponse::release_error() {
  // @@protoc_insertion_point(field_release:smart3dmap.v1.UnpublishMapResponse.error)
  return error_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void UnpublishMapResponse::set_allocated_error(std::string* error) {
  if (error != nullptr) {
    
  } else {
    
  }
  error_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), error,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:smart3dmap.v1.UnpublishMapResponse.error)
}

// -------------------------------------------------------------------

// UploadLegendPictureRequest

// int32 db_id = 1;
inline void UploadLegendPictureRequest::clear_db_id() {
  db_id_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 UploadLegendPictureRequest::_internal_db_id() const {
  return db_id_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 UploadLegendPictureRequest::db_id() const {
  // @@protoc_insertion_point(field_get:smart3dmap.v1.UploadLegendPictureRequest.db_id)
  return _internal_db_id();
}
inline void UploadLegendPictureRequest::_internal_set_db_id(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  db_id_ = value;
}
inline void UploadLegendPictureRequest::set_db_id(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_db_id(value);
  // @@protoc_insertion_point(field_set:smart3dmap.v1.UploadLegendPictureRequest.db_id)
}

// int32 map_id = 2;
inline void UploadLegendPictureRequest::clear_map_id() {
  map_id_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 UploadLegendPictureRequest::_internal_map_id() const {
  return map_id_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 UploadLegendPictureRequest::map_id() const {
  // @@protoc_insertion_point(field_get:smart3dmap.v1.UploadLegendPictureRequest.map_id)
  return _internal_map_id();
}
inline void UploadLegendPictureRequest::_internal_set_map_id(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  map_id_ = value;
}
inline void UploadLegendPictureRequest::set_map_id(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_map_id(value);
  // @@protoc_insertion_point(field_set:smart3dmap.v1.UploadLegendPictureRequest.map_id)
}

// bytes pic_data = 3;
inline void UploadLegendPictureRequest::clear_pic_data() {
  pic_data_.ClearToEmpty();
}
inline const std::string& UploadLegendPictureRequest::pic_data() const {
  // @@protoc_insertion_point(field_get:smart3dmap.v1.UploadLegendPictureRequest.pic_data)
  return _internal_pic_data();
}
inline void UploadLegendPictureRequest::set_pic_data(const std::string& value) {
  _internal_set_pic_data(value);
  // @@protoc_insertion_point(field_set:smart3dmap.v1.UploadLegendPictureRequest.pic_data)
}
inline std::string* UploadLegendPictureRequest::mutable_pic_data() {
  // @@protoc_insertion_point(field_mutable:smart3dmap.v1.UploadLegendPictureRequest.pic_data)
  return _internal_mutable_pic_data();
}
inline const std::string& UploadLegendPictureRequest::_internal_pic_data() const {
  return pic_data_.Get();
}
inline void UploadLegendPictureRequest::_internal_set_pic_data(const std::string& value) {
  
  pic_data_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArena());
}
inline void UploadLegendPictureRequest::set_pic_data(std::string&& value) {
  
  pic_data_.Set(
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:smart3dmap.v1.UploadLegendPictureRequest.pic_data)
}
inline void UploadLegendPictureRequest::set_pic_data(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  pic_data_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(value), GetArena());
  // @@protoc_insertion_point(field_set_char:smart3dmap.v1.UploadLegendPictureRequest.pic_data)
}
inline void UploadLegendPictureRequest::set_pic_data(const void* value,
    size_t size) {
  
  pic_data_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:smart3dmap.v1.UploadLegendPictureRequest.pic_data)
}
inline std::string* UploadLegendPictureRequest::_internal_mutable_pic_data() {
  
  return pic_data_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArena());
}
inline std::string* UploadLegendPictureRequest::release_pic_data() {
  // @@protoc_insertion_point(field_release:smart3dmap.v1.UploadLegendPictureRequest.pic_data)
  return pic_data_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void UploadLegendPictureRequest::set_allocated_pic_data(std::string* pic_data) {
  if (pic_data != nullptr) {
    
  } else {
    
  }
  pic_data_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), pic_data,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:smart3dmap.v1.UploadLegendPictureRequest.pic_data)
}

// -------------------------------------------------------------------

// UploadLegendPictureResponse

// string legend_url = 1;
inline void UploadLegendPictureResponse::clear_legend_url() {
  legend_url_.ClearToEmpty();
}
inline const std::string& UploadLegendPictureResponse::legend_url() const {
  // @@protoc_insertion_point(field_get:smart3dmap.v1.UploadLegendPictureResponse.legend_url)
  return _internal_legend_url();
}
inline void UploadLegendPictureResponse::set_legend_url(const std::string& value) {
  _internal_set_legend_url(value);
  // @@protoc_insertion_point(field_set:smart3dmap.v1.UploadLegendPictureResponse.legend_url)
}
inline std::string* UploadLegendPictureResponse::mutable_legend_url() {
  // @@protoc_insertion_point(field_mutable:smart3dmap.v1.UploadLegendPictureResponse.legend_url)
  return _internal_mutable_legend_url();
}
inline const std::string& UploadLegendPictureResponse::_internal_legend_url() const {
  return legend_url_.Get();
}
inline void UploadLegendPictureResponse::_internal_set_legend_url(const std::string& value) {
  
  legend_url_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArena());
}
inline void UploadLegendPictureResponse::set_legend_url(std::string&& value) {
  
  legend_url_.Set(
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:smart3dmap.v1.UploadLegendPictureResponse.legend_url)
}
inline void UploadLegendPictureResponse::set_legend_url(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  legend_url_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(value), GetArena());
  // @@protoc_insertion_point(field_set_char:smart3dmap.v1.UploadLegendPictureResponse.legend_url)
}
inline void UploadLegendPictureResponse::set_legend_url(const char* value,
    size_t size) {
  
  legend_url_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:smart3dmap.v1.UploadLegendPictureResponse.legend_url)
}
inline std::string* UploadLegendPictureResponse::_internal_mutable_legend_url() {
  
  return legend_url_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArena());
}
inline std::string* UploadLegendPictureResponse::release_legend_url() {
  // @@protoc_insertion_point(field_release:smart3dmap.v1.UploadLegendPictureResponse.legend_url)
  return legend_url_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void UploadLegendPictureResponse::set_allocated_legend_url(std::string* legend_url) {
  if (legend_url != nullptr) {
    
  } else {
    
  }
  legend_url_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), legend_url,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:smart3dmap.v1.UploadLegendPictureResponse.legend_url)
}

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__
// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------


// @@protoc_insertion_point(namespace_scope)

}  // namespace v1
}  // namespace smart3dmap

// @@protoc_insertion_point(global_scope)

#include <google/protobuf/port_undef.inc>
#endif  // GOOGLE_PROTOBUF_INCLUDED_GOOGLE_PROTOBUF_INCLUDED_map_5fservice_2fmap_5fservice_2eproto
