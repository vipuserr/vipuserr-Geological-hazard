// Generated by the gRPC C++ plugin.
// If you make any local change, they will be lost.
// source: map_service/map_service.proto
#ifndef GRPC_map_5fservice_2fmap_5fservice_2eproto__INCLUDED
#define GRPC_map_5fservice_2fmap_5fservice_2eproto__INCLUDED

#include "map_service/map_service.pb.h"

#include <functional>
#include <grpc/impl/codegen/port_platform.h>
#include <grpcpp/impl/codegen/async_generic_service.h>
#include <grpcpp/impl/codegen/async_stream.h>
#include <grpcpp/impl/codegen/async_unary_call.h>
#include <grpcpp/impl/codegen/client_callback.h>
#include <grpcpp/impl/codegen/client_context.h>
#include <grpcpp/impl/codegen/completion_queue.h>
#include <grpcpp/impl/codegen/message_allocator.h>
#include <grpcpp/impl/codegen/method_handler.h>
#include <grpcpp/impl/codegen/proto_utils.h>
#include <grpcpp/impl/codegen/rpc_method.h>
#include <grpcpp/impl/codegen/server_callback.h>
#include <grpcpp/impl/codegen/server_callback_handlers.h>
#include <grpcpp/impl/codegen/server_context.h>
#include <grpcpp/impl/codegen/service_type.h>
#include <grpcpp/impl/codegen/status.h>
#include <grpcpp/impl/codegen/stub_options.h>
#include <grpcpp/impl/codegen/sync_stream.h>

namespace smart3dmap {
namespace v1 {

class MapService final {
 public:
  static constexpr char const* service_full_name() {
    return "smart3dmap.v1.MapService";
  }
  class StubInterface {
   public:
    virtual ~StubInterface() {}
    // 注册空间数据库
    virtual ::grpc::Status RegisterSDB(::grpc::ClientContext* context, const ::smart3dmap::v1::RegisterSDBRequest& request, ::smart3dmap::v1::RegisterSDBResponse* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::smart3dmap::v1::RegisterSDBResponse>> AsyncRegisterSDB(::grpc::ClientContext* context, const ::smart3dmap::v1::RegisterSDBRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::smart3dmap::v1::RegisterSDBResponse>>(AsyncRegisterSDBRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::smart3dmap::v1::RegisterSDBResponse>> PrepareAsyncRegisterSDB(::grpc::ClientContext* context, const ::smart3dmap::v1::RegisterSDBRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::smart3dmap::v1::RegisterSDBResponse>>(PrepareAsyncRegisterSDBRaw(context, request, cq));
    }
    // 发布空间数据库中的某个地图
    virtual ::grpc::Status PublishMap(::grpc::ClientContext* context, const ::smart3dmap::v1::PublishMapRequest& request, ::smart3dmap::v1::WMSMap* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::smart3dmap::v1::WMSMap>> AsyncPublishMap(::grpc::ClientContext* context, const ::smart3dmap::v1::PublishMapRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::smart3dmap::v1::WMSMap>>(AsyncPublishMapRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::smart3dmap::v1::WMSMap>> PrepareAsyncPublishMap(::grpc::ClientContext* context, const ::smart3dmap::v1::PublishMapRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::smart3dmap::v1::WMSMap>>(PrepareAsyncPublishMapRaw(context, request, cq));
    }
    // 撤销发布的地图
    virtual ::grpc::Status UnpublishMap(::grpc::ClientContext* context, const ::smart3dmap::v1::UnpublishMapRequest& request, ::smart3dmap::v1::UnpublishMapResponse* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::smart3dmap::v1::UnpublishMapResponse>> AsyncUnpublishMap(::grpc::ClientContext* context, const ::smart3dmap::v1::UnpublishMapRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::smart3dmap::v1::UnpublishMapResponse>>(AsyncUnpublishMapRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::smart3dmap::v1::UnpublishMapResponse>> PrepareAsyncUnpublishMap(::grpc::ClientContext* context, const ::smart3dmap::v1::UnpublishMapRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::smart3dmap::v1::UnpublishMapResponse>>(PrepareAsyncUnpublishMapRaw(context, request, cq));
    }
    // 检查地图是否已发布
    virtual ::grpc::Status IsMapPublished(::grpc::ClientContext* context, const ::smart3dmap::v1::IsMapPublishedRequest& request, ::google::protobuf::BoolValue* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::google::protobuf::BoolValue>> AsyncIsMapPublished(::grpc::ClientContext* context, const ::smart3dmap::v1::IsMapPublishedRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::google::protobuf::BoolValue>>(AsyncIsMapPublishedRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::google::protobuf::BoolValue>> PrepareAsyncIsMapPublished(::grpc::ClientContext* context, const ::smart3dmap::v1::IsMapPublishedRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::google::protobuf::BoolValue>>(PrepareAsyncIsMapPublishedRaw(context, request, cq));
    }
    // 获取地图的URL
    virtual ::grpc::Status GetWMSMap(::grpc::ClientContext* context, const ::smart3dmap::v1::GetWMSMapRequest& request, ::smart3dmap::v1::WMSMap* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::smart3dmap::v1::WMSMap>> AsyncGetWMSMap(::grpc::ClientContext* context, const ::smart3dmap::v1::GetWMSMapRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::smart3dmap::v1::WMSMap>>(AsyncGetWMSMapRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::smart3dmap::v1::WMSMap>> PrepareAsyncGetWMSMap(::grpc::ClientContext* context, const ::smart3dmap::v1::GetWMSMapRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::smart3dmap::v1::WMSMap>>(PrepareAsyncGetWMSMapRaw(context, request, cq));
    }
    // 获取地图中图层的URL
    virtual ::grpc::Status GetWMSLayer(::grpc::ClientContext* context, const ::smart3dmap::v1::GetWMSLayerRequest& request, ::smart3dmap::v1::WMSLayer* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::smart3dmap::v1::WMSLayer>> AsyncGetWMSLayer(::grpc::ClientContext* context, const ::smart3dmap::v1::GetWMSLayerRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::smart3dmap::v1::WMSLayer>>(AsyncGetWMSLayerRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::smart3dmap::v1::WMSLayer>> PrepareAsyncGetWMSLayer(::grpc::ClientContext* context, const ::smart3dmap::v1::GetWMSLayerRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::smart3dmap::v1::WMSLayer>>(PrepareAsyncGetWMSLayerRaw(context, request, cq));
    }
    // 上传图例文件。仅支持P*.png图片。
    virtual ::grpc::Status UploadLegendPicture(::grpc::ClientContext* context, const ::smart3dmap::v1::UploadLegendPictureRequest& request, ::smart3dmap::v1::UploadLegendPictureResponse* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::smart3dmap::v1::UploadLegendPictureResponse>> AsyncUploadLegendPicture(::grpc::ClientContext* context, const ::smart3dmap::v1::UploadLegendPictureRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::smart3dmap::v1::UploadLegendPictureResponse>>(AsyncUploadLegendPictureRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::smart3dmap::v1::UploadLegendPictureResponse>> PrepareAsyncUploadLegendPicture(::grpc::ClientContext* context, const ::smart3dmap::v1::UploadLegendPictureRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::smart3dmap::v1::UploadLegendPictureResponse>>(PrepareAsyncUploadLegendPictureRaw(context, request, cq));
    }
    class experimental_async_interface {
     public:
      virtual ~experimental_async_interface() {}
      // 注册空间数据库
      virtual void RegisterSDB(::grpc::ClientContext* context, const ::smart3dmap::v1::RegisterSDBRequest* request, ::smart3dmap::v1::RegisterSDBResponse* response, std::function<void(::grpc::Status)>) = 0;
      #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      virtual void RegisterSDB(::grpc::ClientContext* context, const ::smart3dmap::v1::RegisterSDBRequest* request, ::smart3dmap::v1::RegisterSDBResponse* response, ::grpc::ClientUnaryReactor* reactor) = 0;
      #else
      virtual void RegisterSDB(::grpc::ClientContext* context, const ::smart3dmap::v1::RegisterSDBRequest* request, ::smart3dmap::v1::RegisterSDBResponse* response, ::grpc::experimental::ClientUnaryReactor* reactor) = 0;
      #endif
      // 发布空间数据库中的某个地图
      virtual void PublishMap(::grpc::ClientContext* context, const ::smart3dmap::v1::PublishMapRequest* request, ::smart3dmap::v1::WMSMap* response, std::function<void(::grpc::Status)>) = 0;
      #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      virtual void PublishMap(::grpc::ClientContext* context, const ::smart3dmap::v1::PublishMapRequest* request, ::smart3dmap::v1::WMSMap* response, ::grpc::ClientUnaryReactor* reactor) = 0;
      #else
      virtual void PublishMap(::grpc::ClientContext* context, const ::smart3dmap::v1::PublishMapRequest* request, ::smart3dmap::v1::WMSMap* response, ::grpc::experimental::ClientUnaryReactor* reactor) = 0;
      #endif
      // 撤销发布的地图
      virtual void UnpublishMap(::grpc::ClientContext* context, const ::smart3dmap::v1::UnpublishMapRequest* request, ::smart3dmap::v1::UnpublishMapResponse* response, std::function<void(::grpc::Status)>) = 0;
      #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      virtual void UnpublishMap(::grpc::ClientContext* context, const ::smart3dmap::v1::UnpublishMapRequest* request, ::smart3dmap::v1::UnpublishMapResponse* response, ::grpc::ClientUnaryReactor* reactor) = 0;
      #else
      virtual void UnpublishMap(::grpc::ClientContext* context, const ::smart3dmap::v1::UnpublishMapRequest* request, ::smart3dmap::v1::UnpublishMapResponse* response, ::grpc::experimental::ClientUnaryReactor* reactor) = 0;
      #endif
      // 检查地图是否已发布
      virtual void IsMapPublished(::grpc::ClientContext* context, const ::smart3dmap::v1::IsMapPublishedRequest* request, ::google::protobuf::BoolValue* response, std::function<void(::grpc::Status)>) = 0;
      #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      virtual void IsMapPublished(::grpc::ClientContext* context, const ::smart3dmap::v1::IsMapPublishedRequest* request, ::google::protobuf::BoolValue* response, ::grpc::ClientUnaryReactor* reactor) = 0;
      #else
      virtual void IsMapPublished(::grpc::ClientContext* context, const ::smart3dmap::v1::IsMapPublishedRequest* request, ::google::protobuf::BoolValue* response, ::grpc::experimental::ClientUnaryReactor* reactor) = 0;
      #endif
      // 获取地图的URL
      virtual void GetWMSMap(::grpc::ClientContext* context, const ::smart3dmap::v1::GetWMSMapRequest* request, ::smart3dmap::v1::WMSMap* response, std::function<void(::grpc::Status)>) = 0;
      #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      virtual void GetWMSMap(::grpc::ClientContext* context, const ::smart3dmap::v1::GetWMSMapRequest* request, ::smart3dmap::v1::WMSMap* response, ::grpc::ClientUnaryReactor* reactor) = 0;
      #else
      virtual void GetWMSMap(::grpc::ClientContext* context, const ::smart3dmap::v1::GetWMSMapRequest* request, ::smart3dmap::v1::WMSMap* response, ::grpc::experimental::ClientUnaryReactor* reactor) = 0;
      #endif
      // 获取地图中图层的URL
      virtual void GetWMSLayer(::grpc::ClientContext* context, const ::smart3dmap::v1::GetWMSLayerRequest* request, ::smart3dmap::v1::WMSLayer* response, std::function<void(::grpc::Status)>) = 0;
      #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      virtual void GetWMSLayer(::grpc::ClientContext* context, const ::smart3dmap::v1::GetWMSLayerRequest* request, ::smart3dmap::v1::WMSLayer* response, ::grpc::ClientUnaryReactor* reactor) = 0;
      #else
      virtual void GetWMSLayer(::grpc::ClientContext* context, const ::smart3dmap::v1::GetWMSLayerRequest* request, ::smart3dmap::v1::WMSLayer* response, ::grpc::experimental::ClientUnaryReactor* reactor) = 0;
      #endif
      // 上传图例文件。仅支持P*.png图片。
      virtual void UploadLegendPicture(::grpc::ClientContext* context, const ::smart3dmap::v1::UploadLegendPictureRequest* request, ::smart3dmap::v1::UploadLegendPictureResponse* response, std::function<void(::grpc::Status)>) = 0;
      #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      virtual void UploadLegendPicture(::grpc::ClientContext* context, const ::smart3dmap::v1::UploadLegendPictureRequest* request, ::smart3dmap::v1::UploadLegendPictureResponse* response, ::grpc::ClientUnaryReactor* reactor) = 0;
      #else
      virtual void UploadLegendPicture(::grpc::ClientContext* context, const ::smart3dmap::v1::UploadLegendPictureRequest* request, ::smart3dmap::v1::UploadLegendPictureResponse* response, ::grpc::experimental::ClientUnaryReactor* reactor) = 0;
      #endif
    };
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
    typedef class experimental_async_interface async_interface;
    #endif
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
    async_interface* async() { return experimental_async(); }
    #endif
    virtual class experimental_async_interface* experimental_async() { return nullptr; }
  private:
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::smart3dmap::v1::RegisterSDBResponse>* AsyncRegisterSDBRaw(::grpc::ClientContext* context, const ::smart3dmap::v1::RegisterSDBRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::smart3dmap::v1::RegisterSDBResponse>* PrepareAsyncRegisterSDBRaw(::grpc::ClientContext* context, const ::smart3dmap::v1::RegisterSDBRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::smart3dmap::v1::WMSMap>* AsyncPublishMapRaw(::grpc::ClientContext* context, const ::smart3dmap::v1::PublishMapRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::smart3dmap::v1::WMSMap>* PrepareAsyncPublishMapRaw(::grpc::ClientContext* context, const ::smart3dmap::v1::PublishMapRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::smart3dmap::v1::UnpublishMapResponse>* AsyncUnpublishMapRaw(::grpc::ClientContext* context, const ::smart3dmap::v1::UnpublishMapRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::smart3dmap::v1::UnpublishMapResponse>* PrepareAsyncUnpublishMapRaw(::grpc::ClientContext* context, const ::smart3dmap::v1::UnpublishMapRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::google::protobuf::BoolValue>* AsyncIsMapPublishedRaw(::grpc::ClientContext* context, const ::smart3dmap::v1::IsMapPublishedRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::google::protobuf::BoolValue>* PrepareAsyncIsMapPublishedRaw(::grpc::ClientContext* context, const ::smart3dmap::v1::IsMapPublishedRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::smart3dmap::v1::WMSMap>* AsyncGetWMSMapRaw(::grpc::ClientContext* context, const ::smart3dmap::v1::GetWMSMapRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::smart3dmap::v1::WMSMap>* PrepareAsyncGetWMSMapRaw(::grpc::ClientContext* context, const ::smart3dmap::v1::GetWMSMapRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::smart3dmap::v1::WMSLayer>* AsyncGetWMSLayerRaw(::grpc::ClientContext* context, const ::smart3dmap::v1::GetWMSLayerRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::smart3dmap::v1::WMSLayer>* PrepareAsyncGetWMSLayerRaw(::grpc::ClientContext* context, const ::smart3dmap::v1::GetWMSLayerRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::smart3dmap::v1::UploadLegendPictureResponse>* AsyncUploadLegendPictureRaw(::grpc::ClientContext* context, const ::smart3dmap::v1::UploadLegendPictureRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::smart3dmap::v1::UploadLegendPictureResponse>* PrepareAsyncUploadLegendPictureRaw(::grpc::ClientContext* context, const ::smart3dmap::v1::UploadLegendPictureRequest& request, ::grpc::CompletionQueue* cq) = 0;
  };
  class Stub final : public StubInterface {
   public:
    Stub(const std::shared_ptr< ::grpc::ChannelInterface>& channel);
    ::grpc::Status RegisterSDB(::grpc::ClientContext* context, const ::smart3dmap::v1::RegisterSDBRequest& request, ::smart3dmap::v1::RegisterSDBResponse* response) override;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::smart3dmap::v1::RegisterSDBResponse>> AsyncRegisterSDB(::grpc::ClientContext* context, const ::smart3dmap::v1::RegisterSDBRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::smart3dmap::v1::RegisterSDBResponse>>(AsyncRegisterSDBRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::smart3dmap::v1::RegisterSDBResponse>> PrepareAsyncRegisterSDB(::grpc::ClientContext* context, const ::smart3dmap::v1::RegisterSDBRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::smart3dmap::v1::RegisterSDBResponse>>(PrepareAsyncRegisterSDBRaw(context, request, cq));
    }
    ::grpc::Status PublishMap(::grpc::ClientContext* context, const ::smart3dmap::v1::PublishMapRequest& request, ::smart3dmap::v1::WMSMap* response) override;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::smart3dmap::v1::WMSMap>> AsyncPublishMap(::grpc::ClientContext* context, const ::smart3dmap::v1::PublishMapRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::smart3dmap::v1::WMSMap>>(AsyncPublishMapRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::smart3dmap::v1::WMSMap>> PrepareAsyncPublishMap(::grpc::ClientContext* context, const ::smart3dmap::v1::PublishMapRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::smart3dmap::v1::WMSMap>>(PrepareAsyncPublishMapRaw(context, request, cq));
    }
    ::grpc::Status UnpublishMap(::grpc::ClientContext* context, const ::smart3dmap::v1::UnpublishMapRequest& request, ::smart3dmap::v1::UnpublishMapResponse* response) override;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::smart3dmap::v1::UnpublishMapResponse>> AsyncUnpublishMap(::grpc::ClientContext* context, const ::smart3dmap::v1::UnpublishMapRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::smart3dmap::v1::UnpublishMapResponse>>(AsyncUnpublishMapRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::smart3dmap::v1::UnpublishMapResponse>> PrepareAsyncUnpublishMap(::grpc::ClientContext* context, const ::smart3dmap::v1::UnpublishMapRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::smart3dmap::v1::UnpublishMapResponse>>(PrepareAsyncUnpublishMapRaw(context, request, cq));
    }
    ::grpc::Status IsMapPublished(::grpc::ClientContext* context, const ::smart3dmap::v1::IsMapPublishedRequest& request, ::google::protobuf::BoolValue* response) override;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::google::protobuf::BoolValue>> AsyncIsMapPublished(::grpc::ClientContext* context, const ::smart3dmap::v1::IsMapPublishedRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::google::protobuf::BoolValue>>(AsyncIsMapPublishedRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::google::protobuf::BoolValue>> PrepareAsyncIsMapPublished(::grpc::ClientContext* context, const ::smart3dmap::v1::IsMapPublishedRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::google::protobuf::BoolValue>>(PrepareAsyncIsMapPublishedRaw(context, request, cq));
    }
    ::grpc::Status GetWMSMap(::grpc::ClientContext* context, const ::smart3dmap::v1::GetWMSMapRequest& request, ::smart3dmap::v1::WMSMap* response) override;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::smart3dmap::v1::WMSMap>> AsyncGetWMSMap(::grpc::ClientContext* context, const ::smart3dmap::v1::GetWMSMapRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::smart3dmap::v1::WMSMap>>(AsyncGetWMSMapRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::smart3dmap::v1::WMSMap>> PrepareAsyncGetWMSMap(::grpc::ClientContext* context, const ::smart3dmap::v1::GetWMSMapRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::smart3dmap::v1::WMSMap>>(PrepareAsyncGetWMSMapRaw(context, request, cq));
    }
    ::grpc::Status GetWMSLayer(::grpc::ClientContext* context, const ::smart3dmap::v1::GetWMSLayerRequest& request, ::smart3dmap::v1::WMSLayer* response) override;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::smart3dmap::v1::WMSLayer>> AsyncGetWMSLayer(::grpc::ClientContext* context, const ::smart3dmap::v1::GetWMSLayerRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::smart3dmap::v1::WMSLayer>>(AsyncGetWMSLayerRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::smart3dmap::v1::WMSLayer>> PrepareAsyncGetWMSLayer(::grpc::ClientContext* context, const ::smart3dmap::v1::GetWMSLayerRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::smart3dmap::v1::WMSLayer>>(PrepareAsyncGetWMSLayerRaw(context, request, cq));
    }
    ::grpc::Status UploadLegendPicture(::grpc::ClientContext* context, const ::smart3dmap::v1::UploadLegendPictureRequest& request, ::smart3dmap::v1::UploadLegendPictureResponse* response) override;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::smart3dmap::v1::UploadLegendPictureResponse>> AsyncUploadLegendPicture(::grpc::ClientContext* context, const ::smart3dmap::v1::UploadLegendPictureRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::smart3dmap::v1::UploadLegendPictureResponse>>(AsyncUploadLegendPictureRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::smart3dmap::v1::UploadLegendPictureResponse>> PrepareAsyncUploadLegendPicture(::grpc::ClientContext* context, const ::smart3dmap::v1::UploadLegendPictureRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::smart3dmap::v1::UploadLegendPictureResponse>>(PrepareAsyncUploadLegendPictureRaw(context, request, cq));
    }
    class experimental_async final :
      public StubInterface::experimental_async_interface {
     public:
      void RegisterSDB(::grpc::ClientContext* context, const ::smart3dmap::v1::RegisterSDBRequest* request, ::smart3dmap::v1::RegisterSDBResponse* response, std::function<void(::grpc::Status)>) override;
      #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      void RegisterSDB(::grpc::ClientContext* context, const ::smart3dmap::v1::RegisterSDBRequest* request, ::smart3dmap::v1::RegisterSDBResponse* response, ::grpc::ClientUnaryReactor* reactor) override;
      #else
      void RegisterSDB(::grpc::ClientContext* context, const ::smart3dmap::v1::RegisterSDBRequest* request, ::smart3dmap::v1::RegisterSDBResponse* response, ::grpc::experimental::ClientUnaryReactor* reactor) override;
      #endif
      void PublishMap(::grpc::ClientContext* context, const ::smart3dmap::v1::PublishMapRequest* request, ::smart3dmap::v1::WMSMap* response, std::function<void(::grpc::Status)>) override;
      #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      void PublishMap(::grpc::ClientContext* context, const ::smart3dmap::v1::PublishMapRequest* request, ::smart3dmap::v1::WMSMap* response, ::grpc::ClientUnaryReactor* reactor) override;
      #else
      void PublishMap(::grpc::ClientContext* context, const ::smart3dmap::v1::PublishMapRequest* request, ::smart3dmap::v1::WMSMap* response, ::grpc::experimental::ClientUnaryReactor* reactor) override;
      #endif
      void UnpublishMap(::grpc::ClientContext* context, const ::smart3dmap::v1::UnpublishMapRequest* request, ::smart3dmap::v1::UnpublishMapResponse* response, std::function<void(::grpc::Status)>) override;
      #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      void UnpublishMap(::grpc::ClientContext* context, const ::smart3dmap::v1::UnpublishMapRequest* request, ::smart3dmap::v1::UnpublishMapResponse* response, ::grpc::ClientUnaryReactor* reactor) override;
      #else
      void UnpublishMap(::grpc::ClientContext* context, const ::smart3dmap::v1::UnpublishMapRequest* request, ::smart3dmap::v1::UnpublishMapResponse* response, ::grpc::experimental::ClientUnaryReactor* reactor) override;
      #endif
      void IsMapPublished(::grpc::ClientContext* context, const ::smart3dmap::v1::IsMapPublishedRequest* request, ::google::protobuf::BoolValue* response, std::function<void(::grpc::Status)>) override;
      #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      void IsMapPublished(::grpc::ClientContext* context, const ::smart3dmap::v1::IsMapPublishedRequest* request, ::google::protobuf::BoolValue* response, ::grpc::ClientUnaryReactor* reactor) override;
      #else
      void IsMapPublished(::grpc::ClientContext* context, const ::smart3dmap::v1::IsMapPublishedRequest* request, ::google::protobuf::BoolValue* response, ::grpc::experimental::ClientUnaryReactor* reactor) override;
      #endif
      void GetWMSMap(::grpc::ClientContext* context, const ::smart3dmap::v1::GetWMSMapRequest* request, ::smart3dmap::v1::WMSMap* response, std::function<void(::grpc::Status)>) override;
      #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      void GetWMSMap(::grpc::ClientContext* context, const ::smart3dmap::v1::GetWMSMapRequest* request, ::smart3dmap::v1::WMSMap* response, ::grpc::ClientUnaryReactor* reactor) override;
      #else
      void GetWMSMap(::grpc::ClientContext* context, const ::smart3dmap::v1::GetWMSMapRequest* request, ::smart3dmap::v1::WMSMap* response, ::grpc::experimental::ClientUnaryReactor* reactor) override;
      #endif
      void GetWMSLayer(::grpc::ClientContext* context, const ::smart3dmap::v1::GetWMSLayerRequest* request, ::smart3dmap::v1::WMSLayer* response, std::function<void(::grpc::Status)>) override;
      #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      void GetWMSLayer(::grpc::ClientContext* context, const ::smart3dmap::v1::GetWMSLayerRequest* request, ::smart3dmap::v1::WMSLayer* response, ::grpc::ClientUnaryReactor* reactor) override;
      #else
      void GetWMSLayer(::grpc::ClientContext* context, const ::smart3dmap::v1::GetWMSLayerRequest* request, ::smart3dmap::v1::WMSLayer* response, ::grpc::experimental::ClientUnaryReactor* reactor) override;
      #endif
      void UploadLegendPicture(::grpc::ClientContext* context, const ::smart3dmap::v1::UploadLegendPictureRequest* request, ::smart3dmap::v1::UploadLegendPictureResponse* response, std::function<void(::grpc::Status)>) override;
      #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      void UploadLegendPicture(::grpc::ClientContext* context, const ::smart3dmap::v1::UploadLegendPictureRequest* request, ::smart3dmap::v1::UploadLegendPictureResponse* response, ::grpc::ClientUnaryReactor* reactor) override;
      #else
      void UploadLegendPicture(::grpc::ClientContext* context, const ::smart3dmap::v1::UploadLegendPictureRequest* request, ::smart3dmap::v1::UploadLegendPictureResponse* response, ::grpc::experimental::ClientUnaryReactor* reactor) override;
      #endif
     private:
      friend class Stub;
      explicit experimental_async(Stub* stub): stub_(stub) { }
      Stub* stub() { return stub_; }
      Stub* stub_;
    };
    class experimental_async_interface* experimental_async() override { return &async_stub_; }

   private:
    std::shared_ptr< ::grpc::ChannelInterface> channel_;
    class experimental_async async_stub_{this};
    ::grpc::ClientAsyncResponseReader< ::smart3dmap::v1::RegisterSDBResponse>* AsyncRegisterSDBRaw(::grpc::ClientContext* context, const ::smart3dmap::v1::RegisterSDBRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::smart3dmap::v1::RegisterSDBResponse>* PrepareAsyncRegisterSDBRaw(::grpc::ClientContext* context, const ::smart3dmap::v1::RegisterSDBRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::smart3dmap::v1::WMSMap>* AsyncPublishMapRaw(::grpc::ClientContext* context, const ::smart3dmap::v1::PublishMapRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::smart3dmap::v1::WMSMap>* PrepareAsyncPublishMapRaw(::grpc::ClientContext* context, const ::smart3dmap::v1::PublishMapRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::smart3dmap::v1::UnpublishMapResponse>* AsyncUnpublishMapRaw(::grpc::ClientContext* context, const ::smart3dmap::v1::UnpublishMapRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::smart3dmap::v1::UnpublishMapResponse>* PrepareAsyncUnpublishMapRaw(::grpc::ClientContext* context, const ::smart3dmap::v1::UnpublishMapRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::google::protobuf::BoolValue>* AsyncIsMapPublishedRaw(::grpc::ClientContext* context, const ::smart3dmap::v1::IsMapPublishedRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::google::protobuf::BoolValue>* PrepareAsyncIsMapPublishedRaw(::grpc::ClientContext* context, const ::smart3dmap::v1::IsMapPublishedRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::smart3dmap::v1::WMSMap>* AsyncGetWMSMapRaw(::grpc::ClientContext* context, const ::smart3dmap::v1::GetWMSMapRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::smart3dmap::v1::WMSMap>* PrepareAsyncGetWMSMapRaw(::grpc::ClientContext* context, const ::smart3dmap::v1::GetWMSMapRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::smart3dmap::v1::WMSLayer>* AsyncGetWMSLayerRaw(::grpc::ClientContext* context, const ::smart3dmap::v1::GetWMSLayerRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::smart3dmap::v1::WMSLayer>* PrepareAsyncGetWMSLayerRaw(::grpc::ClientContext* context, const ::smart3dmap::v1::GetWMSLayerRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::smart3dmap::v1::UploadLegendPictureResponse>* AsyncUploadLegendPictureRaw(::grpc::ClientContext* context, const ::smart3dmap::v1::UploadLegendPictureRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::smart3dmap::v1::UploadLegendPictureResponse>* PrepareAsyncUploadLegendPictureRaw(::grpc::ClientContext* context, const ::smart3dmap::v1::UploadLegendPictureRequest& request, ::grpc::CompletionQueue* cq) override;
    const ::grpc::internal::RpcMethod rpcmethod_RegisterSDB_;
    const ::grpc::internal::RpcMethod rpcmethod_PublishMap_;
    const ::grpc::internal::RpcMethod rpcmethod_UnpublishMap_;
    const ::grpc::internal::RpcMethod rpcmethod_IsMapPublished_;
    const ::grpc::internal::RpcMethod rpcmethod_GetWMSMap_;
    const ::grpc::internal::RpcMethod rpcmethod_GetWMSLayer_;
    const ::grpc::internal::RpcMethod rpcmethod_UploadLegendPicture_;
  };
  static std::unique_ptr<Stub> NewStub(const std::shared_ptr< ::grpc::ChannelInterface>& channel, const ::grpc::StubOptions& options = ::grpc::StubOptions());

  class Service : public ::grpc::Service {
   public:
    Service();
    virtual ~Service();
    // 注册空间数据库
    virtual ::grpc::Status RegisterSDB(::grpc::ServerContext* context, const ::smart3dmap::v1::RegisterSDBRequest* request, ::smart3dmap::v1::RegisterSDBResponse* response);
    // 发布空间数据库中的某个地图
    virtual ::grpc::Status PublishMap(::grpc::ServerContext* context, const ::smart3dmap::v1::PublishMapRequest* request, ::smart3dmap::v1::WMSMap* response);
    // 撤销发布的地图
    virtual ::grpc::Status UnpublishMap(::grpc::ServerContext* context, const ::smart3dmap::v1::UnpublishMapRequest* request, ::smart3dmap::v1::UnpublishMapResponse* response);
    // 检查地图是否已发布
    virtual ::grpc::Status IsMapPublished(::grpc::ServerContext* context, const ::smart3dmap::v1::IsMapPublishedRequest* request, ::google::protobuf::BoolValue* response);
    // 获取地图的URL
    virtual ::grpc::Status GetWMSMap(::grpc::ServerContext* context, const ::smart3dmap::v1::GetWMSMapRequest* request, ::smart3dmap::v1::WMSMap* response);
    // 获取地图中图层的URL
    virtual ::grpc::Status GetWMSLayer(::grpc::ServerContext* context, const ::smart3dmap::v1::GetWMSLayerRequest* request, ::smart3dmap::v1::WMSLayer* response);
    // 上传图例文件。仅支持P*.png图片。
    virtual ::grpc::Status UploadLegendPicture(::grpc::ServerContext* context, const ::smart3dmap::v1::UploadLegendPictureRequest* request, ::smart3dmap::v1::UploadLegendPictureResponse* response);
  };
  template <class BaseClass>
  class WithAsyncMethod_RegisterSDB : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithAsyncMethod_RegisterSDB() {
      ::grpc::Service::MarkMethodAsync(0);
    }
    ~WithAsyncMethod_RegisterSDB() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status RegisterSDB(::grpc::ServerContext* /*context*/, const ::smart3dmap::v1::RegisterSDBRequest* /*request*/, ::smart3dmap::v1::RegisterSDBResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestRegisterSDB(::grpc::ServerContext* context, ::smart3dmap::v1::RegisterSDBRequest* request, ::grpc::ServerAsyncResponseWriter< ::smart3dmap::v1::RegisterSDBResponse>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(0, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithAsyncMethod_PublishMap : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithAsyncMethod_PublishMap() {
      ::grpc::Service::MarkMethodAsync(1);
    }
    ~WithAsyncMethod_PublishMap() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status PublishMap(::grpc::ServerContext* /*context*/, const ::smart3dmap::v1::PublishMapRequest* /*request*/, ::smart3dmap::v1::WMSMap* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestPublishMap(::grpc::ServerContext* context, ::smart3dmap::v1::PublishMapRequest* request, ::grpc::ServerAsyncResponseWriter< ::smart3dmap::v1::WMSMap>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(1, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithAsyncMethod_UnpublishMap : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithAsyncMethod_UnpublishMap() {
      ::grpc::Service::MarkMethodAsync(2);
    }
    ~WithAsyncMethod_UnpublishMap() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status UnpublishMap(::grpc::ServerContext* /*context*/, const ::smart3dmap::v1::UnpublishMapRequest* /*request*/, ::smart3dmap::v1::UnpublishMapResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestUnpublishMap(::grpc::ServerContext* context, ::smart3dmap::v1::UnpublishMapRequest* request, ::grpc::ServerAsyncResponseWriter< ::smart3dmap::v1::UnpublishMapResponse>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(2, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithAsyncMethod_IsMapPublished : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithAsyncMethod_IsMapPublished() {
      ::grpc::Service::MarkMethodAsync(3);
    }
    ~WithAsyncMethod_IsMapPublished() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status IsMapPublished(::grpc::ServerContext* /*context*/, const ::smart3dmap::v1::IsMapPublishedRequest* /*request*/, ::google::protobuf::BoolValue* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestIsMapPublished(::grpc::ServerContext* context, ::smart3dmap::v1::IsMapPublishedRequest* request, ::grpc::ServerAsyncResponseWriter< ::google::protobuf::BoolValue>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(3, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithAsyncMethod_GetWMSMap : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithAsyncMethod_GetWMSMap() {
      ::grpc::Service::MarkMethodAsync(4);
    }
    ~WithAsyncMethod_GetWMSMap() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status GetWMSMap(::grpc::ServerContext* /*context*/, const ::smart3dmap::v1::GetWMSMapRequest* /*request*/, ::smart3dmap::v1::WMSMap* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestGetWMSMap(::grpc::ServerContext* context, ::smart3dmap::v1::GetWMSMapRequest* request, ::grpc::ServerAsyncResponseWriter< ::smart3dmap::v1::WMSMap>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(4, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithAsyncMethod_GetWMSLayer : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithAsyncMethod_GetWMSLayer() {
      ::grpc::Service::MarkMethodAsync(5);
    }
    ~WithAsyncMethod_GetWMSLayer() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status GetWMSLayer(::grpc::ServerContext* /*context*/, const ::smart3dmap::v1::GetWMSLayerRequest* /*request*/, ::smart3dmap::v1::WMSLayer* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestGetWMSLayer(::grpc::ServerContext* context, ::smart3dmap::v1::GetWMSLayerRequest* request, ::grpc::ServerAsyncResponseWriter< ::smart3dmap::v1::WMSLayer>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(5, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithAsyncMethod_UploadLegendPicture : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithAsyncMethod_UploadLegendPicture() {
      ::grpc::Service::MarkMethodAsync(6);
    }
    ~WithAsyncMethod_UploadLegendPicture() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status UploadLegendPicture(::grpc::ServerContext* /*context*/, const ::smart3dmap::v1::UploadLegendPictureRequest* /*request*/, ::smart3dmap::v1::UploadLegendPictureResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestUploadLegendPicture(::grpc::ServerContext* context, ::smart3dmap::v1::UploadLegendPictureRequest* request, ::grpc::ServerAsyncResponseWriter< ::smart3dmap::v1::UploadLegendPictureResponse>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(6, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  typedef WithAsyncMethod_RegisterSDB<WithAsyncMethod_PublishMap<WithAsyncMethod_UnpublishMap<WithAsyncMethod_IsMapPublished<WithAsyncMethod_GetWMSMap<WithAsyncMethod_GetWMSLayer<WithAsyncMethod_UploadLegendPicture<Service > > > > > > > AsyncService;
  template <class BaseClass>
  class ExperimentalWithCallbackMethod_RegisterSDB : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    ExperimentalWithCallbackMethod_RegisterSDB() {
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      ::grpc::Service::
    #else
      ::grpc::Service::experimental().
    #endif
        MarkMethodCallback(0,
          new ::grpc::internal::CallbackUnaryHandler< ::smart3dmap::v1::RegisterSDBRequest, ::smart3dmap::v1::RegisterSDBResponse>(
            [this](
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
                   ::grpc::CallbackServerContext*
    #else
                   ::grpc::experimental::CallbackServerContext*
    #endif
                     context, const ::smart3dmap::v1::RegisterSDBRequest* request, ::smart3dmap::v1::RegisterSDBResponse* response) { return this->RegisterSDB(context, request, response); }));}
    void SetMessageAllocatorFor_RegisterSDB(
        ::grpc::experimental::MessageAllocator< ::smart3dmap::v1::RegisterSDBRequest, ::smart3dmap::v1::RegisterSDBResponse>* allocator) {
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      ::grpc::internal::MethodHandler* const handler = ::grpc::Service::GetHandler(0);
    #else
      ::grpc::internal::MethodHandler* const handler = ::grpc::Service::experimental().GetHandler(0);
    #endif
      static_cast<::grpc::internal::CallbackUnaryHandler< ::smart3dmap::v1::RegisterSDBRequest, ::smart3dmap::v1::RegisterSDBResponse>*>(handler)
              ->SetMessageAllocator(allocator);
    }
    ~ExperimentalWithCallbackMethod_RegisterSDB() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status RegisterSDB(::grpc::ServerContext* /*context*/, const ::smart3dmap::v1::RegisterSDBRequest* /*request*/, ::smart3dmap::v1::RegisterSDBResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
    virtual ::grpc::ServerUnaryReactor* RegisterSDB(
      ::grpc::CallbackServerContext* /*context*/, const ::smart3dmap::v1::RegisterSDBRequest* /*request*/, ::smart3dmap::v1::RegisterSDBResponse* /*response*/)
    #else
    virtual ::grpc::experimental::ServerUnaryReactor* RegisterSDB(
      ::grpc::experimental::CallbackServerContext* /*context*/, const ::smart3dmap::v1::RegisterSDBRequest* /*request*/, ::smart3dmap::v1::RegisterSDBResponse* /*response*/)
    #endif
      { return nullptr; }
  };
  template <class BaseClass>
  class ExperimentalWithCallbackMethod_PublishMap : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    ExperimentalWithCallbackMethod_PublishMap() {
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      ::grpc::Service::
    #else
      ::grpc::Service::experimental().
    #endif
        MarkMethodCallback(1,
          new ::grpc::internal::CallbackUnaryHandler< ::smart3dmap::v1::PublishMapRequest, ::smart3dmap::v1::WMSMap>(
            [this](
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
                   ::grpc::CallbackServerContext*
    #else
                   ::grpc::experimental::CallbackServerContext*
    #endif
                     context, const ::smart3dmap::v1::PublishMapRequest* request, ::smart3dmap::v1::WMSMap* response) { return this->PublishMap(context, request, response); }));}
    void SetMessageAllocatorFor_PublishMap(
        ::grpc::experimental::MessageAllocator< ::smart3dmap::v1::PublishMapRequest, ::smart3dmap::v1::WMSMap>* allocator) {
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      ::grpc::internal::MethodHandler* const handler = ::grpc::Service::GetHandler(1);
    #else
      ::grpc::internal::MethodHandler* const handler = ::grpc::Service::experimental().GetHandler(1);
    #endif
      static_cast<::grpc::internal::CallbackUnaryHandler< ::smart3dmap::v1::PublishMapRequest, ::smart3dmap::v1::WMSMap>*>(handler)
              ->SetMessageAllocator(allocator);
    }
    ~ExperimentalWithCallbackMethod_PublishMap() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status PublishMap(::grpc::ServerContext* /*context*/, const ::smart3dmap::v1::PublishMapRequest* /*request*/, ::smart3dmap::v1::WMSMap* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
    virtual ::grpc::ServerUnaryReactor* PublishMap(
      ::grpc::CallbackServerContext* /*context*/, const ::smart3dmap::v1::PublishMapRequest* /*request*/, ::smart3dmap::v1::WMSMap* /*response*/)
    #else
    virtual ::grpc::experimental::ServerUnaryReactor* PublishMap(
      ::grpc::experimental::CallbackServerContext* /*context*/, const ::smart3dmap::v1::PublishMapRequest* /*request*/, ::smart3dmap::v1::WMSMap* /*response*/)
    #endif
      { return nullptr; }
  };
  template <class BaseClass>
  class ExperimentalWithCallbackMethod_UnpublishMap : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    ExperimentalWithCallbackMethod_UnpublishMap() {
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      ::grpc::Service::
    #else
      ::grpc::Service::experimental().
    #endif
        MarkMethodCallback(2,
          new ::grpc::internal::CallbackUnaryHandler< ::smart3dmap::v1::UnpublishMapRequest, ::smart3dmap::v1::UnpublishMapResponse>(
            [this](
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
                   ::grpc::CallbackServerContext*
    #else
                   ::grpc::experimental::CallbackServerContext*
    #endif
                     context, const ::smart3dmap::v1::UnpublishMapRequest* request, ::smart3dmap::v1::UnpublishMapResponse* response) { return this->UnpublishMap(context, request, response); }));}
    void SetMessageAllocatorFor_UnpublishMap(
        ::grpc::experimental::MessageAllocator< ::smart3dmap::v1::UnpublishMapRequest, ::smart3dmap::v1::UnpublishMapResponse>* allocator) {
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      ::grpc::internal::MethodHandler* const handler = ::grpc::Service::GetHandler(2);
    #else
      ::grpc::internal::MethodHandler* const handler = ::grpc::Service::experimental().GetHandler(2);
    #endif
      static_cast<::grpc::internal::CallbackUnaryHandler< ::smart3dmap::v1::UnpublishMapRequest, ::smart3dmap::v1::UnpublishMapResponse>*>(handler)
              ->SetMessageAllocator(allocator);
    }
    ~ExperimentalWithCallbackMethod_UnpublishMap() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status UnpublishMap(::grpc::ServerContext* /*context*/, const ::smart3dmap::v1::UnpublishMapRequest* /*request*/, ::smart3dmap::v1::UnpublishMapResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
    virtual ::grpc::ServerUnaryReactor* UnpublishMap(
      ::grpc::CallbackServerContext* /*context*/, const ::smart3dmap::v1::UnpublishMapRequest* /*request*/, ::smart3dmap::v1::UnpublishMapResponse* /*response*/)
    #else
    virtual ::grpc::experimental::ServerUnaryReactor* UnpublishMap(
      ::grpc::experimental::CallbackServerContext* /*context*/, const ::smart3dmap::v1::UnpublishMapRequest* /*request*/, ::smart3dmap::v1::UnpublishMapResponse* /*response*/)
    #endif
      { return nullptr; }
  };
  template <class BaseClass>
  class ExperimentalWithCallbackMethod_IsMapPublished : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    ExperimentalWithCallbackMethod_IsMapPublished() {
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      ::grpc::Service::
    #else
      ::grpc::Service::experimental().
    #endif
        MarkMethodCallback(3,
          new ::grpc::internal::CallbackUnaryHandler< ::smart3dmap::v1::IsMapPublishedRequest, ::google::protobuf::BoolValue>(
            [this](
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
                   ::grpc::CallbackServerContext*
    #else
                   ::grpc::experimental::CallbackServerContext*
    #endif
                     context, const ::smart3dmap::v1::IsMapPublishedRequest* request, ::google::protobuf::BoolValue* response) { return this->IsMapPublished(context, request, response); }));}
    void SetMessageAllocatorFor_IsMapPublished(
        ::grpc::experimental::MessageAllocator< ::smart3dmap::v1::IsMapPublishedRequest, ::google::protobuf::BoolValue>* allocator) {
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      ::grpc::internal::MethodHandler* const handler = ::grpc::Service::GetHandler(3);
    #else
      ::grpc::internal::MethodHandler* const handler = ::grpc::Service::experimental().GetHandler(3);
    #endif
      static_cast<::grpc::internal::CallbackUnaryHandler< ::smart3dmap::v1::IsMapPublishedRequest, ::google::protobuf::BoolValue>*>(handler)
              ->SetMessageAllocator(allocator);
    }
    ~ExperimentalWithCallbackMethod_IsMapPublished() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status IsMapPublished(::grpc::ServerContext* /*context*/, const ::smart3dmap::v1::IsMapPublishedRequest* /*request*/, ::google::protobuf::BoolValue* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
    virtual ::grpc::ServerUnaryReactor* IsMapPublished(
      ::grpc::CallbackServerContext* /*context*/, const ::smart3dmap::v1::IsMapPublishedRequest* /*request*/, ::google::protobuf::BoolValue* /*response*/)
    #else
    virtual ::grpc::experimental::ServerUnaryReactor* IsMapPublished(
      ::grpc::experimental::CallbackServerContext* /*context*/, const ::smart3dmap::v1::IsMapPublishedRequest* /*request*/, ::google::protobuf::BoolValue* /*response*/)
    #endif
      { return nullptr; }
  };
  template <class BaseClass>
  class ExperimentalWithCallbackMethod_GetWMSMap : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    ExperimentalWithCallbackMethod_GetWMSMap() {
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      ::grpc::Service::
    #else
      ::grpc::Service::experimental().
    #endif
        MarkMethodCallback(4,
          new ::grpc::internal::CallbackUnaryHandler< ::smart3dmap::v1::GetWMSMapRequest, ::smart3dmap::v1::WMSMap>(
            [this](
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
                   ::grpc::CallbackServerContext*
    #else
                   ::grpc::experimental::CallbackServerContext*
    #endif
                     context, const ::smart3dmap::v1::GetWMSMapRequest* request, ::smart3dmap::v1::WMSMap* response) { return this->GetWMSMap(context, request, response); }));}
    void SetMessageAllocatorFor_GetWMSMap(
        ::grpc::experimental::MessageAllocator< ::smart3dmap::v1::GetWMSMapRequest, ::smart3dmap::v1::WMSMap>* allocator) {
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      ::grpc::internal::MethodHandler* const handler = ::grpc::Service::GetHandler(4);
    #else
      ::grpc::internal::MethodHandler* const handler = ::grpc::Service::experimental().GetHandler(4);
    #endif
      static_cast<::grpc::internal::CallbackUnaryHandler< ::smart3dmap::v1::GetWMSMapRequest, ::smart3dmap::v1::WMSMap>*>(handler)
              ->SetMessageAllocator(allocator);
    }
    ~ExperimentalWithCallbackMethod_GetWMSMap() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status GetWMSMap(::grpc::ServerContext* /*context*/, const ::smart3dmap::v1::GetWMSMapRequest* /*request*/, ::smart3dmap::v1::WMSMap* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
    virtual ::grpc::ServerUnaryReactor* GetWMSMap(
      ::grpc::CallbackServerContext* /*context*/, const ::smart3dmap::v1::GetWMSMapRequest* /*request*/, ::smart3dmap::v1::WMSMap* /*response*/)
    #else
    virtual ::grpc::experimental::ServerUnaryReactor* GetWMSMap(
      ::grpc::experimental::CallbackServerContext* /*context*/, const ::smart3dmap::v1::GetWMSMapRequest* /*request*/, ::smart3dmap::v1::WMSMap* /*response*/)
    #endif
      { return nullptr; }
  };
  template <class BaseClass>
  class ExperimentalWithCallbackMethod_GetWMSLayer : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    ExperimentalWithCallbackMethod_GetWMSLayer() {
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      ::grpc::Service::
    #else
      ::grpc::Service::experimental().
    #endif
        MarkMethodCallback(5,
          new ::grpc::internal::CallbackUnaryHandler< ::smart3dmap::v1::GetWMSLayerRequest, ::smart3dmap::v1::WMSLayer>(
            [this](
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
                   ::grpc::CallbackServerContext*
    #else
                   ::grpc::experimental::CallbackServerContext*
    #endif
                     context, const ::smart3dmap::v1::GetWMSLayerRequest* request, ::smart3dmap::v1::WMSLayer* response) { return this->GetWMSLayer(context, request, response); }));}
    void SetMessageAllocatorFor_GetWMSLayer(
        ::grpc::experimental::MessageAllocator< ::smart3dmap::v1::GetWMSLayerRequest, ::smart3dmap::v1::WMSLayer>* allocator) {
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      ::grpc::internal::MethodHandler* const handler = ::grpc::Service::GetHandler(5);
    #else
      ::grpc::internal::MethodHandler* const handler = ::grpc::Service::experimental().GetHandler(5);
    #endif
      static_cast<::grpc::internal::CallbackUnaryHandler< ::smart3dmap::v1::GetWMSLayerRequest, ::smart3dmap::v1::WMSLayer>*>(handler)
              ->SetMessageAllocator(allocator);
    }
    ~ExperimentalWithCallbackMethod_GetWMSLayer() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status GetWMSLayer(::grpc::ServerContext* /*context*/, const ::smart3dmap::v1::GetWMSLayerRequest* /*request*/, ::smart3dmap::v1::WMSLayer* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
    virtual ::grpc::ServerUnaryReactor* GetWMSLayer(
      ::grpc::CallbackServerContext* /*context*/, const ::smart3dmap::v1::GetWMSLayerRequest* /*request*/, ::smart3dmap::v1::WMSLayer* /*response*/)
    #else
    virtual ::grpc::experimental::ServerUnaryReactor* GetWMSLayer(
      ::grpc::experimental::CallbackServerContext* /*context*/, const ::smart3dmap::v1::GetWMSLayerRequest* /*request*/, ::smart3dmap::v1::WMSLayer* /*response*/)
    #endif
      { return nullptr; }
  };
  template <class BaseClass>
  class ExperimentalWithCallbackMethod_UploadLegendPicture : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    ExperimentalWithCallbackMethod_UploadLegendPicture() {
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      ::grpc::Service::
    #else
      ::grpc::Service::experimental().
    #endif
        MarkMethodCallback(6,
          new ::grpc::internal::CallbackUnaryHandler< ::smart3dmap::v1::UploadLegendPictureRequest, ::smart3dmap::v1::UploadLegendPictureResponse>(
            [this](
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
                   ::grpc::CallbackServerContext*
    #else
                   ::grpc::experimental::CallbackServerContext*
    #endif
                     context, const ::smart3dmap::v1::UploadLegendPictureRequest* request, ::smart3dmap::v1::UploadLegendPictureResponse* response) { return this->UploadLegendPicture(context, request, response); }));}
    void SetMessageAllocatorFor_UploadLegendPicture(
        ::grpc::experimental::MessageAllocator< ::smart3dmap::v1::UploadLegendPictureRequest, ::smart3dmap::v1::UploadLegendPictureResponse>* allocator) {
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      ::grpc::internal::MethodHandler* const handler = ::grpc::Service::GetHandler(6);
    #else
      ::grpc::internal::MethodHandler* const handler = ::grpc::Service::experimental().GetHandler(6);
    #endif
      static_cast<::grpc::internal::CallbackUnaryHandler< ::smart3dmap::v1::UploadLegendPictureRequest, ::smart3dmap::v1::UploadLegendPictureResponse>*>(handler)
              ->SetMessageAllocator(allocator);
    }
    ~ExperimentalWithCallbackMethod_UploadLegendPicture() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status UploadLegendPicture(::grpc::ServerContext* /*context*/, const ::smart3dmap::v1::UploadLegendPictureRequest* /*request*/, ::smart3dmap::v1::UploadLegendPictureResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
    virtual ::grpc::ServerUnaryReactor* UploadLegendPicture(
      ::grpc::CallbackServerContext* /*context*/, const ::smart3dmap::v1::UploadLegendPictureRequest* /*request*/, ::smart3dmap::v1::UploadLegendPictureResponse* /*response*/)
    #else
    virtual ::grpc::experimental::ServerUnaryReactor* UploadLegendPicture(
      ::grpc::experimental::CallbackServerContext* /*context*/, const ::smart3dmap::v1::UploadLegendPictureRequest* /*request*/, ::smart3dmap::v1::UploadLegendPictureResponse* /*response*/)
    #endif
      { return nullptr; }
  };
  #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
  typedef ExperimentalWithCallbackMethod_RegisterSDB<ExperimentalWithCallbackMethod_PublishMap<ExperimentalWithCallbackMethod_UnpublishMap<ExperimentalWithCallbackMethod_IsMapPublished<ExperimentalWithCallbackMethod_GetWMSMap<ExperimentalWithCallbackMethod_GetWMSLayer<ExperimentalWithCallbackMethod_UploadLegendPicture<Service > > > > > > > CallbackService;
  #endif

  typedef ExperimentalWithCallbackMethod_RegisterSDB<ExperimentalWithCallbackMethod_PublishMap<ExperimentalWithCallbackMethod_UnpublishMap<ExperimentalWithCallbackMethod_IsMapPublished<ExperimentalWithCallbackMethod_GetWMSMap<ExperimentalWithCallbackMethod_GetWMSLayer<ExperimentalWithCallbackMethod_UploadLegendPicture<Service > > > > > > > ExperimentalCallbackService;
  template <class BaseClass>
  class WithGenericMethod_RegisterSDB : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithGenericMethod_RegisterSDB() {
      ::grpc::Service::MarkMethodGeneric(0);
    }
    ~WithGenericMethod_RegisterSDB() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status RegisterSDB(::grpc::ServerContext* /*context*/, const ::smart3dmap::v1::RegisterSDBRequest* /*request*/, ::smart3dmap::v1::RegisterSDBResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithGenericMethod_PublishMap : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithGenericMethod_PublishMap() {
      ::grpc::Service::MarkMethodGeneric(1);
    }
    ~WithGenericMethod_PublishMap() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status PublishMap(::grpc::ServerContext* /*context*/, const ::smart3dmap::v1::PublishMapRequest* /*request*/, ::smart3dmap::v1::WMSMap* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithGenericMethod_UnpublishMap : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithGenericMethod_UnpublishMap() {
      ::grpc::Service::MarkMethodGeneric(2);
    }
    ~WithGenericMethod_UnpublishMap() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status UnpublishMap(::grpc::ServerContext* /*context*/, const ::smart3dmap::v1::UnpublishMapRequest* /*request*/, ::smart3dmap::v1::UnpublishMapResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithGenericMethod_IsMapPublished : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithGenericMethod_IsMapPublished() {
      ::grpc::Service::MarkMethodGeneric(3);
    }
    ~WithGenericMethod_IsMapPublished() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status IsMapPublished(::grpc::ServerContext* /*context*/, const ::smart3dmap::v1::IsMapPublishedRequest* /*request*/, ::google::protobuf::BoolValue* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithGenericMethod_GetWMSMap : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithGenericMethod_GetWMSMap() {
      ::grpc::Service::MarkMethodGeneric(4);
    }
    ~WithGenericMethod_GetWMSMap() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status GetWMSMap(::grpc::ServerContext* /*context*/, const ::smart3dmap::v1::GetWMSMapRequest* /*request*/, ::smart3dmap::v1::WMSMap* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithGenericMethod_GetWMSLayer : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithGenericMethod_GetWMSLayer() {
      ::grpc::Service::MarkMethodGeneric(5);
    }
    ~WithGenericMethod_GetWMSLayer() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status GetWMSLayer(::grpc::ServerContext* /*context*/, const ::smart3dmap::v1::GetWMSLayerRequest* /*request*/, ::smart3dmap::v1::WMSLayer* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithGenericMethod_UploadLegendPicture : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithGenericMethod_UploadLegendPicture() {
      ::grpc::Service::MarkMethodGeneric(6);
    }
    ~WithGenericMethod_UploadLegendPicture() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status UploadLegendPicture(::grpc::ServerContext* /*context*/, const ::smart3dmap::v1::UploadLegendPictureRequest* /*request*/, ::smart3dmap::v1::UploadLegendPictureResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithRawMethod_RegisterSDB : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawMethod_RegisterSDB() {
      ::grpc::Service::MarkMethodRaw(0);
    }
    ~WithRawMethod_RegisterSDB() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status RegisterSDB(::grpc::ServerContext* /*context*/, const ::smart3dmap::v1::RegisterSDBRequest* /*request*/, ::smart3dmap::v1::RegisterSDBResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestRegisterSDB(::grpc::ServerContext* context, ::grpc::ByteBuffer* request, ::grpc::ServerAsyncResponseWriter< ::grpc::ByteBuffer>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(0, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithRawMethod_PublishMap : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawMethod_PublishMap() {
      ::grpc::Service::MarkMethodRaw(1);
    }
    ~WithRawMethod_PublishMap() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status PublishMap(::grpc::ServerContext* /*context*/, const ::smart3dmap::v1::PublishMapRequest* /*request*/, ::smart3dmap::v1::WMSMap* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestPublishMap(::grpc::ServerContext* context, ::grpc::ByteBuffer* request, ::grpc::ServerAsyncResponseWriter< ::grpc::ByteBuffer>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(1, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithRawMethod_UnpublishMap : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawMethod_UnpublishMap() {
      ::grpc::Service::MarkMethodRaw(2);
    }
    ~WithRawMethod_UnpublishMap() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status UnpublishMap(::grpc::ServerContext* /*context*/, const ::smart3dmap::v1::UnpublishMapRequest* /*request*/, ::smart3dmap::v1::UnpublishMapResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestUnpublishMap(::grpc::ServerContext* context, ::grpc::ByteBuffer* request, ::grpc::ServerAsyncResponseWriter< ::grpc::ByteBuffer>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(2, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithRawMethod_IsMapPublished : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawMethod_IsMapPublished() {
      ::grpc::Service::MarkMethodRaw(3);
    }
    ~WithRawMethod_IsMapPublished() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status IsMapPublished(::grpc::ServerContext* /*context*/, const ::smart3dmap::v1::IsMapPublishedRequest* /*request*/, ::google::protobuf::BoolValue* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestIsMapPublished(::grpc::ServerContext* context, ::grpc::ByteBuffer* request, ::grpc::ServerAsyncResponseWriter< ::grpc::ByteBuffer>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(3, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithRawMethod_GetWMSMap : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawMethod_GetWMSMap() {
      ::grpc::Service::MarkMethodRaw(4);
    }
    ~WithRawMethod_GetWMSMap() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status GetWMSMap(::grpc::ServerContext* /*context*/, const ::smart3dmap::v1::GetWMSMapRequest* /*request*/, ::smart3dmap::v1::WMSMap* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestGetWMSMap(::grpc::ServerContext* context, ::grpc::ByteBuffer* request, ::grpc::ServerAsyncResponseWriter< ::grpc::ByteBuffer>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(4, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithRawMethod_GetWMSLayer : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawMethod_GetWMSLayer() {
      ::grpc::Service::MarkMethodRaw(5);
    }
    ~WithRawMethod_GetWMSLayer() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status GetWMSLayer(::grpc::ServerContext* /*context*/, const ::smart3dmap::v1::GetWMSLayerRequest* /*request*/, ::smart3dmap::v1::WMSLayer* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestGetWMSLayer(::grpc::ServerContext* context, ::grpc::ByteBuffer* request, ::grpc::ServerAsyncResponseWriter< ::grpc::ByteBuffer>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(5, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithRawMethod_UploadLegendPicture : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawMethod_UploadLegendPicture() {
      ::grpc::Service::MarkMethodRaw(6);
    }
    ~WithRawMethod_UploadLegendPicture() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status UploadLegendPicture(::grpc::ServerContext* /*context*/, const ::smart3dmap::v1::UploadLegendPictureRequest* /*request*/, ::smart3dmap::v1::UploadLegendPictureResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestUploadLegendPicture(::grpc::ServerContext* context, ::grpc::ByteBuffer* request, ::grpc::ServerAsyncResponseWriter< ::grpc::ByteBuffer>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(6, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class ExperimentalWithRawCallbackMethod_RegisterSDB : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    ExperimentalWithRawCallbackMethod_RegisterSDB() {
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      ::grpc::Service::
    #else
      ::grpc::Service::experimental().
    #endif
        MarkMethodRawCallback(0,
          new ::grpc::internal::CallbackUnaryHandler< ::grpc::ByteBuffer, ::grpc::ByteBuffer>(
            [this](
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
                   ::grpc::CallbackServerContext*
    #else
                   ::grpc::experimental::CallbackServerContext*
    #endif
                     context, const ::grpc::ByteBuffer* request, ::grpc::ByteBuffer* response) { return this->RegisterSDB(context, request, response); }));
    }
    ~ExperimentalWithRawCallbackMethod_RegisterSDB() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status RegisterSDB(::grpc::ServerContext* /*context*/, const ::smart3dmap::v1::RegisterSDBRequest* /*request*/, ::smart3dmap::v1::RegisterSDBResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
    virtual ::grpc::ServerUnaryReactor* RegisterSDB(
      ::grpc::CallbackServerContext* /*context*/, const ::grpc::ByteBuffer* /*request*/, ::grpc::ByteBuffer* /*response*/)
    #else
    virtual ::grpc::experimental::ServerUnaryReactor* RegisterSDB(
      ::grpc::experimental::CallbackServerContext* /*context*/, const ::grpc::ByteBuffer* /*request*/, ::grpc::ByteBuffer* /*response*/)
    #endif
      { return nullptr; }
  };
  template <class BaseClass>
  class ExperimentalWithRawCallbackMethod_PublishMap : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    ExperimentalWithRawCallbackMethod_PublishMap() {
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      ::grpc::Service::
    #else
      ::grpc::Service::experimental().
    #endif
        MarkMethodRawCallback(1,
          new ::grpc::internal::CallbackUnaryHandler< ::grpc::ByteBuffer, ::grpc::ByteBuffer>(
            [this](
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
                   ::grpc::CallbackServerContext*
    #else
                   ::grpc::experimental::CallbackServerContext*
    #endif
                     context, const ::grpc::ByteBuffer* request, ::grpc::ByteBuffer* response) { return this->PublishMap(context, request, response); }));
    }
    ~ExperimentalWithRawCallbackMethod_PublishMap() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status PublishMap(::grpc::ServerContext* /*context*/, const ::smart3dmap::v1::PublishMapRequest* /*request*/, ::smart3dmap::v1::WMSMap* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
    virtual ::grpc::ServerUnaryReactor* PublishMap(
      ::grpc::CallbackServerContext* /*context*/, const ::grpc::ByteBuffer* /*request*/, ::grpc::ByteBuffer* /*response*/)
    #else
    virtual ::grpc::experimental::ServerUnaryReactor* PublishMap(
      ::grpc::experimental::CallbackServerContext* /*context*/, const ::grpc::ByteBuffer* /*request*/, ::grpc::ByteBuffer* /*response*/)
    #endif
      { return nullptr; }
  };
  template <class BaseClass>
  class ExperimentalWithRawCallbackMethod_UnpublishMap : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    ExperimentalWithRawCallbackMethod_UnpublishMap() {
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      ::grpc::Service::
    #else
      ::grpc::Service::experimental().
    #endif
        MarkMethodRawCallback(2,
          new ::grpc::internal::CallbackUnaryHandler< ::grpc::ByteBuffer, ::grpc::ByteBuffer>(
            [this](
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
                   ::grpc::CallbackServerContext*
    #else
                   ::grpc::experimental::CallbackServerContext*
    #endif
                     context, const ::grpc::ByteBuffer* request, ::grpc::ByteBuffer* response) { return this->UnpublishMap(context, request, response); }));
    }
    ~ExperimentalWithRawCallbackMethod_UnpublishMap() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status UnpublishMap(::grpc::ServerContext* /*context*/, const ::smart3dmap::v1::UnpublishMapRequest* /*request*/, ::smart3dmap::v1::UnpublishMapResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
    virtual ::grpc::ServerUnaryReactor* UnpublishMap(
      ::grpc::CallbackServerContext* /*context*/, const ::grpc::ByteBuffer* /*request*/, ::grpc::ByteBuffer* /*response*/)
    #else
    virtual ::grpc::experimental::ServerUnaryReactor* UnpublishMap(
      ::grpc::experimental::CallbackServerContext* /*context*/, const ::grpc::ByteBuffer* /*request*/, ::grpc::ByteBuffer* /*response*/)
    #endif
      { return nullptr; }
  };
  template <class BaseClass>
  class ExperimentalWithRawCallbackMethod_IsMapPublished : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    ExperimentalWithRawCallbackMethod_IsMapPublished() {
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      ::grpc::Service::
    #else
      ::grpc::Service::experimental().
    #endif
        MarkMethodRawCallback(3,
          new ::grpc::internal::CallbackUnaryHandler< ::grpc::ByteBuffer, ::grpc::ByteBuffer>(
            [this](
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
                   ::grpc::CallbackServerContext*
    #else
                   ::grpc::experimental::CallbackServerContext*
    #endif
                     context, const ::grpc::ByteBuffer* request, ::grpc::ByteBuffer* response) { return this->IsMapPublished(context, request, response); }));
    }
    ~ExperimentalWithRawCallbackMethod_IsMapPublished() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status IsMapPublished(::grpc::ServerContext* /*context*/, const ::smart3dmap::v1::IsMapPublishedRequest* /*request*/, ::google::protobuf::BoolValue* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
    virtual ::grpc::ServerUnaryReactor* IsMapPublished(
      ::grpc::CallbackServerContext* /*context*/, const ::grpc::ByteBuffer* /*request*/, ::grpc::ByteBuffer* /*response*/)
    #else
    virtual ::grpc::experimental::ServerUnaryReactor* IsMapPublished(
      ::grpc::experimental::CallbackServerContext* /*context*/, const ::grpc::ByteBuffer* /*request*/, ::grpc::ByteBuffer* /*response*/)
    #endif
      { return nullptr; }
  };
  template <class BaseClass>
  class ExperimentalWithRawCallbackMethod_GetWMSMap : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    ExperimentalWithRawCallbackMethod_GetWMSMap() {
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      ::grpc::Service::
    #else
      ::grpc::Service::experimental().
    #endif
        MarkMethodRawCallback(4,
          new ::grpc::internal::CallbackUnaryHandler< ::grpc::ByteBuffer, ::grpc::ByteBuffer>(
            [this](
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
                   ::grpc::CallbackServerContext*
    #else
                   ::grpc::experimental::CallbackServerContext*
    #endif
                     context, const ::grpc::ByteBuffer* request, ::grpc::ByteBuffer* response) { return this->GetWMSMap(context, request, response); }));
    }
    ~ExperimentalWithRawCallbackMethod_GetWMSMap() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status GetWMSMap(::grpc::ServerContext* /*context*/, const ::smart3dmap::v1::GetWMSMapRequest* /*request*/, ::smart3dmap::v1::WMSMap* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
    virtual ::grpc::ServerUnaryReactor* GetWMSMap(
      ::grpc::CallbackServerContext* /*context*/, const ::grpc::ByteBuffer* /*request*/, ::grpc::ByteBuffer* /*response*/)
    #else
    virtual ::grpc::experimental::ServerUnaryReactor* GetWMSMap(
      ::grpc::experimental::CallbackServerContext* /*context*/, const ::grpc::ByteBuffer* /*request*/, ::grpc::ByteBuffer* /*response*/)
    #endif
      { return nullptr; }
  };
  template <class BaseClass>
  class ExperimentalWithRawCallbackMethod_GetWMSLayer : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    ExperimentalWithRawCallbackMethod_GetWMSLayer() {
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      ::grpc::Service::
    #else
      ::grpc::Service::experimental().
    #endif
        MarkMethodRawCallback(5,
          new ::grpc::internal::CallbackUnaryHandler< ::grpc::ByteBuffer, ::grpc::ByteBuffer>(
            [this](
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
                   ::grpc::CallbackServerContext*
    #else
                   ::grpc::experimental::CallbackServerContext*
    #endif
                     context, const ::grpc::ByteBuffer* request, ::grpc::ByteBuffer* response) { return this->GetWMSLayer(context, request, response); }));
    }
    ~ExperimentalWithRawCallbackMethod_GetWMSLayer() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status GetWMSLayer(::grpc::ServerContext* /*context*/, const ::smart3dmap::v1::GetWMSLayerRequest* /*request*/, ::smart3dmap::v1::WMSLayer* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
    virtual ::grpc::ServerUnaryReactor* GetWMSLayer(
      ::grpc::CallbackServerContext* /*context*/, const ::grpc::ByteBuffer* /*request*/, ::grpc::ByteBuffer* /*response*/)
    #else
    virtual ::grpc::experimental::ServerUnaryReactor* GetWMSLayer(
      ::grpc::experimental::CallbackServerContext* /*context*/, const ::grpc::ByteBuffer* /*request*/, ::grpc::ByteBuffer* /*response*/)
    #endif
      { return nullptr; }
  };
  template <class BaseClass>
  class ExperimentalWithRawCallbackMethod_UploadLegendPicture : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    ExperimentalWithRawCallbackMethod_UploadLegendPicture() {
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      ::grpc::Service::
    #else
      ::grpc::Service::experimental().
    #endif
        MarkMethodRawCallback(6,
          new ::grpc::internal::CallbackUnaryHandler< ::grpc::ByteBuffer, ::grpc::ByteBuffer>(
            [this](
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
                   ::grpc::CallbackServerContext*
    #else
                   ::grpc::experimental::CallbackServerContext*
    #endif
                     context, const ::grpc::ByteBuffer* request, ::grpc::ByteBuffer* response) { return this->UploadLegendPicture(context, request, response); }));
    }
    ~ExperimentalWithRawCallbackMethod_UploadLegendPicture() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status UploadLegendPicture(::grpc::ServerContext* /*context*/, const ::smart3dmap::v1::UploadLegendPictureRequest* /*request*/, ::smart3dmap::v1::UploadLegendPictureResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
    virtual ::grpc::ServerUnaryReactor* UploadLegendPicture(
      ::grpc::CallbackServerContext* /*context*/, const ::grpc::ByteBuffer* /*request*/, ::grpc::ByteBuffer* /*response*/)
    #else
    virtual ::grpc::experimental::ServerUnaryReactor* UploadLegendPicture(
      ::grpc::experimental::CallbackServerContext* /*context*/, const ::grpc::ByteBuffer* /*request*/, ::grpc::ByteBuffer* /*response*/)
    #endif
      { return nullptr; }
  };
  template <class BaseClass>
  class WithStreamedUnaryMethod_RegisterSDB : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithStreamedUnaryMethod_RegisterSDB() {
      ::grpc::Service::MarkMethodStreamed(0,
        new ::grpc::internal::StreamedUnaryHandler<
          ::smart3dmap::v1::RegisterSDBRequest, ::smart3dmap::v1::RegisterSDBResponse>(
            [this](::grpc::ServerContext* context,
                   ::grpc::ServerUnaryStreamer<
                     ::smart3dmap::v1::RegisterSDBRequest, ::smart3dmap::v1::RegisterSDBResponse>* streamer) {
                       return this->StreamedRegisterSDB(context,
                         streamer);
                  }));
    }
    ~WithStreamedUnaryMethod_RegisterSDB() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status RegisterSDB(::grpc::ServerContext* /*context*/, const ::smart3dmap::v1::RegisterSDBRequest* /*request*/, ::smart3dmap::v1::RegisterSDBResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with streamed unary
    virtual ::grpc::Status StreamedRegisterSDB(::grpc::ServerContext* context, ::grpc::ServerUnaryStreamer< ::smart3dmap::v1::RegisterSDBRequest,::smart3dmap::v1::RegisterSDBResponse>* server_unary_streamer) = 0;
  };
  template <class BaseClass>
  class WithStreamedUnaryMethod_PublishMap : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithStreamedUnaryMethod_PublishMap() {
      ::grpc::Service::MarkMethodStreamed(1,
        new ::grpc::internal::StreamedUnaryHandler<
          ::smart3dmap::v1::PublishMapRequest, ::smart3dmap::v1::WMSMap>(
            [this](::grpc::ServerContext* context,
                   ::grpc::ServerUnaryStreamer<
                     ::smart3dmap::v1::PublishMapRequest, ::smart3dmap::v1::WMSMap>* streamer) {
                       return this->StreamedPublishMap(context,
                         streamer);
                  }));
    }
    ~WithStreamedUnaryMethod_PublishMap() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status PublishMap(::grpc::ServerContext* /*context*/, const ::smart3dmap::v1::PublishMapRequest* /*request*/, ::smart3dmap::v1::WMSMap* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with streamed unary
    virtual ::grpc::Status StreamedPublishMap(::grpc::ServerContext* context, ::grpc::ServerUnaryStreamer< ::smart3dmap::v1::PublishMapRequest,::smart3dmap::v1::WMSMap>* server_unary_streamer) = 0;
  };
  template <class BaseClass>
  class WithStreamedUnaryMethod_UnpublishMap : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithStreamedUnaryMethod_UnpublishMap() {
      ::grpc::Service::MarkMethodStreamed(2,
        new ::grpc::internal::StreamedUnaryHandler<
          ::smart3dmap::v1::UnpublishMapRequest, ::smart3dmap::v1::UnpublishMapResponse>(
            [this](::grpc::ServerContext* context,
                   ::grpc::ServerUnaryStreamer<
                     ::smart3dmap::v1::UnpublishMapRequest, ::smart3dmap::v1::UnpublishMapResponse>* streamer) {
                       return this->StreamedUnpublishMap(context,
                         streamer);
                  }));
    }
    ~WithStreamedUnaryMethod_UnpublishMap() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status UnpublishMap(::grpc::ServerContext* /*context*/, const ::smart3dmap::v1::UnpublishMapRequest* /*request*/, ::smart3dmap::v1::UnpublishMapResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with streamed unary
    virtual ::grpc::Status StreamedUnpublishMap(::grpc::ServerContext* context, ::grpc::ServerUnaryStreamer< ::smart3dmap::v1::UnpublishMapRequest,::smart3dmap::v1::UnpublishMapResponse>* server_unary_streamer) = 0;
  };
  template <class BaseClass>
  class WithStreamedUnaryMethod_IsMapPublished : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithStreamedUnaryMethod_IsMapPublished() {
      ::grpc::Service::MarkMethodStreamed(3,
        new ::grpc::internal::StreamedUnaryHandler<
          ::smart3dmap::v1::IsMapPublishedRequest, ::google::protobuf::BoolValue>(
            [this](::grpc::ServerContext* context,
                   ::grpc::ServerUnaryStreamer<
                     ::smart3dmap::v1::IsMapPublishedRequest, ::google::protobuf::BoolValue>* streamer) {
                       return this->StreamedIsMapPublished(context,
                         streamer);
                  }));
    }
    ~WithStreamedUnaryMethod_IsMapPublished() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status IsMapPublished(::grpc::ServerContext* /*context*/, const ::smart3dmap::v1::IsMapPublishedRequest* /*request*/, ::google::protobuf::BoolValue* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with streamed unary
    virtual ::grpc::Status StreamedIsMapPublished(::grpc::ServerContext* context, ::grpc::ServerUnaryStreamer< ::smart3dmap::v1::IsMapPublishedRequest,::google::protobuf::BoolValue>* server_unary_streamer) = 0;
  };
  template <class BaseClass>
  class WithStreamedUnaryMethod_GetWMSMap : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithStreamedUnaryMethod_GetWMSMap() {
      ::grpc::Service::MarkMethodStreamed(4,
        new ::grpc::internal::StreamedUnaryHandler<
          ::smart3dmap::v1::GetWMSMapRequest, ::smart3dmap::v1::WMSMap>(
            [this](::grpc::ServerContext* context,
                   ::grpc::ServerUnaryStreamer<
                     ::smart3dmap::v1::GetWMSMapRequest, ::smart3dmap::v1::WMSMap>* streamer) {
                       return this->StreamedGetWMSMap(context,
                         streamer);
                  }));
    }
    ~WithStreamedUnaryMethod_GetWMSMap() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status GetWMSMap(::grpc::ServerContext* /*context*/, const ::smart3dmap::v1::GetWMSMapRequest* /*request*/, ::smart3dmap::v1::WMSMap* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with streamed unary
    virtual ::grpc::Status StreamedGetWMSMap(::grpc::ServerContext* context, ::grpc::ServerUnaryStreamer< ::smart3dmap::v1::GetWMSMapRequest,::smart3dmap::v1::WMSMap>* server_unary_streamer) = 0;
  };
  template <class BaseClass>
  class WithStreamedUnaryMethod_GetWMSLayer : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithStreamedUnaryMethod_GetWMSLayer() {
      ::grpc::Service::MarkMethodStreamed(5,
        new ::grpc::internal::StreamedUnaryHandler<
          ::smart3dmap::v1::GetWMSLayerRequest, ::smart3dmap::v1::WMSLayer>(
            [this](::grpc::ServerContext* context,
                   ::grpc::ServerUnaryStreamer<
                     ::smart3dmap::v1::GetWMSLayerRequest, ::smart3dmap::v1::WMSLayer>* streamer) {
                       return this->StreamedGetWMSLayer(context,
                         streamer);
                  }));
    }
    ~WithStreamedUnaryMethod_GetWMSLayer() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status GetWMSLayer(::grpc::ServerContext* /*context*/, const ::smart3dmap::v1::GetWMSLayerRequest* /*request*/, ::smart3dmap::v1::WMSLayer* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with streamed unary
    virtual ::grpc::Status StreamedGetWMSLayer(::grpc::ServerContext* context, ::grpc::ServerUnaryStreamer< ::smart3dmap::v1::GetWMSLayerRequest,::smart3dmap::v1::WMSLayer>* server_unary_streamer) = 0;
  };
  template <class BaseClass>
  class WithStreamedUnaryMethod_UploadLegendPicture : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithStreamedUnaryMethod_UploadLegendPicture() {
      ::grpc::Service::MarkMethodStreamed(6,
        new ::grpc::internal::StreamedUnaryHandler<
          ::smart3dmap::v1::UploadLegendPictureRequest, ::smart3dmap::v1::UploadLegendPictureResponse>(
            [this](::grpc::ServerContext* context,
                   ::grpc::ServerUnaryStreamer<
                     ::smart3dmap::v1::UploadLegendPictureRequest, ::smart3dmap::v1::UploadLegendPictureResponse>* streamer) {
                       return this->StreamedUploadLegendPicture(context,
                         streamer);
                  }));
    }
    ~WithStreamedUnaryMethod_UploadLegendPicture() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status UploadLegendPicture(::grpc::ServerContext* /*context*/, const ::smart3dmap::v1::UploadLegendPictureRequest* /*request*/, ::smart3dmap::v1::UploadLegendPictureResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with streamed unary
    virtual ::grpc::Status StreamedUploadLegendPicture(::grpc::ServerContext* context, ::grpc::ServerUnaryStreamer< ::smart3dmap::v1::UploadLegendPictureRequest,::smart3dmap::v1::UploadLegendPictureResponse>* server_unary_streamer) = 0;
  };
  typedef WithStreamedUnaryMethod_RegisterSDB<WithStreamedUnaryMethod_PublishMap<WithStreamedUnaryMethod_UnpublishMap<WithStreamedUnaryMethod_IsMapPublished<WithStreamedUnaryMethod_GetWMSMap<WithStreamedUnaryMethod_GetWMSLayer<WithStreamedUnaryMethod_UploadLegendPicture<Service > > > > > > > StreamedUnaryService;
  typedef Service SplitStreamedService;
  typedef WithStreamedUnaryMethod_RegisterSDB<WithStreamedUnaryMethod_PublishMap<WithStreamedUnaryMethod_UnpublishMap<WithStreamedUnaryMethod_IsMapPublished<WithStreamedUnaryMethod_GetWMSMap<WithStreamedUnaryMethod_GetWMSLayer<WithStreamedUnaryMethod_UploadLegendPicture<Service > > > > > > > StreamedService;
};

}  // namespace v1
}  // namespace smart3dmap


#endif  // GRPC_map_5fservice_2fmap_5fservice_2eproto__INCLUDED
